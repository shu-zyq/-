/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004b generated on 2022-03-23 20:04:59.987884
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004b);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.03) // 5D IK has some crazy degenerate cases, but can rely on jacobian refinment to make better, just need good starting point
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

template <typename T> struct ComplexLess
{
    bool operator()(const complex<T>& lhs, const complex<T>& rhs) const
    {
        if (real(lhs) < real(rhs)) {
            return true;
        }
        if (real(lhs) > real(rhs)) {
            return false;
        }
        return imag(lhs) < imag(rhs);
    }
};

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47;
x0=IKcos(j[0]);
x1=IKcos(j[2]);
x2=IKsin(j[1]);
x3=IKcos(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[0]);
x7=IKsin(j[3]);
x8=IKcos(j[5]);
x9=IKsin(j[5]);
x10=IKsin(j[4]);
x11=IKcos(j[4]);
x12=((1.17e-6)*x3);
x13=((1.0)*x10);
x14=((0.16193)*x3);
x15=((1.08e-6)*x6);
x16=((0.73)*x2);
x17=((1.0)*x6);
x18=((1.08e-6)*x0);
x19=((1.0)*x5);
x20=((1.0)*x0);
x21=(x6*x7);
x22=(x1*x3);
x23=(x2*x4);
x24=(x0*x4);
x25=(x10*x5);
x26=(x1*x2);
x27=(x0*x7);
x28=(x3*x4);
x29=(x4*x6);
x30=((1.0)*x28);
x31=((0.56747)*x26);
x32=(x17*x26);
x33=((((-1.0)*x26))+x30);
x34=(x33*x5);
x35=(((x0*x26))+(((-1.0)*x20*x28)));
x36=(x6*((x22+x23)));
x37=(x20*((x22+x23)));
x38=((-1.0)*x37);
x39=(x17*(((((-1.0)*x22))+(((-1.0)*x23)))));
x40=(x36*x7);
x41=(x39*x5);
x42=(x38*x7);
x43=(x37*x5);
x44=(x41+x27);
x45=(((x13*(((((-1.0)*x22))+(((-1.0)*x23))))))+(((-1.0)*x11*x19*x33)));
x46=(((x10*x35))+((x11*((x43+x21)))));
x47=((((-1.0)*x11*x44))+((x13*((x32+(((-1.0)*x28*x6)))))));
eerot[0]=(((x46*x8))+((x9*(((((-1.0)*x42))+(((-1.0)*x17*x5)))))));
eerot[1]=(((x46*x9))+((x8*((((x5*x6))+x42)))));
eerot[2]=(((x11*x35))+((x10*(((((-1.0)*x17*x7))+(((-1.0)*x19*x37)))))));
IkReal x48=(x0*x26);
IkReal x49=((1.0)*x0);
eetrans[0]=(((x10*(((((0.16193)*x43))+(((0.16193)*x21))))))+((x18*x22))+((x18*x23))+((x11*((((x14*x24))+(((-0.16193)*x48))))))+(((-1.0)*x31*x49))+(((0.56747)*x24*x3))+((x10*(((((-1.0)*x12*x24))+(((1.17e-6)*x48))))))+((x11*(((((1.17e-6)*x21))+(((1.17e-6)*x43))))))+(((-1.0)*x16*x49)));
eerot[3]=(((x47*x8))+((x9*((((x0*x5))+x40)))));
eerot[4]=(((x8*(((((-1.0)*x40))+(((-1.0)*x0*x19))))))+((x47*x9)));
eerot[5]=(((x11*(((((-1.0)*x17*x28))+x32))))+((x10*x44)));
IkReal x50=(x26*x6);
IkReal x51=((1.0)*x6);
eetrans[1]=(((x10*(((((-1.0)*x12*x29))+(((1.17e-6)*x50))))))+(((-1.0)*x16*x51))+(((0.56747)*x28*x6))+((x10*(((((-0.16193)*x27))+(((-0.16193)*x41))))))+(((-1.0)*x31*x51))+((x11*(((((-1.17e-6)*x27))+(((-1.17e-6)*x41))))))+((x11*((((x14*x29))+(((-0.16193)*x50))))))+((x15*x23))+((x15*x22)));
eerot[6]=(((x45*x8))+((x7*x9*(((((-1.0)*x30))+x26)))));
eerot[7]=(((x45*x9))+((x33*x7*x8)));
eerot[8]=(((x11*(((((-1.0)*x22))+(((-1.0)*x23))))))+((x25*x33)));
IkReal x52=((1.0)*x12);
eetrans[2]=((0.262)+(((0.56747)*x23))+(((0.56747)*x22))+((x11*((((x1*x14))+(((0.16193)*x23))))))+(((-1.08e-6)*x28))+(((1.08e-6)*x26))+(((0.73)*x3))+((x10*(((((-1.17e-6)*x23))+(((-1.0)*x1*x52))))))+((x25*(((((-1.0)*x14*x4))+(((0.16193)*x26))))))+((x11*x5*(((((1.17e-6)*x26))+(((-1.0)*x4*x52)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API const int* GetFreeIndices() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r11);
new_r01=((-1.0)*r10);
new_r02=((-1.0)*r12);
new_px=((((0.16193)*r12))+py);
new_r10=r01;
new_r11=r00;
new_r12=r02;
new_py=((((-0.16193)*r02))+(((-1.0)*px)));
new_r20=((-1.0)*r21);
new_r21=((-1.0)*r20);
new_r22=((-1.0)*r22);
new_pz=((-0.262)+pz+(((0.16193)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x53=((1.0)*px);
IkReal x54=((1.0)*pz);
IkReal x55=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x55))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x54)));
rxp0_2=((((-1.0)*r10*x53))+((py*r00)));
rxp1_0=((((-1.0)*r21*x55))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x54)));
rxp1_2=((((-1.0)*r11*x53))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x55)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x54)));
rxp2_2=((((-1.0)*r12*x53))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x56=((0.73)*r22);
IkReal x57=((0.73)*r20);
IkReal x58=((0.73)*r21);
IkReal x59=((1.46)*px);
IkReal x60=((0.73)*r01);
IkReal x61=((0.73)*r02);
IkReal x62=((0.73)*r00);
IkReal x63=((0.73)*r12);
IkReal x64=((0.73)*r10);
IkReal x65=((1.46)*rxp2_1);
IkReal x66=((0.73)*r11);
IkReal x67=((2.0)*npz);
IkReal x68=((-1.46)*rxp2_2);
IkReal x69=((-1.46)*pz);
IkReal x70=((-0.73)*r21);
IkReal x71=((-1.0)*r12);
IkReal x72=((-1.0)*py);
IkReal x73=((-0.73)*r02);
IkReal x74=((-0.73)*r00);
IkReal x75=((-1.46)*rxp2_0);
IkReal x76=((-0.73)*r01);
IkReal x77=((-1.0)*r02);
IkReal x78=((-1.0)*px);
IkReal x79=((-1.46)*py);
IkReal x80=((-0.73)*r11);
IkReal x81=((-0.73)*r12);
IkReal x82=((-0.73)*r10);
IkReal x83=((((0.5329)*r12))+((pp*r12))+(((-1.0)*py*x67)));
IkReal x84=(((pp*r02))+(((0.5329)*r02))+(((-1.0)*px*x67)));
matrixinvcoeffs[0]=0;
matrixinvcoeffs[1]=0;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=x56;
matrixinvcoeffs[9]=0;
matrixinvcoeffs[10]=0;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=x68;
matrixinvcoeffs[13]=x58;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x57;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=0;
matrixinvcoeffs[19]=0;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=0;
matrixinvcoeffs[25]=x56;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=0;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=x57;
matrixinvcoeffs[30]=x68;
matrixinvcoeffs[31]=x70;
matrixinvcoeffs[32]=0;
matrixinvcoeffs[33]=0;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=x56;
matrixinvcoeffs[37]=x69;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=0;
matrixinvcoeffs[42]=x57;
matrixinvcoeffs[43]=x58;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=0;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=0;
matrixinvcoeffs[51]=0;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=x56;
matrixinvcoeffs[55]=x69;
matrixinvcoeffs[56]=0;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=x70;
matrixinvcoeffs[59]=x57;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=0;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=x71;
matrixinvcoeffs[65]=x72;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=rxp2_1;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=0;
matrixinvcoeffs[76]=x83;
matrixinvcoeffs[77]=rxp1_1;
matrixinvcoeffs[78]=0;
matrixinvcoeffs[79]=rxp0_1;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=x71;
matrixinvcoeffs[83]=x72;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=rxp2_1;
matrixinvcoeffs[90]=0;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=rxp0_1;
matrixinvcoeffs[94]=x83;
matrixinvcoeffs[95]=((-1.0)*rxp1_1);
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=x73;
matrixinvcoeffs[101]=x59;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=x74;
matrixinvcoeffs[107]=x76;
matrixinvcoeffs[108]=0;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=0;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=x73;
matrixinvcoeffs[119]=x59;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=x60;
matrixinvcoeffs[123]=x74;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=0;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=0;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=0;
matrixinvcoeffs[133]=0;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=x61;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=x75;
matrixinvcoeffs[141]=x60;
matrixinvcoeffs[142]=0;
matrixinvcoeffs[143]=x62;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=0;
matrixinvcoeffs[151]=0;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=x61;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=x62;
matrixinvcoeffs[158]=x75;
matrixinvcoeffs[159]=x76;
matrixinvcoeffs[160]=x77;
matrixinvcoeffs[161]=x78;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=0;
matrixinvcoeffs[165]=0;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=rxp2_0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=x84;
matrixinvcoeffs[173]=rxp1_0;
matrixinvcoeffs[174]=0;
matrixinvcoeffs[175]=rxp0_0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=x77;
matrixinvcoeffs[179]=x78;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=0;
matrixinvcoeffs[183]=0;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=rxp2_0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp0_0;
matrixinvcoeffs[190]=x84;
matrixinvcoeffs[191]=((-1.0)*rxp1_0);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=x63;
matrixinvcoeffs[197]=x79;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=0;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=x64;
matrixinvcoeffs[203]=x66;
matrixinvcoeffs[204]=0;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=0;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=x63;
matrixinvcoeffs[215]=x79;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=0;
matrixinvcoeffs[218]=x80;
matrixinvcoeffs[219]=x64;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=0;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=0;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x81;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=0;
matrixinvcoeffs[236]=x65;
matrixinvcoeffs[237]=x80;
matrixinvcoeffs[238]=0;
matrixinvcoeffs[239]=x82;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=x81;
matrixinvcoeffs[250]=0;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x82;
matrixinvcoeffs[254]=x65;
matrixinvcoeffs[255]=x66;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh0_2=matrixinvcoeffs[32], gclwh0_3=matrixinvcoeffs[48], gclwh0_8=matrixinvcoeffs[128], gclwh0_12=matrixinvcoeffs[192], gclwh0_13=matrixinvcoeffs[208], gclwh0_14=matrixinvcoeffs[224], gclwh0_15=matrixinvcoeffs[240], gclwh1_0=matrixinvcoeffs[1], gclwh1_1=matrixinvcoeffs[17], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh1_8=matrixinvcoeffs[129], gclwh1_9=matrixinvcoeffs[145], gclwh1_12=matrixinvcoeffs[193], gclwh1_13=matrixinvcoeffs[209], gclwh1_14=matrixinvcoeffs[225], gclwh1_15=matrixinvcoeffs[241], gclwh2_4=matrixinvcoeffs[66], gclwh2_5=matrixinvcoeffs[82], gclwh2_6=matrixinvcoeffs[98], gclwh2_7=matrixinvcoeffs[114], gclwh2_10=matrixinvcoeffs[162], gclwh2_11=matrixinvcoeffs[178], gclwh3_4=matrixinvcoeffs[67], gclwh3_5=matrixinvcoeffs[83], gclwh3_6=matrixinvcoeffs[99], gclwh3_7=matrixinvcoeffs[115], gclwh3_10=matrixinvcoeffs[163], gclwh3_11=matrixinvcoeffs[179], gclwh4_0=matrixinvcoeffs[4], gclwh4_1=matrixinvcoeffs[20], gclwh5_2=matrixinvcoeffs[37], gclwh5_3=matrixinvcoeffs[53], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_6=matrixinvcoeffs[102], gclwh6_7=matrixinvcoeffs[118], gclwh6_10=matrixinvcoeffs[166], gclwh6_11=matrixinvcoeffs[182], gclwh7_4=matrixinvcoeffs[71], gclwh7_5=matrixinvcoeffs[87], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_11=matrixinvcoeffs[183], gclwh8_0=matrixinvcoeffs[8], gclwh8_1=matrixinvcoeffs[24], gclwh8_2=matrixinvcoeffs[40], gclwh8_3=matrixinvcoeffs[56], gclwh8_8=matrixinvcoeffs[136], gclwh8_12=matrixinvcoeffs[200], gclwh8_13=matrixinvcoeffs[216], gclwh8_14=matrixinvcoeffs[232], gclwh8_15=matrixinvcoeffs[248], gclwh9_0=matrixinvcoeffs[9], gclwh9_1=matrixinvcoeffs[25], gclwh9_2=matrixinvcoeffs[41], gclwh9_3=matrixinvcoeffs[57], gclwh9_8=matrixinvcoeffs[137], gclwh9_9=matrixinvcoeffs[153], gclwh9_12=matrixinvcoeffs[201], gclwh9_13=matrixinvcoeffs[217], gclwh9_14=matrixinvcoeffs[233], gclwh9_15=matrixinvcoeffs[249], gclwh10_0=matrixinvcoeffs[10], gclwh10_1=matrixinvcoeffs[26], gclwh11_2=matrixinvcoeffs[43], gclwh11_3=matrixinvcoeffs[59], gclwh12_4=matrixinvcoeffs[76], gclwh12_5=matrixinvcoeffs[92], gclwh12_6=matrixinvcoeffs[108], gclwh12_7=matrixinvcoeffs[124], gclwh12_10=matrixinvcoeffs[172], gclwh12_11=matrixinvcoeffs[188], gclwh13_4=matrixinvcoeffs[77], gclwh13_5=matrixinvcoeffs[93], gclwh13_6=matrixinvcoeffs[109], gclwh13_7=matrixinvcoeffs[125], gclwh13_10=matrixinvcoeffs[173], gclwh13_11=matrixinvcoeffs[189], gclwh14_0=matrixinvcoeffs[14], gclwh14_1=matrixinvcoeffs[30], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_8=matrixinvcoeffs[142], gclwh14_12=matrixinvcoeffs[206], gclwh14_13=matrixinvcoeffs[222], gclwh14_14=matrixinvcoeffs[238], gclwh14_15=matrixinvcoeffs[254], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_2=matrixinvcoeffs[47], gclwh15_3=matrixinvcoeffs[63], gclwh15_9=matrixinvcoeffs[159], gclwh15_12=matrixinvcoeffs[207], gclwh15_13=matrixinvcoeffs[223], gclwh15_14=matrixinvcoeffs[239], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x85=((3.877409016e-6)*rxp1_0);
IkReal x86=(gclwh14_14*rxp1_1);
IkReal x87=((5.84)*gclwh14_2);
IkReal x88=((5.84)*rxp1_0);
IkReal x89=(gclwh1_8*rxp1_2);
IkReal x90=((0.8285062)*rxp0_0);
IkReal x91=((1.6570124)*rxp1_1);
IkReal x92=((0.8285062)*gclwh1_13);
IkReal x93=((5.84)*rxp0_2);
IkReal x94=((4.0)*r01);
IkReal x95=((5.84)*rxp0_0);
IkReal x96=((3.877409016e-6)*rxp1_1);
IkReal x97=((3.1536e-6)*gclwh0_13);
IkReal x98=((3.285e-6)*gclwh0_8);
IkReal x99=(gclwh5_3*r10);
IkReal x100=((1.88060965327081)*rxp0_0);
IkReal x101=(gclwh15_13*rxp1_1);
IkReal x102=(gclwh15_13*rxp0_1);
IkReal x103=((0.8285062)*gclwh1_15);
IkReal x104=(gclwh14_14*rxp0_1);
IkReal x105=((1.88060965327081)*rxp1_1);
IkReal x106=(gclwh8_8*rxp0_0);
IkReal x107=((3.4164e-6)*rxp1_0);
IkReal x108=((6.8328e-6)*rxp0_1);
IkReal x109=((1.6570124)*rxp0_2);
IkReal x110=((6.8328e-6)*rxp0_0);
IkReal x111=(gclwh0_13*rxp1_2);
IkReal x112=((1.88060965327081)*rxp1_2);
IkReal x113=(npx*py);
IkReal x114=((8.0)*gclwh5_2);
IkReal x115=(gclwh8_8*rxp1_0);
IkReal x116=((4.68e-6)*gclwh4_1);
IkReal x117=(npy*py);
IkReal x118=((3.877409016e-6)*gclwh1_14);
IkReal x119=(gclwh0_12*rxp0_2);
IkReal x120=((3.285e-6)*rxp0_2);
IkReal x121=(gclwh9_9*rxp0_0);
IkReal x122=(gclwh11_2*r00);
IkReal x123=((2.1316)*gclwh4_0);
IkReal x124=(gclwh9_15*rxp1_0);
IkReal x125=((3.4164e-6)*rxp0_2);
IkReal x126=((3.877409016e-6)*rxp0_0);
IkReal x127=(gclwh14_13*rxp1_1);
IkReal x128=((1.314e-7)*rxp1_0);
IkReal x129=((2.1316)*gclwh10_0);
IkReal x130=(gclwh9_13*rxp0_0);
IkReal x131=((1.6570124)*rxp0_1);
IkReal x132=((3.4164e-6)*rxp1_1);
IkReal x133=((4.68e-6)*gclwh5_3);
IkReal x134=((3.4164e-6)*rxp0_1);
IkReal x135=((3.4164e-6)*rxp1_2);
IkReal x136=((3.285e-6)*gclwh14_8);
IkReal x137=((1.88060965327081)*rxp0_1);
IkReal x138=(gclwh4_1*r10);
IkReal x139=(gclwh8_15*rxp0_0);
IkReal x140=((1.314e-7)*gclwh0_8);
IkReal x141=(gclwh5_2*r11);
IkReal x142=((3.1536e-6)*gclwh1_13);
IkReal x143=((3.1536e-6)*rxp1_0);
IkReal x144=(gclwh14_13*rxp0_1);
IkReal x145=((5.84)*gclwh14_0);
IkReal x146=((3.877409016e-6)*rxp0_1);
IkReal x147=((3.877409016e-6)*gclwh0_14);
IkReal x148=((2.34e-6)*pp);
IkReal x149=(gclwh11_3*r00);
IkReal x150=(gclwh8_13*rxp0_0);
IkReal x151=((5.84)*rxp0_1);
IkReal x152=(gclwh8_13*rxp1_0);
IkReal x153=((3.1536e-6)*rxp1_1);
IkReal x154=((8.0)*gclwh4_0);
IkReal x155=((1.6570124)*rxp1_0);
IkReal x156=((4.0)*gclwh4_0);
IkReal x157=((5.84)*rxp1_2);
IkReal x158=((4.0)*pp);
IkReal x159=((1.88060965327081)*rxp0_2);
IkReal x160=(gclwh9_8*rxp0_0);
IkReal x161=((0.8285062)*gclwh15_15);
IkReal x162=(gclwh1_15*rxp1_2);
IkReal x163=((3.1536e-6)*gclwh0_15);
IkReal x164=((0.8285062)*rxp1_0);
IkReal x165=((4.68e-6)*px);
IkReal x166=((6.8328e-6)*rxp0_2);
IkReal x167=(gclwh1_13*rxp1_2);
IkReal x168=((3.877409016e-6)*rxp1_2);
IkReal x169=((3.4164e-6)*rxp0_0);
IkReal x170=((1.246986e-6)*gclwh10_1);
IkReal x171=(gclwh1_9*rxp1_2);
IkReal x172=(gclwh15_9*rxp0_1);
IkReal x173=(gclwh0_15*rxp1_2);
IkReal x174=((1.88060965327081)*rxp1_0);
IkReal x175=(gclwh14_15*rxp0_1);
IkReal x176=(gclwh11_3*r01);
IkReal x177=((3.285e-6)*rxp1_0);
IkReal x178=(gclwh15_9*rxp1_1);
IkReal x179=(gclwh10_1*r01);
IkReal x180=(gclwh9_15*rxp0_0);
IkReal x181=((5.84)*rxp1_1);
IkReal x182=((1.246986e-6)*r11);
IkReal x183=((1.314e-7)*rxp0_2);
IkReal x184=(gclwh5_3*r11);
IkReal x185=(gclwh14_15*rxp1_1);
IkReal x186=((0.8285062)*rxp0_2);
IkReal x187=(gclwh5_2*r10);
IkReal x188=((1.314e-7)*gclwh14_8);
IkReal x189=((6.8328e-6)*rxp1_0);
IkReal x190=((0.8285062)*x152);
IkReal x191=(gclwh9_13*x90);
IkReal x192=((0.8285062)*x111);
IkReal x193=(rxp0_2*x92);
IkReal x194=((0.8285062)*x127);
IkReal x195=((0.8285062)*x102);
IkReal x196=(rxp0_2*x103);
IkReal x197=(gclwh9_15*x90);
IkReal x198=(gclwh8_15*x164);
IkReal x199=((0.8285062)*x173);
IkReal x200=((0.8285062)*x185);
IkReal x201=(rxp0_1*x161);
IkReal x202=((0.8285062)*x101);
IkReal x203=(gclwh0_13*x186);
IkReal x204=(gclwh8_13*x90);
IkReal x205=((0.8285062)*x144);
IkReal x206=(rxp1_2*x92);
IkReal x207=(gclwh9_13*x164);
IkReal x208=(gclwh8_15*x90);
IkReal x209=(rxp1_1*x161);
IkReal x210=(gclwh0_15*x186);
IkReal x211=((0.8285062)*x175);
IkReal x212=((0.8285062)*x124);
IkReal x213=(rxp1_2*x103);
IkReal x214=((2.34e-6)*x179);
IkReal x215=((2.34e-6)*gclwh4_1*r11);
IkReal x216=((2.34e-6)*x176);
IkReal x217=((2.34e-6)*x184);
IkReal x218=(gclwh15_12*x146);
IkReal x219=(gclwh0_1*x135);
IkReal x220=(gclwh14_12*x96);
IkReal x221=(gclwh1_1*x125);
IkReal x222=(gclwh1_15*x109);
IkReal x223=(gclwh8_1*x107);
IkReal x224=(gclwh8_15*x155);
IkReal x225=((1.6570124)*x173);
IkReal x226=(gclwh9_1*x169);
IkReal x227=((1.6570124)*x180);
IkReal x228=(gclwh4_1*x182);
IkReal x229=((3.877409016e-6)*gclwh1_12*rxp0_2);
IkReal x230=(gclwh14_1*x132);
IkReal x231=(gclwh15_15*x131);
IkReal x232=(r01*x170);
IkReal x233=(gclwh8_12*x85);
IkReal x234=(gclwh15_1*x134);
IkReal x235=(gclwh9_12*x126);
IkReal x236=(gclwh14_15*x91);
IkReal x237=(gclwh0_12*x168);
IkReal x238=(gclwh14_13*x91);
IkReal x239=((1.6570124)*x102);
IkReal x240=(gclwh1_3*x125);
IkReal x241=(gclwh9_3*x169);
IkReal x242=((3.877409016e-6)*x86);
IkReal x243=(gclwh15_14*x146);
IkReal x244=(gclwh8_3*x107);
IkReal x245=(gclwh0_3*x135);
IkReal x246=((1.6570124)*x130);
IkReal x247=((1.246986e-6)*x99);
IkReal x248=((1.6570124)*x111);
IkReal x249=(gclwh9_14*x126);
IkReal x250=(gclwh1_13*x109);
IkReal x251=((1.6570124)*x152);
IkReal x252=(gclwh14_3*x132);
IkReal x253=(gclwh15_3*x134);
IkReal x254=(rxp1_2*x147);
IkReal x255=(rxp0_2*x118);
IkReal x256=(gclwh8_14*x85);
IkReal x257=((1.246986e-6)*x149);
IkReal x258=(gclwh0_15*x109);
IkReal x259=(gclwh14_12*x146);
IkReal x260=(gclwh15_15*x91);
IkReal x261=(gclwh1_12*x168);
IkReal x262=(gclwh8_1*x169);
IkReal x263=(gclwh9_12*x85);
IkReal x264=(gclwh15_1*x132);
IkReal x265=((1.6570124)*x139);
IkReal x266=(gclwh0_1*x125);
IkReal x267=((1.246986e-6)*x138);
IkReal x268=((1.6570124)*x124);
IkReal x269=(gclwh1_1*x135);
IkReal x270=(gclwh9_1*x107);
IkReal x271=(r00*x170);
IkReal x272=((1.6570124)*x162);
IkReal x273=(gclwh14_15*x131);
IkReal x274=(gclwh8_12*x126);
IkReal x275=(gclwh14_1*x134);
IkReal x276=((3.877409016e-6)*x119);
IkReal x277=(gclwh15_12*x96);
IkReal x278=(gclwh9_13*x155);
IkReal x279=((3.877409016e-6)*x104);
IkReal x280=((1.6570124)*x167);
IkReal x281=(gclwh5_3*x182);
IkReal x282=(rxp1_2*x118);
IkReal x283=(gclwh8_3*x169);
IkReal x284=(gclwh9_14*x85);
IkReal x285=(gclwh14_13*x131);
IkReal x286=(gclwh15_3*x132);
IkReal x287=(gclwh0_3*x125);
IkReal x288=((1.246986e-6)*x176);
IkReal x289=(gclwh15_13*x91);
IkReal x290=(rxp0_2*x147);
IkReal x291=((1.6570124)*x150);
IkReal x292=(gclwh0_13*x109);
IkReal x293=(gclwh8_14*x126);
IkReal x294=(gclwh14_3*x134);
IkReal x295=(gclwh9_3*x107);
IkReal x296=(gclwh1_3*x135);
IkReal x297=(gclwh15_14*x96);
IkReal x298=((1.314e-7)*x115);
IkReal x299=((1.314e-7)*x160);
IkReal x300=(rxp1_2*x140);
IkReal x301=(gclwh1_8*x183);
IkReal x302=(rxp1_1*x188);
IkReal x303=((1.314e-7)*x121);
IkReal x304=(gclwh1_9*x183);
IkReal x305=((1.314e-7)*x172);
IkReal x306=((3.1536e-6)*x127);
IkReal x307=((3.1536e-6)*x102);
IkReal x308=(gclwh14_8*x91);
IkReal x309=(gclwh1_8*x109);
IkReal x310=((1.6570124)*x115);
IkReal x311=((1.6570124)*x160);
IkReal x312=(rxp0_2*x142);
IkReal x313=(rxp1_2*x97);
IkReal x314=((1.6570124)*gclwh0_8*rxp1_2);
IkReal x315=(gclwh8_13*x143);
IkReal x316=((3.1536e-6)*x130);
IkReal x317=(gclwh15_9*x131);
IkReal x318=(gclwh14_15*x153);
IkReal x319=((3.1536e-6)*gclwh15_15*rxp0_1);
IkReal x320=(gclwh1_9*x109);
IkReal x321=(gclwh8_15*x143);
IkReal x322=((1.6570124)*x121);
IkReal x323=(rxp1_2*x163);
IkReal x324=((3.1536e-6)*x180);
IkReal x325=((3.1536e-6)*gclwh1_15*rxp0_2);
IkReal x326=((3.285e-6)*x160);
IkReal x327=(rxp1_2*x98);
IkReal x328=(gclwh1_8*x120);
IkReal x329=((3.285e-6)*x115);
IkReal x330=(rxp1_1*x136);
IkReal x331=((3.285e-6)*x121);
IkReal x332=(gclwh1_9*x120);
IkReal x333=((3.285e-6)*x172);
IkReal x334=((1.314e-7)*x106);
IkReal x335=(rxp0_2*x140);
IkReal x336=((1.314e-7)*x89);
IkReal x337=(gclwh9_8*x128);
IkReal x338=(rxp0_1*x188);
IkReal x339=((1.314e-7)*x178);
IkReal x340=((1.314e-7)*x171);
IkReal x341=(gclwh9_9*x128);
IkReal x342=(gclwh9_8*x155);
IkReal x343=((3.1536e-6)*x144);
IkReal x344=(gclwh14_8*x131);
IkReal x345=(rxp1_2*x142);
IkReal x346=((1.6570124)*x89);
IkReal x347=(gclwh9_13*x143);
IkReal x348=((3.1536e-6)*x101);
IkReal x349=((3.1536e-6)*x150);
IkReal x350=((1.6570124)*x106);
IkReal x351=(gclwh0_8*x109);
IkReal x352=(rxp0_2*x97);
IkReal x353=(gclwh9_9*x155);
IkReal x354=((1.6570124)*x171);
IkReal x355=((3.1536e-6)*x175);
IkReal x356=((3.1536e-6)*x124);
IkReal x357=((3.1536e-6)*x162);
IkReal x358=(gclwh15_15*x153);
IkReal x359=(gclwh15_9*x91);
IkReal x360=((3.1536e-6)*x139);
IkReal x361=(rxp0_2*x163);
IkReal x362=(rxp0_2*x98);
IkReal x363=((3.285e-6)*x106);
IkReal x364=(rxp0_1*x136);
IkReal x365=((3.285e-6)*x89);
IkReal x366=(gclwh9_8*x177);
IkReal x367=((3.285e-6)*x178);
IkReal x368=(gclwh9_9*x177);
IkReal x369=((3.285e-6)*x171);
IkReal x370=(r11*x158);
IkReal x371=((4.0)*gclwh10_0*r00);
IkReal x372=((2.34e-6)*gclwh10_1*r00);
IkReal x373=((8.0)*npx*px);
IkReal x374=((8.0)*npy*px);
IkReal x375=(gclwh10_1*npy*x165);
IkReal x376=(x116*x117);
IkReal x377=(gclwh4_1*r11*x148);
IkReal x378=(x148*x179);
IkReal x379=(gclwh11_3*npx*x165);
IkReal x380=(x113*x133);
IkReal x381=(x148*x149);
IkReal x382=(x148*x99);
IkReal x383=(gclwh10_1*npx*x165);
IkReal x384=(x113*x116);
IkReal x385=(x138*x148);
IkReal x386=(gclwh10_1*r00*x148);
IkReal x387=(x148*x176);
IkReal x388=(x148*x184);
IkReal x389=(gclwh11_3*npy*x165);
IkReal x390=(x117*x133);
IkReal x391=((((2.34e-6)*x149))+(((2.34e-6)*x99)));
IkReal x392=((((2.34e-6)*x138))+x372);
IkReal x393=(x195+x194);
IkReal x394=(x362+x363);
IkReal x395=(x201+x200);
IkReal x396=(x214+x215);
IkReal x397=(x335+x334);
IkReal x398=(x320+x322);
IkReal x399=(x319+x318);
IkReal x400=(x340+x341);
IkReal x401=(x304+x303);
IkReal x402=(x368+x369);
IkReal x403=(x332+x331);
IkReal x404=(x306+x307);
IkReal x405=(x216+x217);
IkReal x406=(x353+x354);
IkReal x407=(x351+x350);
IkReal x408=(x358+x360+x361);
IkReal x409=(x204+x203+x202);
IkReal x410=(x210+x209+x208);
IkReal x411=(x338+x337+x336);
IkReal x412=(x207+x206+x205);
IkReal x413=(x211+x212+x213);
IkReal x414=(x364+x365+x366);
IkReal x415=(x355+x357+x356);
IkReal x416=(x352+x348+x349);
IkReal x417=(x342+x346+x344);
IkReal x418=(x343+x347+x345);
IkReal x419=(x238+x239+x243+x242);
IkReal x420=(x324+x325+x321+x323);
IkReal x421=(x315+x316+x313+x312);
IkReal x422=(x193+x192+x191+x190);
IkReal x423=(x199+x198+x197+x196);
IkReal x424=(x309+x314+x311+x310);
IkReal x425=(x326+x327+x328+x329);
IkReal x426=(x300+x301+x298+x299);
IkReal x427=(x384+x383+x264+x266+x262);
IkReal x428=(x389+x390+x294+x295+x296);
IkReal x429=(x278+x279+x285+x284+x282+x280);
IkReal x430=(x229+x233+x231+x236+x237+x235);
IkReal x431=(x290+x291+x292+x293+x297+x289);
IkReal x432=(x258+x259+x265+x261+x260+x263);
IkReal x433=(x268+x276+x277+x274+x272+x273);
IkReal x434=(x218+x220+x222+x225+x224+x227);
IkReal x435=(x382+x381+x257+x252+x253+x247);
IkReal x436=(x380+x379+x241+x240+x245+x244);
IkReal x437=(x378+x377+x228+x232+x230+x234);
IkReal x438=(x376+x375+x219+x221+x223+x226);
IkReal x439=(x387+x388+x288+x287+x286+x283+x281);
IkReal x440=(x386+x385+x267+x269+x275+x270+x271);
IkReal x441=(x254+x255+x256+x250+x251+x246+x249+x248);
op[0]=0;
op[1]=1.0;
op[2]=0;
op[3]=0;
op[4]=0;
op[5]=1.0;
op[6]=-1.0;
op[7]=0;
op[8]=0;
op[9]=0;
op[10]=-1.0;
op[11]=0;
op[12]=((((-1.0)*x422))+(((-1.0)*x425))+x330+x393);
op[13]=((0.322022200905063)+(((-1.0)*x423))+x333+x395+(((-1.0)*x403)));
op[14]=((((-1.0)*x421))+x404+x424+(((-1.0)*x308)));
op[15]=((-2.6557596e-6)+(((-1.0)*x420))+x399+x398+(((-1.0)*x317)));
op[16]=((((-1.0)*x393))+(((-1.0)*x426))+x302+x422);
op[17]=((0.322022200900008)+(((-1.0)*x395))+x305+x423+(((-1.0)*x401)));
op[18]=((-0.322022200905063)+(((-1.0)*x394))+x412+x414+(((-1.0)*x409)));
op[19]=((((-1.0)*x367))+x402+x413+(((-1.0)*x410)));
op[20]=((2.6557596e-6)+x407+x418+(((-1.0)*x417))+(((-1.0)*x416)));
op[21]=(x359+x415+(((-1.0)*x408))+(((-1.0)*x406)));
op[22]=((-0.322022200900008)+(((-1.0)*x397))+x409+x411+(((-1.0)*x412)));
op[23]=(x400+x410+(((-1.0)*x339))+(((-1.0)*x413)));
op[24]=((-2.0)+x396);
op[25]=x391;
op[26]=(((gclwh10_0*x94))+((r11*x156)));
op[27]=((((4.0)*x187))+(((4.0)*x122)));
op[28]=((2.0)+(((-1.0)*x396)));
op[29]=((-1.0)*x391);
op[30]=x392;
op[31]=((-2.0)+(((-1.0)*x405)));
op[32]=(x371+((r10*x156)));
op[33]=((((-4.0)*x141))+(((-1.0)*gclwh11_2*x94)));
op[34]=((-1.0)*x392);
op[35]=((2.0)+x405);
op[36]=((-0.644044401799595)+(((-1.0)*x438))+(((-1.0)*x430))+x434+x437);
op[37]=((((-1.0)*x441))+(((-1.0)*x436))+x419+x435);
op[38]=((((-1.0)*gclwh8_15*x189))+((rxp1_1*x145))+(((-1.0)*gclwh1_15*x166))+(((6.8328e-6)*x185))+(((-1.0)*gclwh14_12*x105))+(((-1.0)*gclwh8_0*x88))+((r01*x129))+(((-1.0)*gclwh9_15*x110))+(((-1.0)*gclwh0_0*x157))+((pp*r11*x156))+(((-1.0)*gclwh15_12*x137))+((gclwh1_12*x159))+(((-1.0)*x117*x154))+(((-6.8328e-6)*x173))+(((-1.0)*gclwh10_0*x374))+((gclwh0_12*x112))+(((-1.0)*gclwh1_0*x93))+((gclwh15_0*x151))+((gclwh9_12*x100))+((r11*x123))+((gclwh8_12*x174))+((gclwh10_0*pp*x94))+(((-1.0)*gclwh9_0*x95))+((gclwh15_15*x108)));
op[39]=((((2.1316)*x187))+(((-1.0)*gclwh15_14*x137))+(((-1.0)*gclwh8_2*x88))+((x122*x158))+(((-1.0)*gclwh11_2*x373))+((gclwh0_14*x112))+(((-1.0)*x113*x114))+(((6.8328e-6)*x152))+(((-1.0)*gclwh0_2*x157))+((gclwh9_14*x100))+(((-1.0)*gclwh1_2*x93))+(((-1.88060965327081)*x86))+((gclwh9_13*x110))+((gclwh8_14*x174))+(((2.1316)*x122))+(((-6.8328e-6)*x102))+((gclwh1_13*x166))+((rxp1_1*x87))+((gclwh15_2*x151))+(((-6.8328e-6)*x127))+((gclwh1_14*x159))+(((-1.0)*gclwh9_2*x95))+((x158*x187))+(((6.8328e-6)*x111)));
op[40]=((0.644044401799595)+(((-1.0)*x437))+(((-1.0)*x430))+x438+x434);
op[41]=((((-1.0)*x441))+(((-1.0)*x435))+x419+x436);
op[42]=((((-1.0)*x433))+(((-1.0)*x427))+x432+x440);
op[43]=((-0.644044401799595)+(((-1.0)*x439))+(((-1.0)*x431))+x429+x428);
op[44]=((((-1.0)*gclwh1_12*x112))+(((6.8328e-6)*x124))+((gclwh8_12*x100))+((pp*r10*x156))+(((-1.0)*gclwh14_12*x137))+(((-1.0)*gclwh8_0*x95))+(((-1.0)*gclwh9_12*x174))+((gclwh10_0*r00*x158))+(((6.8328e-6)*x162))+(((-6.8328e-6)*gclwh15_15*rxp1_1))+(((-1.0)*gclwh8_15*x110))+((r00*x129))+((gclwh14_15*x108))+(((-1.0)*gclwh10_0*x373))+(((-1.0)*gclwh15_0*x181))+((rxp0_1*x145))+(((1.88060965327081)*x119))+((gclwh15_12*x105))+(((-1.0)*gclwh0_15*x166))+((gclwh9_0*x88))+((gclwh1_0*x157))+(((-1.0)*gclwh0_0*x93))+(((-1.0)*x113*x154))+((r10*x123)));
op[45]=((((-1.0)*gclwh0_2*x93))+((gclwh0_14*x159))+((gclwh1_2*x157))+((gclwh9_2*x88))+((gclwh15_14*x105))+(((-1.0)*gclwh8_2*x95))+((gclwh8_13*x110))+(((-2.1316)*x141))+((x114*x117))+(((-1.0)*gclwh14_13*x108))+(((-1.0)*gclwh11_2*pp*x94))+(((-6.8328e-6)*x167))+(((-1.0)*gclwh9_14*x174))+(((-1.88060965327081)*x104))+(((-1.0)*gclwh9_13*x189))+(((-1.0)*gclwh15_2*x181))+(((-1.0)*x141*x158))+((rxp0_1*x87))+((gclwh0_13*x166))+((gclwh8_14*x100))+(((-2.1316)*gclwh11_2*r01))+(((-1.0)*gclwh1_14*x112))+((gclwh11_2*x374))+(((6.8328e-6)*x101)));
op[46]=((((-1.0)*x440))+(((-1.0)*x433))+x427+x432);
op[47]=((0.644044401799595)+(((-1.0)*x431))+(((-1.0)*x428))+x429+x439);
op[48]=0;
op[49]=-1.0;
op[50]=0;
op[51]=0;
op[52]=0;
op[53]=-1.0;
op[54]=1.0;
op[55]=0;
op[56]=0;
op[57]=0;
op[58]=1.0;
op[59]=0;
op[60]=((((-1.0)*x393))+x426+x422+(((-1.0)*x302)));
op[61]=((-0.322022200900008)+(((-1.0)*x395))+x401+x423+(((-1.0)*x305)));
op[62]=((((-1.0)*x421))+(((-1.0)*x424))+x308+x404);
op[63]=((2.6557596e-6)+(((-1.0)*x398))+(((-1.0)*x420))+x317+x399);
op[64]=((((-1.0)*x422))+x393+x425+(((-1.0)*x330)));
op[65]=((-0.322022200905063)+(((-1.0)*x423))+x395+x403+(((-1.0)*x333)));
op[66]=((0.322022200900008)+x397+x409+(((-1.0)*x412))+(((-1.0)*x411)));
op[67]=(x339+x410+(((-1.0)*x413))+(((-1.0)*x400)));
op[68]=((-2.6557596e-6)+x417+x418+(((-1.0)*x416))+(((-1.0)*x407)));
op[69]=((((-1.0)*x359))+x406+x415+(((-1.0)*x408)));
op[70]=((0.322022200905063)+x394+x412+(((-1.0)*x414))+(((-1.0)*x409)));
op[71]=(x367+x413+(((-1.0)*x410))+(((-1.0)*x402)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j3array[16], cj3array[16], sj3array[16], j4array[16], cj4array[16], sj4array[16], j5array[16], cj5array[16], sj5array[16];
int numsolutions = 0;
for(int ij3 = 0; ij3 < numroots; ij3 += 3)
{
IkReal htj3 = zeror[ij3+0], htj4 = zeror[ij3+1], htj5 = zeror[ij3+2];
if(isnan(htj3)||isnan(htj4)||isnan(htj5)){
continue;
}
j3array[numsolutions]=((2.0)*(atan(htj3)));
j4array[numsolutions]=((2.0)*(atan(htj4)));
j5array[numsolutions]=((2.0)*(atan(htj5)));
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x442=htj3*htj3;
CheckValue<IkReal> x443=IKPowWithIntegerCheck(((1.0)+x442),-1);
if(!x443.valid){
continue;
}
cj3array[numsolutions]=((x443.value)*(((1.0)+(((-1.0)*x442)))));
CheckValue<IkReal> x444=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x444.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x444.value));
}
if(isinf(htj4)){
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
}
else{
IkReal x445=htj4*htj4;
CheckValue<IkReal> x446=IKPowWithIntegerCheck(((1.0)+x445),-1);
if(!x446.valid){
continue;
}
cj4array[numsolutions]=((x446.value)*(((1.0)+(((-1.0)*x445)))));
CheckValue<IkReal> x447=IKPowWithIntegerCheck(((1.0)+(htj4*htj4)),-1);
if(!x447.valid){
continue;
}
sj4array[numsolutions]=((2.0)*htj4*(x447.value));
}
if(isinf(htj5)){
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
}
else{
IkReal x448=htj5*htj5;
CheckValue<IkReal> x449=IKPowWithIntegerCheck(((1.0)+x448),-1);
if(!x449.valid){
continue;
}
cj5array[numsolutions]=((x449.value)*(((1.0)+(((-1.0)*x448)))));
CheckValue<IkReal> x450=IKPowWithIntegerCheck(((1.0)+(htj5*htj5)),-1);
if(!x450.valid){
continue;
}
sj5array[numsolutions]=((2.0)*htj5*(x450.value));
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j3valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj3 = 16;
_nj4 = 1;
_nj5 = 1;
for(int ij3 = 0; ij3 < numsolutions; ++ij3)
    {
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
_ij4[0] = 0; _ij4[1] = -1;
_ij5[0] = 0; _ij5[1] = -1;
for(int iij3 = ij3+1; iij3 < numsolutions; ++iij3)
{
if( !j3valid[iij3] ) { continue; }
if( IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(cj4array[ij3]-cj4array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij3]-sj4array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(cj5array[ij3]-cj5array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij3]-sj5array[iij3]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j3valid[iij3]=false; _ij3[1] = iij3; _ij4[1] = 0; _ij5[1] = 0;  break; 
}
}
    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

    j4 = j4array[ij3]; cj4 = cj4array[ij3]; sj4 = sj4array[ij3];

    j5 = j5array[ij3]; cj5 = cj5array[ij3]; sj5 = sj5array[ij3];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+3, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+5, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+4, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+6, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j0eval[3];
IkReal x451=((100000000.0)*sj3*sj4);
IkReal x452=((117.0)*cj4*sj3);
j0eval[0]=rxp2_2;
j0eval[1]=((IKabs((((px*x451))+(((-1.0)*r02*x452)))))+(IKabs(((((-1.0)*py*x451))+((r12*x452))))));
j0eval[2]=IKsign(rxp2_2);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x453=((1.0)*cj5);
IkReal x454=(sj3*sj4);
IkReal x455=(sj5*x454);
IkReal x456=((((-1.0)*r21*x453))+(((-1.0)*r20*sj5)));
j0eval[0]=x456;
j0eval[1]=((IKabs((((cj5*r10*x454))+((cj3*r12))+(((-1.0)*r11*x455)))))+(IKabs(((((-1.0)*cj3*r02))+((r01*x455))+(((-1.0)*r00*x453*x454))))));
j0eval[2]=IKsign(x456);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x457=(cj4*sj3);
IkReal x458=((1.0)*sj5);
IkReal x459=(sj3*sj4);
IkReal x460=(cj5*x459);
IkReal x461=(((cj5*r20))+(((-1.0)*r21*x458)));
j0eval[0]=x461;
j0eval[1]=IKsign(x461);
j0eval[2]=((IKabs(((((-1.0)*r00*x458*x459))+(((-1.0)*r02*x457))+(((-1.0)*r01*x460)))))+(IKabs((((r12*x457))+((r11*x460))+((r10*sj5*x459))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x462=((-1.0)*r21);
IkReal x464 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x464)==0){
continue;
}
IkReal x463=pow(x464,-0.5);
CheckValue<IkReal> x465 = IKatan2WithCheck(IkReal(r20),IkReal(x462),IKFAST_ATAN2_MAGTHRESH);
if(!x465.valid){
continue;
}
IkReal gconst0=((-1.0)*(x465.value));
IkReal gconst1=((-1.0)*r20*x463);
IkReal gconst2=(x462*x463);
CheckValue<IkReal> x466 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x466.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x466.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x467=((-1.0)*r21);
CheckValue<IkReal> x470 = IKatan2WithCheck(IkReal(r20),IkReal(x467),IKFAST_ATAN2_MAGTHRESH);
if(!x470.valid){
continue;
}
IkReal x468=((-1.0)*(x470.value));
IkReal x469=x463;
sj5=gconst1;
cj5=gconst2;
j5=x468;
IkReal gconst0=x468;
IkReal gconst1=((-1.0)*r20*x469);
IkReal gconst2=(x467*x469);
IkReal x471=((100000000.0)*sj3*sj4);
IkReal x472=((117.0)*cj4*sj3);
j0eval[0]=rxp2_2;
j0eval[1]=((IKabs((((px*x471))+(((-1.0)*r02*x472)))))+(IKabs(((((-1.0)*py*x471))+((r12*x472))))));
j0eval[2]=IKsign(rxp2_2);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x473=((1.0)*gconst1);
IkReal x474=(sj3*sj4);
IkReal x475=(gconst2*x474);
CheckValue<IkReal> x476 = IKatan2WithCheck(IkReal((((gconst1*r01*x474))+(((-1.0)*cj3*r02))+(((-1.0)*r00*x475)))),IkReal((((r10*x475))+(((-1.0)*r11*x473*x474))+((cj3*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x476.valid){
continue;
}
CheckValue<IkReal> x477=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r21))+(((-1.0)*r20*x473)))),-1);
if(!x477.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x476.value)+(((1.5707963267949)*(x477.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x478=IKcos(j0);
IkReal x479=IKsin(j0);
IkReal x480=((1.0)*r10);
IkReal x481=(cj4*sj3);
IkReal x482=(gconst1*x479);
IkReal x483=((1.0)*x478);
IkReal x484=((1.0)*x479);
evalcond[0]=((((-1.0)*sj3*sj4))+(((-1.0)*r12*x484))+(((-1.0)*r02*x483)));
evalcond[1]=((((-1.17e-6)*x481))+(((-1.0)*px*x483))+(((-1.0)*py*x484)));
evalcond[2]=(cj3+((gconst1*r01*x478))+(((-1.0)*gconst2*x479*x480))+((r11*x482))+(((-1.0)*gconst2*r00*x483)));
evalcond[3]=((((-1.0)*gconst2*r01*x483))+(((-1.0)*gconst1*r00*x483))+x481+(((-1.0)*x480*x482))+(((-1.0)*gconst2*r11*x484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x485=cj3*cj3;
IkReal x486=cj4*cj4;
IkReal x487=sj4*sj4;
IkReal x488=(cj3*r22);
IkReal x489=(cj4*r22);
IkReal x490=((4.53976)*sj4);
IkReal x491=(r02*sj0);
IkReal x492=((16.0)*pz);
IkReal x493=((8.0)*pz);
IkReal x494=((1.872e-5)*sj4);
IkReal x495=((4.32e-6)*sj4);
IkReal x496=((9.07952)*sj4);
IkReal x497=(px*sj0);
IkReal x498=(cj0*py);
IkReal x499=((4.68e-6)*sj4);
IkReal x500=((9.36e-6)*sj4);
IkReal x501=(cj0*cj3*r12);
IkReal x502=((1.872e-5)*x486);
IkReal x503=(cj0*cj4*r12);
IkReal x504=(cj4*x499);
IkReal x505=((4.0)*x486);
IkReal x506=((9.36e-6)*x486);
IkReal x507=(x485*x487);
IkReal x508=(cj3*x487*x491);
IkReal x509=((((4.0)*x497*x507))+(((2.26988)*x503))+((x497*x505))+((x495*x501))+((x491*x504))+(((2.26988)*sj4*x488))+((x485*x499*x503)));
IkReal x510=((((4.0)*x498*x507))+((cj3*x491*x495))+((x485*x491*x504))+(((4.68e-6)*x487*x488))+((x498*x505))+(((2.26988)*cj4*x491))+(((4.32e-6)*x489))+((x499*x503))+(((4.68e-6)*x486*x488)));
IkReal x511=(((x485*x489*x500))+(((-1.0)*x489*x500))+(((-9.36e-6)*x508))+(((-1.0)*x486*x493))+(((-1.0)*cj3*x491*x506))+((cj3*x490*x491))+(((-8.64e-6)*cj4*x491))+((x501*x506))+(((-1.0)*x490*x501))+(((9.36e-6)*x487*x501))+(((-1.0)*x493*x507))+(((8.64e-6)*sj4*x488))+(((4.53976)*x489))+(((8.64e-6)*x503)));
IkReal x512=(x509+(((-1.0)*x510)));
IkReal x513=((((-1.0)*x509))+x510);
op[0]=x512;
op[1]=x511;
op[2]=x512;
op[3]=((((9.07952)*x489))+(((-1.728e-5)*cj4*x491))+((cj3*x491*x496))+(((-1.0)*x489*x494))+(((-1.0)*x486*x492))+(((-1.0)*cj3*x491*x502))+(((-1.872e-5)*x508))+(((-1.0)*x496*x501))+(((1.872e-5)*x487*x501))+(((1.728e-5)*x503))+((x501*x502))+(((1.728e-5)*sj4*x488))+(((-1.0)*x492*x507))+((x485*x489*x494)));
op[4]=x513;
op[5]=x511;
op[6]=x513;
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

j1evalpoly[0]=((((-2.92)*(cj3*cj3)*(sj4*sj4)))+(((4.0)*pz*(cj4*cj4)))+(((-2.92)*(cj4*cj4)))+(((htj1*htj1)*(((((4.0)*pz*(cj4*cj4)))+(((-4.68e-6)*cj0*cj3*r12*(cj4*cj4)))+(((-2.26988)*cj3*r02*sj0*sj4))+(((4.68e-6)*cj3*r02*sj0*(cj4*cj4)))+(((-4.32e-6)*cj3*r22*sj4))+(((4.32e-6)*cj4*r02*sj0))+(((-8.76)*(cj3*cj3)*(sj4*sj4)))+(((-8.76)*(cj4*cj4)))+(((-4.68e-6)*cj0*cj3*r12*(sj4*sj4)))+(((4.68e-6)*cj3*r02*sj0*(sj4*sj4)))+(((-4.32e-6)*cj0*cj4*r12))+(((-2.26988)*cj4*r22))+(((4.0)*pz*(cj3*cj3)*(sj4*sj4)))+(((-4.68e-6)*cj4*r22*sj4*(cj3*cj3)))+(((4.68e-6)*cj4*r22*sj4))+(((2.26988)*cj0*cj3*r12*sj4))))))+(((-4.68e-6)*cj0*cj3*r12*(cj4*cj4)))+(((-2.26988)*cj3*r02*sj0*sj4))+(((4.68e-6)*cj3*r02*sj0*(cj4*cj4)))+(((-4.32e-6)*cj3*r22*sj4))+(((4.32e-6)*cj4*r02*sj0))+(((-4.68e-6)*cj0*cj3*r12*(sj4*sj4)))+(((4.68e-6)*cj3*r02*sj0*(sj4*sj4)))+(((-4.32e-6)*cj0*cj4*r12))+(((-2.26988)*cj4*r22))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-2.92)*(cj3*cj3)*(sj4*sj4)))+(((-2.92)*(cj4*cj4)))+(((-4.68e-6)*cj3*r02*sj0*(sj4*sj4)))+(((-4.68e-6)*cj4*r22*sj4))+(((-4.0)*pz*(cj4*cj4)))+(((-4.68e-6)*cj3*r02*sj0*(cj4*cj4)))+(((-4.0)*pz*(cj3*cj3)*(sj4*sj4)))+(((4.32e-6)*cj0*cj4*r12))+(((-2.26988)*cj0*cj3*r12*sj4))+(((2.26988)*cj4*r22))+(((-4.32e-6)*cj4*r02*sj0))+(((4.68e-6)*cj0*cj3*r12*(sj4*sj4)))+(((4.32e-6)*cj3*r22*sj4))+(((4.68e-6)*cj4*r22*sj4*(cj3*cj3)))+(((4.68e-6)*cj0*cj3*r12*(cj4*cj4)))+(((2.26988)*cj3*r02*sj0*sj4))))))+(((htj1*htj1*htj1*htj1*htj1)*(((((-8.0)*px*sj0*(cj3*cj3)*(sj4*sj4)))+(((-4.53976)*cj0*cj4*r12))+(((9.36e-6)*cj0*cj4*r12*sj4))+(((4.53976)*cj4*r02*sj0))+(((-9.36e-6)*cj4*r02*sj0*sj4))+(((9.36e-6)*cj3*r22*(sj4*sj4)))+(((-8.0)*px*sj0*(cj4*cj4)))+(((9.36e-6)*cj3*r22*(cj4*cj4)))+(((8.0)*cj0*py*(cj4*cj4)))+(((-4.53976)*cj3*r22*sj4))+(((8.0)*cj0*py*(cj3*cj3)*(sj4*sj4)))+(((8.64e-6)*cj3*r02*sj0*sj4))+(((9.36e-6)*cj4*r02*sj0*sj4*(cj3*cj3)))+(((8.64e-6)*cj4*r22))+(((-9.36e-6)*cj0*cj4*r12*sj4*(cj3*cj3)))+(((-8.64e-6)*cj0*cj3*r12*sj4))))))+(((htj1*htj1*htj1)*(((((-16.0)*px*sj0*(cj4*cj4)))+(((-1.872e-5)*cj0*cj4*r12*sj4*(cj3*cj3)))+(((-9.07952)*cj0*cj4*r12))+(((1.872e-5)*cj4*r02*sj0*sj4*(cj3*cj3)))+(((1.872e-5)*cj3*r22*(sj4*sj4)))+(((-1.728e-5)*cj0*cj3*r12*sj4))+(((-9.07952)*cj3*r22*sj4))+(((-16.0)*px*sj0*(cj3*cj3)*(sj4*sj4)))+(((9.07952)*cj4*r02*sj0))+(((16.0)*cj0*py*(cj3*cj3)*(sj4*sj4)))+(((1.872e-5)*cj0*cj4*r12*sj4))+(((1.872e-5)*cj3*r22*(cj4*cj4)))+(((1.728e-5)*cj4*r22))+(((1.728e-5)*cj3*r02*sj0*sj4))+(((16.0)*cj0*py*(cj4*cj4)))+(((-1.872e-5)*cj4*r02*sj0*sj4))))))+((htj1*(((((-8.0)*px*sj0*(cj3*cj3)*(sj4*sj4)))+(((-4.53976)*cj0*cj4*r12))+(((9.36e-6)*cj0*cj4*r12*sj4))+(((4.53976)*cj4*r02*sj0))+(((-9.36e-6)*cj4*r02*sj0*sj4))+(((9.36e-6)*cj3*r22*(sj4*sj4)))+(((-8.0)*px*sj0*(cj4*cj4)))+(((9.36e-6)*cj3*r22*(cj4*cj4)))+(((8.0)*cj0*py*(cj4*cj4)))+(((-4.53976)*cj3*r22*sj4))+(((8.0)*cj0*py*(cj3*cj3)*(sj4*sj4)))+(((8.64e-6)*cj3*r02*sj0*sj4))+(((9.36e-6)*cj4*r02*sj0*sj4*(cj3*cj3)))+(((8.64e-6)*cj4*r22))+(((-9.36e-6)*cj0*cj4*r12*sj4*(cj3*cj3)))+(((-8.64e-6)*cj0*cj3*r12*sj4))))))+(((4.0)*pz*(cj3*cj3)*(sj4*sj4)))+(((-4.68e-6)*cj4*r22*sj4*(cj3*cj3)))+(((4.68e-6)*cj4*r22*sj4))+(((htj1*htj1*htj1*htj1)*(((((-4.68e-6)*cj3*r02*sj0*(sj4*sj4)))+(((-4.68e-6)*cj4*r22*sj4))+(((-4.0)*pz*(cj4*cj4)))+(((-4.68e-6)*cj3*r02*sj0*(cj4*cj4)))+(((-4.0)*pz*(cj3*cj3)*(sj4*sj4)))+(((4.32e-6)*cj0*cj4*r12))+(((-2.26988)*cj0*cj3*r12*sj4))+(((-8.76)*(cj3*cj3)*(sj4*sj4)))+(((2.26988)*cj4*r22))+(((-8.76)*(cj4*cj4)))+(((-4.32e-6)*cj4*r02*sj0))+(((4.68e-6)*cj0*cj3*r12*(sj4*sj4)))+(((4.32e-6)*cj3*r22*sj4))+(((4.68e-6)*cj4*r22*sj4*(cj3*cj3)))+(((4.68e-6)*cj0*cj3*r12*(cj4*cj4)))+(((2.26988)*cj3*r02*sj0*sj4))))))+(((2.26988)*cj0*cj3*r12*sj4)));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[2];
IkReal x514=((-1.0)*r21);
CheckValue<IkReal> x517 = IKatan2WithCheck(IkReal(r20),IkReal(x514),IKFAST_ATAN2_MAGTHRESH);
if(!x517.valid){
continue;
}
IkReal x515=((-1.0)*(x517.value));
IkReal x516=x463;
sj5=gconst1;
cj5=gconst2;
j5=x515;
IkReal gconst0=x515;
IkReal gconst1=((-1.0)*r20*x516);
IkReal gconst2=(x514*x516);
IkReal x518=cj3*cj3;
IkReal x519=cj4*cj4;
IkReal x520=((((-1.0)*x518*x519))+x519+x518);
j2eval[0]=x520;
j2eval[1]=IKsign(x520);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x521=((-1.0)*r21);
CheckValue<IkReal> x524 = IKatan2WithCheck(IkReal(r20),IkReal(x521),IKFAST_ATAN2_MAGTHRESH);
if(!x524.valid){
continue;
}
IkReal x522=((-1.0)*(x524.value));
IkReal x523=x463;
sj5=gconst1;
cj5=gconst2;
j5=x522;
IkReal gconst0=x522;
IkReal gconst1=((-1.0)*r20*x523);
IkReal gconst2=(x521*x523);
IkReal x525=(cj3*sj4);
j2eval[0]=(cj4+(((-525435.185185185)*x525))+(((1.08333333333333)*cj3)));
j2eval[1]=IKsign(((((1.17e-6)*cj3))+(((1.08e-6)*cj4))+(((-0.56747)*x525))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x526=((-1.0)*r21);
CheckValue<IkReal> x529 = IKatan2WithCheck(IkReal(r20),IkReal(x526),IKFAST_ATAN2_MAGTHRESH);
if(!x529.valid){
continue;
}
IkReal x527=((-1.0)*(x529.value));
IkReal x528=x463;
sj5=gconst1;
cj5=gconst2;
j5=x527;
IkReal gconst0=x527;
IkReal gconst1=((-1.0)*r20*x528);
IkReal gconst2=(x526*x528);
IkReal x530=cj3*cj3;
IkReal x531=(cj4*sj4);
IkReal x532=(cj3*sj4);
j2eval[0]=((((-1.0)*x532))+(((-525435.185185185)*cj4))+(((-1.08333333333333)*x530*x531))+(((1.08333333333333)*x531)));
j2eval[1]=IKsign(((((1.17e-6)*x531))+(((-1.17e-6)*x530*x531))+(((-0.56747)*cj4))+(((-1.08e-6)*x532))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x533=((3.35381986224151e-6)*cj1);
IkReal x534=(px*sj0);
IkReal x535=((1.76221132708977)*sj1);
IkReal x536=((1.76221132708977)*cj1);
IkReal x537=((3.35381986224151e-6)*sj1);
IkReal x538=(cj0*py);
IkReal x539=(sj1*x538);
if( IKabs(((2.4482884994363e-6)+((pz*x535))+(((-1.0)*x537*x538))+((x534*x537))+((x534*x536))+(((-1.0)*pz*x533))+(((-1.0)*x536*x538)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.28641426877553)+((pz*x536))+((pz*x537))+(((-1.0)*x534*x535))+(((-1.0)*x533*x538))+((x535*x538))+((x533*x534)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.4482884994363e-6)+((pz*x535))+(((-1.0)*x537*x538))+((x534*x537))+((x534*x536))+(((-1.0)*pz*x533))+(((-1.0)*x536*x538))))+IKsqr(((-1.28641426877553)+((pz*x536))+((pz*x537))+(((-1.0)*x534*x535))+(((-1.0)*x533*x538))+((x535*x538))+((x533*x534))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((2.4482884994363e-6)+((pz*x535))+(((-1.0)*x537*x538))+((x534*x537))+((x534*x536))+(((-1.0)*pz*x533))+(((-1.0)*x536*x538))), ((-1.28641426877553)+((pz*x536))+((pz*x537))+(((-1.0)*x534*x535))+(((-1.0)*x533*x538))+((x535*x538))+((x533*x534))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x540=IKcos(j2);
IkReal x541=IKsin(j2);
IkReal x542=(cj1*sj0);
IkReal x543=(gconst2*sj1);
IkReal x544=(cj1*gconst2);
IkReal x545=((1.0)*gconst1);
IkReal x546=((1.0)*cj1);
IkReal x547=(cj0*cj1);
IkReal x548=(gconst1*sj1);
IkReal x549=(r00*sj0);
IkReal x550=(sj0*sj1);
IkReal x551=(cj0*sj1);
IkReal x552=((1.0)*x541);
IkReal x553=((1.0)*cj0*r11);
IkReal x554=((1.0)*cj0*r10);
evalcond[0]=((((-1.0)*cj0*py*x546))+((px*x542))+(((-0.56746883)*x541))+((pz*sj1))+(((-1.08e-6)*x540)));
evalcond[1]=((0.73)+(((-1.0)*py*x551))+((px*x550))+(((-1.0)*pz*x546))+(((-1.08e-6)*x541))+(((0.56746883)*x540)));
evalcond[2]=(((r21*x543))+((r20*x548))+(((-1.0)*x544*x553))+(((-1.0)*x552))+(((-1.0)*r10*x545*x547))+((gconst1*r00*x542))+((gconst2*r01*x542)));
evalcond[3]=((((-1.0)*r21*x544))+(((-1.0)*r10*x545*x551))+x540+((r01*sj0*x543))+(((-1.0)*x543*x553))+((x548*x549))+(((-1.0)*cj1*r20*x545)));
evalcond[4]=((((-1.0)*x540))+(((-1.0)*r01*x542*x545))+((r20*x543))+(((-1.0)*x544*x554))+((gconst1*r11*x547))+((gconst2*r00*x542))+(((-1.0)*r21*sj1*x545)));
evalcond[5]=((((-1.0)*r20*x544))+(((-1.0)*r01*x545*x550))+((cj0*r11*x548))+((x543*x549))+(((-1.0)*x552))+((cj1*gconst1*r21))+(((-1.0)*x543*x554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x555=(cj1*pz);
IkReal x556=(cj0*py);
IkReal x557=((1.76220406051003)*sj1);
IkReal x558=((3.35379220296043e-6)*sj1);
IkReal x559=(px*sj0);
IkReal x560=((3.35379220296043e-6)*cj1);
IkReal x561=((1.76220406051003)*x559);
if( IKabs(((2.44826830816111e-6)+((cj1*x561))+(((-1.0)*x556*x558))+(((-1.76220406051003)*cj1*x556))+(((-3.35379220296043e-6)*x555))+((pz*x557))+((x558*x559)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.28640896417232)+((pz*x558))+(((1.76220406051003)*x555))+(((-1.0)*x556*x560))+((x556*x557))+(((-1.0)*x557*x559))+((x559*x560)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.44826830816111e-6)+((cj1*x561))+(((-1.0)*x556*x558))+(((-1.76220406051003)*cj1*x556))+(((-3.35379220296043e-6)*x555))+((pz*x557))+((x558*x559))))+IKsqr(((-1.28640896417232)+((pz*x558))+(((1.76220406051003)*x555))+(((-1.0)*x556*x560))+((x556*x557))+(((-1.0)*x557*x559))+((x559*x560))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((2.44826830816111e-6)+((cj1*x561))+(((-1.0)*x556*x558))+(((-1.76220406051003)*cj1*x556))+(((-3.35379220296043e-6)*x555))+((pz*x557))+((x558*x559))), ((-1.28640896417232)+((pz*x558))+(((1.76220406051003)*x555))+(((-1.0)*x556*x560))+((x556*x557))+(((-1.0)*x557*x559))+((x559*x560))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x562=IKcos(j2);
IkReal x563=IKsin(j2);
IkReal x564=(cj1*sj0);
IkReal x565=(gconst2*sj1);
IkReal x566=(cj1*gconst2);
IkReal x567=((1.0)*gconst1);
IkReal x568=((1.0)*cj1);
IkReal x569=(cj0*cj1);
IkReal x570=(gconst1*sj1);
IkReal x571=(r00*sj0);
IkReal x572=(sj0*sj1);
IkReal x573=(cj0*sj1);
IkReal x574=((1.0)*x562);
IkReal x575=((1.0)*cj0*r11);
IkReal x576=((1.0)*cj0*r10);
evalcond[0]=((((-1.0)*cj0*py*x568))+(((-1.08e-6)*x562))+(((-0.56747117)*x563))+((pz*sj1))+((px*x564)));
evalcond[1]=((0.73)+(((0.56747117)*x562))+((px*x572))+(((-1.08e-6)*x563))+(((-1.0)*py*x573))+(((-1.0)*pz*x568)));
evalcond[2]=((((-1.0)*x566*x575))+((r20*x570))+((r21*x565))+(((-1.0)*r10*x567*x569))+((gconst1*r00*x564))+x563+((gconst2*r01*x564)));
evalcond[3]=((((-1.0)*r21*sj1*x567))+(((-1.0)*x566*x576))+(((-1.0)*r01*x564*x567))+((gconst1*r11*x569))+(((-1.0)*x574))+((gconst2*r00*x564))+((r20*x565)));
evalcond[4]=(((cj0*r11*x570))+(((-1.0)*r01*x567*x572))+(((-1.0)*x565*x576))+((x565*x571))+(((-1.0)*x563))+((cj1*gconst1*r21))+(((-1.0)*r20*x566)));
evalcond[5]=((((-1.0)*r10*x567*x573))+((r01*sj0*x565))+(((-1.0)*r21*x566))+(((-1.0)*x565*x575))+(((-1.0)*cj1*r20*x567))+(((-1.0)*x574))+((x570*x571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x577=((3.35381986224151e-6)*cj1);
IkReal x578=(px*sj0);
IkReal x579=((1.76221132708977)*sj1);
IkReal x580=((1.76221132708977)*cj1);
IkReal x581=((3.35381986224151e-6)*sj1);
IkReal x582=(cj0*py);
IkReal x583=(sj1*x582);
if( IKabs(((2.4482884994363e-6)+((x578*x580))+((x578*x581))+(((-1.0)*x580*x582))+((pz*x579))+(((-1.0)*pz*x577))+(((-1.0)*x581*x582)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.28641426877553)+(((-1.0)*x578*x579))+((x579*x582))+(((-1.0)*x577*x582))+((x577*x578))+((pz*x581))+((pz*x580)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.4482884994363e-6)+((x578*x580))+((x578*x581))+(((-1.0)*x580*x582))+((pz*x579))+(((-1.0)*pz*x577))+(((-1.0)*x581*x582))))+IKsqr(((-1.28641426877553)+(((-1.0)*x578*x579))+((x579*x582))+(((-1.0)*x577*x582))+((x577*x578))+((pz*x581))+((pz*x580))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((2.4482884994363e-6)+((x578*x580))+((x578*x581))+(((-1.0)*x580*x582))+((pz*x579))+(((-1.0)*pz*x577))+(((-1.0)*x581*x582))), ((-1.28641426877553)+(((-1.0)*x578*x579))+((x579*x582))+(((-1.0)*x577*x582))+((x577*x578))+((pz*x581))+((pz*x580))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x584=IKcos(j2);
IkReal x585=IKsin(j2);
IkReal x586=(cj1*sj0);
IkReal x587=(gconst2*sj1);
IkReal x588=(cj1*gconst2);
IkReal x589=((1.0)*gconst1);
IkReal x590=((1.0)*cj1);
IkReal x591=(cj0*cj1);
IkReal x592=(gconst1*sj1);
IkReal x593=(r00*sj0);
IkReal x594=(cj0*sj1);
IkReal x595=(sj0*sj1);
IkReal x596=((1.0)*cj0*r11);
IkReal x597=((1.0)*cj0*r10);
evalcond[0]=(((px*x586))+(((-1.0)*cj0*py*x590))+(((-0.56746883)*x585))+(((-1.08e-6)*x584))+((pz*sj1)));
evalcond[1]=((0.73)+(((-1.0)*pz*x590))+(((0.56746883)*x584))+(((-1.08e-6)*x585))+((px*x595))+(((-1.0)*py*x594)));
evalcond[2]=(((r20*x587))+(((-1.0)*x588*x597))+(((-1.0)*r21*sj1*x589))+((gconst1*r11*x591))+x584+(((-1.0)*r01*x586*x589))+((gconst2*r00*x586)));
evalcond[3]=((((-1.0)*r01*x589*x595))+(((-1.0)*x587*x597))+(((-1.0)*r20*x588))+x585+((cj1*gconst1*r21))+((cj0*r11*x592))+((x587*x593)));
evalcond[4]=((((-1.0)*r10*x589*x591))+(((-1.0)*x585))+(((-1.0)*x588*x596))+((gconst1*r00*x586))+((gconst2*r01*x586))+((r20*x592))+((r21*x587)));
evalcond[5]=((((-1.0)*r10*x589*x594))+(((-1.0)*x587*x596))+((r01*sj0*x587))+(((-1.0)*cj1*r20*x589))+(((-1.0)*r21*x588))+x584+((x592*x593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x598=(cj1*pz);
IkReal x599=(cj0*py);
IkReal x600=((1.76220406051003)*sj1);
IkReal x601=((3.35379220296043e-6)*sj1);
IkReal x602=(px*sj0);
IkReal x603=((3.35379220296043e-6)*cj1);
IkReal x604=((1.76220406051003)*x602);
if( IKabs(((2.44826830816111e-6)+((x601*x602))+(((-1.0)*x599*x601))+(((-1.76220406051003)*cj1*x599))+(((-3.35379220296043e-6)*x598))+((cj1*x604))+((pz*x600)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.28640896417232)+(((-1.0)*x599*x603))+(((1.76220406051003)*x598))+(((-1.0)*x600*x602))+((x599*x600))+((x602*x603))+((pz*x601)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.44826830816111e-6)+((x601*x602))+(((-1.0)*x599*x601))+(((-1.76220406051003)*cj1*x599))+(((-3.35379220296043e-6)*x598))+((cj1*x604))+((pz*x600))))+IKsqr(((-1.28640896417232)+(((-1.0)*x599*x603))+(((1.76220406051003)*x598))+(((-1.0)*x600*x602))+((x599*x600))+((x602*x603))+((pz*x601))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((2.44826830816111e-6)+((x601*x602))+(((-1.0)*x599*x601))+(((-1.76220406051003)*cj1*x599))+(((-3.35379220296043e-6)*x598))+((cj1*x604))+((pz*x600))), ((-1.28640896417232)+(((-1.0)*x599*x603))+(((1.76220406051003)*x598))+(((-1.0)*x600*x602))+((x599*x600))+((x602*x603))+((pz*x601))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x605=IKcos(j2);
IkReal x606=IKsin(j2);
IkReal x607=(cj1*sj0);
IkReal x608=(gconst2*sj1);
IkReal x609=(cj1*gconst2);
IkReal x610=((1.0)*gconst1);
IkReal x611=((1.0)*cj1);
IkReal x612=(cj0*cj1);
IkReal x613=(gconst1*sj1);
IkReal x614=(r00*sj0);
IkReal x615=(sj0*sj1);
IkReal x616=(cj0*sj1);
IkReal x617=((1.0)*cj0*r11);
IkReal x618=((1.0)*cj0*r10);
evalcond[0]=((((-1.08e-6)*x605))+((px*x607))+(((-0.56747117)*x606))+((pz*sj1))+(((-1.0)*cj0*py*x611)));
evalcond[1]=((0.73)+(((-1.08e-6)*x606))+((px*x615))+(((-1.0)*py*x616))+(((-1.0)*pz*x611))+(((0.56747117)*x605)));
evalcond[2]=(((gconst1*r00*x607))+((r20*x613))+(((-1.0)*x609*x617))+((gconst2*r01*x607))+(((-1.0)*r10*x610*x612))+((r21*x608))+x606);
evalcond[3]=(((r20*x608))+(((-1.0)*x609*x618))+(((-1.0)*r21*sj1*x610))+(((-1.0)*r01*x607*x610))+((gconst2*r00*x607))+((gconst1*r11*x612))+x605);
evalcond[4]=((((-1.0)*r01*x610*x615))+((x608*x614))+(((-1.0)*r20*x609))+((cj1*gconst1*r21))+x606+((cj0*r11*x613))+(((-1.0)*x608*x618)));
evalcond[5]=((((-1.0)*r21*x609))+((r01*sj0*x608))+(((-1.0)*r10*x610*x616))+(((-1.0)*x605))+((x613*x614))+(((-1.0)*cj1*r20*x610))+(((-1.0)*x608*x617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x619=(cj1*r22);
IkReal x620=((1.17e-6)*sj4);
IkReal x621=(cj3*sj0);
IkReal x622=((1.0)*sj4);
IkReal x623=(cj1*px);
IkReal x624=(r02*sj1);
IkReal x625=((1.17e-6)*cj4);
IkReal x626=(cj3*sj1);
IkReal x627=(cj0*r12);
IkReal x628=(cj3*sj4);
IkReal x629=((1.0)*cj4);
IkReal x630=(cj0*cj1*py);
CheckValue<IkReal> x631 = IKatan2WithCheck(IkReal(((((1.08e-6)*x619))+((cj4*x630))+(((-1.08e-6)*sj0*x624))+(((-1.0)*sj0*x623*x629))+(((1.08e-6)*sj1*x627))+(((-1.0)*pz*sj1*x629))+((x625*x626*x627))+(((-1.0)*x621*x624*x625))+((cj3*x619*x625)))),IkReal((((sj1*x620*x627))+(((-1.0)*sj0*x620*x624))+((x628*x630))+(((-0.56747)*x619))+((x619*x620))+(((-1.0)*pz*x622*x626))+(((0.56747)*sj0*x624))+(((-0.56747)*sj1*x627))+(((-1.0)*x621*x622*x623)))),IKFAST_ATAN2_MAGTHRESH);
if(!x631.valid){
continue;
}
CheckValue<IkReal> x632=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*x620*(cj3*cj3)))+((cj4*x620))+(((-0.56747)*cj4))+(((-1.08e-6)*x628)))),-1);
if(!x632.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x631.value)+(((1.5707963267949)*(x632.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x633=IKcos(j2);
IkReal x634=IKsin(j2);
IkReal x635=(cj1*sj0);
IkReal x636=(cj3*cj4);
IkReal x637=((1.0)*cj1);
IkReal x638=(cj0*r10);
IkReal x639=(gconst2*sj1);
IkReal x640=(cj3*sj4);
IkReal x641=(cj0*r11);
IkReal x642=(gconst1*r21);
IkReal x643=(gconst1*sj1);
IkReal x644=(r00*sj0);
IkReal x645=((1.0)*r01);
IkReal x646=(sj0*sj1);
IkReal x647=(cj0*py);
IkReal x648=((1.0)*sj1);
IkReal x649=(cj0*r12);
IkReal x650=((1.0)*x634);
IkReal x651=((1.17e-6)*x634);
IkReal x652=((1.0)*x633);
IkReal x653=(sj4*x633);
evalcond[0]=(((r02*x635))+(((-1.0)*x640*x652))+((r22*sj1))+(((-1.0)*x637*x649))+(((-1.0)*cj4*x650)));
evalcond[1]=((((-1.0)*x640*x650))+((cj4*x633))+((r02*x646))+(((-1.0)*x648*x649))+(((-1.0)*r22*x637)));
evalcond[2]=(((sj4*x651))+(((-1.17e-6)*x633*x636))+(((-1.08e-6)*x633))+(((-1.0)*x637*x647))+((pz*sj1))+(((-0.56747)*x634))+((px*x635)));
evalcond[3]=((0.73)+(((-1.0)*pz*x637))+(((-1.0)*x647*x648))+(((0.56747)*x633))+((px*x646))+(((-1.08e-6)*x634))+(((-1.17e-6)*x653))+(((-1.0)*x636*x651)));
evalcond[4]=((((-1.0)*x642*x648))+(((-1.0)*sj3*x652))+(((-1.0)*gconst2*x637*x638))+(((-1.0)*gconst1*x635*x645))+((cj1*gconst1*x641))+((r20*x639))+((gconst2*r00*x635)));
evalcond[5]=((((-1.0)*sj3*x650))+((x639*x644))+((cj1*x642))+(((-1.0)*gconst2*r20*x637))+(((-1.0)*sj0*x643*x645))+((x641*x643))+(((-1.0)*x638*x639)));
evalcond[6]=((((-1.0)*gconst1*x637*x638))+((r21*x639))+(((-1.0)*sj4*x650))+((r20*x643))+((gconst1*r00*x635))+(((-1.0)*gconst2*x637*x641))+((gconst2*r01*x635))+((x633*x636)));
evalcond[7]=(((x634*x636))+((x643*x644))+(((-1.0)*gconst1*r20*x637))+(((-1.0)*gconst2*r21*x637))+(((-1.0)*x639*x641))+((r01*sj0*x639))+x653+(((-1.0)*x638*x643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x654=(r22*sj1);
IkReal x655=((1.17e-6)*sj4);
IkReal x656=(pz*sj1);
IkReal x657=(cj0*cj1);
IkReal x658=((1.17e-6)*cj3);
IkReal x659=(cj3*sj4);
IkReal x660=(cj1*px*sj0);
IkReal x661=((1.0)*x659);
IkReal x662=(cj1*r02*sj0);
CheckValue<IkReal> x663 = IKatan2WithCheck(IkReal(((((1.08e-6)*x662))+(((-1.0)*cj4*r12*x657*x658))+(((-1.0)*x660*x661))+((cj4*x654*x658))+(((-1.0)*x656*x661))+(((-1.08e-6)*r12*x657))+(((1.08e-6)*x654))+((py*x657*x659))+((cj4*x658*x662)))),IkReal((((cj4*x656))+(((-0.56747)*x654))+(((-0.56747)*x662))+(((-1.0)*cj4*py*x657))+(((0.56747)*r12*x657))+((x654*x655))+(((-1.0)*r12*x655*x657))+((cj4*x660))+((x655*x662)))),IKFAST_ATAN2_MAGTHRESH);
if(!x663.valid){
continue;
}
CheckValue<IkReal> x664=IKPowWithIntegerCheck(IKsign(((((-0.56747)*x659))+(((1.08e-6)*cj4))+x658)),-1);
if(!x664.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x663.value)+(((1.5707963267949)*(x664.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x665=IKcos(j2);
IkReal x666=IKsin(j2);
IkReal x667=(cj1*sj0);
IkReal x668=(cj3*cj4);
IkReal x669=((1.0)*cj1);
IkReal x670=(cj0*r10);
IkReal x671=(gconst2*sj1);
IkReal x672=(cj3*sj4);
IkReal x673=(cj0*r11);
IkReal x674=(gconst1*r21);
IkReal x675=(gconst1*sj1);
IkReal x676=(r00*sj0);
IkReal x677=((1.0)*r01);
IkReal x678=(sj0*sj1);
IkReal x679=(cj0*py);
IkReal x680=((1.0)*sj1);
IkReal x681=(cj0*r12);
IkReal x682=((1.0)*x666);
IkReal x683=((1.17e-6)*x666);
IkReal x684=((1.0)*x665);
IkReal x685=(sj4*x665);
evalcond[0]=(((r22*sj1))+(((-1.0)*cj4*x682))+((r02*x667))+(((-1.0)*x672*x684))+(((-1.0)*x669*x681)));
evalcond[1]=(((r02*x678))+(((-1.0)*x680*x681))+(((-1.0)*r22*x669))+(((-1.0)*x672*x682))+((cj4*x665)));
evalcond[2]=((((-0.56747)*x666))+(((-1.08e-6)*x665))+((px*x667))+(((-1.17e-6)*x665*x668))+(((-1.0)*x669*x679))+((pz*sj1))+((sj4*x683)));
evalcond[3]=((0.73)+(((-1.08e-6)*x666))+(((-1.0)*x668*x683))+(((-1.17e-6)*x685))+(((-1.0)*x679*x680))+(((0.56747)*x665))+(((-1.0)*pz*x669))+((px*x678)));
evalcond[4]=(((gconst2*r00*x667))+((cj1*gconst1*x673))+(((-1.0)*gconst2*x669*x670))+(((-1.0)*gconst1*x667*x677))+((r20*x671))+(((-1.0)*sj3*x684))+(((-1.0)*x674*x680)));
evalcond[5]=(((x673*x675))+(((-1.0)*sj0*x675*x677))+((x671*x676))+(((-1.0)*gconst2*r20*x669))+(((-1.0)*x670*x671))+(((-1.0)*sj3*x682))+((cj1*x674)));
evalcond[6]=(((r21*x671))+((gconst2*r01*x667))+((x665*x668))+(((-1.0)*gconst2*x669*x673))+(((-1.0)*gconst1*x669*x670))+((r20*x675))+(((-1.0)*sj4*x682))+((gconst1*r00*x667)));
evalcond[7]=(((x666*x668))+((r01*sj0*x671))+(((-1.0)*x671*x673))+(((-1.0)*x670*x675))+x685+(((-1.0)*gconst1*r20*x669))+((x675*x676))+(((-1.0)*gconst2*r21*x669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x686=cj3*cj3;
IkReal x687=cj4*cj4;
IkReal x688=(cj0*r12);
IkReal x689=(cj1*cj4);
IkReal x690=(r22*sj1);
IkReal x691=(cj3*sj4);
IkReal x692=(r02*sj0);
IkReal x693=((1.0)*sj1);
IkReal x694=((1.0)*cj1*x691);
CheckValue<IkReal> x695 = IKatan2WithCheck(IkReal((((cj4*x690))+(((-1.0)*x688*x691*x693))+((x689*x692))+((sj1*x691*x692))+(((-1.0)*x688*x689))+(((-1.0)*r22*x694)))),IkReal((((cj1*x691*x692))+(((-1.0)*cj4*x692*x693))+((r22*x689))+((x690*x691))+(((-1.0)*x688*x694))+((cj4*sj1*x688)))),IKFAST_ATAN2_MAGTHRESH);
if(!x695.valid){
continue;
}
CheckValue<IkReal> x696=IKPowWithIntegerCheck(IKsign(((((-1.0)*x686*x687))+x687+x686)),-1);
if(!x696.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x695.value)+(((1.5707963267949)*(x696.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x697=IKcos(j2);
IkReal x698=IKsin(j2);
IkReal x699=(cj1*sj0);
IkReal x700=(cj3*cj4);
IkReal x701=((1.0)*cj1);
IkReal x702=(cj0*r10);
IkReal x703=(gconst2*sj1);
IkReal x704=(cj3*sj4);
IkReal x705=(cj0*r11);
IkReal x706=(gconst1*r21);
IkReal x707=(gconst1*sj1);
IkReal x708=(r00*sj0);
IkReal x709=((1.0)*r01);
IkReal x710=(sj0*sj1);
IkReal x711=(cj0*py);
IkReal x712=((1.0)*sj1);
IkReal x713=(cj0*r12);
IkReal x714=((1.0)*x698);
IkReal x715=((1.17e-6)*x698);
IkReal x716=((1.0)*x697);
IkReal x717=(sj4*x697);
evalcond[0]=(((r22*sj1))+((r02*x699))+(((-1.0)*x704*x716))+(((-1.0)*x701*x713))+(((-1.0)*cj4*x714)));
evalcond[1]=(((cj4*x697))+(((-1.0)*x704*x714))+(((-1.0)*x712*x713))+((r02*x710))+(((-1.0)*r22*x701)));
evalcond[2]=(((sj4*x715))+(((-0.56747)*x698))+(((-1.08e-6)*x697))+((px*x699))+(((-1.17e-6)*x697*x700))+((pz*sj1))+(((-1.0)*x701*x711)));
evalcond[3]=((0.73)+(((-1.0)*pz*x701))+(((-1.17e-6)*x717))+(((-1.0)*x711*x712))+(((-1.08e-6)*x698))+(((0.56747)*x697))+((px*x710))+(((-1.0)*x700*x715)));
evalcond[4]=((((-1.0)*x706*x712))+((gconst2*r00*x699))+((r20*x703))+(((-1.0)*gconst2*x701*x702))+(((-1.0)*gconst1*x699*x709))+((cj1*gconst1*x705))+(((-1.0)*sj3*x716)));
evalcond[5]=((((-1.0)*gconst2*r20*x701))+(((-1.0)*x702*x703))+((x703*x708))+(((-1.0)*sj0*x707*x709))+((cj1*x706))+((x705*x707))+(((-1.0)*sj3*x714)));
evalcond[6]=(((gconst1*r00*x699))+((gconst2*r01*x699))+(((-1.0)*gconst1*x701*x702))+((r20*x707))+((x697*x700))+(((-1.0)*gconst2*x701*x705))+((r21*x703))+(((-1.0)*sj4*x714)));
evalcond[7]=((((-1.0)*x703*x705))+(((-1.0)*gconst2*r21*x701))+(((-1.0)*x702*x707))+((x707*x708))+((x698*x700))+x717+(((-1.0)*gconst1*r20*x701))+((r01*sj0*x703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x718=((100000000.0)*sj3*sj4);
IkReal x719=((117.0)*cj4*sj3);
CheckValue<IkReal> x720=IKPowWithIntegerCheck(IKsign(rxp2_2),-1);
if(!x720.valid){
continue;
}
CheckValue<IkReal> x721 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x719))+((px*x718)))),IkReal((((r12*x719))+(((-1.0)*py*x718)))),IKFAST_ATAN2_MAGTHRESH);
if(!x721.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x720.value)))+(x721.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x722=IKcos(j0);
IkReal x723=IKsin(j0);
IkReal x724=((1.0)*r10);
IkReal x725=(cj4*sj3);
IkReal x726=(gconst1*x723);
IkReal x727=((1.0)*x722);
IkReal x728=((1.0)*x723);
evalcond[0]=((((-1.0)*r12*x728))+(((-1.0)*r02*x727))+(((-1.0)*sj3*sj4)));
evalcond[1]=((((-1.0)*px*x727))+(((-1.0)*py*x728))+(((-1.17e-6)*x725)));
evalcond[2]=(((gconst1*r01*x722))+cj3+((r11*x726))+(((-1.0)*gconst2*r00*x727))+(((-1.0)*gconst2*x723*x724)));
evalcond[3]=((((-1.0)*gconst2*r01*x727))+(((-1.0)*x724*x726))+(((-1.0)*gconst2*r11*x728))+(((-1.0)*gconst1*r00*x727))+x725);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x729=cj3*cj3;
IkReal x730=cj4*cj4;
IkReal x731=sj4*sj4;
IkReal x732=(cj3*r22);
IkReal x733=(cj4*r22);
IkReal x734=((4.53976)*sj4);
IkReal x735=(r02*sj0);
IkReal x736=((16.0)*pz);
IkReal x737=((8.0)*pz);
IkReal x738=((1.872e-5)*sj4);
IkReal x739=((4.32e-6)*sj4);
IkReal x740=((9.07952)*sj4);
IkReal x741=(px*sj0);
IkReal x742=(cj0*py);
IkReal x743=((4.68e-6)*sj4);
IkReal x744=((9.36e-6)*sj4);
IkReal x745=(cj0*cj3*r12);
IkReal x746=((1.872e-5)*x730);
IkReal x747=(cj0*cj4*r12);
IkReal x748=(cj4*x743);
IkReal x749=((4.0)*x730);
IkReal x750=((9.36e-6)*x730);
IkReal x751=(x729*x731);
IkReal x752=(cj3*x731*x735);
IkReal x753=(((x739*x745))+(((2.26988)*x747))+(((4.0)*x741*x751))+((x741*x749))+(((2.26988)*sj4*x732))+((x729*x743*x747))+((x735*x748)));
IkReal x754=(((x742*x749))+((x729*x735*x748))+(((4.68e-6)*x730*x732))+(((4.68e-6)*x731*x732))+((cj3*x735*x739))+((x743*x747))+(((4.0)*x742*x751))+(((2.26988)*cj4*x735))+(((4.32e-6)*x733)));
IkReal x755=(((x745*x750))+(((8.64e-6)*sj4*x732))+(((8.64e-6)*x747))+(((-9.36e-6)*x752))+(((4.53976)*x733))+(((-8.64e-6)*cj4*x735))+(((-1.0)*x737*x751))+((cj3*x734*x735))+((x729*x733*x744))+(((-1.0)*x730*x737))+(((-1.0)*x734*x745))+(((-1.0)*x733*x744))+(((-1.0)*cj3*x735*x750))+(((9.36e-6)*x731*x745)));
IkReal x756=(x753+(((-1.0)*x754)));
IkReal x757=(x754+(((-1.0)*x753)));
op[0]=x756;
op[1]=x755;
op[2]=x756;
op[3]=((((1.872e-5)*x731*x745))+(((9.07952)*x733))+((x745*x746))+(((-1.872e-5)*x752))+((cj3*x735*x740))+(((1.728e-5)*x747))+((x729*x733*x738))+(((-1.0)*x733*x738))+(((1.728e-5)*sj4*x732))+(((-1.0)*cj3*x735*x746))+(((-1.0)*x730*x736))+(((-1.0)*x740*x745))+(((-1.728e-5)*cj4*x735))+(((-1.0)*x736*x751)));
op[4]=x757;
op[5]=x755;
op[6]=x757;
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

j1evalpoly[0]=((((-2.92)*(cj3*cj3)*(sj4*sj4)))+(((4.0)*pz*(cj4*cj4)))+(((-2.92)*(cj4*cj4)))+(((htj1*htj1)*(((((4.0)*pz*(cj4*cj4)))+(((-4.68e-6)*cj0*cj3*r12*(cj4*cj4)))+(((-2.26988)*cj3*r02*sj0*sj4))+(((4.68e-6)*cj3*r02*sj0*(cj4*cj4)))+(((-4.32e-6)*cj3*r22*sj4))+(((4.32e-6)*cj4*r02*sj0))+(((-8.76)*(cj3*cj3)*(sj4*sj4)))+(((-8.76)*(cj4*cj4)))+(((-4.68e-6)*cj0*cj3*r12*(sj4*sj4)))+(((4.68e-6)*cj3*r02*sj0*(sj4*sj4)))+(((-4.32e-6)*cj0*cj4*r12))+(((-2.26988)*cj4*r22))+(((4.0)*pz*(cj3*cj3)*(sj4*sj4)))+(((-4.68e-6)*cj4*r22*sj4*(cj3*cj3)))+(((4.68e-6)*cj4*r22*sj4))+(((2.26988)*cj0*cj3*r12*sj4))))))+(((-4.68e-6)*cj0*cj3*r12*(cj4*cj4)))+(((-2.26988)*cj3*r02*sj0*sj4))+(((4.68e-6)*cj3*r02*sj0*(cj4*cj4)))+(((-4.32e-6)*cj3*r22*sj4))+(((4.32e-6)*cj4*r02*sj0))+(((-4.68e-6)*cj0*cj3*r12*(sj4*sj4)))+(((4.68e-6)*cj3*r02*sj0*(sj4*sj4)))+(((-4.32e-6)*cj0*cj4*r12))+(((-2.26988)*cj4*r22))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-2.92)*(cj3*cj3)*(sj4*sj4)))+(((-2.92)*(cj4*cj4)))+(((-4.68e-6)*cj3*r02*sj0*(sj4*sj4)))+(((-4.68e-6)*cj4*r22*sj4))+(((-4.0)*pz*(cj4*cj4)))+(((-4.68e-6)*cj3*r02*sj0*(cj4*cj4)))+(((-4.0)*pz*(cj3*cj3)*(sj4*sj4)))+(((4.32e-6)*cj0*cj4*r12))+(((-2.26988)*cj0*cj3*r12*sj4))+(((2.26988)*cj4*r22))+(((-4.32e-6)*cj4*r02*sj0))+(((4.68e-6)*cj0*cj3*r12*(sj4*sj4)))+(((4.32e-6)*cj3*r22*sj4))+(((4.68e-6)*cj4*r22*sj4*(cj3*cj3)))+(((4.68e-6)*cj0*cj3*r12*(cj4*cj4)))+(((2.26988)*cj3*r02*sj0*sj4))))))+(((htj1*htj1*htj1*htj1*htj1)*(((((-8.0)*px*sj0*(cj3*cj3)*(sj4*sj4)))+(((-4.53976)*cj0*cj4*r12))+(((9.36e-6)*cj0*cj4*r12*sj4))+(((4.53976)*cj4*r02*sj0))+(((-9.36e-6)*cj4*r02*sj0*sj4))+(((9.36e-6)*cj3*r22*(sj4*sj4)))+(((-8.0)*px*sj0*(cj4*cj4)))+(((9.36e-6)*cj3*r22*(cj4*cj4)))+(((8.0)*cj0*py*(cj4*cj4)))+(((-4.53976)*cj3*r22*sj4))+(((8.0)*cj0*py*(cj3*cj3)*(sj4*sj4)))+(((8.64e-6)*cj3*r02*sj0*sj4))+(((9.36e-6)*cj4*r02*sj0*sj4*(cj3*cj3)))+(((8.64e-6)*cj4*r22))+(((-9.36e-6)*cj0*cj4*r12*sj4*(cj3*cj3)))+(((-8.64e-6)*cj0*cj3*r12*sj4))))))+(((htj1*htj1*htj1)*(((((-16.0)*px*sj0*(cj4*cj4)))+(((-1.872e-5)*cj0*cj4*r12*sj4*(cj3*cj3)))+(((-9.07952)*cj0*cj4*r12))+(((1.872e-5)*cj4*r02*sj0*sj4*(cj3*cj3)))+(((1.872e-5)*cj3*r22*(sj4*sj4)))+(((-1.728e-5)*cj0*cj3*r12*sj4))+(((-9.07952)*cj3*r22*sj4))+(((-16.0)*px*sj0*(cj3*cj3)*(sj4*sj4)))+(((9.07952)*cj4*r02*sj0))+(((16.0)*cj0*py*(cj3*cj3)*(sj4*sj4)))+(((1.872e-5)*cj0*cj4*r12*sj4))+(((1.872e-5)*cj3*r22*(cj4*cj4)))+(((1.728e-5)*cj4*r22))+(((1.728e-5)*cj3*r02*sj0*sj4))+(((16.0)*cj0*py*(cj4*cj4)))+(((-1.872e-5)*cj4*r02*sj0*sj4))))))+((htj1*(((((-8.0)*px*sj0*(cj3*cj3)*(sj4*sj4)))+(((-4.53976)*cj0*cj4*r12))+(((9.36e-6)*cj0*cj4*r12*sj4))+(((4.53976)*cj4*r02*sj0))+(((-9.36e-6)*cj4*r02*sj0*sj4))+(((9.36e-6)*cj3*r22*(sj4*sj4)))+(((-8.0)*px*sj0*(cj4*cj4)))+(((9.36e-6)*cj3*r22*(cj4*cj4)))+(((8.0)*cj0*py*(cj4*cj4)))+(((-4.53976)*cj3*r22*sj4))+(((8.0)*cj0*py*(cj3*cj3)*(sj4*sj4)))+(((8.64e-6)*cj3*r02*sj0*sj4))+(((9.36e-6)*cj4*r02*sj0*sj4*(cj3*cj3)))+(((8.64e-6)*cj4*r22))+(((-9.36e-6)*cj0*cj4*r12*sj4*(cj3*cj3)))+(((-8.64e-6)*cj0*cj3*r12*sj4))))))+(((4.0)*pz*(cj3*cj3)*(sj4*sj4)))+(((-4.68e-6)*cj4*r22*sj4*(cj3*cj3)))+(((4.68e-6)*cj4*r22*sj4))+(((htj1*htj1*htj1*htj1)*(((((-4.68e-6)*cj3*r02*sj0*(sj4*sj4)))+(((-4.68e-6)*cj4*r22*sj4))+(((-4.0)*pz*(cj4*cj4)))+(((-4.68e-6)*cj3*r02*sj0*(cj4*cj4)))+(((-4.0)*pz*(cj3*cj3)*(sj4*sj4)))+(((4.32e-6)*cj0*cj4*r12))+(((-2.26988)*cj0*cj3*r12*sj4))+(((-8.76)*(cj3*cj3)*(sj4*sj4)))+(((2.26988)*cj4*r22))+(((-8.76)*(cj4*cj4)))+(((-4.32e-6)*cj4*r02*sj0))+(((4.68e-6)*cj0*cj3*r12*(sj4*sj4)))+(((4.32e-6)*cj3*r22*sj4))+(((4.68e-6)*cj4*r22*sj4*(cj3*cj3)))+(((4.68e-6)*cj0*cj3*r12*(cj4*cj4)))+(((2.26988)*cj3*r02*sj0*sj4))))))+(((2.26988)*cj0*cj3*r12*sj4)));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[2];
IkReal x758=((-1.0)*r21);
CheckValue<IkReal> x761 = IKatan2WithCheck(IkReal(r20),IkReal(x758),IKFAST_ATAN2_MAGTHRESH);
if(!x761.valid){
continue;
}
IkReal x759=((-1.0)*(x761.value));
IkReal x760=x463;
sj5=gconst1;
cj5=gconst2;
j5=x759;
IkReal gconst0=x759;
IkReal gconst1=((-1.0)*r20*x760);
IkReal gconst2=(x758*x760);
IkReal x762=cj3*cj3;
IkReal x763=cj4*cj4;
IkReal x764=((((-1.0)*x762*x763))+x762+x763);
j2eval[0]=x764;
j2eval[1]=IKsign(x764);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x765=((-1.0)*r21);
CheckValue<IkReal> x768 = IKatan2WithCheck(IkReal(r20),IkReal(x765),IKFAST_ATAN2_MAGTHRESH);
if(!x768.valid){
continue;
}
IkReal x766=((-1.0)*(x768.value));
IkReal x767=x463;
sj5=gconst1;
cj5=gconst2;
j5=x766;
IkReal gconst0=x766;
IkReal gconst1=((-1.0)*r20*x767);
IkReal gconst2=(x765*x767);
IkReal x769=(cj3*sj4);
j2eval[0]=((((-525435.185185185)*x769))+cj4+(((1.08333333333333)*cj3)));
j2eval[1]=IKsign(((((-0.56747)*x769))+(((1.17e-6)*cj3))+(((1.08e-6)*cj4))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x770=((-1.0)*r21);
CheckValue<IkReal> x773 = IKatan2WithCheck(IkReal(r20),IkReal(x770),IKFAST_ATAN2_MAGTHRESH);
if(!x773.valid){
continue;
}
IkReal x771=((-1.0)*(x773.value));
IkReal x772=x463;
sj5=gconst1;
cj5=gconst2;
j5=x771;
IkReal gconst0=x771;
IkReal gconst1=((-1.0)*r20*x772);
IkReal gconst2=(x770*x772);
IkReal x774=cj3*cj3;
IkReal x775=(cj4*sj4);
IkReal x776=(cj3*sj4);
j2eval[0]=((((-525435.185185185)*cj4))+(((-1.08333333333333)*x774*x775))+(((-1.0)*x776))+(((1.08333333333333)*x775)));
j2eval[1]=IKsign(((((-1.08e-6)*x776))+(((-1.17e-6)*x774*x775))+(((-0.56747)*cj4))+(((1.17e-6)*x775))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x777=((3.35381986224151e-6)*cj1);
IkReal x778=(px*sj0);
IkReal x779=((1.76221132708977)*sj1);
IkReal x780=((1.76221132708977)*cj1);
IkReal x781=((3.35381986224151e-6)*sj1);
IkReal x782=(cj0*py);
IkReal x783=(sj1*x782);
if( IKabs(((2.4482884994363e-6)+((pz*x779))+(((-1.0)*x781*x782))+((x778*x781))+((x778*x780))+(((-1.0)*pz*x777))+(((-1.0)*x780*x782)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.28641426877553)+(((-1.0)*x778*x779))+((x777*x778))+(((-1.0)*x777*x782))+((x779*x782))+((pz*x781))+((pz*x780)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.4482884994363e-6)+((pz*x779))+(((-1.0)*x781*x782))+((x778*x781))+((x778*x780))+(((-1.0)*pz*x777))+(((-1.0)*x780*x782))))+IKsqr(((-1.28641426877553)+(((-1.0)*x778*x779))+((x777*x778))+(((-1.0)*x777*x782))+((x779*x782))+((pz*x781))+((pz*x780))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((2.4482884994363e-6)+((pz*x779))+(((-1.0)*x781*x782))+((x778*x781))+((x778*x780))+(((-1.0)*pz*x777))+(((-1.0)*x780*x782))), ((-1.28641426877553)+(((-1.0)*x778*x779))+((x777*x778))+(((-1.0)*x777*x782))+((x779*x782))+((pz*x781))+((pz*x780))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x784=IKcos(j2);
IkReal x785=IKsin(j2);
IkReal x786=(cj1*sj0);
IkReal x787=(gconst2*sj1);
IkReal x788=(cj1*gconst2);
IkReal x789=((1.0)*gconst1);
IkReal x790=((1.0)*cj1);
IkReal x791=(cj0*cj1);
IkReal x792=(gconst1*sj1);
IkReal x793=(r00*sj0);
IkReal x794=(sj0*sj1);
IkReal x795=(cj0*sj1);
IkReal x796=((1.0)*x785);
IkReal x797=((1.0)*cj0*r11);
IkReal x798=((1.0)*cj0*r10);
evalcond[0]=((((-1.08e-6)*x784))+(((-1.0)*cj0*py*x790))+(((-0.56746883)*x785))+((px*x786))+((pz*sj1)));
evalcond[1]=((0.73)+(((-1.08e-6)*x785))+((px*x794))+(((0.56746883)*x784))+(((-1.0)*pz*x790))+(((-1.0)*py*x795)));
evalcond[2]=(((r20*x792))+(((-1.0)*x796))+(((-1.0)*r10*x789*x791))+((gconst2*r01*x786))+(((-1.0)*x788*x797))+((gconst1*r00*x786))+((r21*x787)));
evalcond[3]=((((-1.0)*r21*x788))+((r01*sj0*x787))+(((-1.0)*r10*x789*x795))+(((-1.0)*x787*x797))+(((-1.0)*cj1*r20*x789))+((x792*x793))+x784);
evalcond[4]=(((r20*x787))+(((-1.0)*r01*x786*x789))+((gconst2*r00*x786))+(((-1.0)*x788*x798))+(((-1.0)*r21*sj1*x789))+((gconst1*r11*x791))+(((-1.0)*x784)));
evalcond[5]=(((cj0*r11*x792))+(((-1.0)*x796))+(((-1.0)*r01*x789*x794))+((x787*x793))+(((-1.0)*r20*x788))+(((-1.0)*x787*x798))+((cj1*gconst1*r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x799=(cj1*pz);
IkReal x800=(cj0*py);
IkReal x801=((1.76220406051003)*sj1);
IkReal x802=((3.35379220296043e-6)*sj1);
IkReal x803=(px*sj0);
IkReal x804=((3.35379220296043e-6)*cj1);
IkReal x805=((1.76220406051003)*x803);
if( IKabs(((2.44826830816111e-6)+(((-3.35379220296043e-6)*x799))+((cj1*x805))+(((-1.76220406051003)*cj1*x800))+(((-1.0)*x800*x802))+((pz*x801))+((x802*x803)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.28640896417232)+((x800*x801))+((x803*x804))+(((-1.0)*x800*x804))+(((1.76220406051003)*x799))+((pz*x802))+(((-1.0)*x801*x803)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.44826830816111e-6)+(((-3.35379220296043e-6)*x799))+((cj1*x805))+(((-1.76220406051003)*cj1*x800))+(((-1.0)*x800*x802))+((pz*x801))+((x802*x803))))+IKsqr(((-1.28640896417232)+((x800*x801))+((x803*x804))+(((-1.0)*x800*x804))+(((1.76220406051003)*x799))+((pz*x802))+(((-1.0)*x801*x803))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((2.44826830816111e-6)+(((-3.35379220296043e-6)*x799))+((cj1*x805))+(((-1.76220406051003)*cj1*x800))+(((-1.0)*x800*x802))+((pz*x801))+((x802*x803))), ((-1.28640896417232)+((x800*x801))+((x803*x804))+(((-1.0)*x800*x804))+(((1.76220406051003)*x799))+((pz*x802))+(((-1.0)*x801*x803))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x806=IKcos(j2);
IkReal x807=IKsin(j2);
IkReal x808=(cj1*sj0);
IkReal x809=(gconst2*sj1);
IkReal x810=(cj1*gconst2);
IkReal x811=((1.0)*gconst1);
IkReal x812=((1.0)*cj1);
IkReal x813=(cj0*cj1);
IkReal x814=(gconst1*sj1);
IkReal x815=(r00*sj0);
IkReal x816=(sj0*sj1);
IkReal x817=(cj0*sj1);
IkReal x818=((1.0)*x806);
IkReal x819=((1.0)*cj0*r11);
IkReal x820=((1.0)*cj0*r10);
evalcond[0]=((((-1.0)*cj0*py*x812))+(((-1.08e-6)*x806))+(((-0.56747117)*x807))+((px*x808))+((pz*sj1)));
evalcond[1]=((0.73)+((px*x816))+(((-1.08e-6)*x807))+(((-1.0)*pz*x812))+(((0.56747117)*x806))+(((-1.0)*py*x817)));
evalcond[2]=(((r20*x814))+((r21*x809))+(((-1.0)*r10*x811*x813))+((gconst1*r00*x808))+(((-1.0)*x810*x819))+x807+((gconst2*r01*x808)));
evalcond[3]=(((gconst2*r00*x808))+(((-1.0)*r01*x808*x811))+(((-1.0)*x818))+((gconst1*r11*x813))+(((-1.0)*x810*x820))+(((-1.0)*r21*sj1*x811))+((r20*x809)));
evalcond[4]=((((-1.0)*r01*x811*x816))+(((-1.0)*x807))+((x809*x815))+(((-1.0)*x809*x820))+(((-1.0)*r20*x810))+((cj0*r11*x814))+((cj1*gconst1*r21)));
evalcond[5]=((((-1.0)*cj1*r20*x811))+(((-1.0)*r10*x811*x817))+(((-1.0)*x809*x819))+(((-1.0)*x818))+((x814*x815))+(((-1.0)*r21*x810))+((r01*sj0*x809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x821=((3.35381986224151e-6)*cj1);
IkReal x822=(px*sj0);
IkReal x823=((1.76221132708977)*sj1);
IkReal x824=((1.76221132708977)*cj1);
IkReal x825=((3.35381986224151e-6)*sj1);
IkReal x826=(cj0*py);
IkReal x827=(sj1*x826);
if( IKabs(((2.4482884994363e-6)+((pz*x823))+(((-1.0)*pz*x821))+(((-1.0)*x824*x826))+((x822*x825))+((x822*x824))+(((-1.0)*x825*x826)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.28641426877553)+((pz*x824))+((pz*x825))+(((-1.0)*x822*x823))+((x821*x822))+(((-1.0)*x821*x826))+((x823*x826)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.4482884994363e-6)+((pz*x823))+(((-1.0)*pz*x821))+(((-1.0)*x824*x826))+((x822*x825))+((x822*x824))+(((-1.0)*x825*x826))))+IKsqr(((-1.28641426877553)+((pz*x824))+((pz*x825))+(((-1.0)*x822*x823))+((x821*x822))+(((-1.0)*x821*x826))+((x823*x826))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((2.4482884994363e-6)+((pz*x823))+(((-1.0)*pz*x821))+(((-1.0)*x824*x826))+((x822*x825))+((x822*x824))+(((-1.0)*x825*x826))), ((-1.28641426877553)+((pz*x824))+((pz*x825))+(((-1.0)*x822*x823))+((x821*x822))+(((-1.0)*x821*x826))+((x823*x826))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x828=IKcos(j2);
IkReal x829=IKsin(j2);
IkReal x830=(cj1*sj0);
IkReal x831=(gconst2*sj1);
IkReal x832=(cj1*gconst2);
IkReal x833=((1.0)*gconst1);
IkReal x834=((1.0)*cj1);
IkReal x835=(cj0*cj1);
IkReal x836=(gconst1*sj1);
IkReal x837=(r00*sj0);
IkReal x838=(cj0*sj1);
IkReal x839=(sj0*sj1);
IkReal x840=((1.0)*cj0*r11);
IkReal x841=((1.0)*cj0*r10);
evalcond[0]=((((-1.0)*cj0*py*x834))+(((-0.56746883)*x829))+((pz*sj1))+(((-1.08e-6)*x828))+((px*x830)));
evalcond[1]=((0.73)+(((0.56746883)*x828))+(((-1.0)*pz*x834))+(((-1.08e-6)*x829))+(((-1.0)*py*x838))+((px*x839)));
evalcond[2]=((((-1.0)*r01*x830*x833))+((r20*x831))+((gconst2*r00*x830))+(((-1.0)*r21*sj1*x833))+((gconst1*r11*x835))+x828+(((-1.0)*x832*x841)));
evalcond[3]=((((-1.0)*r01*x833*x839))+(((-1.0)*x831*x841))+((x831*x837))+(((-1.0)*r20*x832))+((cj0*r11*x836))+((cj1*gconst1*r21))+x829);
evalcond[4]=((((-1.0)*r10*x833*x835))+((r20*x836))+(((-1.0)*x829))+((r21*x831))+((gconst2*r01*x830))+((gconst1*r00*x830))+(((-1.0)*x832*x840)));
evalcond[5]=((((-1.0)*x831*x840))+(((-1.0)*r10*x833*x838))+((r01*sj0*x831))+((x836*x837))+x828+(((-1.0)*r21*x832))+(((-1.0)*cj1*r20*x833)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x842=(cj1*pz);
IkReal x843=(cj0*py);
IkReal x844=((1.76220406051003)*sj1);
IkReal x845=((3.35379220296043e-6)*sj1);
IkReal x846=(px*sj0);
IkReal x847=((3.35379220296043e-6)*cj1);
IkReal x848=((1.76220406051003)*x846);
if( IKabs(((2.44826830816111e-6)+((cj1*x848))+(((-3.35379220296043e-6)*x842))+((pz*x844))+(((-1.0)*x843*x845))+((x845*x846))+(((-1.76220406051003)*cj1*x843)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.28640896417232)+((x846*x847))+((x843*x844))+(((1.76220406051003)*x842))+((pz*x845))+(((-1.0)*x843*x847))+(((-1.0)*x844*x846)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.44826830816111e-6)+((cj1*x848))+(((-3.35379220296043e-6)*x842))+((pz*x844))+(((-1.0)*x843*x845))+((x845*x846))+(((-1.76220406051003)*cj1*x843))))+IKsqr(((-1.28640896417232)+((x846*x847))+((x843*x844))+(((1.76220406051003)*x842))+((pz*x845))+(((-1.0)*x843*x847))+(((-1.0)*x844*x846))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((2.44826830816111e-6)+((cj1*x848))+(((-3.35379220296043e-6)*x842))+((pz*x844))+(((-1.0)*x843*x845))+((x845*x846))+(((-1.76220406051003)*cj1*x843))), ((-1.28640896417232)+((x846*x847))+((x843*x844))+(((1.76220406051003)*x842))+((pz*x845))+(((-1.0)*x843*x847))+(((-1.0)*x844*x846))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x849=IKcos(j2);
IkReal x850=IKsin(j2);
IkReal x851=(cj1*sj0);
IkReal x852=(gconst2*sj1);
IkReal x853=(cj1*gconst2);
IkReal x854=((1.0)*gconst1);
IkReal x855=((1.0)*cj1);
IkReal x856=(cj0*cj1);
IkReal x857=(gconst1*sj1);
IkReal x858=(r00*sj0);
IkReal x859=(sj0*sj1);
IkReal x860=(cj0*sj1);
IkReal x861=((1.0)*cj0*r11);
IkReal x862=((1.0)*cj0*r10);
evalcond[0]=(((px*x851))+(((-1.08e-6)*x849))+(((-1.0)*cj0*py*x855))+((pz*sj1))+(((-0.56747117)*x850)));
evalcond[1]=((0.73)+(((-1.08e-6)*x850))+((px*x859))+(((-1.0)*py*x860))+(((-1.0)*pz*x855))+(((0.56747117)*x849)));
evalcond[2]=(((r21*x852))+((gconst2*r01*x851))+((gconst1*r00*x851))+(((-1.0)*x853*x861))+(((-1.0)*r10*x854*x856))+x850+((r20*x857)));
evalcond[3]=(((gconst1*r11*x856))+((gconst2*r00*x851))+(((-1.0)*r21*sj1*x854))+(((-1.0)*x853*x862))+x849+(((-1.0)*r01*x851*x854))+((r20*x852)));
evalcond[4]=((((-1.0)*r01*x854*x859))+(((-1.0)*x852*x862))+(((-1.0)*r20*x853))+((cj0*r11*x857))+((cj1*gconst1*r21))+((x852*x858))+x850);
evalcond[5]=((((-1.0)*r21*x853))+(((-1.0)*x852*x861))+(((-1.0)*r10*x854*x860))+(((-1.0)*cj1*r20*x854))+(((-1.0)*x849))+((x857*x858))+((r01*sj0*x852)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x863=(cj1*r22);
IkReal x864=((1.17e-6)*sj4);
IkReal x865=(cj3*sj0);
IkReal x866=((1.0)*sj4);
IkReal x867=(cj1*px);
IkReal x868=(r02*sj1);
IkReal x869=((1.17e-6)*cj4);
IkReal x870=(cj3*sj1);
IkReal x871=(cj0*r12);
IkReal x872=(cj3*sj4);
IkReal x873=((1.0)*cj4);
IkReal x874=(cj0*cj1*py);
CheckValue<IkReal> x875 = IKatan2WithCheck(IkReal(((((-1.08e-6)*sj0*x868))+(((-1.0)*pz*sj1*x873))+(((1.08e-6)*x863))+(((1.08e-6)*sj1*x871))+(((-1.0)*sj0*x867*x873))+((cj4*x874))+((x869*x870*x871))+(((-1.0)*x865*x868*x869))+((cj3*x863*x869)))),IkReal(((((-0.56747)*x863))+((x872*x874))+(((-1.0)*pz*x866*x870))+(((-0.56747)*sj1*x871))+((x863*x864))+(((-1.0)*sj0*x864*x868))+(((-1.0)*x865*x866*x867))+(((0.56747)*sj0*x868))+((sj1*x864*x871)))),IKFAST_ATAN2_MAGTHRESH);
if(!x875.valid){
continue;
}
CheckValue<IkReal> x876=IKPowWithIntegerCheck(IKsign(((((-1.08e-6)*x872))+(((-0.56747)*cj4))+(((-1.0)*cj4*x864*(cj3*cj3)))+((cj4*x864)))),-1);
if(!x876.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x875.value)+(((1.5707963267949)*(x876.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x877=IKcos(j2);
IkReal x878=IKsin(j2);
IkReal x879=(cj1*sj0);
IkReal x880=(cj3*cj4);
IkReal x881=((1.0)*cj1);
IkReal x882=(cj0*r10);
IkReal x883=(gconst2*sj1);
IkReal x884=(cj3*sj4);
IkReal x885=(cj0*r11);
IkReal x886=(gconst1*r21);
IkReal x887=(gconst1*sj1);
IkReal x888=(r00*sj0);
IkReal x889=((1.0)*r01);
IkReal x890=(sj0*sj1);
IkReal x891=(cj0*py);
IkReal x892=((1.0)*sj1);
IkReal x893=(cj0*r12);
IkReal x894=((1.0)*x878);
IkReal x895=((1.17e-6)*x878);
IkReal x896=((1.0)*x877);
IkReal x897=(sj4*x877);
evalcond[0]=((((-1.0)*x884*x896))+((r22*sj1))+(((-1.0)*x881*x893))+((r02*x879))+(((-1.0)*cj4*x894)));
evalcond[1]=(((r02*x890))+(((-1.0)*x892*x893))+(((-1.0)*x884*x894))+((cj4*x877))+(((-1.0)*r22*x881)));
evalcond[2]=(((sj4*x895))+(((-1.08e-6)*x877))+(((-1.0)*x881*x891))+((px*x879))+((pz*sj1))+(((-1.17e-6)*x877*x880))+(((-0.56747)*x878)));
evalcond[3]=((0.73)+(((-1.08e-6)*x878))+((px*x890))+(((-1.0)*pz*x881))+(((-1.17e-6)*x897))+(((0.56747)*x877))+(((-1.0)*x880*x895))+(((-1.0)*x891*x892)));
evalcond[4]=(((gconst2*r00*x879))+((cj1*gconst1*x885))+(((-1.0)*gconst2*x881*x882))+((r20*x883))+(((-1.0)*sj3*x896))+(((-1.0)*x886*x892))+(((-1.0)*gconst1*x879*x889)));
evalcond[5]=((((-1.0)*x882*x883))+((x883*x888))+(((-1.0)*gconst2*r20*x881))+(((-1.0)*sj0*x887*x889))+((cj1*x886))+((x885*x887))+(((-1.0)*sj3*x894)));
evalcond[6]=(((gconst1*r00*x879))+(((-1.0)*gconst2*x881*x885))+((x877*x880))+((r20*x887))+(((-1.0)*sj4*x894))+(((-1.0)*gconst1*x881*x882))+((r21*x883))+((gconst2*r01*x879)));
evalcond[7]=(((x887*x888))+((r01*sj0*x883))+(((-1.0)*x883*x885))+(((-1.0)*x882*x887))+(((-1.0)*gconst2*r21*x881))+(((-1.0)*gconst1*r20*x881))+((x878*x880))+x897);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x898=(r22*sj1);
IkReal x899=((1.17e-6)*sj4);
IkReal x900=(pz*sj1);
IkReal x901=(cj0*cj1);
IkReal x902=((1.17e-6)*cj3);
IkReal x903=(cj3*sj4);
IkReal x904=(cj1*px*sj0);
IkReal x905=((1.0)*x903);
IkReal x906=(cj1*r02*sj0);
CheckValue<IkReal> x907 = IKatan2WithCheck(IkReal(((((-1.0)*x900*x905))+(((-1.08e-6)*r12*x901))+(((-1.0)*cj4*r12*x901*x902))+((cj4*x898*x902))+((py*x901*x903))+(((-1.0)*x904*x905))+((cj4*x902*x906))+(((1.08e-6)*x898))+(((1.08e-6)*x906)))),IkReal((((x898*x899))+(((-0.56747)*x898))+((x899*x906))+(((-1.0)*r12*x899*x901))+((cj4*x900))+((cj4*x904))+(((-0.56747)*x906))+(((-1.0)*cj4*py*x901))+(((0.56747)*r12*x901)))),IKFAST_ATAN2_MAGTHRESH);
if(!x907.valid){
continue;
}
CheckValue<IkReal> x908=IKPowWithIntegerCheck(IKsign(((((1.08e-6)*cj4))+(((-0.56747)*x903))+x902)),-1);
if(!x908.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x907.value)+(((1.5707963267949)*(x908.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x909=IKcos(j2);
IkReal x910=IKsin(j2);
IkReal x911=(cj1*sj0);
IkReal x912=(cj3*cj4);
IkReal x913=((1.0)*cj1);
IkReal x914=(cj0*r10);
IkReal x915=(gconst2*sj1);
IkReal x916=(cj3*sj4);
IkReal x917=(cj0*r11);
IkReal x918=(gconst1*r21);
IkReal x919=(gconst1*sj1);
IkReal x920=(r00*sj0);
IkReal x921=((1.0)*r01);
IkReal x922=(sj0*sj1);
IkReal x923=(cj0*py);
IkReal x924=((1.0)*sj1);
IkReal x925=(cj0*r12);
IkReal x926=((1.0)*x910);
IkReal x927=((1.17e-6)*x910);
IkReal x928=((1.0)*x909);
IkReal x929=(sj4*x909);
evalcond[0]=(((r22*sj1))+((r02*x911))+(((-1.0)*x913*x925))+(((-1.0)*cj4*x926))+(((-1.0)*x916*x928)));
evalcond[1]=((((-1.0)*r22*x913))+(((-1.0)*x924*x925))+((cj4*x909))+(((-1.0)*x916*x926))+((r02*x922)));
evalcond[2]=((((-1.17e-6)*x909*x912))+(((-1.08e-6)*x909))+((px*x911))+((sj4*x927))+(((-1.0)*x913*x923))+((pz*sj1))+(((-0.56747)*x910)));
evalcond[3]=((0.73)+(((-1.08e-6)*x910))+(((-1.0)*x912*x927))+(((0.56747)*x909))+(((-1.0)*pz*x913))+(((-1.17e-6)*x929))+((px*x922))+(((-1.0)*x923*x924)));
evalcond[4]=((((-1.0)*sj3*x928))+((cj1*gconst1*x917))+((r20*x915))+(((-1.0)*gconst2*x913*x914))+((gconst2*r00*x911))+(((-1.0)*x918*x924))+(((-1.0)*gconst1*x911*x921)));
evalcond[5]=(((x917*x919))+((x915*x920))+(((-1.0)*sj3*x926))+(((-1.0)*gconst2*r20*x913))+(((-1.0)*sj0*x919*x921))+(((-1.0)*x914*x915))+((cj1*x918)));
evalcond[6]=(((x909*x912))+((r20*x919))+(((-1.0)*sj4*x926))+(((-1.0)*gconst1*x913*x914))+(((-1.0)*gconst2*x913*x917))+((gconst2*r01*x911))+((gconst1*r00*x911))+((r21*x915)));
evalcond[7]=((((-1.0)*gconst2*r21*x913))+((x919*x920))+((x910*x912))+(((-1.0)*gconst1*r20*x913))+(((-1.0)*x915*x917))+((r01*sj0*x915))+x929+(((-1.0)*x914*x919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x930=cj3*cj3;
IkReal x931=cj4*cj4;
IkReal x932=(cj0*r12);
IkReal x933=(cj1*cj4);
IkReal x934=(r22*sj1);
IkReal x935=(cj3*sj4);
IkReal x936=(r02*sj0);
IkReal x937=((1.0)*sj1);
IkReal x938=((1.0)*cj1*x935);
CheckValue<IkReal> x939=IKPowWithIntegerCheck(IKsign(((((-1.0)*x930*x931))+x931+x930)),-1);
if(!x939.valid){
continue;
}
CheckValue<IkReal> x940 = IKatan2WithCheck(IkReal(((((-1.0)*x932*x935*x937))+(((-1.0)*r22*x938))+((sj1*x935*x936))+(((-1.0)*x932*x933))+((cj4*x934))+((x933*x936)))),IkReal((((r22*x933))+((cj1*x935*x936))+((cj4*sj1*x932))+(((-1.0)*x932*x938))+(((-1.0)*cj4*x936*x937))+((x934*x935)))),IKFAST_ATAN2_MAGTHRESH);
if(!x940.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x939.value)))+(x940.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x941=IKcos(j2);
IkReal x942=IKsin(j2);
IkReal x943=(cj1*sj0);
IkReal x944=(cj3*cj4);
IkReal x945=((1.0)*cj1);
IkReal x946=(cj0*r10);
IkReal x947=(gconst2*sj1);
IkReal x948=(cj3*sj4);
IkReal x949=(cj0*r11);
IkReal x950=(gconst1*r21);
IkReal x951=(gconst1*sj1);
IkReal x952=(r00*sj0);
IkReal x953=((1.0)*r01);
IkReal x954=(sj0*sj1);
IkReal x955=(cj0*py);
IkReal x956=((1.0)*sj1);
IkReal x957=(cj0*r12);
IkReal x958=((1.0)*x942);
IkReal x959=((1.17e-6)*x942);
IkReal x960=((1.0)*x941);
IkReal x961=(sj4*x941);
evalcond[0]=(((r02*x943))+((r22*sj1))+(((-1.0)*cj4*x958))+(((-1.0)*x945*x957))+(((-1.0)*x948*x960)));
evalcond[1]=((((-1.0)*x956*x957))+((r02*x954))+(((-1.0)*r22*x945))+(((-1.0)*x948*x958))+((cj4*x941)));
evalcond[2]=(((sj4*x959))+(((-0.56747)*x942))+((px*x943))+(((-1.08e-6)*x941))+(((-1.17e-6)*x941*x944))+(((-1.0)*x945*x955))+((pz*sj1)));
evalcond[3]=((0.73)+((px*x954))+(((-1.0)*pz*x945))+(((0.56747)*x941))+(((-1.0)*x944*x959))+(((-1.17e-6)*x961))+(((-1.08e-6)*x942))+(((-1.0)*x955*x956)));
evalcond[4]=(((gconst2*r00*x943))+(((-1.0)*gconst2*x945*x946))+((cj1*gconst1*x949))+(((-1.0)*gconst1*x943*x953))+(((-1.0)*sj3*x960))+(((-1.0)*x950*x956))+((r20*x947)));
evalcond[5]=((((-1.0)*gconst2*r20*x945))+(((-1.0)*x946*x947))+((x949*x951))+((cj1*x950))+(((-1.0)*sj0*x951*x953))+((x947*x952))+(((-1.0)*sj3*x958)));
evalcond[6]=(((r21*x947))+((gconst2*r01*x943))+(((-1.0)*gconst1*x945*x946))+(((-1.0)*gconst2*x945*x949))+((gconst1*r00*x943))+((x941*x944))+((r20*x951))+(((-1.0)*sj4*x958)));
evalcond[7]=(((x951*x952))+(((-1.0)*x947*x949))+(((-1.0)*gconst2*r21*x945))+(((-1.0)*x946*x951))+((x942*x944))+(((-1.0)*gconst1*r20*x945))+((r01*sj0*x947))+x961);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x964 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x964)==0){
continue;
}
IkReal x962=pow(x964,-0.5);
IkReal x963=((1.0)*x962);
CheckValue<IkReal> x965 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x965.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x965.value))));
IkReal gconst4=(r20*x963);
IkReal gconst5=(r21*x963);
CheckValue<IkReal> x966 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x966.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x966.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
CheckValue<IkReal> x970 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x970.valid){
continue;
}
IkReal x967=((1.0)*(x970.value));
IkReal x968=x962;
IkReal x969=((1.0)*x968);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x967)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x967)));
IkReal gconst4=(r20*x969);
IkReal gconst5=(r21*x969);
IkReal x971=((100000000.0)*sj3*sj4);
IkReal x972=((117.0)*cj4*sj3);
j0eval[0]=rxp2_2;
j0eval[1]=((IKabs(((((-1.0)*r02*x972))+((px*x971)))))+(IKabs(((((-1.0)*py*x971))+((r12*x972))))));
j0eval[2]=IKsign(rxp2_2);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x973=(sj3*sj4);
IkReal x974=((1.0)*gconst5);
IkReal x975=((1.0)*gconst4);
CheckValue<IkReal> x976=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x975))+(((-1.0)*r21*x974)))),-1);
if(!x976.valid){
continue;
}
CheckValue<IkReal> x977 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x973*x974))+(((-1.0)*cj3*r02))+((gconst4*r01*x973)))),IkReal((((gconst5*r10*x973))+(((-1.0)*r11*x973*x975))+((cj3*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x977.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x976.value)))+(x977.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x978=IKcos(j0);
IkReal x979=IKsin(j0);
IkReal x980=(cj4*sj3);
IkReal x981=((1.0)*x978);
IkReal x982=(gconst4*x979);
IkReal x983=((1.0)*x979);
evalcond[0]=((((-1.0)*sj3*sj4))+(((-1.0)*r12*x983))+(((-1.0)*r02*x981)));
evalcond[1]=((((-1.0)*px*x981))+(((-1.0)*py*x983))+(((-1.17e-6)*x980)));
evalcond[2]=(cj3+((r11*x982))+(((-1.0)*gconst5*r10*x983))+(((-1.0)*gconst5*r00*x981))+((gconst4*r01*x978)));
evalcond[3]=((((-1.0)*gconst5*r11*x983))+(((-1.0)*gconst4*r00*x981))+(((-1.0)*r10*x982))+x980+(((-1.0)*gconst5*r01*x981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x984=cj3*cj3;
IkReal x985=cj4*cj4;
IkReal x986=sj4*sj4;
IkReal x987=(cj3*r22);
IkReal x988=(cj4*r22);
IkReal x989=((4.53976)*sj4);
IkReal x990=(r02*sj0);
IkReal x991=((16.0)*pz);
IkReal x992=((8.0)*pz);
IkReal x993=((1.872e-5)*sj4);
IkReal x994=((4.32e-6)*sj4);
IkReal x995=((9.07952)*sj4);
IkReal x996=(px*sj0);
IkReal x997=(cj0*py);
IkReal x998=((4.68e-6)*sj4);
IkReal x999=((9.36e-6)*sj4);
IkReal x1000=(cj0*cj3*r12);
IkReal x1001=((1.872e-5)*x985);
IkReal x1002=(cj0*cj4*r12);
IkReal x1003=(cj4*x998);
IkReal x1004=((4.0)*x985);
IkReal x1005=((9.36e-6)*x985);
IkReal x1006=(x984*x986);
IkReal x1007=(cj3*x986*x990);
IkReal x1008=(((x1000*x994))+((x1003*x990))+((x1002*x984*x998))+(((2.26988)*x1002))+(((2.26988)*sj4*x987))+((x1004*x996))+(((4.0)*x1006*x996)));
IkReal x1009=((((4.32e-6)*x988))+((x1003*x984*x990))+(((2.26988)*cj4*x990))+((x1002*x998))+(((4.68e-6)*x986*x987))+((cj3*x990*x994))+(((4.68e-6)*x985*x987))+((x1004*x997))+(((4.0)*x1006*x997)));
IkReal x1010=((((-1.0)*x1000*x989))+(((-8.64e-6)*cj4*x990))+((x984*x988*x999))+(((8.64e-6)*sj4*x987))+((cj3*x989*x990))+((x1000*x1005))+(((8.64e-6)*x1002))+(((-1.0)*x985*x992))+(((-1.0)*cj3*x1005*x990))+(((4.53976)*x988))+(((-9.36e-6)*x1007))+(((9.36e-6)*x1000*x986))+(((-1.0)*x1006*x992))+(((-1.0)*x988*x999)));
IkReal x1011=(x1008+(((-1.0)*x1009)));
IkReal x1012=(x1009+(((-1.0)*x1008)));
op[0]=x1011;
op[1]=x1010;
op[2]=x1011;
op[3]=((((-1.728e-5)*cj4*x990))+((x984*x988*x993))+((x1000*x1001))+(((-1.0)*x985*x991))+(((9.07952)*x988))+(((1.872e-5)*x1000*x986))+(((1.728e-5)*sj4*x987))+(((-1.0)*x1000*x995))+(((-1.872e-5)*x1007))+(((1.728e-5)*x1002))+(((-1.0)*cj3*x1001*x990))+((cj3*x990*x995))+(((-1.0)*x1006*x991))+(((-1.0)*x988*x993)));
op[4]=x1012;
op[5]=x1010;
op[6]=x1012;
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

j1evalpoly[0]=((((-2.92)*(cj3*cj3)*(sj4*sj4)))+(((4.0)*pz*(cj4*cj4)))+(((-2.92)*(cj4*cj4)))+(((htj1*htj1)*(((((4.0)*pz*(cj4*cj4)))+(((-4.68e-6)*cj0*cj3*r12*(cj4*cj4)))+(((-2.26988)*cj3*r02*sj0*sj4))+(((4.68e-6)*cj3*r02*sj0*(cj4*cj4)))+(((-4.32e-6)*cj3*r22*sj4))+(((4.32e-6)*cj4*r02*sj0))+(((-8.76)*(cj3*cj3)*(sj4*sj4)))+(((-8.76)*(cj4*cj4)))+(((-4.68e-6)*cj0*cj3*r12*(sj4*sj4)))+(((4.68e-6)*cj3*r02*sj0*(sj4*sj4)))+(((-4.32e-6)*cj0*cj4*r12))+(((-2.26988)*cj4*r22))+(((4.0)*pz*(cj3*cj3)*(sj4*sj4)))+(((-4.68e-6)*cj4*r22*sj4*(cj3*cj3)))+(((4.68e-6)*cj4*r22*sj4))+(((2.26988)*cj0*cj3*r12*sj4))))))+(((-4.68e-6)*cj0*cj3*r12*(cj4*cj4)))+(((-2.26988)*cj3*r02*sj0*sj4))+(((4.68e-6)*cj3*r02*sj0*(cj4*cj4)))+(((-4.32e-6)*cj3*r22*sj4))+(((4.32e-6)*cj4*r02*sj0))+(((-4.68e-6)*cj0*cj3*r12*(sj4*sj4)))+(((4.68e-6)*cj3*r02*sj0*(sj4*sj4)))+(((-4.32e-6)*cj0*cj4*r12))+(((-2.26988)*cj4*r22))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-2.92)*(cj3*cj3)*(sj4*sj4)))+(((-2.92)*(cj4*cj4)))+(((-4.68e-6)*cj3*r02*sj0*(sj4*sj4)))+(((-4.68e-6)*cj4*r22*sj4))+(((-4.0)*pz*(cj4*cj4)))+(((-4.68e-6)*cj3*r02*sj0*(cj4*cj4)))+(((-4.0)*pz*(cj3*cj3)*(sj4*sj4)))+(((4.32e-6)*cj0*cj4*r12))+(((-2.26988)*cj0*cj3*r12*sj4))+(((2.26988)*cj4*r22))+(((-4.32e-6)*cj4*r02*sj0))+(((4.68e-6)*cj0*cj3*r12*(sj4*sj4)))+(((4.32e-6)*cj3*r22*sj4))+(((4.68e-6)*cj4*r22*sj4*(cj3*cj3)))+(((4.68e-6)*cj0*cj3*r12*(cj4*cj4)))+(((2.26988)*cj3*r02*sj0*sj4))))))+(((htj1*htj1*htj1*htj1*htj1)*(((((-8.0)*px*sj0*(cj3*cj3)*(sj4*sj4)))+(((-4.53976)*cj0*cj4*r12))+(((9.36e-6)*cj0*cj4*r12*sj4))+(((4.53976)*cj4*r02*sj0))+(((-9.36e-6)*cj4*r02*sj0*sj4))+(((9.36e-6)*cj3*r22*(sj4*sj4)))+(((-8.0)*px*sj0*(cj4*cj4)))+(((9.36e-6)*cj3*r22*(cj4*cj4)))+(((8.0)*cj0*py*(cj4*cj4)))+(((-4.53976)*cj3*r22*sj4))+(((8.0)*cj0*py*(cj3*cj3)*(sj4*sj4)))+(((8.64e-6)*cj3*r02*sj0*sj4))+(((9.36e-6)*cj4*r02*sj0*sj4*(cj3*cj3)))+(((8.64e-6)*cj4*r22))+(((-9.36e-6)*cj0*cj4*r12*sj4*(cj3*cj3)))+(((-8.64e-6)*cj0*cj3*r12*sj4))))))+(((htj1*htj1*htj1)*(((((-16.0)*px*sj0*(cj4*cj4)))+(((-1.872e-5)*cj0*cj4*r12*sj4*(cj3*cj3)))+(((-9.07952)*cj0*cj4*r12))+(((1.872e-5)*cj4*r02*sj0*sj4*(cj3*cj3)))+(((1.872e-5)*cj3*r22*(sj4*sj4)))+(((-1.728e-5)*cj0*cj3*r12*sj4))+(((-9.07952)*cj3*r22*sj4))+(((-16.0)*px*sj0*(cj3*cj3)*(sj4*sj4)))+(((9.07952)*cj4*r02*sj0))+(((16.0)*cj0*py*(cj3*cj3)*(sj4*sj4)))+(((1.872e-5)*cj0*cj4*r12*sj4))+(((1.872e-5)*cj3*r22*(cj4*cj4)))+(((1.728e-5)*cj4*r22))+(((1.728e-5)*cj3*r02*sj0*sj4))+(((16.0)*cj0*py*(cj4*cj4)))+(((-1.872e-5)*cj4*r02*sj0*sj4))))))+((htj1*(((((-8.0)*px*sj0*(cj3*cj3)*(sj4*sj4)))+(((-4.53976)*cj0*cj4*r12))+(((9.36e-6)*cj0*cj4*r12*sj4))+(((4.53976)*cj4*r02*sj0))+(((-9.36e-6)*cj4*r02*sj0*sj4))+(((9.36e-6)*cj3*r22*(sj4*sj4)))+(((-8.0)*px*sj0*(cj4*cj4)))+(((9.36e-6)*cj3*r22*(cj4*cj4)))+(((8.0)*cj0*py*(cj4*cj4)))+(((-4.53976)*cj3*r22*sj4))+(((8.0)*cj0*py*(cj3*cj3)*(sj4*sj4)))+(((8.64e-6)*cj3*r02*sj0*sj4))+(((9.36e-6)*cj4*r02*sj0*sj4*(cj3*cj3)))+(((8.64e-6)*cj4*r22))+(((-9.36e-6)*cj0*cj4*r12*sj4*(cj3*cj3)))+(((-8.64e-6)*cj0*cj3*r12*sj4))))))+(((4.0)*pz*(cj3*cj3)*(sj4*sj4)))+(((-4.68e-6)*cj4*r22*sj4*(cj3*cj3)))+(((4.68e-6)*cj4*r22*sj4))+(((htj1*htj1*htj1*htj1)*(((((-4.68e-6)*cj3*r02*sj0*(sj4*sj4)))+(((-4.68e-6)*cj4*r22*sj4))+(((-4.0)*pz*(cj4*cj4)))+(((-4.68e-6)*cj3*r02*sj0*(cj4*cj4)))+(((-4.0)*pz*(cj3*cj3)*(sj4*sj4)))+(((4.32e-6)*cj0*cj4*r12))+(((-2.26988)*cj0*cj3*r12*sj4))+(((-8.76)*(cj3*cj3)*(sj4*sj4)))+(((2.26988)*cj4*r22))+(((-8.76)*(cj4*cj4)))+(((-4.32e-6)*cj4*r02*sj0))+(((4.68e-6)*cj0*cj3*r12*(sj4*sj4)))+(((4.32e-6)*cj3*r22*sj4))+(((4.68e-6)*cj4*r22*sj4*(cj3*cj3)))+(((4.68e-6)*cj0*cj3*r12*(cj4*cj4)))+(((2.26988)*cj3*r02*sj0*sj4))))))+(((2.26988)*cj0*cj3*r12*sj4)));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[2];
CheckValue<IkReal> x1016 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x1016.valid){
continue;
}
IkReal x1013=((1.0)*(x1016.value));
IkReal x1014=x962;
IkReal x1015=((1.0)*x1014);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x1013)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x1013)));
IkReal gconst4=(r20*x1015);
IkReal gconst5=(r21*x1015);
IkReal x1017=cj3*cj3;
IkReal x1018=cj4*cj4;
IkReal x1019=(x1018+x1017+(((-1.0)*x1017*x1018)));
j2eval[0]=x1019;
j2eval[1]=IKsign(x1019);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
CheckValue<IkReal> x1023 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x1023.valid){
continue;
}
IkReal x1020=((1.0)*(x1023.value));
IkReal x1021=x962;
IkReal x1022=((1.0)*x1021);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x1020)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x1020)));
IkReal gconst4=(r20*x1022);
IkReal gconst5=(r21*x1022);
IkReal x1024=(cj3*sj4);
j2eval[0]=((((-525435.185185185)*x1024))+cj4+(((1.08333333333333)*cj3)));
j2eval[1]=IKsign(((((1.17e-6)*cj3))+(((1.08e-6)*cj4))+(((-0.56747)*x1024))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
CheckValue<IkReal> x1028 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x1028.valid){
continue;
}
IkReal x1025=((1.0)*(x1028.value));
IkReal x1026=x962;
IkReal x1027=((1.0)*x1026);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x1025)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x1025)));
IkReal gconst4=(r20*x1027);
IkReal gconst5=(r21*x1027);
IkReal x1029=cj3*cj3;
IkReal x1030=(cj4*sj4);
IkReal x1031=(cj3*sj4);
j2eval[0]=((((-1.0)*x1031))+(((1.08333333333333)*x1030))+(((-525435.185185185)*cj4))+(((-1.08333333333333)*x1029*x1030)));
j2eval[1]=IKsign(((((-1.17e-6)*x1029*x1030))+(((-0.56747)*cj4))+(((1.17e-6)*x1030))+(((-1.08e-6)*x1031))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1032=((3.35381986224151e-6)*cj1);
IkReal x1033=(px*sj0);
IkReal x1034=((1.76221132708977)*sj1);
IkReal x1035=((1.76221132708977)*cj1);
IkReal x1036=((3.35381986224151e-6)*sj1);
IkReal x1037=(cj0*py);
IkReal x1038=(sj1*x1037);
if( IKabs(((2.4482884994363e-6)+(((-1.0)*x1035*x1037))+(((-1.0)*pz*x1032))+(((-1.0)*x1036*x1037))+((pz*x1034))+((x1033*x1036))+((x1033*x1035)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.28641426877553)+(((-1.0)*x1033*x1034))+(((-1.0)*x1032*x1037))+((pz*x1036))+((pz*x1035))+((x1034*x1037))+((x1032*x1033)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.4482884994363e-6)+(((-1.0)*x1035*x1037))+(((-1.0)*pz*x1032))+(((-1.0)*x1036*x1037))+((pz*x1034))+((x1033*x1036))+((x1033*x1035))))+IKsqr(((-1.28641426877553)+(((-1.0)*x1033*x1034))+(((-1.0)*x1032*x1037))+((pz*x1036))+((pz*x1035))+((x1034*x1037))+((x1032*x1033))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((2.4482884994363e-6)+(((-1.0)*x1035*x1037))+(((-1.0)*pz*x1032))+(((-1.0)*x1036*x1037))+((pz*x1034))+((x1033*x1036))+((x1033*x1035))), ((-1.28641426877553)+(((-1.0)*x1033*x1034))+(((-1.0)*x1032*x1037))+((pz*x1036))+((pz*x1035))+((x1034*x1037))+((x1032*x1033))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1039=IKcos(j2);
IkReal x1040=IKsin(j2);
IkReal x1041=((1.0)*sj1);
IkReal x1042=(cj0*r11);
IkReal x1043=(cj1*sj0);
IkReal x1044=(gconst4*r21);
IkReal x1045=(gconst4*sj1);
IkReal x1046=((1.0)*cj1);
IkReal x1047=(gconst5*sj1);
IkReal x1048=(gconst4*r01);
IkReal x1049=(cj0*py);
IkReal x1050=((1.0)*x1040);
IkReal x1051=(sj0*x1047);
IkReal x1052=(cj0*gconst5*r10);
IkReal x1053=(cj0*gconst4*r10);
evalcond[0]=((((-1.0)*x1046*x1049))+(((-0.56746883)*x1040))+((px*x1043))+((pz*sj1))+(((-1.08e-6)*x1039)));
evalcond[1]=((0.73)+(((-1.08e-6)*x1040))+((px*sj0*sj1))+(((0.56746883)*x1039))+(((-1.0)*x1041*x1049))+(((-1.0)*pz*x1046)));
evalcond[2]=((((-1.0)*x1050))+((gconst4*r00*x1043))+(((-1.0)*x1046*x1053))+(((-1.0)*gconst5*x1042*x1046))+((gconst5*r01*x1043))+((r20*x1045))+((r21*x1047)));
evalcond[3]=(x1039+((r00*sj0*x1045))+(((-1.0)*gconst4*r20*x1046))+(((-1.0)*gconst5*x1041*x1042))+(((-1.0)*x1041*x1053))+((r01*x1051))+(((-1.0)*gconst5*r21*x1046)));
evalcond[4]=((((-1.0)*x1046*x1052))+(((-1.0)*x1039))+((cj1*gconst4*x1042))+((gconst5*r00*x1043))+(((-1.0)*x1041*x1044))+(((-1.0)*x1043*x1048))+((r20*x1047)));
evalcond[5]=((((-1.0)*x1050))+((x1042*x1045))+((cj1*x1044))+(((-1.0)*x1041*x1052))+((r00*x1051))+(((-1.0)*gconst5*r20*x1046))+(((-1.0)*sj0*x1041*x1048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1054=(cj1*pz);
IkReal x1055=(cj0*py);
IkReal x1056=((1.76220406051003)*sj1);
IkReal x1057=((3.35379220296043e-6)*sj1);
IkReal x1058=(px*sj0);
IkReal x1059=((3.35379220296043e-6)*cj1);
IkReal x1060=((1.76220406051003)*x1058);
if( IKabs(((2.44826830816111e-6)+(((-3.35379220296043e-6)*x1054))+((x1057*x1058))+((pz*x1056))+(((-1.76220406051003)*cj1*x1055))+(((-1.0)*x1055*x1057))+((cj1*x1060)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.28640896417232)+((x1055*x1056))+((pz*x1057))+(((-1.0)*x1055*x1059))+(((1.76220406051003)*x1054))+(((-1.0)*x1056*x1058))+((x1058*x1059)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.44826830816111e-6)+(((-3.35379220296043e-6)*x1054))+((x1057*x1058))+((pz*x1056))+(((-1.76220406051003)*cj1*x1055))+(((-1.0)*x1055*x1057))+((cj1*x1060))))+IKsqr(((-1.28640896417232)+((x1055*x1056))+((pz*x1057))+(((-1.0)*x1055*x1059))+(((1.76220406051003)*x1054))+(((-1.0)*x1056*x1058))+((x1058*x1059))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((2.44826830816111e-6)+(((-3.35379220296043e-6)*x1054))+((x1057*x1058))+((pz*x1056))+(((-1.76220406051003)*cj1*x1055))+(((-1.0)*x1055*x1057))+((cj1*x1060))), ((-1.28640896417232)+((x1055*x1056))+((pz*x1057))+(((-1.0)*x1055*x1059))+(((1.76220406051003)*x1054))+(((-1.0)*x1056*x1058))+((x1058*x1059))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1061=IKcos(j2);
IkReal x1062=IKsin(j2);
IkReal x1063=((1.0)*sj1);
IkReal x1064=(cj0*r11);
IkReal x1065=(cj1*sj0);
IkReal x1066=(gconst4*r21);
IkReal x1067=(gconst4*sj1);
IkReal x1068=((1.0)*cj1);
IkReal x1069=(cj0*r10);
IkReal x1070=(gconst5*sj1);
IkReal x1071=(gconst4*r01);
IkReal x1072=(cj0*py);
IkReal x1073=((1.0)*x1061);
IkReal x1074=(sj0*x1070);
evalcond[0]=((((-0.56747117)*x1062))+(((-1.08e-6)*x1061))+((px*x1065))+(((-1.0)*x1068*x1072))+((pz*sj1)));
evalcond[1]=((0.73)+(((-1.0)*x1063*x1072))+(((-1.08e-6)*x1062))+((px*sj0*sj1))+(((-1.0)*pz*x1068))+(((0.56747117)*x1061)));
evalcond[2]=(x1062+((gconst4*r00*x1065))+(((-1.0)*gconst4*x1068*x1069))+((r20*x1067))+(((-1.0)*gconst5*x1064*x1068))+((gconst5*r01*x1065))+((r21*x1070)));
evalcond[3]=((((-1.0)*x1063*x1066))+(((-1.0)*gconst5*x1068*x1069))+((cj1*gconst4*x1064))+(((-1.0)*x1065*x1071))+((r20*x1070))+((gconst5*r00*x1065))+(((-1.0)*x1073)));
evalcond[4]=((((-1.0)*sj0*x1063*x1071))+(((-1.0)*gconst5*x1063*x1069))+(((-1.0)*gconst5*r20*x1068))+((cj1*x1066))+((r00*x1074))+(((-1.0)*x1062))+((x1064*x1067)));
evalcond[5]=((((-1.0)*gconst5*r21*x1068))+(((-1.0)*gconst4*r20*x1068))+((r00*sj0*x1067))+(((-1.0)*gconst5*x1063*x1064))+(((-1.0)*gconst4*x1063*x1069))+((r01*x1074))+(((-1.0)*x1073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1075=((3.35381986224151e-6)*cj1);
IkReal x1076=(px*sj0);
IkReal x1077=((1.76221132708977)*sj1);
IkReal x1078=((1.76221132708977)*cj1);
IkReal x1079=((3.35381986224151e-6)*sj1);
IkReal x1080=(cj0*py);
IkReal x1081=(sj1*x1080);
if( IKabs(((2.4482884994363e-6)+((pz*x1077))+(((-1.0)*x1078*x1080))+(((-1.0)*pz*x1075))+(((-1.0)*x1079*x1080))+((x1076*x1078))+((x1076*x1079)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.28641426877553)+((pz*x1079))+((pz*x1078))+(((-1.0)*x1076*x1077))+((x1075*x1076))+((x1077*x1080))+(((-1.0)*x1075*x1080)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.4482884994363e-6)+((pz*x1077))+(((-1.0)*x1078*x1080))+(((-1.0)*pz*x1075))+(((-1.0)*x1079*x1080))+((x1076*x1078))+((x1076*x1079))))+IKsqr(((-1.28641426877553)+((pz*x1079))+((pz*x1078))+(((-1.0)*x1076*x1077))+((x1075*x1076))+((x1077*x1080))+(((-1.0)*x1075*x1080))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((2.4482884994363e-6)+((pz*x1077))+(((-1.0)*x1078*x1080))+(((-1.0)*pz*x1075))+(((-1.0)*x1079*x1080))+((x1076*x1078))+((x1076*x1079))), ((-1.28641426877553)+((pz*x1079))+((pz*x1078))+(((-1.0)*x1076*x1077))+((x1075*x1076))+((x1077*x1080))+(((-1.0)*x1075*x1080))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1082=IKcos(j2);
IkReal x1083=IKsin(j2);
IkReal x1084=(gconst5*sj1);
IkReal x1085=(r01*sj0);
IkReal x1086=(cj1*sj0);
IkReal x1087=((1.0)*gconst4);
IkReal x1088=((1.0)*cj1);
IkReal x1089=(cj0*r10);
IkReal x1090=(gconst4*r00);
IkReal x1091=(gconst4*sj1);
IkReal x1092=(cj0*r11);
IkReal x1093=(cj1*gconst4);
IkReal x1094=(sj0*sj1);
IkReal x1095=(cj0*py);
IkReal x1096=((1.0)*gconst5*x1092);
evalcond[0]=((((-1.0)*x1088*x1095))+(((-1.08e-6)*x1082))+((px*x1086))+(((-0.56746883)*x1083))+((pz*sj1)));
evalcond[1]=((0.73)+(((-1.0)*pz*x1088))+(((-1.0)*sj1*x1095))+(((-1.08e-6)*x1083))+((px*x1094))+(((0.56746883)*x1082)));
evalcond[2]=(x1082+((r20*x1084))+((gconst5*r00*x1086))+(((-1.0)*cj1*x1085*x1087))+((x1092*x1093))+(((-1.0)*gconst5*x1088*x1089))+(((-1.0)*r21*sj1*x1087)));
evalcond[3]=(x1083+((r21*x1093))+((r00*sj0*x1084))+(((-1.0)*gconst5*r20*x1088))+(((-1.0)*x1084*x1089))+((x1091*x1092))+(((-1.0)*sj1*x1085*x1087)));
evalcond[4]=((((-1.0)*cj1*x1087*x1089))+((x1086*x1090))+(((-1.0)*x1083))+(((-1.0)*gconst5*x1088*x1092))+((cj1*gconst5*x1085))+((r20*x1091))+((r21*x1084)));
evalcond[5]=(x1082+(((-1.0)*gconst5*r21*x1088))+(((-1.0)*cj1*r20*x1087))+(((-1.0)*x1084*x1092))+(((-1.0)*sj1*x1087*x1089))+((x1090*x1094))+((x1084*x1085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1097=(cj1*pz);
IkReal x1098=(cj0*py);
IkReal x1099=((1.76220406051003)*sj1);
IkReal x1100=((3.35379220296043e-6)*sj1);
IkReal x1101=(px*sj0);
IkReal x1102=((3.35379220296043e-6)*cj1);
IkReal x1103=((1.76220406051003)*x1101);
if( IKabs(((2.44826830816111e-6)+(((-3.35379220296043e-6)*x1097))+(((-1.0)*x1098*x1100))+((cj1*x1103))+((x1100*x1101))+((pz*x1099))+(((-1.76220406051003)*cj1*x1098)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.28640896417232)+(((-1.0)*x1098*x1102))+(((1.76220406051003)*x1097))+((x1101*x1102))+(((-1.0)*x1099*x1101))+((pz*x1100))+((x1098*x1099)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.44826830816111e-6)+(((-3.35379220296043e-6)*x1097))+(((-1.0)*x1098*x1100))+((cj1*x1103))+((x1100*x1101))+((pz*x1099))+(((-1.76220406051003)*cj1*x1098))))+IKsqr(((-1.28640896417232)+(((-1.0)*x1098*x1102))+(((1.76220406051003)*x1097))+((x1101*x1102))+(((-1.0)*x1099*x1101))+((pz*x1100))+((x1098*x1099))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((2.44826830816111e-6)+(((-3.35379220296043e-6)*x1097))+(((-1.0)*x1098*x1100))+((cj1*x1103))+((x1100*x1101))+((pz*x1099))+(((-1.76220406051003)*cj1*x1098))), ((-1.28640896417232)+(((-1.0)*x1098*x1102))+(((1.76220406051003)*x1097))+((x1101*x1102))+(((-1.0)*x1099*x1101))+((pz*x1100))+((x1098*x1099))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1104=IKcos(j2);
IkReal x1105=IKsin(j2);
IkReal x1106=((1.0)*sj1);
IkReal x1107=(cj0*r11);
IkReal x1108=(cj1*sj0);
IkReal x1109=(gconst4*r21);
IkReal x1110=(gconst4*sj1);
IkReal x1111=((1.0)*cj1);
IkReal x1112=(cj0*r10);
IkReal x1113=(gconst5*sj1);
IkReal x1114=(gconst4*r01);
IkReal x1115=(cj0*py);
IkReal x1116=(sj0*x1113);
evalcond[0]=(((pz*sj1))+(((-0.56747117)*x1105))+((px*x1108))+(((-1.08e-6)*x1104))+(((-1.0)*x1111*x1115)));
evalcond[1]=((0.73)+(((0.56747117)*x1104))+((px*sj0*sj1))+(((-1.0)*pz*x1111))+(((-1.0)*x1106*x1115))+(((-1.08e-6)*x1105)));
evalcond[2]=(x1105+((r20*x1110))+(((-1.0)*gconst5*x1107*x1111))+((gconst5*r01*x1108))+(((-1.0)*gconst4*x1111*x1112))+((gconst4*r00*x1108))+((r21*x1113)));
evalcond[3]=(x1104+((r20*x1113))+((gconst5*r00*x1108))+((cj1*gconst4*x1107))+(((-1.0)*x1106*x1109))+(((-1.0)*x1108*x1114))+(((-1.0)*gconst5*x1111*x1112)));
evalcond[4]=(x1105+(((-1.0)*gconst5*x1106*x1112))+((cj1*x1109))+((r00*x1116))+(((-1.0)*sj0*x1106*x1114))+((x1107*x1110))+(((-1.0)*gconst5*r20*x1111)));
evalcond[5]=((((-1.0)*gconst5*x1106*x1107))+(((-1.0)*x1104))+((r01*x1116))+((r00*sj0*x1110))+(((-1.0)*gconst5*r21*x1111))+(((-1.0)*gconst4*r20*x1111))+(((-1.0)*gconst4*x1106*x1112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1117=(cj1*r22);
IkReal x1118=((1.17e-6)*sj4);
IkReal x1119=(cj3*sj0);
IkReal x1120=((1.0)*sj4);
IkReal x1121=(cj1*px);
IkReal x1122=(r02*sj1);
IkReal x1123=((1.17e-6)*cj4);
IkReal x1124=(cj3*sj1);
IkReal x1125=(cj0*r12);
IkReal x1126=(cj3*sj4);
IkReal x1127=((1.0)*cj4);
IkReal x1128=(cj0*cj1*py);
CheckValue<IkReal> x1129=IKPowWithIntegerCheck(IKsign((((cj4*x1118))+(((-1.0)*cj4*x1118*(cj3*cj3)))+(((-1.08e-6)*x1126))+(((-0.56747)*cj4)))),-1);
if(!x1129.valid){
continue;
}
CheckValue<IkReal> x1130 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*x1121*x1127))+((x1123*x1124*x1125))+(((1.08e-6)*x1117))+((cj3*x1117*x1123))+(((1.08e-6)*sj1*x1125))+(((-1.0)*x1119*x1122*x1123))+(((-1.0)*pz*sj1*x1127))+((cj4*x1128))+(((-1.08e-6)*sj0*x1122)))),IkReal(((((-1.0)*sj0*x1118*x1122))+(((-1.0)*pz*x1120*x1124))+(((0.56747)*sj0*x1122))+(((-0.56747)*x1117))+(((-0.56747)*sj1*x1125))+((sj1*x1118*x1125))+((x1117*x1118))+(((-1.0)*x1119*x1120*x1121))+((x1126*x1128)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1130.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1129.value)))+(x1130.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1131=IKcos(j2);
IkReal x1132=IKsin(j2);
IkReal x1133=((1.0)*cj0);
IkReal x1134=(cj1*r10);
IkReal x1135=(r11*sj1);
IkReal x1136=(cj1*sj0);
IkReal x1137=(r21*sj1);
IkReal x1138=((1.0)*gconst4);
IkReal x1139=(cj0*gconst4);
IkReal x1140=(cj3*sj4);
IkReal x1141=((1.0)*cj1);
IkReal x1142=(r20*sj1);
IkReal x1143=(gconst4*r00);
IkReal x1144=(cj1*r11);
IkReal x1145=(sj0*sj1);
IkReal x1146=(r10*sj1);
IkReal x1147=(gconst5*x1145);
IkReal x1148=((1.0)*x1132);
IkReal x1149=((1.0)*x1131);
IkReal x1150=(sj4*x1131);
IkReal x1151=(cj3*cj4*x1132);
IkReal x1152=(cj3*cj4*x1131);
evalcond[0]=((((-1.0)*x1140*x1149))+(((-1.0)*cj1*r12*x1133))+((r22*sj1))+(((-1.0)*cj4*x1148))+((r02*x1136)));
evalcond[1]=((((-1.0)*x1140*x1148))+((r02*x1145))+((cj4*x1131))+(((-1.0)*r12*sj1*x1133))+(((-1.0)*r22*x1141)));
evalcond[2]=((((1.17e-6)*sj4*x1132))+(((-0.56747)*x1132))+(((-1.08e-6)*x1131))+(((-1.17e-6)*x1152))+(((-1.0)*cj1*py*x1133))+((px*x1136))+((pz*sj1)));
evalcond[3]=((0.73)+(((-1.08e-6)*x1132))+(((-1.17e-6)*x1150))+(((-1.17e-6)*x1151))+(((0.56747)*x1131))+((px*x1145))+(((-1.0)*pz*x1141))+(((-1.0)*py*sj1*x1133)));
evalcond[4]=(((gconst5*x1142))+(((-1.0)*r01*x1136*x1138))+((gconst5*r00*x1136))+((x1139*x1144))+(((-1.0)*gconst5*x1133*x1134))+(((-1.0)*x1137*x1138))+(((-1.0)*sj3*x1149)));
evalcond[5]=((((-1.0)*r01*x1138*x1145))+((cj1*gconst4*r21))+((x1135*x1139))+(((-1.0)*gconst5*x1133*x1146))+(((-1.0)*gconst5*r20*x1141))+(((-1.0)*sj3*x1148))+((r00*x1147)));
evalcond[6]=(x1152+((gconst4*x1142))+((gconst5*x1137))+(((-1.0)*sj4*x1148))+(((-1.0)*gconst5*x1133*x1144))+(((-1.0)*gconst4*x1133*x1134))+((gconst5*r01*x1136))+((x1136*x1143)));
evalcond[7]=(x1151+x1150+((x1143*x1145))+(((-1.0)*cj1*r20*x1138))+(((-1.0)*gconst4*x1133*x1146))+(((-1.0)*gconst5*x1133*x1135))+((r01*x1147))+(((-1.0)*gconst5*r21*x1141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1153=(r22*sj1);
IkReal x1154=((1.17e-6)*sj4);
IkReal x1155=(pz*sj1);
IkReal x1156=(cj0*cj1);
IkReal x1157=((1.17e-6)*cj3);
IkReal x1158=(cj3*sj4);
IkReal x1159=(cj1*px*sj0);
IkReal x1160=((1.0)*x1158);
IkReal x1161=(cj1*r02*sj0);
CheckValue<IkReal> x1162=IKPowWithIntegerCheck(IKsign((x1157+(((1.08e-6)*cj4))+(((-0.56747)*x1158)))),-1);
if(!x1162.valid){
continue;
}
CheckValue<IkReal> x1163 = IKatan2WithCheck(IkReal(((((-1.0)*x1159*x1160))+((cj4*x1153*x1157))+(((-1.0)*cj4*r12*x1156*x1157))+(((-1.08e-6)*r12*x1156))+((py*x1156*x1158))+(((1.08e-6)*x1161))+(((-1.0)*x1155*x1160))+((cj4*x1157*x1161))+(((1.08e-6)*x1153)))),IkReal(((((-1.0)*r12*x1154*x1156))+(((-0.56747)*x1161))+((x1154*x1161))+((x1153*x1154))+(((-1.0)*cj4*py*x1156))+((cj4*x1155))+((cj4*x1159))+(((-0.56747)*x1153))+(((0.56747)*r12*x1156)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1163.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1162.value)))+(x1163.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1164=IKcos(j2);
IkReal x1165=IKsin(j2);
IkReal x1166=((1.0)*cj0);
IkReal x1167=(cj1*r10);
IkReal x1168=(r11*sj1);
IkReal x1169=(cj1*sj0);
IkReal x1170=(r21*sj1);
IkReal x1171=((1.0)*gconst4);
IkReal x1172=(cj0*gconst4);
IkReal x1173=(cj3*sj4);
IkReal x1174=((1.0)*cj1);
IkReal x1175=(r20*sj1);
IkReal x1176=(gconst4*r00);
IkReal x1177=(cj1*r11);
IkReal x1178=(sj0*sj1);
IkReal x1179=(r10*sj1);
IkReal x1180=(gconst5*x1178);
IkReal x1181=((1.0)*x1165);
IkReal x1182=((1.0)*x1164);
IkReal x1183=(sj4*x1164);
IkReal x1184=(cj3*cj4*x1165);
IkReal x1185=(cj3*cj4*x1164);
evalcond[0]=(((r02*x1169))+(((-1.0)*cj4*x1181))+((r22*sj1))+(((-1.0)*x1173*x1182))+(((-1.0)*cj1*r12*x1166)));
evalcond[1]=(((r02*x1178))+((cj4*x1164))+(((-1.0)*r22*x1174))+(((-1.0)*r12*sj1*x1166))+(((-1.0)*x1173*x1181)));
evalcond[2]=((((-1.08e-6)*x1164))+((px*x1169))+(((-0.56747)*x1165))+(((1.17e-6)*sj4*x1165))+(((-1.17e-6)*x1185))+(((-1.0)*cj1*py*x1166))+((pz*sj1)));
evalcond[3]=((0.73)+(((-1.08e-6)*x1165))+((px*x1178))+(((-1.0)*pz*x1174))+(((0.56747)*x1164))+(((-1.17e-6)*x1183))+(((-1.17e-6)*x1184))+(((-1.0)*py*sj1*x1166)));
evalcond[4]=(((gconst5*r00*x1169))+((gconst5*x1175))+((x1172*x1177))+(((-1.0)*gconst5*x1166*x1167))+(((-1.0)*x1170*x1171))+(((-1.0)*r01*x1169*x1171))+(((-1.0)*sj3*x1182)));
evalcond[5]=(((x1168*x1172))+((r00*x1180))+((cj1*gconst4*r21))+(((-1.0)*gconst5*r20*x1174))+(((-1.0)*gconst5*x1166*x1179))+(((-1.0)*r01*x1171*x1178))+(((-1.0)*sj3*x1181)));
evalcond[6]=(x1185+((gconst5*r01*x1169))+(((-1.0)*gconst5*x1166*x1177))+((gconst5*x1170))+(((-1.0)*sj4*x1181))+((gconst4*x1175))+(((-1.0)*gconst4*x1166*x1167))+((x1169*x1176)));
evalcond[7]=(x1184+x1183+((r01*x1180))+(((-1.0)*gconst5*r21*x1174))+((x1176*x1178))+(((-1.0)*cj1*r20*x1171))+(((-1.0)*gconst5*x1166*x1168))+(((-1.0)*gconst4*x1166*x1179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1186=cj3*cj3;
IkReal x1187=cj4*cj4;
IkReal x1188=(cj0*r12);
IkReal x1189=(cj1*cj4);
IkReal x1190=(r22*sj1);
IkReal x1191=(cj3*sj4);
IkReal x1192=(r02*sj0);
IkReal x1193=((1.0)*sj1);
IkReal x1194=((1.0)*cj1*x1191);
CheckValue<IkReal> x1195=IKPowWithIntegerCheck(IKsign((x1186+x1187+(((-1.0)*x1186*x1187)))),-1);
if(!x1195.valid){
continue;
}
CheckValue<IkReal> x1196 = IKatan2WithCheck(IkReal((((x1189*x1192))+((cj4*x1190))+(((-1.0)*x1188*x1191*x1193))+(((-1.0)*r22*x1194))+((sj1*x1191*x1192))+(((-1.0)*x1188*x1189)))),IkReal((((cj4*sj1*x1188))+(((-1.0)*x1188*x1194))+((r22*x1189))+((cj1*x1191*x1192))+(((-1.0)*cj4*x1192*x1193))+((x1190*x1191)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1196.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1195.value)))+(x1196.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1197=IKcos(j2);
IkReal x1198=IKsin(j2);
IkReal x1199=((1.0)*cj0);
IkReal x1200=(cj1*r10);
IkReal x1201=(r11*sj1);
IkReal x1202=(cj1*sj0);
IkReal x1203=(r21*sj1);
IkReal x1204=((1.0)*gconst4);
IkReal x1205=(cj0*gconst4);
IkReal x1206=(cj3*sj4);
IkReal x1207=((1.0)*cj1);
IkReal x1208=(r20*sj1);
IkReal x1209=(gconst4*r00);
IkReal x1210=(cj1*r11);
IkReal x1211=(sj0*sj1);
IkReal x1212=(r10*sj1);
IkReal x1213=(gconst5*x1211);
IkReal x1214=((1.0)*x1198);
IkReal x1215=((1.0)*x1197);
IkReal x1216=(sj4*x1197);
IkReal x1217=(cj3*cj4*x1198);
IkReal x1218=(cj3*cj4*x1197);
evalcond[0]=((((-1.0)*x1206*x1215))+((r22*sj1))+(((-1.0)*cj1*r12*x1199))+((r02*x1202))+(((-1.0)*cj4*x1214)));
evalcond[1]=(((r02*x1211))+(((-1.0)*x1206*x1214))+(((-1.0)*r22*x1207))+((cj4*x1197))+(((-1.0)*r12*sj1*x1199)));
evalcond[2]=((((-0.56747)*x1198))+(((-1.0)*cj1*py*x1199))+((px*x1202))+(((-1.17e-6)*x1218))+(((1.17e-6)*sj4*x1198))+(((-1.08e-6)*x1197))+((pz*sj1)));
evalcond[3]=((0.73)+(((-1.0)*pz*x1207))+(((-1.0)*py*sj1*x1199))+(((0.56747)*x1197))+(((-1.17e-6)*x1217))+(((-1.17e-6)*x1216))+((px*x1211))+(((-1.08e-6)*x1198)));
evalcond[4]=((((-1.0)*gconst5*x1199*x1200))+((gconst5*x1208))+((gconst5*r00*x1202))+(((-1.0)*x1203*x1204))+(((-1.0)*sj3*x1215))+((x1205*x1210))+(((-1.0)*r01*x1202*x1204)));
evalcond[5]=((((-1.0)*r01*x1204*x1211))+((cj1*gconst4*r21))+(((-1.0)*gconst5*r20*x1207))+((r00*x1213))+(((-1.0)*sj3*x1214))+((x1201*x1205))+(((-1.0)*gconst5*x1199*x1212)));
evalcond[6]=(x1218+((gconst5*x1203))+((gconst4*x1208))+(((-1.0)*gconst4*x1199*x1200))+((x1202*x1209))+(((-1.0)*sj4*x1214))+((gconst5*r01*x1202))+(((-1.0)*gconst5*x1199*x1210)));
evalcond[7]=((((-1.0)*gconst5*x1199*x1201))+x1216+x1217+(((-1.0)*gconst4*x1199*x1212))+(((-1.0)*gconst5*r21*x1207))+((r01*x1213))+(((-1.0)*cj1*r20*x1204))+((x1209*x1211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1219=((100000000.0)*sj3*sj4);
IkReal x1220=((117.0)*cj4*sj3);
CheckValue<IkReal> x1221=IKPowWithIntegerCheck(IKsign(rxp2_2),-1);
if(!x1221.valid){
continue;
}
CheckValue<IkReal> x1222 = IKatan2WithCheck(IkReal((((px*x1219))+(((-1.0)*r02*x1220)))),IkReal((((r12*x1220))+(((-1.0)*py*x1219)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1222.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1221.value)))+(x1222.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1223=IKcos(j0);
IkReal x1224=IKsin(j0);
IkReal x1225=(cj4*sj3);
IkReal x1226=((1.0)*x1223);
IkReal x1227=(gconst4*x1224);
IkReal x1228=((1.0)*x1224);
evalcond[0]=((((-1.0)*r12*x1228))+(((-1.0)*sj3*sj4))+(((-1.0)*r02*x1226)));
evalcond[1]=((((-1.0)*px*x1226))+(((-1.0)*py*x1228))+(((-1.17e-6)*x1225)));
evalcond[2]=(cj3+(((-1.0)*gconst5*r10*x1228))+((gconst4*r01*x1223))+(((-1.0)*gconst5*r00*x1226))+((r11*x1227)));
evalcond[3]=(x1225+(((-1.0)*gconst5*r11*x1228))+(((-1.0)*gconst4*r00*x1226))+(((-1.0)*gconst5*r01*x1226))+(((-1.0)*r10*x1227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1229=cj3*cj3;
IkReal x1230=cj4*cj4;
IkReal x1231=sj4*sj4;
IkReal x1232=(cj3*r22);
IkReal x1233=(cj4*r22);
IkReal x1234=((4.53976)*sj4);
IkReal x1235=(r02*sj0);
IkReal x1236=((16.0)*pz);
IkReal x1237=((8.0)*pz);
IkReal x1238=((1.872e-5)*sj4);
IkReal x1239=((4.32e-6)*sj4);
IkReal x1240=((9.07952)*sj4);
IkReal x1241=(px*sj0);
IkReal x1242=(cj0*py);
IkReal x1243=((4.68e-6)*sj4);
IkReal x1244=((9.36e-6)*sj4);
IkReal x1245=(cj0*cj3*r12);
IkReal x1246=((1.872e-5)*x1230);
IkReal x1247=(cj0*cj4*r12);
IkReal x1248=(cj4*x1243);
IkReal x1249=((4.0)*x1230);
IkReal x1250=((9.36e-6)*x1230);
IkReal x1251=(x1229*x1231);
IkReal x1252=(cj3*x1231*x1235);
IkReal x1253=((((4.0)*x1241*x1251))+((x1239*x1245))+(((2.26988)*x1247))+((x1241*x1249))+(((2.26988)*sj4*x1232))+((x1235*x1248))+((x1229*x1243*x1247)));
IkReal x1254=((((4.32e-6)*x1233))+(((4.0)*x1242*x1251))+(((4.68e-6)*x1231*x1232))+((x1229*x1235*x1248))+((x1242*x1249))+((cj3*x1235*x1239))+(((4.68e-6)*x1230*x1232))+((x1243*x1247))+(((2.26988)*cj4*x1235)));
IkReal x1255=((((-1.0)*x1237*x1251))+(((8.64e-6)*x1247))+((x1245*x1250))+((x1229*x1233*x1244))+(((-1.0)*x1230*x1237))+(((-1.0)*cj3*x1235*x1250))+(((-1.0)*x1233*x1244))+(((-8.64e-6)*cj4*x1235))+(((-9.36e-6)*x1252))+(((9.36e-6)*x1231*x1245))+((cj3*x1234*x1235))+(((8.64e-6)*sj4*x1232))+(((4.53976)*x1233))+(((-1.0)*x1234*x1245)));
IkReal x1256=((((-1.0)*x1254))+x1253);
IkReal x1257=((((-1.0)*x1253))+x1254);
op[0]=x1256;
op[1]=x1255;
op[2]=x1256;
op[3]=((((1.728e-5)*sj4*x1232))+(((-1.0)*x1230*x1236))+(((-1.728e-5)*cj4*x1235))+((cj3*x1235*x1240))+(((1.872e-5)*x1231*x1245))+(((1.728e-5)*x1247))+(((-1.0)*x1240*x1245))+((x1245*x1246))+(((-1.0)*x1233*x1238))+(((-1.0)*x1236*x1251))+(((9.07952)*x1233))+(((-1.872e-5)*x1252))+(((-1.0)*cj3*x1235*x1246))+((x1229*x1233*x1238)));
op[4]=x1257;
op[5]=x1255;
op[6]=x1257;
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

j1evalpoly[0]=((((-2.92)*(cj3*cj3)*(sj4*sj4)))+(((4.0)*pz*(cj4*cj4)))+(((-2.92)*(cj4*cj4)))+(((htj1*htj1)*(((((4.0)*pz*(cj4*cj4)))+(((-4.68e-6)*cj0*cj3*r12*(cj4*cj4)))+(((-2.26988)*cj3*r02*sj0*sj4))+(((4.68e-6)*cj3*r02*sj0*(cj4*cj4)))+(((-4.32e-6)*cj3*r22*sj4))+(((4.32e-6)*cj4*r02*sj0))+(((-8.76)*(cj3*cj3)*(sj4*sj4)))+(((-8.76)*(cj4*cj4)))+(((-4.68e-6)*cj0*cj3*r12*(sj4*sj4)))+(((4.68e-6)*cj3*r02*sj0*(sj4*sj4)))+(((-4.32e-6)*cj0*cj4*r12))+(((-2.26988)*cj4*r22))+(((4.0)*pz*(cj3*cj3)*(sj4*sj4)))+(((-4.68e-6)*cj4*r22*sj4*(cj3*cj3)))+(((4.68e-6)*cj4*r22*sj4))+(((2.26988)*cj0*cj3*r12*sj4))))))+(((-4.68e-6)*cj0*cj3*r12*(cj4*cj4)))+(((-2.26988)*cj3*r02*sj0*sj4))+(((4.68e-6)*cj3*r02*sj0*(cj4*cj4)))+(((-4.32e-6)*cj3*r22*sj4))+(((4.32e-6)*cj4*r02*sj0))+(((-4.68e-6)*cj0*cj3*r12*(sj4*sj4)))+(((4.68e-6)*cj3*r02*sj0*(sj4*sj4)))+(((-4.32e-6)*cj0*cj4*r12))+(((-2.26988)*cj4*r22))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-2.92)*(cj3*cj3)*(sj4*sj4)))+(((-2.92)*(cj4*cj4)))+(((-4.68e-6)*cj3*r02*sj0*(sj4*sj4)))+(((-4.68e-6)*cj4*r22*sj4))+(((-4.0)*pz*(cj4*cj4)))+(((-4.68e-6)*cj3*r02*sj0*(cj4*cj4)))+(((-4.0)*pz*(cj3*cj3)*(sj4*sj4)))+(((4.32e-6)*cj0*cj4*r12))+(((-2.26988)*cj0*cj3*r12*sj4))+(((2.26988)*cj4*r22))+(((-4.32e-6)*cj4*r02*sj0))+(((4.68e-6)*cj0*cj3*r12*(sj4*sj4)))+(((4.32e-6)*cj3*r22*sj4))+(((4.68e-6)*cj4*r22*sj4*(cj3*cj3)))+(((4.68e-6)*cj0*cj3*r12*(cj4*cj4)))+(((2.26988)*cj3*r02*sj0*sj4))))))+(((htj1*htj1*htj1*htj1*htj1)*(((((-8.0)*px*sj0*(cj3*cj3)*(sj4*sj4)))+(((-4.53976)*cj0*cj4*r12))+(((9.36e-6)*cj0*cj4*r12*sj4))+(((4.53976)*cj4*r02*sj0))+(((-9.36e-6)*cj4*r02*sj0*sj4))+(((9.36e-6)*cj3*r22*(sj4*sj4)))+(((-8.0)*px*sj0*(cj4*cj4)))+(((9.36e-6)*cj3*r22*(cj4*cj4)))+(((8.0)*cj0*py*(cj4*cj4)))+(((-4.53976)*cj3*r22*sj4))+(((8.0)*cj0*py*(cj3*cj3)*(sj4*sj4)))+(((8.64e-6)*cj3*r02*sj0*sj4))+(((9.36e-6)*cj4*r02*sj0*sj4*(cj3*cj3)))+(((8.64e-6)*cj4*r22))+(((-9.36e-6)*cj0*cj4*r12*sj4*(cj3*cj3)))+(((-8.64e-6)*cj0*cj3*r12*sj4))))))+(((htj1*htj1*htj1)*(((((-16.0)*px*sj0*(cj4*cj4)))+(((-1.872e-5)*cj0*cj4*r12*sj4*(cj3*cj3)))+(((-9.07952)*cj0*cj4*r12))+(((1.872e-5)*cj4*r02*sj0*sj4*(cj3*cj3)))+(((1.872e-5)*cj3*r22*(sj4*sj4)))+(((-1.728e-5)*cj0*cj3*r12*sj4))+(((-9.07952)*cj3*r22*sj4))+(((-16.0)*px*sj0*(cj3*cj3)*(sj4*sj4)))+(((9.07952)*cj4*r02*sj0))+(((16.0)*cj0*py*(cj3*cj3)*(sj4*sj4)))+(((1.872e-5)*cj0*cj4*r12*sj4))+(((1.872e-5)*cj3*r22*(cj4*cj4)))+(((1.728e-5)*cj4*r22))+(((1.728e-5)*cj3*r02*sj0*sj4))+(((16.0)*cj0*py*(cj4*cj4)))+(((-1.872e-5)*cj4*r02*sj0*sj4))))))+((htj1*(((((-8.0)*px*sj0*(cj3*cj3)*(sj4*sj4)))+(((-4.53976)*cj0*cj4*r12))+(((9.36e-6)*cj0*cj4*r12*sj4))+(((4.53976)*cj4*r02*sj0))+(((-9.36e-6)*cj4*r02*sj0*sj4))+(((9.36e-6)*cj3*r22*(sj4*sj4)))+(((-8.0)*px*sj0*(cj4*cj4)))+(((9.36e-6)*cj3*r22*(cj4*cj4)))+(((8.0)*cj0*py*(cj4*cj4)))+(((-4.53976)*cj3*r22*sj4))+(((8.0)*cj0*py*(cj3*cj3)*(sj4*sj4)))+(((8.64e-6)*cj3*r02*sj0*sj4))+(((9.36e-6)*cj4*r02*sj0*sj4*(cj3*cj3)))+(((8.64e-6)*cj4*r22))+(((-9.36e-6)*cj0*cj4*r12*sj4*(cj3*cj3)))+(((-8.64e-6)*cj0*cj3*r12*sj4))))))+(((4.0)*pz*(cj3*cj3)*(sj4*sj4)))+(((-4.68e-6)*cj4*r22*sj4*(cj3*cj3)))+(((4.68e-6)*cj4*r22*sj4))+(((htj1*htj1*htj1*htj1)*(((((-4.68e-6)*cj3*r02*sj0*(sj4*sj4)))+(((-4.68e-6)*cj4*r22*sj4))+(((-4.0)*pz*(cj4*cj4)))+(((-4.68e-6)*cj3*r02*sj0*(cj4*cj4)))+(((-4.0)*pz*(cj3*cj3)*(sj4*sj4)))+(((4.32e-6)*cj0*cj4*r12))+(((-2.26988)*cj0*cj3*r12*sj4))+(((-8.76)*(cj3*cj3)*(sj4*sj4)))+(((2.26988)*cj4*r22))+(((-8.76)*(cj4*cj4)))+(((-4.32e-6)*cj4*r02*sj0))+(((4.68e-6)*cj0*cj3*r12*(sj4*sj4)))+(((4.32e-6)*cj3*r22*sj4))+(((4.68e-6)*cj4*r22*sj4*(cj3*cj3)))+(((4.68e-6)*cj0*cj3*r12*(cj4*cj4)))+(((2.26988)*cj3*r02*sj0*sj4))))))+(((2.26988)*cj0*cj3*r12*sj4)));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[2];
CheckValue<IkReal> x1261 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x1261.valid){
continue;
}
IkReal x1258=((1.0)*(x1261.value));
IkReal x1259=x962;
IkReal x1260=((1.0)*x1259);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x1258)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x1258)));
IkReal gconst4=(r20*x1260);
IkReal gconst5=(r21*x1260);
IkReal x1262=cj3*cj3;
IkReal x1263=cj4*cj4;
IkReal x1264=(x1263+x1262+(((-1.0)*x1262*x1263)));
j2eval[0]=x1264;
j2eval[1]=IKsign(x1264);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
CheckValue<IkReal> x1268 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x1268.valid){
continue;
}
IkReal x1265=((1.0)*(x1268.value));
IkReal x1266=x962;
IkReal x1267=((1.0)*x1266);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x1265)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x1265)));
IkReal gconst4=(r20*x1267);
IkReal gconst5=(r21*x1267);
IkReal x1269=(cj3*sj4);
j2eval[0]=(cj4+(((-525435.185185185)*x1269))+(((1.08333333333333)*cj3)));
j2eval[1]=IKsign(((((1.17e-6)*cj3))+(((1.08e-6)*cj4))+(((-0.56747)*x1269))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
CheckValue<IkReal> x1273 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x1273.valid){
continue;
}
IkReal x1270=((1.0)*(x1273.value));
IkReal x1271=x962;
IkReal x1272=((1.0)*x1271);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x1270)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x1270)));
IkReal gconst4=(r20*x1272);
IkReal gconst5=(r21*x1272);
IkReal x1274=cj3*cj3;
IkReal x1275=(cj4*sj4);
IkReal x1276=(cj3*sj4);
j2eval[0]=((((-525435.185185185)*cj4))+(((-1.08333333333333)*x1274*x1275))+(((1.08333333333333)*x1275))+(((-1.0)*x1276)));
j2eval[1]=IKsign(((((-1.08e-6)*x1276))+(((1.17e-6)*x1275))+(((-1.17e-6)*x1274*x1275))+(((-0.56747)*cj4))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1277=((3.35381986224151e-6)*cj1);
IkReal x1278=(px*sj0);
IkReal x1279=((1.76221132708977)*sj1);
IkReal x1280=((1.76221132708977)*cj1);
IkReal x1281=((3.35381986224151e-6)*sj1);
IkReal x1282=(cj0*py);
IkReal x1283=(sj1*x1282);
if( IKabs(((2.4482884994363e-6)+((pz*x1279))+((x1278*x1281))+((x1278*x1280))+(((-1.0)*x1280*x1282))+(((-1.0)*x1281*x1282))+(((-1.0)*pz*x1277)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.28641426877553)+((x1279*x1282))+((x1277*x1278))+(((-1.0)*x1277*x1282))+(((-1.0)*x1278*x1279))+((pz*x1280))+((pz*x1281)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.4482884994363e-6)+((pz*x1279))+((x1278*x1281))+((x1278*x1280))+(((-1.0)*x1280*x1282))+(((-1.0)*x1281*x1282))+(((-1.0)*pz*x1277))))+IKsqr(((-1.28641426877553)+((x1279*x1282))+((x1277*x1278))+(((-1.0)*x1277*x1282))+(((-1.0)*x1278*x1279))+((pz*x1280))+((pz*x1281))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((2.4482884994363e-6)+((pz*x1279))+((x1278*x1281))+((x1278*x1280))+(((-1.0)*x1280*x1282))+(((-1.0)*x1281*x1282))+(((-1.0)*pz*x1277))), ((-1.28641426877553)+((x1279*x1282))+((x1277*x1278))+(((-1.0)*x1277*x1282))+(((-1.0)*x1278*x1279))+((pz*x1280))+((pz*x1281))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1284=IKcos(j2);
IkReal x1285=IKsin(j2);
IkReal x1286=((1.0)*sj1);
IkReal x1287=(cj0*r11);
IkReal x1288=(cj1*sj0);
IkReal x1289=(gconst4*r21);
IkReal x1290=(gconst4*sj1);
IkReal x1291=((1.0)*cj1);
IkReal x1292=(gconst5*sj1);
IkReal x1293=(gconst4*r01);
IkReal x1294=(cj0*py);
IkReal x1295=((1.0)*x1285);
IkReal x1296=(sj0*x1292);
IkReal x1297=(cj0*gconst5*r10);
IkReal x1298=(cj0*gconst4*r10);
evalcond[0]=((((-0.56746883)*x1285))+((px*x1288))+(((-1.08e-6)*x1284))+((pz*sj1))+(((-1.0)*x1291*x1294)));
evalcond[1]=((0.73)+(((-1.0)*x1286*x1294))+((px*sj0*sj1))+(((-1.0)*pz*x1291))+(((0.56746883)*x1284))+(((-1.08e-6)*x1285)));
evalcond[2]=(((r20*x1290))+((r21*x1292))+(((-1.0)*x1295))+((gconst5*r01*x1288))+(((-1.0)*gconst5*x1287*x1291))+(((-1.0)*x1291*x1298))+((gconst4*r00*x1288)));
evalcond[3]=(x1284+(((-1.0)*x1286*x1298))+(((-1.0)*gconst5*x1286*x1287))+((r00*sj0*x1290))+(((-1.0)*gconst5*r21*x1291))+(((-1.0)*gconst4*r20*x1291))+((r01*x1296)));
evalcond[4]=(((r20*x1292))+(((-1.0)*x1284))+((cj1*gconst4*x1287))+((gconst5*r00*x1288))+(((-1.0)*x1286*x1289))+(((-1.0)*x1291*x1297))+(((-1.0)*x1288*x1293)));
evalcond[5]=((((-1.0)*x1286*x1297))+(((-1.0)*x1295))+((x1287*x1290))+(((-1.0)*sj0*x1286*x1293))+(((-1.0)*gconst5*r20*x1291))+((cj1*x1289))+((r00*x1296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1299=(cj1*pz);
IkReal x1300=(cj0*py);
IkReal x1301=((1.76220406051003)*sj1);
IkReal x1302=((3.35379220296043e-6)*sj1);
IkReal x1303=(px*sj0);
IkReal x1304=((3.35379220296043e-6)*cj1);
IkReal x1305=((1.76220406051003)*x1303);
if( IKabs(((2.44826830816111e-6)+((pz*x1301))+(((-1.0)*x1300*x1302))+(((-1.76220406051003)*cj1*x1300))+((cj1*x1305))+((x1302*x1303))+(((-3.35379220296043e-6)*x1299)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.28640896417232)+((pz*x1302))+(((1.76220406051003)*x1299))+((x1300*x1301))+(((-1.0)*x1300*x1304))+((x1303*x1304))+(((-1.0)*x1301*x1303)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.44826830816111e-6)+((pz*x1301))+(((-1.0)*x1300*x1302))+(((-1.76220406051003)*cj1*x1300))+((cj1*x1305))+((x1302*x1303))+(((-3.35379220296043e-6)*x1299))))+IKsqr(((-1.28640896417232)+((pz*x1302))+(((1.76220406051003)*x1299))+((x1300*x1301))+(((-1.0)*x1300*x1304))+((x1303*x1304))+(((-1.0)*x1301*x1303))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((2.44826830816111e-6)+((pz*x1301))+(((-1.0)*x1300*x1302))+(((-1.76220406051003)*cj1*x1300))+((cj1*x1305))+((x1302*x1303))+(((-3.35379220296043e-6)*x1299))), ((-1.28640896417232)+((pz*x1302))+(((1.76220406051003)*x1299))+((x1300*x1301))+(((-1.0)*x1300*x1304))+((x1303*x1304))+(((-1.0)*x1301*x1303))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1306=IKcos(j2);
IkReal x1307=IKsin(j2);
IkReal x1308=((1.0)*sj1);
IkReal x1309=(cj0*r11);
IkReal x1310=(cj1*sj0);
IkReal x1311=(gconst4*r21);
IkReal x1312=(gconst4*sj1);
IkReal x1313=((1.0)*cj1);
IkReal x1314=(cj0*r10);
IkReal x1315=(gconst5*sj1);
IkReal x1316=(gconst4*r01);
IkReal x1317=(cj0*py);
IkReal x1318=((1.0)*x1306);
IkReal x1319=(sj0*x1315);
evalcond[0]=((((-1.0)*x1313*x1317))+((px*x1310))+(((-0.56747117)*x1307))+(((-1.08e-6)*x1306))+((pz*sj1)));
evalcond[1]=((0.73)+(((-1.0)*x1308*x1317))+((px*sj0*sj1))+(((0.56747117)*x1306))+(((-1.08e-6)*x1307))+(((-1.0)*pz*x1313)));
evalcond[2]=(x1307+((gconst5*r01*x1310))+((r21*x1315))+(((-1.0)*gconst5*x1309*x1313))+((gconst4*r00*x1310))+((r20*x1312))+(((-1.0)*gconst4*x1313*x1314)));
evalcond[3]=((((-1.0)*gconst5*x1313*x1314))+(((-1.0)*x1308*x1311))+(((-1.0)*x1318))+((cj1*gconst4*x1309))+((gconst5*r00*x1310))+((r20*x1315))+(((-1.0)*x1310*x1316)));
evalcond[4]=(((r00*x1319))+(((-1.0)*x1307))+((x1309*x1312))+(((-1.0)*sj0*x1308*x1316))+(((-1.0)*gconst5*r20*x1313))+((cj1*x1311))+(((-1.0)*gconst5*x1308*x1314)));
evalcond[5]=((((-1.0)*gconst5*x1308*x1309))+(((-1.0)*gconst4*x1308*x1314))+((r01*x1319))+(((-1.0)*gconst5*r21*x1313))+(((-1.0)*x1318))+(((-1.0)*gconst4*r20*x1313))+((r00*sj0*x1312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1320=((3.35381986224151e-6)*cj1);
IkReal x1321=(px*sj0);
IkReal x1322=((1.76221132708977)*sj1);
IkReal x1323=((1.76221132708977)*cj1);
IkReal x1324=((3.35381986224151e-6)*sj1);
IkReal x1325=(cj0*py);
IkReal x1326=(sj1*x1325);
if( IKabs(((2.4482884994363e-6)+((pz*x1322))+(((-1.0)*x1323*x1325))+(((-1.0)*x1324*x1325))+(((-1.0)*pz*x1320))+((x1321*x1323))+((x1321*x1324)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.28641426877553)+((pz*x1324))+((pz*x1323))+((x1320*x1321))+((x1322*x1325))+(((-1.0)*x1321*x1322))+(((-1.0)*x1320*x1325)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.4482884994363e-6)+((pz*x1322))+(((-1.0)*x1323*x1325))+(((-1.0)*x1324*x1325))+(((-1.0)*pz*x1320))+((x1321*x1323))+((x1321*x1324))))+IKsqr(((-1.28641426877553)+((pz*x1324))+((pz*x1323))+((x1320*x1321))+((x1322*x1325))+(((-1.0)*x1321*x1322))+(((-1.0)*x1320*x1325))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((2.4482884994363e-6)+((pz*x1322))+(((-1.0)*x1323*x1325))+(((-1.0)*x1324*x1325))+(((-1.0)*pz*x1320))+((x1321*x1323))+((x1321*x1324))), ((-1.28641426877553)+((pz*x1324))+((pz*x1323))+((x1320*x1321))+((x1322*x1325))+(((-1.0)*x1321*x1322))+(((-1.0)*x1320*x1325))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1327=IKcos(j2);
IkReal x1328=IKsin(j2);
IkReal x1329=(gconst5*sj1);
IkReal x1330=(r01*sj0);
IkReal x1331=(cj1*sj0);
IkReal x1332=((1.0)*gconst4);
IkReal x1333=((1.0)*cj1);
IkReal x1334=(cj0*r10);
IkReal x1335=(gconst4*r00);
IkReal x1336=(gconst4*sj1);
IkReal x1337=(cj0*r11);
IkReal x1338=(cj1*gconst4);
IkReal x1339=(sj0*sj1);
IkReal x1340=(cj0*py);
IkReal x1341=((1.0)*gconst5*x1337);
evalcond[0]=(((px*x1331))+(((-0.56746883)*x1328))+(((-1.08e-6)*x1327))+(((-1.0)*x1333*x1340))+((pz*sj1)));
evalcond[1]=((0.73)+((px*x1339))+(((-1.0)*sj1*x1340))+(((0.56746883)*x1327))+(((-1.0)*pz*x1333))+(((-1.08e-6)*x1328)));
evalcond[2]=(x1327+((x1337*x1338))+(((-1.0)*cj1*x1330*x1332))+((gconst5*r00*x1331))+(((-1.0)*gconst5*x1333*x1334))+(((-1.0)*r21*sj1*x1332))+((r20*x1329)));
evalcond[3]=(x1328+((x1336*x1337))+((r21*x1338))+(((-1.0)*x1329*x1334))+(((-1.0)*gconst5*r20*x1333))+((r00*sj0*x1329))+(((-1.0)*sj1*x1330*x1332)));
evalcond[4]=(((x1331*x1335))+(((-1.0)*cj1*x1332*x1334))+((r20*x1336))+(((-1.0)*x1328))+((r21*x1329))+(((-1.0)*gconst5*x1333*x1337))+((cj1*gconst5*x1330)));
evalcond[5]=(x1327+((x1329*x1330))+((x1335*x1339))+(((-1.0)*x1329*x1337))+(((-1.0)*sj1*x1332*x1334))+(((-1.0)*cj1*r20*x1332))+(((-1.0)*gconst5*r21*x1333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1342=(cj1*pz);
IkReal x1343=(cj0*py);
IkReal x1344=((1.76220406051003)*sj1);
IkReal x1345=((3.35379220296043e-6)*sj1);
IkReal x1346=(px*sj0);
IkReal x1347=((3.35379220296043e-6)*cj1);
IkReal x1348=((1.76220406051003)*x1346);
if( IKabs(((2.44826830816111e-6)+((cj1*x1348))+((x1345*x1346))+(((-3.35379220296043e-6)*x1342))+(((-1.0)*x1343*x1345))+(((-1.76220406051003)*cj1*x1343))+((pz*x1344)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.28640896417232)+((x1346*x1347))+(((1.76220406051003)*x1342))+(((-1.0)*x1343*x1347))+((x1343*x1344))+(((-1.0)*x1344*x1346))+((pz*x1345)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.44826830816111e-6)+((cj1*x1348))+((x1345*x1346))+(((-3.35379220296043e-6)*x1342))+(((-1.0)*x1343*x1345))+(((-1.76220406051003)*cj1*x1343))+((pz*x1344))))+IKsqr(((-1.28640896417232)+((x1346*x1347))+(((1.76220406051003)*x1342))+(((-1.0)*x1343*x1347))+((x1343*x1344))+(((-1.0)*x1344*x1346))+((pz*x1345))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((2.44826830816111e-6)+((cj1*x1348))+((x1345*x1346))+(((-3.35379220296043e-6)*x1342))+(((-1.0)*x1343*x1345))+(((-1.76220406051003)*cj1*x1343))+((pz*x1344))), ((-1.28640896417232)+((x1346*x1347))+(((1.76220406051003)*x1342))+(((-1.0)*x1343*x1347))+((x1343*x1344))+(((-1.0)*x1344*x1346))+((pz*x1345))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1349=IKcos(j2);
IkReal x1350=IKsin(j2);
IkReal x1351=((1.0)*sj1);
IkReal x1352=(cj0*r11);
IkReal x1353=(cj1*sj0);
IkReal x1354=(gconst4*r21);
IkReal x1355=(gconst4*sj1);
IkReal x1356=((1.0)*cj1);
IkReal x1357=(cj0*r10);
IkReal x1358=(gconst5*sj1);
IkReal x1359=(gconst4*r01);
IkReal x1360=(cj0*py);
IkReal x1361=(sj0*x1358);
evalcond[0]=((((-0.56747117)*x1350))+((px*x1353))+(((-1.0)*x1356*x1360))+(((-1.08e-6)*x1349))+((pz*sj1)));
evalcond[1]=((0.73)+((px*sj0*sj1))+(((0.56747117)*x1349))+(((-1.0)*x1351*x1360))+(((-1.08e-6)*x1350))+(((-1.0)*pz*x1356)));
evalcond[2]=(x1350+(((-1.0)*gconst5*x1352*x1356))+((gconst4*r00*x1353))+(((-1.0)*gconst4*x1356*x1357))+((r20*x1355))+((gconst5*r01*x1353))+((r21*x1358)));
evalcond[3]=(x1349+(((-1.0)*x1353*x1359))+((r20*x1358))+(((-1.0)*gconst5*x1356*x1357))+((cj1*gconst4*x1352))+(((-1.0)*x1351*x1354))+((gconst5*r00*x1353)));
evalcond[4]=(x1350+((cj1*x1354))+(((-1.0)*sj0*x1351*x1359))+(((-1.0)*gconst5*x1351*x1357))+((r00*x1361))+(((-1.0)*gconst5*r20*x1356))+((x1352*x1355)));
evalcond[5]=((((-1.0)*gconst5*r21*x1356))+((r00*sj0*x1355))+(((-1.0)*gconst4*x1351*x1357))+(((-1.0)*gconst4*r20*x1356))+(((-1.0)*gconst5*x1351*x1352))+((r01*x1361))+(((-1.0)*x1349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1362=(cj1*r22);
IkReal x1363=((1.17e-6)*sj4);
IkReal x1364=(cj3*sj0);
IkReal x1365=((1.0)*sj4);
IkReal x1366=(cj1*px);
IkReal x1367=(r02*sj1);
IkReal x1368=((1.17e-6)*cj4);
IkReal x1369=(cj3*sj1);
IkReal x1370=(cj0*r12);
IkReal x1371=(cj3*sj4);
IkReal x1372=((1.0)*cj4);
IkReal x1373=(cj0*cj1*py);
CheckValue<IkReal> x1374 = IKatan2WithCheck(IkReal(((((1.08e-6)*x1362))+(((-1.0)*sj0*x1366*x1372))+((cj4*x1373))+((cj3*x1362*x1368))+((x1368*x1369*x1370))+(((-1.08e-6)*sj0*x1367))+(((1.08e-6)*sj1*x1370))+(((-1.0)*pz*sj1*x1372))+(((-1.0)*x1364*x1367*x1368)))),IkReal(((((-0.56747)*x1362))+(((-1.0)*sj0*x1363*x1367))+((x1371*x1373))+(((-1.0)*pz*x1365*x1369))+(((0.56747)*sj0*x1367))+(((-1.0)*x1364*x1365*x1366))+(((-0.56747)*sj1*x1370))+((sj1*x1363*x1370))+((x1362*x1363)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1374.valid){
continue;
}
CheckValue<IkReal> x1375=IKPowWithIntegerCheck(IKsign(((((-1.08e-6)*x1371))+((cj4*x1363))+(((-0.56747)*cj4))+(((-1.0)*cj4*x1363*(cj3*cj3))))),-1);
if(!x1375.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1374.value)+(((1.5707963267949)*(x1375.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1376=IKcos(j2);
IkReal x1377=IKsin(j2);
IkReal x1378=((1.0)*cj0);
IkReal x1379=(cj1*r10);
IkReal x1380=(r11*sj1);
IkReal x1381=(cj1*sj0);
IkReal x1382=(r21*sj1);
IkReal x1383=((1.0)*gconst4);
IkReal x1384=(cj0*gconst4);
IkReal x1385=(cj3*sj4);
IkReal x1386=((1.0)*cj1);
IkReal x1387=(r20*sj1);
IkReal x1388=(gconst4*r00);
IkReal x1389=(cj1*r11);
IkReal x1390=(sj0*sj1);
IkReal x1391=(r10*sj1);
IkReal x1392=(gconst5*x1390);
IkReal x1393=((1.0)*x1377);
IkReal x1394=((1.0)*x1376);
IkReal x1395=(sj4*x1376);
IkReal x1396=(cj3*cj4*x1377);
IkReal x1397=(cj3*cj4*x1376);
evalcond[0]=((((-1.0)*x1385*x1394))+(((-1.0)*cj4*x1393))+(((-1.0)*cj1*r12*x1378))+((r22*sj1))+((r02*x1381)));
evalcond[1]=((((-1.0)*x1385*x1393))+((cj4*x1376))+(((-1.0)*r22*x1386))+(((-1.0)*r12*sj1*x1378))+((r02*x1390)));
evalcond[2]=((((-1.0)*cj1*py*x1378))+(((-1.08e-6)*x1376))+(((-1.17e-6)*x1397))+(((-0.56747)*x1377))+((pz*sj1))+(((1.17e-6)*sj4*x1377))+((px*x1381)));
evalcond[3]=((0.73)+((px*x1390))+(((-1.0)*py*sj1*x1378))+(((0.56747)*x1376))+(((-1.08e-6)*x1377))+(((-1.17e-6)*x1396))+(((-1.17e-6)*x1395))+(((-1.0)*pz*x1386)));
evalcond[4]=(((gconst5*r00*x1381))+((gconst5*x1387))+(((-1.0)*x1382*x1383))+(((-1.0)*r01*x1381*x1383))+(((-1.0)*gconst5*x1378*x1379))+((x1384*x1389))+(((-1.0)*sj3*x1394)));
evalcond[5]=(((x1380*x1384))+(((-1.0)*gconst5*r20*x1386))+(((-1.0)*r01*x1383*x1390))+((cj1*gconst4*r21))+((r00*x1392))+(((-1.0)*gconst5*x1378*x1391))+(((-1.0)*sj3*x1393)));
evalcond[6]=(x1397+((x1381*x1388))+((gconst5*r01*x1381))+((gconst4*x1387))+(((-1.0)*sj4*x1393))+((gconst5*x1382))+(((-1.0)*gconst5*x1378*x1389))+(((-1.0)*gconst4*x1378*x1379)));
evalcond[7]=(x1396+x1395+((x1388*x1390))+(((-1.0)*gconst5*r21*x1386))+(((-1.0)*cj1*r20*x1383))+(((-1.0)*gconst4*x1378*x1391))+((r01*x1392))+(((-1.0)*gconst5*x1378*x1380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1398=(r22*sj1);
IkReal x1399=((1.17e-6)*sj4);
IkReal x1400=(pz*sj1);
IkReal x1401=(cj0*cj1);
IkReal x1402=((1.17e-6)*cj3);
IkReal x1403=(cj3*sj4);
IkReal x1404=(cj1*px*sj0);
IkReal x1405=((1.0)*x1403);
IkReal x1406=(cj1*r02*sj0);
CheckValue<IkReal> x1407=IKPowWithIntegerCheck(IKsign(((((1.08e-6)*cj4))+(((-0.56747)*x1403))+x1402)),-1);
if(!x1407.valid){
continue;
}
CheckValue<IkReal> x1408 = IKatan2WithCheck(IkReal(((((1.08e-6)*x1398))+(((1.08e-6)*x1406))+((cj4*x1402*x1406))+(((-1.0)*x1404*x1405))+(((-1.08e-6)*r12*x1401))+(((-1.0)*x1400*x1405))+((cj4*x1398*x1402))+(((-1.0)*cj4*r12*x1401*x1402))+((py*x1401*x1403)))),IkReal((((x1398*x1399))+(((0.56747)*r12*x1401))+((cj4*x1400))+((cj4*x1404))+(((-1.0)*r12*x1399*x1401))+(((-1.0)*cj4*py*x1401))+(((-0.56747)*x1406))+((x1399*x1406))+(((-0.56747)*x1398)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1408.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1407.value)))+(x1408.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1409=IKcos(j2);
IkReal x1410=IKsin(j2);
IkReal x1411=((1.0)*cj0);
IkReal x1412=(cj1*r10);
IkReal x1413=(r11*sj1);
IkReal x1414=(cj1*sj0);
IkReal x1415=(r21*sj1);
IkReal x1416=((1.0)*gconst4);
IkReal x1417=(cj0*gconst4);
IkReal x1418=(cj3*sj4);
IkReal x1419=((1.0)*cj1);
IkReal x1420=(r20*sj1);
IkReal x1421=(gconst4*r00);
IkReal x1422=(cj1*r11);
IkReal x1423=(sj0*sj1);
IkReal x1424=(r10*sj1);
IkReal x1425=(gconst5*x1423);
IkReal x1426=((1.0)*x1410);
IkReal x1427=((1.0)*x1409);
IkReal x1428=(sj4*x1409);
IkReal x1429=(cj3*cj4*x1410);
IkReal x1430=(cj3*cj4*x1409);
evalcond[0]=((((-1.0)*cj1*r12*x1411))+((r22*sj1))+(((-1.0)*cj4*x1426))+(((-1.0)*x1418*x1427))+((r02*x1414)));
evalcond[1]=((((-1.0)*r22*x1419))+(((-1.0)*r12*sj1*x1411))+((cj4*x1409))+(((-1.0)*x1418*x1426))+((r02*x1423)));
evalcond[2]=((((-1.0)*cj1*py*x1411))+(((1.17e-6)*sj4*x1410))+(((-1.17e-6)*x1430))+(((-0.56747)*x1410))+((px*x1414))+((pz*sj1))+(((-1.08e-6)*x1409)));
evalcond[3]=((0.73)+(((-1.0)*py*sj1*x1411))+(((-1.08e-6)*x1410))+(((0.56747)*x1409))+((px*x1423))+(((-1.17e-6)*x1428))+(((-1.17e-6)*x1429))+(((-1.0)*pz*x1419)));
evalcond[4]=((((-1.0)*x1415*x1416))+((gconst5*r00*x1414))+((gconst5*x1420))+(((-1.0)*r01*x1414*x1416))+(((-1.0)*gconst5*x1411*x1412))+(((-1.0)*sj3*x1427))+((x1417*x1422)));
evalcond[5]=((((-1.0)*gconst5*r20*x1419))+((r00*x1425))+(((-1.0)*r01*x1416*x1423))+((x1413*x1417))+((cj1*gconst4*r21))+(((-1.0)*sj3*x1426))+(((-1.0)*gconst5*x1411*x1424)));
evalcond[6]=(((gconst5*r01*x1414))+((x1414*x1421))+((gconst4*x1420))+(((-1.0)*gconst4*x1411*x1412))+((gconst5*x1415))+x1430+(((-1.0)*sj4*x1426))+(((-1.0)*gconst5*x1411*x1422)));
evalcond[7]=(((r01*x1425))+(((-1.0)*gconst5*r21*x1419))+(((-1.0)*cj1*r20*x1416))+(((-1.0)*gconst5*x1411*x1413))+x1429+x1428+(((-1.0)*gconst4*x1411*x1424))+((x1421*x1423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1431=cj3*cj3;
IkReal x1432=cj4*cj4;
IkReal x1433=(cj0*r12);
IkReal x1434=(cj1*cj4);
IkReal x1435=(r22*sj1);
IkReal x1436=(cj3*sj4);
IkReal x1437=(r02*sj0);
IkReal x1438=((1.0)*sj1);
IkReal x1439=((1.0)*cj1*x1436);
CheckValue<IkReal> x1440=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1431*x1432))+x1432+x1431)),-1);
if(!x1440.valid){
continue;
}
CheckValue<IkReal> x1441 = IKatan2WithCheck(IkReal((((cj4*x1435))+(((-1.0)*r22*x1439))+((x1434*x1437))+(((-1.0)*x1433*x1436*x1438))+(((-1.0)*x1433*x1434))+((sj1*x1436*x1437)))),IkReal((((x1435*x1436))+(((-1.0)*cj4*x1437*x1438))+((cj4*sj1*x1433))+(((-1.0)*x1433*x1439))+((r22*x1434))+((cj1*x1436*x1437)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1441.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1440.value)))+(x1441.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1442=IKcos(j2);
IkReal x1443=IKsin(j2);
IkReal x1444=((1.0)*cj0);
IkReal x1445=(cj1*r10);
IkReal x1446=(r11*sj1);
IkReal x1447=(cj1*sj0);
IkReal x1448=(r21*sj1);
IkReal x1449=((1.0)*gconst4);
IkReal x1450=(cj0*gconst4);
IkReal x1451=(cj3*sj4);
IkReal x1452=((1.0)*cj1);
IkReal x1453=(r20*sj1);
IkReal x1454=(gconst4*r00);
IkReal x1455=(cj1*r11);
IkReal x1456=(sj0*sj1);
IkReal x1457=(r10*sj1);
IkReal x1458=(gconst5*x1456);
IkReal x1459=((1.0)*x1443);
IkReal x1460=((1.0)*x1442);
IkReal x1461=(sj4*x1442);
IkReal x1462=(cj3*cj4*x1443);
IkReal x1463=(cj3*cj4*x1442);
evalcond[0]=(((r22*sj1))+(((-1.0)*cj1*r12*x1444))+((r02*x1447))+(((-1.0)*cj4*x1459))+(((-1.0)*x1451*x1460)));
evalcond[1]=(((cj4*x1442))+(((-1.0)*r22*x1452))+(((-1.0)*x1451*x1459))+(((-1.0)*r12*sj1*x1444))+((r02*x1456)));
evalcond[2]=((((-1.17e-6)*x1463))+(((-1.08e-6)*x1442))+((pz*sj1))+(((1.17e-6)*sj4*x1443))+((px*x1447))+(((-0.56747)*x1443))+(((-1.0)*cj1*py*x1444)));
evalcond[3]=((0.73)+(((-1.17e-6)*x1461))+(((-1.17e-6)*x1462))+((px*x1456))+(((-1.0)*py*sj1*x1444))+(((0.56747)*x1442))+(((-1.08e-6)*x1443))+(((-1.0)*pz*x1452)));
evalcond[4]=(((x1450*x1455))+((gconst5*r00*x1447))+((gconst5*x1453))+(((-1.0)*gconst5*x1444*x1445))+(((-1.0)*sj3*x1460))+(((-1.0)*r01*x1447*x1449))+(((-1.0)*x1448*x1449)));
evalcond[5]=((((-1.0)*gconst5*r20*x1452))+((x1446*x1450))+(((-1.0)*gconst5*x1444*x1457))+((cj1*gconst4*r21))+(((-1.0)*r01*x1449*x1456))+((r00*x1458))+(((-1.0)*sj3*x1459)));
evalcond[6]=(((gconst5*x1448))+(((-1.0)*gconst4*x1444*x1445))+(((-1.0)*sj4*x1459))+(((-1.0)*gconst5*x1444*x1455))+((x1447*x1454))+((gconst5*r01*x1447))+((gconst4*x1453))+x1463);
evalcond[7]=((((-1.0)*gconst5*r21*x1452))+((x1454*x1456))+((r01*x1458))+x1461+x1462+(((-1.0)*gconst4*x1444*x1457))+(((-1.0)*gconst5*x1444*x1446))+(((-1.0)*cj1*r20*x1449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1464=(((cj5*r21))+((r20*sj5)));
j0eval[0]=x1464;
j0eval[1]=((IKabs(r02))+(IKabs(r12)));
j0eval[2]=IKsign(x1464);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1465=(((rxp1_2*sj5))+(((-1.0)*cj5*rxp0_2)));
j0eval[0]=x1465;
j0eval[1]=IKsign(x1465);
j0eval[2]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=r22;
j0eval[1]=((IKabs(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(r22);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1467 = ((rxp1_2*rxp1_2)+(rxp0_2*rxp0_2));
if(IKabs(x1467)==0){
continue;
}
IkReal x1466=pow(x1467,-0.5);
CheckValue<IkReal> x1468 = IKatan2WithCheck(IkReal(((-1.0)*rxp0_2)),IkReal(rxp1_2),IKFAST_ATAN2_MAGTHRESH);
if(!x1468.valid){
continue;
}
IkReal gconst12=((-1.0)*(x1468.value));
IkReal gconst13=(rxp0_2*x1466);
IkReal gconst14=(rxp1_2*x1466);
CheckValue<IkReal> x1469 = IKatan2WithCheck(IkReal(((-1.0)*rxp0_2)),IkReal(rxp1_2),IKFAST_ATAN2_MAGTHRESH);
if(!x1469.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1469.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
CheckValue<IkReal> x1472 = IKatan2WithCheck(IkReal(((-1.0)*rxp0_2)),IkReal(rxp1_2),IKFAST_ATAN2_MAGTHRESH);
if(!x1472.valid){
continue;
}
IkReal x1470=((-1.0)*(x1472.value));
IkReal x1471=x1466;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst13;
cj5=gconst14;
j5=x1470;
IkReal gconst12=x1470;
IkReal gconst13=(rxp0_2*x1471);
IkReal gconst14=(rxp1_2*x1471);
j0eval[0]=((IKabs(r02))+(IKabs(r12)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
CheckValue<IkReal> x1475 = IKatan2WithCheck(IkReal(((-1.0)*rxp0_2)),IkReal(rxp1_2),IKFAST_ATAN2_MAGTHRESH);
if(!x1475.valid){
continue;
}
IkReal x1473=((-1.0)*(x1475.value));
IkReal x1474=x1466;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst13;
cj5=gconst14;
j5=x1473;
IkReal gconst12=x1473;
IkReal gconst13=(rxp0_2*x1474);
IkReal gconst14=(rxp1_2*x1474);
IkReal x1476=x1466;
IkReal x1477=(rxp0_2*x1476);
IkReal x1478=(rxp1_2*x1476);
j0eval[0]=((IKabs((((r10*x1477))+((r11*x1478)))))+(IKabs((((r01*x1478))+((r00*x1477))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
CheckValue<IkReal> x1481 = IKatan2WithCheck(IkReal(((-1.0)*rxp0_2)),IkReal(rxp1_2),IKFAST_ATAN2_MAGTHRESH);
if(!x1481.valid){
continue;
}
IkReal x1479=((-1.0)*(x1481.value));
IkReal x1480=x1466;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst13;
cj5=gconst14;
j5=x1479;
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst12=x1479;
IkReal gconst13=(rxp0_2*x1480);
IkReal gconst14=(rxp1_2*x1480);
j0eval[0]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1482=IKPowWithIntegerCheck(IKsign((((gconst14*r21))+((gconst13*r20)))),-1);
if(!x1482.valid){
continue;
}
CheckValue<IkReal> x1483 = IKatan2WithCheck(IkReal(r02),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x1483.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1482.value)))+(x1483.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1484=IKcos(j0);
IkReal x1485=IKsin(j0);
IkReal x1486=((1.0)*x1484);
IkReal x1487=((1.0)*x1485);
IkReal x1488=(gconst14*x1487);
evalcond[0]=((((-1.0)*r12*x1487))+(((-1.0)*r02*x1486)));
evalcond[1]=((((-1.0)*px*x1486))+(((-1.0)*py*x1487)));
evalcond[2]=((1.0)+(((-1.0)*gconst14*r00*x1486))+((gconst13*r01*x1484))+((gconst13*r11*x1485))+(((-1.0)*r10*x1488)));
evalcond[3]=((((-1.0)*r11*x1488))+(((-1.0)*gconst14*r01*x1486))+(((-1.0)*gconst13*r00*x1486))+(((-1.0)*gconst13*r10*x1487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
CheckValue<IkReal> x1491 = IKatan2WithCheck(IkReal(((-1.0)*rxp0_2)),IkReal(rxp1_2),IKFAST_ATAN2_MAGTHRESH);
if(!x1491.valid){
continue;
}
IkReal x1489=((-1.0)*(x1491.value));
IkReal x1490=x1466;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst13;
cj5=gconst14;
j5=x1489;
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst12=x1489;
IkReal gconst13=(rxp0_2*x1490);
IkReal gconst14=(rxp1_2*x1490);
IkReal x1492=x1466;
IkReal x1493=((1.0)*x1492);
IkReal x1494=(rxp1_2*x1492);
j1eval[0]=((IKabs(((((-1.0)*cj0*r10*rxp1_2*x1493))+(((-1.0)*r01*rxp0_2*sj0*x1493))+((r00*sj0*x1494))+((cj0*r11*rxp0_2*x1492)))))+(IKabs((((r20*x1494))+(((-1.0)*r21*rxp0_2*x1493))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
CheckValue<IkReal> x1497 = IKatan2WithCheck(IkReal(((-1.0)*rxp0_2)),IkReal(rxp1_2),IKFAST_ATAN2_MAGTHRESH);
if(!x1497.valid){
continue;
}
IkReal x1495=((-1.0)*(x1497.value));
IkReal x1496=x1466;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst13;
cj5=gconst14;
j5=x1495;
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst12=x1495;
IkReal gconst13=(rxp0_2*x1496);
IkReal gconst14=(rxp1_2*x1496);
IkReal x1498=x1466;
IkReal x1499=(rxp0_2*x1498);
IkReal x1500=((1.0)*rxp1_2*x1498);
j1eval[0]=((IKabs(((((-1.0)*r20*x1500))+((r21*x1499)))))+(IKabs((((cj0*r11*x1499))+(((-1.0)*r01*sj0*x1499))+((r00*rxp1_2*sj0*x1498))+(((-1.0)*cj0*r10*x1500))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x1501=((1.0)*gconst14);
CheckValue<IkReal> x1503 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x1501))+((gconst13*r21)))),IkReal((((gconst14*r00*sj0))+(((-1.0)*gconst13*r01*sj0))+((cj0*gconst13*r11))+(((-1.0)*cj0*r10*x1501)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1503.valid){
continue;
}
IkReal x1502=x1503.value;
j1array[0]=((-1.0)*x1502);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x1502)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1504=IKcos(j1);
IkReal x1505=IKsin(j1);
IkReal x1506=((1.0)*gconst13);
IkReal x1507=(sj0*x1504);
IkReal x1508=(cj0*x1504);
evalcond[0]=(((gconst13*r11*x1508))+(((-1.0)*gconst14*r10*x1508))+((gconst14*r00*x1507))+((gconst14*r20*x1505))+(((-1.0)*r21*x1505*x1506))+(((-1.0)*r01*x1506*x1507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1509=(cj1*cj4);
IkReal x1510=(sj1*sj4);
IkReal x1511=(cj1*sj4);
IkReal x1512=(r02*sj0);
IkReal x1513=(cj4*sj1);
IkReal x1514=((1.0)*cj0*r12);
if( IKabs((((x1509*x1512))+((x1510*x1512))+(((-1.0)*x1510*x1514))+(((-1.0)*x1509*x1514)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*r12*x1513))+(((-1.0)*x1512*x1513))+((x1511*x1512))+(((-1.0)*x1511*x1514)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1509*x1512))+((x1510*x1512))+(((-1.0)*x1510*x1514))+(((-1.0)*x1509*x1514))))+IKsqr((((cj0*r12*x1513))+(((-1.0)*x1512*x1513))+((x1511*x1512))+(((-1.0)*x1511*x1514))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1509*x1512))+((x1510*x1512))+(((-1.0)*x1510*x1514))+(((-1.0)*x1509*x1514))), (((cj0*r12*x1513))+(((-1.0)*x1512*x1513))+((x1511*x1512))+(((-1.0)*x1511*x1514))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1515=IKcos(j2);
IkReal x1516=IKsin(j2);
IkReal x1517=(gconst14*sj1);
IkReal x1518=((1.17e-6)*cj4);
IkReal x1519=(cj1*sj0);
IkReal x1520=((1.0)*gconst13);
IkReal x1521=(cj0*r10);
IkReal x1522=((1.0)*cj1);
IkReal x1523=(sj0*sj1);
IkReal x1524=(cj0*py);
IkReal x1525=(gconst13*r00);
IkReal x1526=((1.0)*sj1);
IkReal x1527=(cj0*r12);
IkReal x1528=(cj4*x1515);
IkReal x1529=((1.0)*cj0*r11);
IkReal x1530=(sj4*x1516);
IkReal x1531=(sj4*x1515);
IkReal x1532=(cj4*x1516);
IkReal x1533=((1.0)*x1530);
evalcond[0]=((((-1.0)*x1533))+x1528+(((-1.0)*x1526*x1527))+((r02*x1523)));
evalcond[1]=((((-1.0)*x1532))+(((-1.0)*x1531))+((r02*x1519))+(((-1.0)*x1522*x1527)));
evalcond[2]=((((-1.0)*x1515*x1518))+(((-0.56747)*x1516))+(((-1.08e-6)*x1515))+(((1.17e-6)*x1530))+(((-1.0)*x1522*x1524))+((pz*sj1))+((px*x1519)));
evalcond[3]=((0.73)+(((-1.0)*x1516*x1518))+(((-1.0)*x1524*x1526))+(((0.56747)*x1515))+(((-1.08e-6)*x1516))+((px*x1523))+(((-1.0)*pz*x1522))+(((-1.17e-6)*x1531)));
evalcond[4]=((((-1.0)*cj0*gconst14*r11*x1522))+((x1519*x1525))+(((-1.0)*x1533))+((gconst13*r20*sj1))+((gconst14*r01*x1519))+x1528+((r21*x1517))+(((-1.0)*cj1*x1520*x1521)));
evalcond[5]=(((r01*sj0*x1517))+(((-1.0)*sj1*x1520*x1521))+((x1523*x1525))+(((-1.0)*gconst14*r21*x1522))+(((-1.0)*cj1*r20*x1520))+x1532+x1531+(((-1.0)*x1517*x1529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x1534=((1.0)*gconst13);
CheckValue<IkReal> x1536 = IKatan2WithCheck(IkReal((((gconst14*r00*sj0))+(((-1.0)*r01*sj0*x1534))+(((-1.0)*cj0*gconst14*r10))+((cj0*gconst13*r11)))),IkReal((((gconst14*r20))+(((-1.0)*r21*x1534)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1536.valid){
continue;
}
IkReal x1535=x1536.value;
j1array[0]=((-1.0)*x1535);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x1535)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1537=IKsin(j1);
IkReal x1538=IKcos(j1);
IkReal x1539=((1.0)*gconst14);
IkReal x1540=(cj0*x1537);
IkReal x1541=(sj0*x1537);
evalcond[0]=((((-1.0)*r10*x1539*x1540))+(((-1.0)*gconst13*r01*x1541))+((gconst13*r11*x1540))+(((-1.0)*r20*x1538*x1539))+((gconst13*r21*x1538))+((gconst14*r00*x1541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1542=(cj1*cj4);
IkReal x1543=(sj1*sj4);
IkReal x1544=(cj1*sj4);
IkReal x1545=(r02*sj0);
IkReal x1546=(cj4*sj1);
IkReal x1547=((1.0)*cj0*r12);
if( IKabs(((((-1.0)*x1543*x1547))+((x1543*x1545))+(((-1.0)*x1542*x1547))+((x1542*x1545)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*r12*x1546))+((x1544*x1545))+(((-1.0)*x1544*x1547))+(((-1.0)*x1545*x1546)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1543*x1547))+((x1543*x1545))+(((-1.0)*x1542*x1547))+((x1542*x1545))))+IKsqr((((cj0*r12*x1546))+((x1544*x1545))+(((-1.0)*x1544*x1547))+(((-1.0)*x1545*x1546))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1543*x1547))+((x1543*x1545))+(((-1.0)*x1542*x1547))+((x1542*x1545))), (((cj0*r12*x1546))+((x1544*x1545))+(((-1.0)*x1544*x1547))+(((-1.0)*x1545*x1546))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1548=IKcos(j2);
IkReal x1549=IKsin(j2);
IkReal x1550=(gconst14*sj1);
IkReal x1551=((1.17e-6)*cj4);
IkReal x1552=(cj1*sj0);
IkReal x1553=((1.0)*gconst13);
IkReal x1554=(cj0*r10);
IkReal x1555=((1.0)*cj1);
IkReal x1556=(sj0*sj1);
IkReal x1557=(cj0*py);
IkReal x1558=(gconst13*r00);
IkReal x1559=((1.0)*sj1);
IkReal x1560=(cj0*r12);
IkReal x1561=(cj4*x1548);
IkReal x1562=((1.0)*cj0*r11);
IkReal x1563=(sj4*x1549);
IkReal x1564=(sj4*x1548);
IkReal x1565=(cj4*x1549);
IkReal x1566=((1.0)*x1563);
evalcond[0]=((((-1.0)*x1559*x1560))+x1561+((r02*x1556))+(((-1.0)*x1566)));
evalcond[1]=((((-1.0)*x1555*x1560))+((r02*x1552))+(((-1.0)*x1564))+(((-1.0)*x1565)));
evalcond[2]=((((-0.56747)*x1549))+(((-1.08e-6)*x1548))+(((-1.0)*x1555*x1557))+(((-1.0)*x1548*x1551))+((pz*sj1))+(((1.17e-6)*x1563))+((px*x1552)));
evalcond[3]=((0.73)+(((0.56747)*x1548))+(((-1.0)*pz*x1555))+(((-1.0)*x1549*x1551))+(((-1.08e-6)*x1549))+(((-1.0)*x1557*x1559))+(((-1.17e-6)*x1564))+((px*x1556)));
evalcond[4]=(((x1552*x1558))+((gconst13*r20*sj1))+(((-1.0)*cj1*x1553*x1554))+x1561+((r21*x1550))+(((-1.0)*x1566))+((gconst14*r01*x1552))+(((-1.0)*cj0*gconst14*r11*x1555)));
evalcond[5]=(((r01*sj0*x1550))+(((-1.0)*cj1*r20*x1553))+(((-1.0)*gconst14*r21*x1555))+((x1556*x1558))+(((-1.0)*x1550*x1562))+x1564+x1565+(((-1.0)*sj1*x1553*x1554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x1567=((-1.0)*pz);
CheckValue<IkReal> x1570 = IKatan2WithCheck(IkReal(((-1.0)*rxp0_2)),IkReal(rxp1_2),IKFAST_ATAN2_MAGTHRESH);
if(!x1570.valid){
continue;
}
IkReal x1568=((-1.0)*(x1570.value));
IkReal x1569=x1466;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst13;
cj5=gconst14;
j5=x1568;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1567);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1567);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal gconst12=x1568;
IkReal gconst13=(rxp0_2*x1569);
IkReal gconst14=(rxp1_2*x1569);
j0eval[0]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1571=IKPowWithIntegerCheck(IKsign((r22*(((gconst14*gconst14)+(gconst13*gconst13))))),-1);
if(!x1571.valid){
continue;
}
CheckValue<IkReal> x1572 = IKatan2WithCheck(IkReal(((((-1.0)*gconst13*r00))+(((-1.0)*gconst14*r01)))),IkReal((((gconst14*r11))+((gconst13*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1572.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1571.value)))+(x1572.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1573=IKcos(j0);
IkReal x1574=IKsin(j0);
IkReal x1575=((1.0)*x1573);
IkReal x1576=((1.0)*x1574);
IkReal x1577=(gconst14*x1576);
evalcond[0]=((((-1.0)*py*x1576))+(((-1.0)*px*x1575)));
evalcond[1]=((1.0)+((gconst13*r01*x1573))+((gconst13*r11*x1574))+(((-1.0)*r10*x1577))+(((-1.0)*gconst14*r00*x1575)));
evalcond[2]=((((-1.0)*gconst13*r10*x1576))+(((-1.0)*gconst14*r01*x1575))+(((-1.0)*r11*x1577))+(((-1.0)*gconst13*r00*x1575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[2+1], zeror[2];
int numroots;
IkReal x1578=((1.0)*gconst14);
IkReal x1579=(cj0*r10);
IkReal x1580=(r00*sj0);
IkReal x1581=(cj0*gconst13*r11);
IkReal x1582=(gconst13*r01*sj0);
op[0]=((((-1.0)*x1578*x1580))+((gconst14*x1579))+x1582+(((-1.0)*x1581)));
op[1]=0;
op[2]=(((gconst14*x1580))+(((-1.0)*x1578*x1579))+x1581+(((-1.0)*x1582)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1583=(cj4*r22);
IkReal x1584=(r22*sj4);
if( IKabs(((((-1.0)*cj1*x1584))+((sj1*x1583)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x1583))+((sj1*x1584)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x1584))+((sj1*x1583))))+IKsqr((((cj1*x1583))+((sj1*x1584))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*x1584))+((sj1*x1583))), (((cj1*x1583))+((sj1*x1584))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1585=IKcos(j2);
IkReal x1586=IKsin(j2);
IkReal x1587=(cj1*sj0);
IkReal x1588=(gconst13*r10);
IkReal x1589=(gconst14*r01);
IkReal x1590=(gconst14*r11);
IkReal x1591=((1.0)*cj1);
IkReal x1592=((1.0)*sj4);
IkReal x1593=(sj0*sj1);
IkReal x1594=(gconst13*r00);
IkReal x1595=(cj4*x1585);
IkReal x1596=((1.0)*cj0*sj1);
IkReal x1597=((1.17e-6)*x1586);
IkReal x1598=(sj4*x1585);
IkReal x1599=(cj4*x1586);
IkReal x1600=(x1586*x1592);
evalcond[0]=((((-1.0)*x1585*x1592))+((r22*sj1))+(((-1.0)*x1599)));
evalcond[1]=((((-1.0)*x1600))+x1595+(((-1.0)*r22*x1591)));
evalcond[2]=(((x1593*x1594))+((x1589*x1593))+(((-1.0)*x1588*x1596))+x1599+x1598+(((-1.0)*x1590*x1596)));
evalcond[3]=((((-1.0)*cj0*x1588*x1591))+((x1587*x1589))+(((-1.0)*cj0*x1590*x1591))+((x1587*x1594))+(((-1.0)*x1600))+x1595);
evalcond[4]=((((-0.56747)*x1586))+(((-1.08e-6)*x1585))+((sj4*x1597))+(((-1.17e-6)*x1595))+((px*x1587))+((pz*sj1))+(((-1.0)*cj0*py*x1591)));
evalcond[5]=((0.73)+(((-1.0)*pz*x1591))+(((0.56747)*x1585))+(((-1.0)*py*x1596))+(((-1.08e-6)*x1586))+(((-1.0)*cj4*x1597))+(((-1.17e-6)*x1598))+((px*x1593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r02))+(IKabs(r12)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x1601=((-1.0)*pz);
CheckValue<IkReal> x1604 = IKatan2WithCheck(IkReal(((-1.0)*rxp0_2)),IkReal(rxp1_2),IKFAST_ATAN2_MAGTHRESH);
if(!x1604.valid){
continue;
}
IkReal x1602=((-1.0)*(x1604.value));
IkReal x1603=x1466;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst13;
cj5=gconst14;
j5=x1602;
r12=0;
r02=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1601);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1601);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal gconst12=x1602;
IkReal gconst13=(rxp0_2*x1603);
IkReal gconst14=(rxp1_2*x1603);
j0eval[0]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1605=IKPowWithIntegerCheck(IKsign((r22*(((gconst14*gconst14)+(gconst13*gconst13))))),-1);
if(!x1605.valid){
continue;
}
CheckValue<IkReal> x1606 = IKatan2WithCheck(IkReal(((((-1.0)*gconst13*r00))+(((-1.0)*gconst14*r01)))),IkReal((((gconst14*r11))+((gconst13*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1606.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1605.value)))+(x1606.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1607=IKcos(j0);
IkReal x1608=IKsin(j0);
IkReal x1609=((1.0)*x1607);
IkReal x1610=((1.0)*x1608);
IkReal x1611=(gconst14*x1610);
evalcond[0]=((((-1.0)*py*x1610))+(((-1.0)*px*x1609)));
evalcond[1]=((1.0)+((gconst13*r01*x1607))+(((-1.0)*gconst14*r00*x1609))+(((-1.0)*r10*x1611))+((gconst13*r11*x1608)));
evalcond[2]=((((-1.0)*r11*x1611))+(((-1.0)*gconst13*r10*x1610))+(((-1.0)*gconst13*r00*x1609))+(((-1.0)*gconst14*r01*x1609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[2+1], zeror[2];
int numroots;
IkReal x1612=((1.0)*gconst14);
IkReal x1613=(cj0*r10);
IkReal x1614=(r00*sj0);
IkReal x1615=(cj0*gconst13*r11);
IkReal x1616=(gconst13*r01*sj0);
op[0]=((((-1.0)*x1615))+x1616+((gconst14*x1613))+(((-1.0)*x1612*x1614)));
op[1]=0;
op[2]=((((-1.0)*x1616))+x1615+((gconst14*x1614))+(((-1.0)*x1612*x1613)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1617=(cj4*r22);
IkReal x1618=(r22*sj4);
if( IKabs((((sj1*x1617))+(((-1.0)*cj1*x1618)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x1618))+((cj1*x1617)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x1617))+(((-1.0)*cj1*x1618))))+IKsqr((((sj1*x1618))+((cj1*x1617))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x1617))+(((-1.0)*cj1*x1618))), (((sj1*x1618))+((cj1*x1617))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1619=IKcos(j2);
IkReal x1620=IKsin(j2);
IkReal x1621=(cj1*sj0);
IkReal x1622=(gconst13*r10);
IkReal x1623=(gconst14*r01);
IkReal x1624=(gconst14*r11);
IkReal x1625=((1.0)*cj1);
IkReal x1626=((1.0)*sj4);
IkReal x1627=(sj0*sj1);
IkReal x1628=(gconst13*r00);
IkReal x1629=(cj4*x1619);
IkReal x1630=((1.0)*cj0*sj1);
IkReal x1631=((1.17e-6)*x1620);
IkReal x1632=(sj4*x1619);
IkReal x1633=(cj4*x1620);
IkReal x1634=(x1620*x1626);
evalcond[0]=((((-1.0)*x1619*x1626))+((r22*sj1))+(((-1.0)*x1633)));
evalcond[1]=(x1629+(((-1.0)*x1634))+(((-1.0)*r22*x1625)));
evalcond[2]=(((x1627*x1628))+(((-1.0)*x1622*x1630))+x1632+x1633+((x1623*x1627))+(((-1.0)*x1624*x1630)));
evalcond[3]=(x1629+(((-1.0)*cj0*x1624*x1625))+(((-1.0)*cj0*x1622*x1625))+(((-1.0)*x1634))+((x1621*x1628))+((x1621*x1623)));
evalcond[4]=((((-1.17e-6)*x1629))+(((-1.0)*cj0*py*x1625))+(((-0.56747)*x1620))+((px*x1621))+((pz*sj1))+((sj4*x1631))+(((-1.08e-6)*x1619)));
evalcond[5]=((0.73)+(((0.56747)*x1619))+(((-1.0)*pz*x1625))+((px*x1627))+(((-1.17e-6)*x1632))+(((-1.08e-6)*x1620))+(((-1.0)*cj4*x1631))+(((-1.0)*py*x1630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1635=IKPowWithIntegerCheck(IKsign((r22*(((gconst14*gconst14)+(gconst13*gconst13))))),-1);
if(!x1635.valid){
continue;
}
CheckValue<IkReal> x1636 = IKatan2WithCheck(IkReal(((((-1.0)*gconst13*r00))+(((-1.0)*gconst14*r01)))),IkReal((((gconst14*r11))+((gconst13*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1636.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1635.value)))+(x1636.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1637=IKcos(j0);
IkReal x1638=IKsin(j0);
IkReal x1639=((1.0)*x1637);
IkReal x1640=((1.0)*x1638);
IkReal x1641=(gconst14*x1640);
evalcond[0]=((((-1.0)*r12*x1640))+(((-1.0)*r02*x1639)));
evalcond[1]=((((-1.0)*py*x1640))+(((-1.0)*px*x1639)));
evalcond[2]=((1.0)+(((-1.0)*gconst14*r00*x1639))+((gconst13*r11*x1638))+(((-1.0)*r10*x1641))+((gconst13*r01*x1637)));
evalcond[3]=((((-1.0)*r11*x1641))+(((-1.0)*gconst13*r00*x1639))+(((-1.0)*gconst13*r10*x1640))+(((-1.0)*gconst14*r01*x1639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
CheckValue<IkReal> x1644 = IKatan2WithCheck(IkReal(((-1.0)*rxp0_2)),IkReal(rxp1_2),IKFAST_ATAN2_MAGTHRESH);
if(!x1644.valid){
continue;
}
IkReal x1642=((-1.0)*(x1644.value));
IkReal x1643=x1466;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst13;
cj5=gconst14;
j5=x1642;
IkReal gconst12=x1642;
IkReal gconst13=(rxp0_2*x1643);
IkReal gconst14=(rxp1_2*x1643);
IkReal x1645=x1466;
IkReal x1646=((1.0)*x1645);
IkReal x1647=(rxp1_2*x1645);
j1eval[0]=((IKabs(((((-1.0)*r21*rxp0_2*x1646))+((r20*x1647)))))+(IKabs(((((-1.0)*r01*rxp0_2*sj0*x1646))+((r00*sj0*x1647))+(((-1.0)*cj0*r10*rxp1_2*x1646))+((cj0*r11*rxp0_2*x1645))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
CheckValue<IkReal> x1650 = IKatan2WithCheck(IkReal(((-1.0)*rxp0_2)),IkReal(rxp1_2),IKFAST_ATAN2_MAGTHRESH);
if(!x1650.valid){
continue;
}
IkReal x1648=((-1.0)*(x1650.value));
IkReal x1649=x1466;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst13;
cj5=gconst14;
j5=x1648;
IkReal gconst12=x1648;
IkReal gconst13=(rxp0_2*x1649);
IkReal gconst14=(rxp1_2*x1649);
IkReal x1651=x1466;
IkReal x1652=(rxp0_2*x1651);
IkReal x1653=((1.0)*rxp1_2*x1651);
j1eval[0]=((IKabs(((((-1.0)*cj0*r10*x1653))+(((-1.0)*r01*sj0*x1652))+((cj0*r11*x1652))+((r00*rxp1_2*sj0*x1651)))))+(IKabs(((((-1.0)*r20*x1653))+((r21*x1652))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x1654=((1.0)*gconst14);
CheckValue<IkReal> x1656 = IKatan2WithCheck(IkReal((((gconst13*r21))+(((-1.0)*r20*x1654)))),IkReal((((gconst14*r00*sj0))+(((-1.0)*gconst13*r01*sj0))+(((-1.0)*cj0*r10*x1654))+((cj0*gconst13*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1656.valid){
continue;
}
IkReal x1655=x1656.value;
j1array[0]=((-1.0)*x1655);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x1655)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1657=IKcos(j1);
IkReal x1658=IKsin(j1);
IkReal x1659=((1.0)*gconst13);
IkReal x1660=(sj0*x1657);
IkReal x1661=(cj0*x1657);
evalcond[0]=((((-1.0)*gconst14*r10*x1661))+(((-1.0)*r01*x1659*x1660))+((gconst13*r11*x1661))+((gconst14*r20*x1658))+((gconst14*r00*x1660))+(((-1.0)*r21*x1658*x1659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1662=(cj1*cj4);
IkReal x1663=(sj1*sj4);
IkReal x1664=(cj4*sj1);
IkReal x1665=(cj1*sj4);
IkReal x1666=(r02*sj0);
IkReal x1667=((1.0)*cj0*r12);
if( IKabs(((((-1.0)*r22*x1665))+(((-1.0)*x1662*x1667))+((x1662*x1666))+(((-1.0)*x1663*x1667))+((x1663*x1666))+((r22*x1664)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*r12*x1664))+(((-1.0)*x1664*x1666))+((x1665*x1666))+(((-1.0)*x1665*x1667))+((r22*x1663))+((r22*x1662)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x1665))+(((-1.0)*x1662*x1667))+((x1662*x1666))+(((-1.0)*x1663*x1667))+((x1663*x1666))+((r22*x1664))))+IKsqr((((cj0*r12*x1664))+(((-1.0)*x1664*x1666))+((x1665*x1666))+(((-1.0)*x1665*x1667))+((r22*x1663))+((r22*x1662))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x1665))+(((-1.0)*x1662*x1667))+((x1662*x1666))+(((-1.0)*x1663*x1667))+((x1663*x1666))+((r22*x1664))), (((cj0*r12*x1664))+(((-1.0)*x1664*x1666))+((x1665*x1666))+(((-1.0)*x1665*x1667))+((r22*x1663))+((r22*x1662))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1668=IKcos(j2);
IkReal x1669=IKsin(j2);
IkReal x1670=(gconst14*sj1);
IkReal x1671=((1.17e-6)*cj4);
IkReal x1672=(cj1*sj0);
IkReal x1673=((1.0)*gconst13);
IkReal x1674=(cj0*r10);
IkReal x1675=((1.0)*cj1);
IkReal x1676=(sj0*sj1);
IkReal x1677=(cj0*py);
IkReal x1678=(gconst13*r00);
IkReal x1679=((1.0)*sj1);
IkReal x1680=(cj0*r12);
IkReal x1681=(cj4*x1668);
IkReal x1682=((1.0)*cj0*r11);
IkReal x1683=(sj4*x1669);
IkReal x1684=(sj4*x1668);
IkReal x1685=(cj4*x1669);
IkReal x1686=((1.0)*x1683);
evalcond[0]=(((r02*x1672))+(((-1.0)*x1675*x1680))+((r22*sj1))+(((-1.0)*x1685))+(((-1.0)*x1684)));
evalcond[1]=(((r02*x1676))+(((-1.0)*x1686))+x1681+(((-1.0)*x1679*x1680))+(((-1.0)*r22*x1675)));
evalcond[2]=((((-1.0)*x1668*x1671))+((px*x1672))+(((-1.08e-6)*x1668))+(((1.17e-6)*x1683))+(((-0.56747)*x1669))+((pz*sj1))+(((-1.0)*x1675*x1677)));
evalcond[3]=((0.73)+(((-1.0)*x1669*x1671))+(((0.56747)*x1668))+((px*x1676))+(((-1.0)*pz*x1675))+(((-1.08e-6)*x1669))+(((-1.0)*x1677*x1679))+(((-1.17e-6)*x1684)));
evalcond[4]=(((r21*x1670))+(((-1.0)*x1686))+((gconst14*r01*x1672))+x1681+((gconst13*r20*sj1))+(((-1.0)*cj0*gconst14*r11*x1675))+((x1672*x1678))+(((-1.0)*cj1*x1673*x1674)));
evalcond[5]=(((x1676*x1678))+(((-1.0)*sj1*x1673*x1674))+(((-1.0)*x1670*x1682))+(((-1.0)*gconst14*r21*x1675))+((r01*sj0*x1670))+x1685+x1684+(((-1.0)*cj1*r20*x1673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x1687=((1.0)*gconst13);
CheckValue<IkReal> x1689 = IKatan2WithCheck(IkReal((((gconst14*r00*sj0))+(((-1.0)*cj0*gconst14*r10))+((cj0*gconst13*r11))+(((-1.0)*r01*sj0*x1687)))),IkReal((((gconst14*r20))+(((-1.0)*r21*x1687)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1689.valid){
continue;
}
IkReal x1688=x1689.value;
j1array[0]=((-1.0)*x1688);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x1688)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1690=IKsin(j1);
IkReal x1691=IKcos(j1);
IkReal x1692=((1.0)*gconst14);
IkReal x1693=(cj0*x1690);
IkReal x1694=(sj0*x1690);
evalcond[0]=(((gconst13*r11*x1693))+(((-1.0)*r20*x1691*x1692))+((gconst13*r21*x1691))+(((-1.0)*gconst13*r01*x1694))+((gconst14*r00*x1694))+(((-1.0)*r10*x1692*x1693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1695=(cj1*cj4);
IkReal x1696=(sj1*sj4);
IkReal x1697=(cj4*sj1);
IkReal x1698=(cj1*sj4);
IkReal x1699=(r02*sj0);
IkReal x1700=((1.0)*cj0*r12);
if( IKabs((((x1695*x1699))+(((-1.0)*r22*x1698))+((r22*x1697))+(((-1.0)*x1695*x1700))+(((-1.0)*x1696*x1700))+((x1696*x1699)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*r12*x1697))+(((-1.0)*x1698*x1700))+((r22*x1696))+((r22*x1695))+(((-1.0)*x1697*x1699))+((x1698*x1699)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1695*x1699))+(((-1.0)*r22*x1698))+((r22*x1697))+(((-1.0)*x1695*x1700))+(((-1.0)*x1696*x1700))+((x1696*x1699))))+IKsqr((((cj0*r12*x1697))+(((-1.0)*x1698*x1700))+((r22*x1696))+((r22*x1695))+(((-1.0)*x1697*x1699))+((x1698*x1699))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1695*x1699))+(((-1.0)*r22*x1698))+((r22*x1697))+(((-1.0)*x1695*x1700))+(((-1.0)*x1696*x1700))+((x1696*x1699))), (((cj0*r12*x1697))+(((-1.0)*x1698*x1700))+((r22*x1696))+((r22*x1695))+(((-1.0)*x1697*x1699))+((x1698*x1699))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1701=IKcos(j2);
IkReal x1702=IKsin(j2);
IkReal x1703=(gconst14*sj1);
IkReal x1704=((1.17e-6)*cj4);
IkReal x1705=(cj1*sj0);
IkReal x1706=((1.0)*gconst13);
IkReal x1707=(cj0*r10);
IkReal x1708=((1.0)*cj1);
IkReal x1709=(sj0*sj1);
IkReal x1710=(cj0*py);
IkReal x1711=(gconst13*r00);
IkReal x1712=((1.0)*sj1);
IkReal x1713=(cj0*r12);
IkReal x1714=(cj4*x1701);
IkReal x1715=((1.0)*cj0*r11);
IkReal x1716=(sj4*x1702);
IkReal x1717=(sj4*x1701);
IkReal x1718=(cj4*x1702);
IkReal x1719=((1.0)*x1716);
evalcond[0]=(((r02*x1705))+((r22*sj1))+(((-1.0)*x1717))+(((-1.0)*x1718))+(((-1.0)*x1708*x1713)));
evalcond[1]=(((r02*x1709))+(((-1.0)*x1712*x1713))+x1714+(((-1.0)*x1719))+(((-1.0)*r22*x1708)));
evalcond[2]=((((-1.0)*x1708*x1710))+((px*x1705))+(((-1.08e-6)*x1701))+((pz*sj1))+(((-1.0)*x1701*x1704))+(((-0.56747)*x1702))+(((1.17e-6)*x1716)));
evalcond[3]=((0.73)+(((-1.0)*x1710*x1712))+(((-1.0)*x1702*x1704))+(((-1.0)*pz*x1708))+(((0.56747)*x1701))+(((-1.17e-6)*x1717))+((px*x1709))+(((-1.08e-6)*x1702)));
evalcond[4]=(x1714+(((-1.0)*cj0*gconst14*r11*x1708))+(((-1.0)*x1719))+((gconst14*r01*x1705))+((gconst13*r20*sj1))+((r21*x1703))+((x1705*x1711))+(((-1.0)*cj1*x1706*x1707)));
evalcond[5]=(((r01*sj0*x1703))+x1717+x1718+((x1709*x1711))+(((-1.0)*sj1*x1706*x1707))+(((-1.0)*gconst14*r21*x1708))+(((-1.0)*x1703*x1715))+(((-1.0)*cj1*r20*x1706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1720=IKPowWithIntegerCheck(IKsign((((gconst14*r21))+((gconst13*r20)))),-1);
if(!x1720.valid){
continue;
}
CheckValue<IkReal> x1721 = IKatan2WithCheck(IkReal(r02),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x1721.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1720.value)))+(x1721.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1722=IKcos(j0);
IkReal x1723=IKsin(j0);
IkReal x1724=((1.0)*x1722);
IkReal x1725=((1.0)*x1723);
IkReal x1726=(gconst14*x1725);
evalcond[0]=((((-1.0)*r12*x1725))+(((-1.0)*r02*x1724)));
evalcond[1]=((((-1.0)*py*x1725))+(((-1.0)*px*x1724)));
evalcond[2]=((1.0)+((gconst13*r11*x1723))+(((-1.0)*r10*x1726))+((gconst13*r01*x1722))+(((-1.0)*gconst14*r00*x1724)));
evalcond[3]=((((-1.0)*r11*x1726))+(((-1.0)*gconst14*r01*x1724))+(((-1.0)*gconst13*r10*x1725))+(((-1.0)*gconst13*r00*x1724)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
CheckValue<IkReal> x1729 = IKatan2WithCheck(IkReal(((-1.0)*rxp0_2)),IkReal(rxp1_2),IKFAST_ATAN2_MAGTHRESH);
if(!x1729.valid){
continue;
}
IkReal x1727=((-1.0)*(x1729.value));
IkReal x1728=x1466;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst13;
cj5=gconst14;
j5=x1727;
IkReal gconst12=x1727;
IkReal gconst13=(rxp0_2*x1728);
IkReal gconst14=(rxp1_2*x1728);
IkReal x1730=x1466;
IkReal x1731=((1.0)*x1730);
IkReal x1732=(rxp1_2*x1730);
j1eval[0]=((IKabs(((((-1.0)*r21*rxp0_2*x1731))+((r20*x1732)))))+(IKabs((((cj0*r11*rxp0_2*x1730))+(((-1.0)*cj0*r10*rxp1_2*x1731))+(((-1.0)*r01*rxp0_2*sj0*x1731))+((r00*sj0*x1732))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
CheckValue<IkReal> x1735 = IKatan2WithCheck(IkReal(((-1.0)*rxp0_2)),IkReal(rxp1_2),IKFAST_ATAN2_MAGTHRESH);
if(!x1735.valid){
continue;
}
IkReal x1733=((-1.0)*(x1735.value));
IkReal x1734=x1466;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst13;
cj5=gconst14;
j5=x1733;
IkReal gconst12=x1733;
IkReal gconst13=(rxp0_2*x1734);
IkReal gconst14=(rxp1_2*x1734);
IkReal x1736=x1466;
IkReal x1737=(rxp0_2*x1736);
IkReal x1738=((1.0)*rxp1_2*x1736);
j1eval[0]=((IKabs(((((-1.0)*r01*sj0*x1737))+((cj0*r11*x1737))+((r00*rxp1_2*sj0*x1736))+(((-1.0)*cj0*r10*x1738)))))+(IKabs((((r21*x1737))+(((-1.0)*r20*x1738))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x1739=((1.0)*gconst14);
CheckValue<IkReal> x1741 = IKatan2WithCheck(IkReal((((gconst13*r21))+(((-1.0)*r20*x1739)))),IkReal((((gconst14*r00*sj0))+(((-1.0)*gconst13*r01*sj0))+((cj0*gconst13*r11))+(((-1.0)*cj0*r10*x1739)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1741.valid){
continue;
}
IkReal x1740=x1741.value;
j1array[0]=((-1.0)*x1740);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x1740)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1742=IKcos(j1);
IkReal x1743=IKsin(j1);
IkReal x1744=((1.0)*gconst13);
IkReal x1745=(sj0*x1742);
IkReal x1746=(cj0*x1742);
evalcond[0]=(((gconst13*r11*x1746))+(((-1.0)*gconst14*r10*x1746))+(((-1.0)*r01*x1744*x1745))+((gconst14*r20*x1743))+(((-1.0)*r21*x1743*x1744))+((gconst14*r00*x1745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1747=(cj1*cj4);
IkReal x1748=(sj1*sj4);
IkReal x1749=(cj4*sj1);
IkReal x1750=(cj1*sj4);
IkReal x1751=(r02*sj0);
IkReal x1752=((1.0)*cj0*r12);
if( IKabs(((((-1.0)*x1748*x1752))+((r22*x1749))+((x1747*x1751))+(((-1.0)*x1747*x1752))+(((-1.0)*r22*x1750))+((x1748*x1751)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1749*x1751))+((r22*x1748))+((r22*x1747))+((x1750*x1751))+((cj0*r12*x1749))+(((-1.0)*x1750*x1752)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1748*x1752))+((r22*x1749))+((x1747*x1751))+(((-1.0)*x1747*x1752))+(((-1.0)*r22*x1750))+((x1748*x1751))))+IKsqr(((((-1.0)*x1749*x1751))+((r22*x1748))+((r22*x1747))+((x1750*x1751))+((cj0*r12*x1749))+(((-1.0)*x1750*x1752))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1748*x1752))+((r22*x1749))+((x1747*x1751))+(((-1.0)*x1747*x1752))+(((-1.0)*r22*x1750))+((x1748*x1751))), ((((-1.0)*x1749*x1751))+((r22*x1748))+((r22*x1747))+((x1750*x1751))+((cj0*r12*x1749))+(((-1.0)*x1750*x1752))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1753=IKcos(j2);
IkReal x1754=IKsin(j2);
IkReal x1755=(gconst14*sj1);
IkReal x1756=((1.17e-6)*cj4);
IkReal x1757=(cj1*sj0);
IkReal x1758=((1.0)*gconst13);
IkReal x1759=(cj0*r10);
IkReal x1760=((1.0)*cj1);
IkReal x1761=(sj0*sj1);
IkReal x1762=(cj0*py);
IkReal x1763=(gconst13*r00);
IkReal x1764=((1.0)*sj1);
IkReal x1765=(cj0*r12);
IkReal x1766=(cj4*x1753);
IkReal x1767=((1.0)*cj0*r11);
IkReal x1768=(sj4*x1754);
IkReal x1769=(sj4*x1753);
IkReal x1770=(cj4*x1754);
IkReal x1771=((1.0)*x1768);
evalcond[0]=((((-1.0)*x1769))+(((-1.0)*x1770))+((r22*sj1))+((r02*x1757))+(((-1.0)*x1760*x1765)));
evalcond[1]=(x1766+(((-1.0)*x1771))+(((-1.0)*x1764*x1765))+(((-1.0)*r22*x1760))+((r02*x1761)));
evalcond[2]=((((-0.56747)*x1754))+(((1.17e-6)*x1768))+((px*x1757))+(((-1.08e-6)*x1753))+(((-1.0)*x1760*x1762))+(((-1.0)*x1753*x1756))+((pz*sj1)));
evalcond[3]=((0.73)+(((-1.0)*x1762*x1764))+(((-1.17e-6)*x1769))+(((-1.0)*pz*x1760))+(((0.56747)*x1753))+(((-1.08e-6)*x1754))+(((-1.0)*x1754*x1756))+((px*x1761)));
evalcond[4]=(((gconst14*r01*x1757))+x1766+(((-1.0)*cj1*x1758*x1759))+((gconst13*r20*sj1))+((r21*x1755))+((x1757*x1763))+(((-1.0)*x1771))+(((-1.0)*cj0*gconst14*r11*x1760)));
evalcond[5]=((((-1.0)*sj1*x1758*x1759))+x1769+x1770+(((-1.0)*x1755*x1767))+(((-1.0)*gconst14*r21*x1760))+((r01*sj0*x1755))+(((-1.0)*cj1*r20*x1758))+((x1761*x1763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x1772=((1.0)*gconst13);
CheckValue<IkReal> x1774 = IKatan2WithCheck(IkReal((((gconst14*r00*sj0))+(((-1.0)*cj0*gconst14*r10))+(((-1.0)*r01*sj0*x1772))+((cj0*gconst13*r11)))),IkReal((((gconst14*r20))+(((-1.0)*r21*x1772)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1774.valid){
continue;
}
IkReal x1773=x1774.value;
j1array[0]=((-1.0)*x1773);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x1773)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1775=IKsin(j1);
IkReal x1776=IKcos(j1);
IkReal x1777=((1.0)*gconst14);
IkReal x1778=(cj0*x1775);
IkReal x1779=(sj0*x1775);
evalcond[0]=(((gconst13*r21*x1776))+(((-1.0)*gconst13*r01*x1779))+(((-1.0)*r10*x1777*x1778))+((gconst14*r00*x1779))+(((-1.0)*r20*x1776*x1777))+((gconst13*r11*x1778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1780=(cj1*cj4);
IkReal x1781=(sj1*sj4);
IkReal x1782=(cj4*sj1);
IkReal x1783=(cj1*sj4);
IkReal x1784=(r02*sj0);
IkReal x1785=((1.0)*cj0*r12);
if( IKabs((((r22*x1782))+(((-1.0)*r22*x1783))+(((-1.0)*x1780*x1785))+(((-1.0)*x1781*x1785))+((x1780*x1784))+((x1781*x1784)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1783*x1785))+((x1783*x1784))+(((-1.0)*x1782*x1784))+((r22*x1780))+((r22*x1781))+((cj0*r12*x1782)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x1782))+(((-1.0)*r22*x1783))+(((-1.0)*x1780*x1785))+(((-1.0)*x1781*x1785))+((x1780*x1784))+((x1781*x1784))))+IKsqr(((((-1.0)*x1783*x1785))+((x1783*x1784))+(((-1.0)*x1782*x1784))+((r22*x1780))+((r22*x1781))+((cj0*r12*x1782))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r22*x1782))+(((-1.0)*r22*x1783))+(((-1.0)*x1780*x1785))+(((-1.0)*x1781*x1785))+((x1780*x1784))+((x1781*x1784))), ((((-1.0)*x1783*x1785))+((x1783*x1784))+(((-1.0)*x1782*x1784))+((r22*x1780))+((r22*x1781))+((cj0*r12*x1782))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1786=IKcos(j2);
IkReal x1787=IKsin(j2);
IkReal x1788=(gconst14*sj1);
IkReal x1789=((1.17e-6)*cj4);
IkReal x1790=(cj1*sj0);
IkReal x1791=((1.0)*gconst13);
IkReal x1792=(cj0*r10);
IkReal x1793=((1.0)*cj1);
IkReal x1794=(sj0*sj1);
IkReal x1795=(cj0*py);
IkReal x1796=(gconst13*r00);
IkReal x1797=((1.0)*sj1);
IkReal x1798=(cj0*r12);
IkReal x1799=(cj4*x1786);
IkReal x1800=((1.0)*cj0*r11);
IkReal x1801=(sj4*x1787);
IkReal x1802=(sj4*x1786);
IkReal x1803=(cj4*x1787);
IkReal x1804=((1.0)*x1801);
evalcond[0]=(((r22*sj1))+(((-1.0)*x1793*x1798))+((r02*x1790))+(((-1.0)*x1803))+(((-1.0)*x1802)));
evalcond[1]=((((-1.0)*r22*x1793))+x1799+(((-1.0)*x1804))+((r02*x1794))+(((-1.0)*x1797*x1798)));
evalcond[2]=((((1.17e-6)*x1801))+(((-1.08e-6)*x1786))+(((-1.0)*x1793*x1795))+(((-0.56747)*x1787))+(((-1.0)*x1786*x1789))+((pz*sj1))+((px*x1790)));
evalcond[3]=((0.73)+(((-1.0)*x1795*x1797))+(((-1.08e-6)*x1787))+(((-1.0)*x1787*x1789))+(((-1.17e-6)*x1802))+(((-1.0)*pz*x1793))+(((0.56747)*x1786))+((px*x1794)));
evalcond[4]=(x1799+((r21*x1788))+(((-1.0)*cj1*x1791*x1792))+((gconst13*r20*sj1))+(((-1.0)*x1804))+((x1790*x1796))+((gconst14*r01*x1790))+(((-1.0)*cj0*gconst14*r11*x1793)));
evalcond[5]=((((-1.0)*cj1*r20*x1791))+(((-1.0)*sj1*x1791*x1792))+(((-1.0)*x1788*x1800))+((r01*sj0*x1788))+x1803+x1802+((x1794*x1796))+(((-1.0)*gconst14*r21*x1793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1805=((-1.0)*rxp0_2);
IkReal x1807 = ((rxp1_2*rxp1_2)+(rxp0_2*rxp0_2));
if(IKabs(x1807)==0){
continue;
}
IkReal x1806=pow(x1807,-0.5);
CheckValue<IkReal> x1808 = IKatan2WithCheck(IkReal(x1805),IkReal(rxp1_2),IKFAST_ATAN2_MAGTHRESH);
if(!x1808.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x1808.value))));
IkReal gconst16=(x1805*x1806);
IkReal gconst17=((-1.0)*rxp1_2*x1806);
CheckValue<IkReal> x1809 = IKatan2WithCheck(IkReal(((-1.0)*rxp0_2)),IkReal(rxp1_2),IKFAST_ATAN2_MAGTHRESH);
if(!x1809.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1809.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x1810=((-1.0)*rxp0_2);
CheckValue<IkReal> x1813 = IKatan2WithCheck(IkReal(x1810),IkReal(rxp1_2),IKFAST_ATAN2_MAGTHRESH);
if(!x1813.valid){
continue;
}
IkReal x1811=((1.0)*(x1813.value));
IkReal x1812=x1806;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x1811)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x1811)));
IkReal gconst16=(x1810*x1812);
IkReal gconst17=((-1.0)*rxp1_2*x1812);
j0eval[0]=((IKabs(r02))+(IKabs(r12)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x1814=((-1.0)*rxp0_2);
CheckValue<IkReal> x1817 = IKatan2WithCheck(IkReal(x1814),IkReal(rxp1_2),IKFAST_ATAN2_MAGTHRESH);
if(!x1817.valid){
continue;
}
IkReal x1815=((1.0)*(x1817.value));
IkReal x1816=x1806;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x1815)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x1815)));
IkReal gconst16=(x1814*x1816);
IkReal gconst17=((-1.0)*rxp1_2*x1816);
j0eval[0]=0;
j0eval[1]=((IKabs(px))+(IKabs(py)));
j0eval[2]=0;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x1818=((-1.0)*rxp0_2);
CheckValue<IkReal> x1821 = IKatan2WithCheck(IkReal(x1818),IkReal(rxp1_2),IKFAST_ATAN2_MAGTHRESH);
if(!x1821.valid){
continue;
}
IkReal x1819=((1.0)*(x1821.value));
IkReal x1820=x1806;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x1819)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x1819)));
IkReal gconst16=(x1818*x1820);
IkReal gconst17=((-1.0)*rxp1_2*x1820);
IkReal x1822=x1806;
IkReal x1823=(rxp0_2*x1822);
IkReal x1824=(rxp1_2*x1822);
j0eval[0]=((IKabs((((r00*x1823))+((r01*x1824)))))+(IKabs((((r10*x1823))+((r11*x1824))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x1825=((-1.0)*rxp0_2);
CheckValue<IkReal> x1828 = IKatan2WithCheck(IkReal(x1825),IkReal(rxp1_2),IKFAST_ATAN2_MAGTHRESH);
if(!x1828.valid){
continue;
}
IkReal x1826=((1.0)*(x1828.value));
IkReal x1827=x1806;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x1826)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x1826)));
IkReal gconst16=(x1825*x1827);
IkReal gconst17=((-1.0)*rxp1_2*x1827);
j0eval[0]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x1829=((-1.0)*rxp0_2);
CheckValue<IkReal> x1832 = IKatan2WithCheck(IkReal(x1829),IkReal(rxp1_2),IKFAST_ATAN2_MAGTHRESH);
if(!x1832.valid){
continue;
}
IkReal x1830=((1.0)*(x1832.value));
IkReal x1831=x1806;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x1830)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x1830)));
IkReal gconst16=(x1829*x1831);
IkReal gconst17=((-1.0)*rxp1_2*x1831);
j0eval[0]=0;
j0eval[1]=((IKabs(px))+(IKabs(py)));
j0eval[2]=0;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1833=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst17*rxp0_2))+((gconst16*rxp1_2)))),-1);
if(!x1833.valid){
continue;
}
CheckValue<IkReal> x1834 = IKatan2WithCheck(IkReal(px),IkReal(((-1.0)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x1834.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1833.value)))+(x1834.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1835=IKcos(j0);
IkReal x1836=IKsin(j0);
IkReal x1837=((1.0)*r10);
IkReal x1838=(gconst16*x1836);
IkReal x1839=((1.0)*x1835);
IkReal x1840=((1.0)*x1836);
evalcond[0]=((((-1.0)*r12*x1840))+(((-1.0)*r02*x1839)));
evalcond[1]=((((-1.0)*px*x1839))+(((-1.0)*py*x1840)));
evalcond[2]=((1.0)+(((-1.0)*gconst17*r00*x1839))+((gconst16*r01*x1835))+(((-1.0)*gconst17*x1836*x1837))+((r11*x1838)));
evalcond[3]=((((-1.0)*x1837*x1838))+(((-1.0)*gconst16*r00*x1839))+(((-1.0)*gconst17*r11*x1840))+(((-1.0)*gconst17*r01*x1839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x1841=((-1.0)*rxp0_2);
CheckValue<IkReal> x1844 = IKatan2WithCheck(IkReal(x1841),IkReal(rxp1_2),IKFAST_ATAN2_MAGTHRESH);
if(!x1844.valid){
continue;
}
IkReal x1842=((1.0)*(x1844.value));
IkReal x1843=x1806;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x1842)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x1842)));
IkReal gconst16=(x1841*x1843);
IkReal gconst17=((-1.0)*rxp1_2*x1843);
IkReal x1845=x1806;
IkReal x1846=(rxp0_2*x1845);
IkReal x1847=(rxp1_2*x1845);
j1eval[0]=((IKabs(((((-1.0)*r00*sj0*x1847))+((cj0*r10*x1847))+((r01*sj0*x1846))+(((-1.0)*cj0*r11*x1846)))))+(IKabs(((((-1.0)*r20*x1847))+((r21*x1846))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x1848=((-1.0)*rxp0_2);
CheckValue<IkReal> x1851 = IKatan2WithCheck(IkReal(x1848),IkReal(rxp1_2),IKFAST_ATAN2_MAGTHRESH);
if(!x1851.valid){
continue;
}
IkReal x1849=((1.0)*(x1851.value));
IkReal x1850=x1806;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x1849)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x1849)));
IkReal gconst16=(x1848*x1850);
IkReal gconst17=((-1.0)*rxp1_2*x1850);
IkReal x1852=x1806;
IkReal x1853=(sj0*x1852);
IkReal x1854=(rxp1_2*x1852);
IkReal x1855=((1.0)*rxp0_2*x1852);
j1eval[0]=((IKabs(((((-1.0)*r00*rxp1_2*x1853))+(((-1.0)*cj0*r11*x1855))+((cj0*r10*x1854))+((r01*rxp0_2*x1853)))))+(IKabs((((r20*x1854))+(((-1.0)*r21*x1855))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x1856=((1.0)*gconst17);
CheckValue<IkReal> x1858 = IKatan2WithCheck(IkReal((((gconst16*r21))+(((-1.0)*r20*x1856)))),IkReal(((((-1.0)*cj0*r10*x1856))+(((-1.0)*gconst16*r01*sj0))+((cj0*gconst16*r11))+((gconst17*r00*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1858.valid){
continue;
}
IkReal x1857=x1858.value;
j1array[0]=((-1.0)*x1857);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x1857)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1859=IKcos(j1);
IkReal x1860=IKsin(j1);
IkReal x1861=((1.0)*gconst16);
IkReal x1862=(sj0*x1859);
IkReal x1863=(cj0*x1859);
evalcond[0]=(((gconst16*r11*x1863))+((gconst17*r00*x1862))+(((-1.0)*gconst17*r10*x1863))+(((-1.0)*r01*x1861*x1862))+((gconst17*r20*x1860))+(((-1.0)*r21*x1860*x1861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1864=(cj1*cj4);
IkReal x1865=(sj1*sj4);
IkReal x1866=(cj1*sj4);
IkReal x1867=(r02*sj0);
IkReal x1868=(cj4*sj1);
IkReal x1869=((1.0)*cj0*r12);
if( IKabs(((((-1.0)*x1864*x1869))+((x1864*x1867))+(((-1.0)*x1865*x1869))+((x1865*x1867)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1867*x1868))+(((-1.0)*x1866*x1869))+((x1866*x1867))+((cj0*r12*x1868)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1864*x1869))+((x1864*x1867))+(((-1.0)*x1865*x1869))+((x1865*x1867))))+IKsqr(((((-1.0)*x1867*x1868))+(((-1.0)*x1866*x1869))+((x1866*x1867))+((cj0*r12*x1868))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1864*x1869))+((x1864*x1867))+(((-1.0)*x1865*x1869))+((x1865*x1867))), ((((-1.0)*x1867*x1868))+(((-1.0)*x1866*x1869))+((x1866*x1867))+((cj0*r12*x1868))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1870=IKcos(j2);
IkReal x1871=IKsin(j2);
IkReal x1872=((1.17e-6)*cj4);
IkReal x1873=(gconst16*sj1);
IkReal x1874=(px*sj0);
IkReal x1875=((1.0)*cj0);
IkReal x1876=((1.0)*cj1);
IkReal x1877=(gconst17*r21);
IkReal x1878=(cj1*sj0);
IkReal x1879=(gconst17*r01);
IkReal x1880=(sj0*sj1);
IkReal x1881=(gconst17*r11);
IkReal x1882=(cj4*x1870);
IkReal x1883=(sj4*x1871);
IkReal x1884=(sj4*x1870);
IkReal x1885=(cj4*x1871);
IkReal x1886=((1.0)*x1883);
evalcond[0]=((((-1.0)*r12*sj1*x1875))+x1882+(((-1.0)*x1886))+((r02*x1880)));
evalcond[1]=(((r02*x1878))+(((-1.0)*x1885))+(((-1.0)*x1884))+(((-1.0)*cj1*r12*x1875)));
evalcond[2]=((((-1.0)*x1870*x1872))+(((1.17e-6)*x1883))+((cj1*x1874))+(((-0.56747)*x1871))+(((-1.08e-6)*x1870))+((pz*sj1))+(((-1.0)*cj1*py*x1875)));
evalcond[3]=((0.73)+(((0.56747)*x1870))+(((-1.0)*py*sj1*x1875))+((sj1*x1874))+(((-1.0)*x1871*x1872))+(((-1.17e-6)*x1884))+(((-1.08e-6)*x1871))+(((-1.0)*pz*x1876)));
evalcond[4]=((((-1.0)*cj1*gconst16*r10*x1875))+((gconst16*r00*x1878))+((sj1*x1877))+((r20*x1873))+x1882+(((-1.0)*x1886))+((x1878*x1879))+(((-1.0)*cj1*x1875*x1881)));
evalcond[5]=(((r00*sj0*x1873))+((x1879*x1880))+(((-1.0)*x1876*x1877))+(((-1.0)*gconst16*r20*x1876))+(((-1.0)*r10*x1873*x1875))+x1885+x1884+(((-1.0)*sj1*x1875*x1881)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x1887=((1.0)*gconst16);
CheckValue<IkReal> x1889 = IKatan2WithCheck(IkReal((((cj0*gconst16*r11))+(((-1.0)*r01*sj0*x1887))+((gconst17*r00*sj0))+(((-1.0)*cj0*gconst17*r10)))),IkReal((((gconst17*r20))+(((-1.0)*r21*x1887)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1889.valid){
continue;
}
IkReal x1888=x1889.value;
j1array[0]=((-1.0)*x1888);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x1888)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1890=IKsin(j1);
IkReal x1891=IKcos(j1);
IkReal x1892=((1.0)*gconst17);
IkReal x1893=(cj0*x1890);
IkReal x1894=(sj0*x1890);
evalcond[0]=(((gconst17*r00*x1894))+(((-1.0)*r20*x1891*x1892))+((gconst16*r11*x1893))+(((-1.0)*r10*x1892*x1893))+(((-1.0)*gconst16*r01*x1894))+((gconst16*r21*x1891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1895=(cj1*cj4);
IkReal x1896=(sj1*sj4);
IkReal x1897=(cj1*sj4);
IkReal x1898=(r02*sj0);
IkReal x1899=(cj4*sj1);
IkReal x1900=((1.0)*cj0*r12);
if( IKabs((((x1896*x1898))+(((-1.0)*x1896*x1900))+((x1895*x1898))+(((-1.0)*x1895*x1900)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1897*x1898))+(((-1.0)*x1898*x1899))+((cj0*r12*x1899))+(((-1.0)*x1897*x1900)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1896*x1898))+(((-1.0)*x1896*x1900))+((x1895*x1898))+(((-1.0)*x1895*x1900))))+IKsqr((((x1897*x1898))+(((-1.0)*x1898*x1899))+((cj0*r12*x1899))+(((-1.0)*x1897*x1900))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1896*x1898))+(((-1.0)*x1896*x1900))+((x1895*x1898))+(((-1.0)*x1895*x1900))), (((x1897*x1898))+(((-1.0)*x1898*x1899))+((cj0*r12*x1899))+(((-1.0)*x1897*x1900))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1901=IKcos(j2);
IkReal x1902=IKsin(j2);
IkReal x1903=((1.17e-6)*cj4);
IkReal x1904=(gconst16*sj1);
IkReal x1905=(px*sj0);
IkReal x1906=((1.0)*cj0);
IkReal x1907=((1.0)*cj1);
IkReal x1908=(gconst17*r21);
IkReal x1909=(cj1*sj0);
IkReal x1910=(gconst17*r01);
IkReal x1911=(sj0*sj1);
IkReal x1912=(gconst17*r11);
IkReal x1913=(cj4*x1901);
IkReal x1914=(sj4*x1902);
IkReal x1915=(sj4*x1901);
IkReal x1916=(cj4*x1902);
IkReal x1917=((1.0)*x1914);
evalcond[0]=((((-1.0)*r12*sj1*x1906))+x1913+((r02*x1911))+(((-1.0)*x1917)));
evalcond[1]=((((-1.0)*x1916))+(((-1.0)*x1915))+(((-1.0)*cj1*r12*x1906))+((r02*x1909)));
evalcond[2]=((((-1.08e-6)*x1901))+(((-0.56747)*x1902))+((cj1*x1905))+(((-1.0)*x1901*x1903))+(((1.17e-6)*x1914))+((pz*sj1))+(((-1.0)*cj1*py*x1906)));
evalcond[3]=((0.73)+(((-1.0)*x1902*x1903))+(((-1.17e-6)*x1915))+(((-1.08e-6)*x1902))+(((-1.0)*py*sj1*x1906))+(((-1.0)*pz*x1907))+((sj1*x1905))+(((0.56747)*x1901)));
evalcond[4]=((((-1.0)*cj1*gconst16*r10*x1906))+(((-1.0)*cj1*x1906*x1912))+x1913+((sj1*x1908))+((gconst16*r00*x1909))+((x1909*x1910))+((r20*x1904))+(((-1.0)*x1917)));
evalcond[5]=((((-1.0)*gconst16*r20*x1907))+(((-1.0)*x1907*x1908))+(((-1.0)*sj1*x1906*x1912))+((x1910*x1911))+(((-1.0)*r10*x1904*x1906))+x1915+x1916+((r00*sj0*x1904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1918 = IKatan2WithCheck(IkReal(r02),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x1918.valid){
continue;
}
CheckValue<IkReal> x1919=IKPowWithIntegerCheck(IKsign((((gconst17*r21))+((gconst16*r20)))),-1);
if(!x1919.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1918.value)+(((1.5707963267949)*(x1919.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1920=IKcos(j0);
IkReal x1921=IKsin(j0);
IkReal x1922=((1.0)*r10);
IkReal x1923=(gconst16*x1921);
IkReal x1924=((1.0)*x1920);
IkReal x1925=((1.0)*x1921);
evalcond[0]=((((-1.0)*r12*x1925))+(((-1.0)*r02*x1924)));
evalcond[1]=((((-1.0)*py*x1925))+(((-1.0)*px*x1924)));
evalcond[2]=((1.0)+(((-1.0)*gconst17*x1921*x1922))+(((-1.0)*gconst17*r00*x1924))+((gconst16*r01*x1920))+((r11*x1923)));
evalcond[3]=((((-1.0)*x1922*x1923))+(((-1.0)*gconst17*r11*x1925))+(((-1.0)*gconst17*r01*x1924))+(((-1.0)*gconst16*r00*x1924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x1926=((-1.0)*rxp0_2);
CheckValue<IkReal> x1929 = IKatan2WithCheck(IkReal(x1926),IkReal(rxp1_2),IKFAST_ATAN2_MAGTHRESH);
if(!x1929.valid){
continue;
}
IkReal x1927=((1.0)*(x1929.value));
IkReal x1928=x1806;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x1927)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x1927)));
IkReal gconst16=(x1926*x1928);
IkReal gconst17=((-1.0)*rxp1_2*x1928);
IkReal x1930=x1806;
IkReal x1931=(rxp0_2*x1930);
IkReal x1932=(rxp1_2*x1930);
j1eval[0]=((IKabs(((((-1.0)*cj0*r11*x1931))+(((-1.0)*r00*sj0*x1932))+((cj0*r10*x1932))+((r01*sj0*x1931)))))+(IKabs((((r21*x1931))+(((-1.0)*r20*x1932))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x1933=((-1.0)*rxp0_2);
CheckValue<IkReal> x1936 = IKatan2WithCheck(IkReal(x1933),IkReal(rxp1_2),IKFAST_ATAN2_MAGTHRESH);
if(!x1936.valid){
continue;
}
IkReal x1934=((1.0)*(x1936.value));
IkReal x1935=x1806;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x1934)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x1934)));
IkReal gconst16=(x1933*x1935);
IkReal gconst17=((-1.0)*rxp1_2*x1935);
IkReal x1937=x1806;
IkReal x1938=(sj0*x1937);
IkReal x1939=(rxp1_2*x1937);
IkReal x1940=((1.0)*rxp0_2*x1937);
j1eval[0]=((IKabs(((((-1.0)*r21*x1940))+((r20*x1939)))))+(IKabs((((cj0*r10*x1939))+((r01*rxp0_2*x1938))+(((-1.0)*r00*rxp1_2*x1938))+(((-1.0)*cj0*r11*x1940))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x1941=((1.0)*gconst17);
CheckValue<IkReal> x1943 = IKatan2WithCheck(IkReal((((gconst16*r21))+(((-1.0)*r20*x1941)))),IkReal(((((-1.0)*gconst16*r01*sj0))+(((-1.0)*cj0*r10*x1941))+((cj0*gconst16*r11))+((gconst17*r00*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1943.valid){
continue;
}
IkReal x1942=x1943.value;
j1array[0]=((-1.0)*x1942);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x1942)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1944=IKcos(j1);
IkReal x1945=IKsin(j1);
IkReal x1946=((1.0)*gconst16);
IkReal x1947=(sj0*x1944);
IkReal x1948=(cj0*x1944);
evalcond[0]=(((gconst16*r11*x1948))+((gconst17*r00*x1947))+(((-1.0)*gconst17*r10*x1948))+(((-1.0)*r01*x1946*x1947))+(((-1.0)*r21*x1945*x1946))+((gconst17*r20*x1945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1949=(cj1*cj4);
IkReal x1950=(sj1*sj4);
IkReal x1951=(cj1*sj4);
IkReal x1952=(r02*sj0);
IkReal x1953=(cj4*sj1);
IkReal x1954=((1.0)*cj0*r12);
if( IKabs(((((-1.0)*x1949*x1954))+(((-1.0)*x1950*x1954))+((x1950*x1952))+((x1949*x1952)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1951*x1952))+(((-1.0)*x1951*x1954))+(((-1.0)*x1952*x1953))+((cj0*r12*x1953)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1949*x1954))+(((-1.0)*x1950*x1954))+((x1950*x1952))+((x1949*x1952))))+IKsqr((((x1951*x1952))+(((-1.0)*x1951*x1954))+(((-1.0)*x1952*x1953))+((cj0*r12*x1953))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1949*x1954))+(((-1.0)*x1950*x1954))+((x1950*x1952))+((x1949*x1952))), (((x1951*x1952))+(((-1.0)*x1951*x1954))+(((-1.0)*x1952*x1953))+((cj0*r12*x1953))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1955=IKcos(j2);
IkReal x1956=IKsin(j2);
IkReal x1957=((1.17e-6)*cj4);
IkReal x1958=(gconst16*sj1);
IkReal x1959=(px*sj0);
IkReal x1960=((1.0)*cj0);
IkReal x1961=((1.0)*cj1);
IkReal x1962=(gconst17*r21);
IkReal x1963=(cj1*sj0);
IkReal x1964=(gconst17*r01);
IkReal x1965=(sj0*sj1);
IkReal x1966=(gconst17*r11);
IkReal x1967=(cj4*x1955);
IkReal x1968=(sj4*x1956);
IkReal x1969=(sj4*x1955);
IkReal x1970=(cj4*x1956);
IkReal x1971=((1.0)*x1968);
evalcond[0]=(((r02*x1965))+(((-1.0)*r12*sj1*x1960))+(((-1.0)*x1971))+x1967);
evalcond[1]=(((r02*x1963))+(((-1.0)*x1969))+(((-1.0)*x1970))+(((-1.0)*cj1*r12*x1960)));
evalcond[2]=((((-1.08e-6)*x1955))+(((-0.56747)*x1956))+(((1.17e-6)*x1968))+((cj1*x1959))+(((-1.0)*cj1*py*x1960))+((pz*sj1))+(((-1.0)*x1955*x1957)));
evalcond[3]=((0.73)+(((0.56747)*x1955))+(((-1.08e-6)*x1956))+(((-1.0)*py*sj1*x1960))+(((-1.17e-6)*x1969))+((sj1*x1959))+(((-1.0)*pz*x1961))+(((-1.0)*x1956*x1957)));
evalcond[4]=(((r20*x1958))+((gconst16*r00*x1963))+((sj1*x1962))+(((-1.0)*x1971))+(((-1.0)*cj1*x1960*x1966))+x1967+((x1963*x1964))+(((-1.0)*cj1*gconst16*r10*x1960)));
evalcond[5]=((((-1.0)*sj1*x1960*x1966))+((x1964*x1965))+((r00*sj0*x1958))+(((-1.0)*gconst16*r20*x1961))+x1969+x1970+(((-1.0)*x1961*x1962))+(((-1.0)*r10*x1958*x1960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x1972=((1.0)*gconst16);
CheckValue<IkReal> x1974 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj0*x1972))+((cj0*gconst16*r11))+((gconst17*r00*sj0))+(((-1.0)*cj0*gconst17*r10)))),IkReal((((gconst17*r20))+(((-1.0)*r21*x1972)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1974.valid){
continue;
}
IkReal x1973=x1974.value;
j1array[0]=((-1.0)*x1973);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x1973)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1975=IKsin(j1);
IkReal x1976=IKcos(j1);
IkReal x1977=((1.0)*gconst17);
IkReal x1978=(cj0*x1975);
IkReal x1979=(sj0*x1975);
evalcond[0]=(((gconst16*r21*x1976))+(((-1.0)*r10*x1977*x1978))+(((-1.0)*gconst16*r01*x1979))+(((-1.0)*r20*x1976*x1977))+((gconst17*r00*x1979))+((gconst16*r11*x1978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1980=(cj1*cj4);
IkReal x1981=(sj1*sj4);
IkReal x1982=(cj1*sj4);
IkReal x1983=(r02*sj0);
IkReal x1984=(cj4*sj1);
IkReal x1985=((1.0)*cj0*r12);
if( IKabs(((((-1.0)*x1981*x1985))+(((-1.0)*x1980*x1985))+((x1981*x1983))+((x1980*x1983)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1983*x1984))+((x1982*x1983))+(((-1.0)*x1982*x1985))+((cj0*r12*x1984)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1981*x1985))+(((-1.0)*x1980*x1985))+((x1981*x1983))+((x1980*x1983))))+IKsqr(((((-1.0)*x1983*x1984))+((x1982*x1983))+(((-1.0)*x1982*x1985))+((cj0*r12*x1984))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1981*x1985))+(((-1.0)*x1980*x1985))+((x1981*x1983))+((x1980*x1983))), ((((-1.0)*x1983*x1984))+((x1982*x1983))+(((-1.0)*x1982*x1985))+((cj0*r12*x1984))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1986=IKcos(j2);
IkReal x1987=IKsin(j2);
IkReal x1988=((1.17e-6)*cj4);
IkReal x1989=(gconst16*sj1);
IkReal x1990=(px*sj0);
IkReal x1991=((1.0)*cj0);
IkReal x1992=((1.0)*cj1);
IkReal x1993=(gconst17*r21);
IkReal x1994=(cj1*sj0);
IkReal x1995=(gconst17*r01);
IkReal x1996=(sj0*sj1);
IkReal x1997=(gconst17*r11);
IkReal x1998=(cj4*x1986);
IkReal x1999=(sj4*x1987);
IkReal x2000=(sj4*x1986);
IkReal x2001=(cj4*x1987);
IkReal x2002=((1.0)*x1999);
evalcond[0]=(((r02*x1996))+x1998+(((-1.0)*x2002))+(((-1.0)*r12*sj1*x1991)));
evalcond[1]=(((r02*x1994))+(((-1.0)*cj1*r12*x1991))+(((-1.0)*x2000))+(((-1.0)*x2001)));
evalcond[2]=((((-1.0)*x1986*x1988))+(((-1.0)*cj1*py*x1991))+(((-0.56747)*x1987))+((cj1*x1990))+((pz*sj1))+(((1.17e-6)*x1999))+(((-1.08e-6)*x1986)));
evalcond[3]=((0.73)+((sj1*x1990))+(((-1.0)*x1987*x1988))+(((-1.17e-6)*x2000))+(((-1.0)*pz*x1992))+(((-1.0)*py*sj1*x1991))+(((-1.08e-6)*x1987))+(((0.56747)*x1986)));
evalcond[4]=(((sj1*x1993))+((gconst16*r00*x1994))+((x1994*x1995))+x1998+(((-1.0)*x2002))+(((-1.0)*cj1*gconst16*r10*x1991))+(((-1.0)*cj1*x1991*x1997))+((r20*x1989)));
evalcond[5]=(((r00*sj0*x1989))+x2000+x2001+((x1995*x1996))+(((-1.0)*gconst16*r20*x1992))+(((-1.0)*x1992*x1993))+(((-1.0)*r10*x1989*x1991))+(((-1.0)*sj1*x1991*x1997)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x2003=((-1.0)*rxp0_2);
IkReal x2004=((-1.0)*pz);
CheckValue<IkReal> x2007 = IKatan2WithCheck(IkReal(x2003),IkReal(rxp1_2),IKFAST_ATAN2_MAGTHRESH);
if(!x2007.valid){
continue;
}
IkReal x2005=((1.0)*(x2007.value));
IkReal x2006=x1806;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x2005)));
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2004);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2004);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x2005)));
IkReal gconst16=(x2003*x2006);
IkReal gconst17=((-1.0)*rxp1_2*x2006);
j0eval[0]=0;
j0eval[1]=((IKabs(px))+(IKabs(py)));
j0eval[2]=0;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x2008=((-1.0)*rxp0_2);
IkReal x2009=((-1.0)*pz);
CheckValue<IkReal> x2012 = IKatan2WithCheck(IkReal(x2008),IkReal(rxp1_2),IKFAST_ATAN2_MAGTHRESH);
if(!x2012.valid){
continue;
}
IkReal x2010=((1.0)*(x2012.value));
IkReal x2011=x1806;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x2010)));
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2009);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2009);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x2010)));
IkReal gconst16=(x2008*x2011);
IkReal gconst17=((-1.0)*rxp1_2*x2011);
j0eval[0]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2013=IKPowWithIntegerCheck(IKsign((r22*(((gconst17*gconst17)+(gconst16*gconst16))))),-1);
if(!x2013.valid){
continue;
}
CheckValue<IkReal> x2014 = IKatan2WithCheck(IkReal(((((-1.0)*gconst17*r01))+(((-1.0)*gconst16*r00)))),IkReal((((gconst17*r11))+((gconst16*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2014.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2013.value)))+(x2014.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x2015=IKsin(j0);
IkReal x2016=IKcos(j0);
IkReal x2017=((1.0)*r10);
IkReal x2018=(gconst16*x2015);
IkReal x2019=((1.0)*x2016);
IkReal x2020=((1.0)*x2015);
evalcond[0]=((((-1.0)*py*x2020))+(((-1.0)*px*x2019)));
evalcond[1]=((1.0)+(((-1.0)*gconst17*x2015*x2017))+(((-1.0)*gconst17*r00*x2019))+((gconst16*r01*x2016))+((r11*x2018)));
evalcond[2]=((((-1.0)*gconst17*r11*x2020))+(((-1.0)*gconst17*r01*x2019))+(((-1.0)*x2017*x2018))+(((-1.0)*gconst16*r00*x2019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[2+1], zeror[2];
int numroots;
IkReal x2021=(gconst16*r01*sj0);
IkReal x2022=(cj0*gconst17*r10);
IkReal x2023=(gconst17*r00*sj0);
IkReal x2024=(cj0*gconst16*r11);
op[0]=(x2021+x2022+(((-1.0)*x2023))+(((-1.0)*x2024)));
op[1]=0;
op[2]=(x2024+x2023+(((-1.0)*x2022))+(((-1.0)*x2021)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2025=(cj4*r22);
IkReal x2026=(r22*sj4);
if( IKabs(((((-1.0)*cj1*x2026))+((sj1*x2025)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x2026))+((cj1*x2025)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x2026))+((sj1*x2025))))+IKsqr((((sj1*x2026))+((cj1*x2025))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*x2026))+((sj1*x2025))), (((sj1*x2026))+((cj1*x2025))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2027=IKcos(j2);
IkReal x2028=IKsin(j2);
IkReal x2029=(cj1*sj0);
IkReal x2030=((1.0)*cj0);
IkReal x2031=(gconst16*r10);
IkReal x2032=((1.0)*cj1);
IkReal x2033=(gconst17*r01);
IkReal x2034=((1.0)*sj4);
IkReal x2035=(sj0*sj1);
IkReal x2036=(gconst16*r00);
IkReal x2037=(gconst17*r11);
IkReal x2038=(cj4*x2027);
IkReal x2039=((1.17e-6)*x2028);
IkReal x2040=(sj4*x2027);
IkReal x2041=(cj4*x2028);
IkReal x2042=(x2028*x2034);
evalcond[0]=(((r22*sj1))+(((-1.0)*x2041))+(((-1.0)*x2027*x2034)));
evalcond[1]=((((-1.0)*r22*x2032))+(((-1.0)*x2042))+x2038);
evalcond[2]=(((x2033*x2035))+(((-1.0)*sj1*x2030*x2031))+(((-1.0)*sj1*x2030*x2037))+x2040+x2041+((x2035*x2036)));
evalcond[3]=((((-1.0)*x2042))+x2038+(((-1.0)*cj1*x2030*x2037))+(((-1.0)*cj1*x2030*x2031))+((x2029*x2036))+((x2029*x2033)));
evalcond[4]=((((-1.08e-6)*x2027))+(((-0.56747)*x2028))+(((-1.17e-6)*x2038))+((px*x2029))+((sj4*x2039))+((pz*sj1))+(((-1.0)*cj1*py*x2030)));
evalcond[5]=((0.73)+(((-1.08e-6)*x2028))+(((-1.0)*pz*x2032))+(((0.56747)*x2027))+(((-1.17e-6)*x2040))+(((-1.0)*py*sj1*x2030))+((px*x2035))+(((-1.0)*cj4*x2039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2043=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst17*rxp0_2))+((gconst16*rxp1_2)))),-1);
if(!x2043.valid){
continue;
}
CheckValue<IkReal> x2044 = IKatan2WithCheck(IkReal(px),IkReal(((-1.0)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x2044.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2043.value)))+(x2044.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x2045=IKsin(j0);
IkReal x2046=IKcos(j0);
IkReal x2047=((1.0)*r10);
IkReal x2048=(gconst16*x2045);
IkReal x2049=((1.0)*x2046);
IkReal x2050=((1.0)*x2045);
evalcond[0]=((((-1.0)*py*x2050))+(((-1.0)*px*x2049)));
evalcond[1]=((1.0)+(((-1.0)*gconst17*r00*x2049))+((r11*x2048))+((gconst16*r01*x2046))+(((-1.0)*gconst17*x2045*x2047)));
evalcond[2]=((((-1.0)*gconst17*r01*x2049))+(((-1.0)*gconst17*r11*x2050))+(((-1.0)*gconst16*r00*x2049))+(((-1.0)*x2047*x2048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[2+1], zeror[2];
int numroots;
IkReal x2051=(gconst16*r01*sj0);
IkReal x2052=(cj0*gconst17*r10);
IkReal x2053=(gconst17*r00*sj0);
IkReal x2054=(cj0*gconst16*r11);
op[0]=(x2051+x2052+(((-1.0)*x2053))+(((-1.0)*x2054)));
op[1]=0;
op[2]=(x2053+x2054+(((-1.0)*x2052))+(((-1.0)*x2051)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2055=(cj4*r22);
IkReal x2056=(r22*sj4);
if( IKabs(((((-1.0)*cj1*x2056))+((sj1*x2055)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x2056))+((cj1*x2055)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x2056))+((sj1*x2055))))+IKsqr((((sj1*x2056))+((cj1*x2055))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*x2056))+((sj1*x2055))), (((sj1*x2056))+((cj1*x2055))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2057=IKcos(j2);
IkReal x2058=IKsin(j2);
IkReal x2059=(cj1*sj0);
IkReal x2060=((1.0)*cj0);
IkReal x2061=(gconst16*r10);
IkReal x2062=((1.0)*cj1);
IkReal x2063=(gconst17*r01);
IkReal x2064=((1.0)*sj4);
IkReal x2065=(sj0*sj1);
IkReal x2066=(gconst16*r00);
IkReal x2067=(gconst17*r11);
IkReal x2068=(cj4*x2057);
IkReal x2069=((1.17e-6)*x2058);
IkReal x2070=(sj4*x2057);
IkReal x2071=(cj4*x2058);
IkReal x2072=(x2058*x2064);
evalcond[0]=((((-1.0)*x2057*x2064))+((r22*sj1))+(((-1.0)*x2071)));
evalcond[1]=(x2068+(((-1.0)*r22*x2062))+(((-1.0)*x2072)));
evalcond[2]=(x2071+x2070+(((-1.0)*sj1*x2060*x2061))+(((-1.0)*sj1*x2060*x2067))+((x2063*x2065))+((x2065*x2066)));
evalcond[3]=(x2068+((x2059*x2063))+((x2059*x2066))+(((-1.0)*x2072))+(((-1.0)*cj1*x2060*x2061))+(((-1.0)*cj1*x2060*x2067)));
evalcond[4]=((((-1.0)*cj1*py*x2060))+(((-0.56747)*x2058))+((px*x2059))+((sj4*x2069))+(((-1.17e-6)*x2068))+((pz*sj1))+(((-1.08e-6)*x2057)));
evalcond[5]=((0.73)+(((0.56747)*x2057))+(((-1.0)*py*sj1*x2060))+((px*x2065))+(((-1.17e-6)*x2070))+(((-1.0)*cj4*x2069))+(((-1.0)*pz*x2062))+(((-1.08e-6)*x2058)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r02))+(IKabs(r12)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x2073=((-1.0)*rxp0_2);
IkReal x2074=((-1.0)*pz);
CheckValue<IkReal> x2077 = IKatan2WithCheck(IkReal(x2073),IkReal(rxp1_2),IKFAST_ATAN2_MAGTHRESH);
if(!x2077.valid){
continue;
}
IkReal x2075=((1.0)*(x2077.value));
IkReal x2076=x1806;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x2075)));
r12=0;
r02=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2074);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2074);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x2075)));
IkReal gconst16=(x2073*x2076);
IkReal gconst17=((-1.0)*rxp1_2*x2076);
j0eval[0]=0;
j0eval[1]=((IKabs(px))+(IKabs(py)));
j0eval[2]=0;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x2078=((-1.0)*rxp0_2);
IkReal x2079=((-1.0)*pz);
CheckValue<IkReal> x2082 = IKatan2WithCheck(IkReal(x2078),IkReal(rxp1_2),IKFAST_ATAN2_MAGTHRESH);
if(!x2082.valid){
continue;
}
IkReal x2080=((1.0)*(x2082.value));
IkReal x2081=x1806;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x2080)));
r12=0;
r02=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2079);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2079);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x2080)));
IkReal gconst16=(x2078*x2081);
IkReal gconst17=((-1.0)*rxp1_2*x2081);
j0eval[0]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2083=IKPowWithIntegerCheck(IKsign((r22*(((gconst17*gconst17)+(gconst16*gconst16))))),-1);
if(!x2083.valid){
continue;
}
CheckValue<IkReal> x2084 = IKatan2WithCheck(IkReal(((((-1.0)*gconst17*r01))+(((-1.0)*gconst16*r00)))),IkReal((((gconst17*r11))+((gconst16*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2084.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2083.value)))+(x2084.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x2085=IKsin(j0);
IkReal x2086=IKcos(j0);
IkReal x2087=((1.0)*r10);
IkReal x2088=(gconst16*x2085);
IkReal x2089=((1.0)*x2086);
IkReal x2090=((1.0)*x2085);
evalcond[0]=((((-1.0)*py*x2090))+(((-1.0)*px*x2089)));
evalcond[1]=((1.0)+((gconst16*r01*x2086))+(((-1.0)*gconst17*x2085*x2087))+(((-1.0)*gconst17*r00*x2089))+((r11*x2088)));
evalcond[2]=((((-1.0)*gconst17*r01*x2089))+(((-1.0)*x2087*x2088))+(((-1.0)*gconst17*r11*x2090))+(((-1.0)*gconst16*r00*x2089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[2+1], zeror[2];
int numroots;
IkReal x2091=(gconst16*r01*sj0);
IkReal x2092=(cj0*gconst17*r10);
IkReal x2093=(gconst17*r00*sj0);
IkReal x2094=(cj0*gconst16*r11);
op[0]=(x2091+x2092+(((-1.0)*x2093))+(((-1.0)*x2094)));
op[1]=0;
op[2]=(x2094+x2093+(((-1.0)*x2092))+(((-1.0)*x2091)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2095=(cj4*r22);
IkReal x2096=(r22*sj4);
if( IKabs((((sj1*x2095))+(((-1.0)*cj1*x2096)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x2095))+((sj1*x2096)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x2095))+(((-1.0)*cj1*x2096))))+IKsqr((((cj1*x2095))+((sj1*x2096))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x2095))+(((-1.0)*cj1*x2096))), (((cj1*x2095))+((sj1*x2096))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2097=IKcos(j2);
IkReal x2098=IKsin(j2);
IkReal x2099=(cj1*sj0);
IkReal x2100=((1.0)*cj0);
IkReal x2101=(gconst16*r10);
IkReal x2102=((1.0)*cj1);
IkReal x2103=(gconst17*r01);
IkReal x2104=((1.0)*sj4);
IkReal x2105=(sj0*sj1);
IkReal x2106=(gconst16*r00);
IkReal x2107=(gconst17*r11);
IkReal x2108=(cj4*x2097);
IkReal x2109=((1.17e-6)*x2098);
IkReal x2110=(sj4*x2097);
IkReal x2111=(cj4*x2098);
IkReal x2112=(x2098*x2104);
evalcond[0]=(((r22*sj1))+(((-1.0)*x2097*x2104))+(((-1.0)*x2111)));
evalcond[1]=((((-1.0)*r22*x2102))+x2108+(((-1.0)*x2112)));
evalcond[2]=(((x2103*x2105))+x2110+x2111+((x2105*x2106))+(((-1.0)*sj1*x2100*x2101))+(((-1.0)*sj1*x2100*x2107)));
evalcond[3]=(((x2099*x2103))+((x2099*x2106))+x2108+(((-1.0)*cj1*x2100*x2101))+(((-1.0)*cj1*x2100*x2107))+(((-1.0)*x2112)));
evalcond[4]=(((px*x2099))+((sj4*x2109))+(((-1.0)*cj1*py*x2100))+(((-0.56747)*x2098))+(((-1.17e-6)*x2108))+((pz*sj1))+(((-1.08e-6)*x2097)));
evalcond[5]=((0.73)+((px*x2105))+(((-1.17e-6)*x2110))+(((-1.0)*py*sj1*x2100))+(((0.56747)*x2097))+(((-1.0)*pz*x2102))+(((-1.08e-6)*x2098))+(((-1.0)*cj4*x2109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2113=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst17*rxp0_2))+((gconst16*rxp1_2)))),-1);
if(!x2113.valid){
continue;
}
CheckValue<IkReal> x2114 = IKatan2WithCheck(IkReal(px),IkReal(((-1.0)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x2114.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2113.value)))+(x2114.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x2115=IKsin(j0);
IkReal x2116=IKcos(j0);
IkReal x2117=((1.0)*r10);
IkReal x2118=(gconst16*x2115);
IkReal x2119=((1.0)*x2116);
IkReal x2120=((1.0)*x2115);
evalcond[0]=((((-1.0)*py*x2120))+(((-1.0)*px*x2119)));
evalcond[1]=((1.0)+(((-1.0)*gconst17*x2115*x2117))+((gconst16*r01*x2116))+(((-1.0)*gconst17*r00*x2119))+((r11*x2118)));
evalcond[2]=((((-1.0)*x2117*x2118))+(((-1.0)*gconst17*r11*x2120))+(((-1.0)*gconst16*r00*x2119))+(((-1.0)*gconst17*r01*x2119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[2+1], zeror[2];
int numroots;
IkReal x2121=(gconst16*r01*sj0);
IkReal x2122=(cj0*gconst17*r10);
IkReal x2123=(gconst17*r00*sj0);
IkReal x2124=(cj0*gconst16*r11);
op[0]=(x2121+x2122+(((-1.0)*x2124))+(((-1.0)*x2123)));
op[1]=0;
op[2]=(x2123+x2124+(((-1.0)*x2122))+(((-1.0)*x2121)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2125=(cj4*r22);
IkReal x2126=(r22*sj4);
if( IKabs(((((-1.0)*cj1*x2126))+((sj1*x2125)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x2126))+((cj1*x2125)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x2126))+((sj1*x2125))))+IKsqr((((sj1*x2126))+((cj1*x2125))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*x2126))+((sj1*x2125))), (((sj1*x2126))+((cj1*x2125))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2127=IKcos(j2);
IkReal x2128=IKsin(j2);
IkReal x2129=(cj1*sj0);
IkReal x2130=((1.0)*cj0);
IkReal x2131=(gconst16*r10);
IkReal x2132=((1.0)*cj1);
IkReal x2133=(gconst17*r01);
IkReal x2134=((1.0)*sj4);
IkReal x2135=(sj0*sj1);
IkReal x2136=(gconst16*r00);
IkReal x2137=(gconst17*r11);
IkReal x2138=(cj4*x2127);
IkReal x2139=((1.17e-6)*x2128);
IkReal x2140=(sj4*x2127);
IkReal x2141=(cj4*x2128);
IkReal x2142=(x2128*x2134);
evalcond[0]=((((-1.0)*x2141))+((r22*sj1))+(((-1.0)*x2127*x2134)));
evalcond[1]=((((-1.0)*r22*x2132))+x2138+(((-1.0)*x2142)));
evalcond[2]=(x2141+x2140+(((-1.0)*sj1*x2130*x2137))+(((-1.0)*sj1*x2130*x2131))+((x2135*x2136))+((x2133*x2135)));
evalcond[3]=(x2138+(((-1.0)*cj1*x2130*x2131))+(((-1.0)*cj1*x2130*x2137))+(((-1.0)*x2142))+((x2129*x2133))+((x2129*x2136)));
evalcond[4]=((((-0.56747)*x2128))+((sj4*x2139))+((px*x2129))+(((-1.0)*cj1*py*x2130))+((pz*sj1))+(((-1.08e-6)*x2127))+(((-1.17e-6)*x2138)));
evalcond[5]=((0.73)+((px*x2135))+(((-1.17e-6)*x2140))+(((-1.0)*py*sj1*x2130))+(((0.56747)*x2127))+(((-1.0)*cj4*x2139))+(((-1.08e-6)*x2128))+(((-1.0)*pz*x2132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2143=IKPowWithIntegerCheck(IKsign((r22*(((gconst17*gconst17)+(gconst16*gconst16))))),-1);
if(!x2143.valid){
continue;
}
CheckValue<IkReal> x2144 = IKatan2WithCheck(IkReal(((((-1.0)*gconst17*r01))+(((-1.0)*gconst16*r00)))),IkReal((((gconst17*r11))+((gconst16*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2144.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2143.value)))+(x2144.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2145=IKcos(j0);
IkReal x2146=IKsin(j0);
IkReal x2147=((1.0)*r10);
IkReal x2148=(gconst16*x2146);
IkReal x2149=((1.0)*x2145);
IkReal x2150=((1.0)*x2146);
evalcond[0]=((((-1.0)*r02*x2149))+(((-1.0)*r12*x2150)));
evalcond[1]=((((-1.0)*py*x2150))+(((-1.0)*px*x2149)));
evalcond[2]=((1.0)+((r11*x2148))+(((-1.0)*gconst17*x2146*x2147))+(((-1.0)*gconst17*r00*x2149))+((gconst16*r01*x2145)));
evalcond[3]=((((-1.0)*gconst17*r01*x2149))+(((-1.0)*gconst16*r00*x2149))+(((-1.0)*gconst17*r11*x2150))+(((-1.0)*x2147*x2148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x2151=((-1.0)*rxp0_2);
CheckValue<IkReal> x2154 = IKatan2WithCheck(IkReal(x2151),IkReal(rxp1_2),IKFAST_ATAN2_MAGTHRESH);
if(!x2154.valid){
continue;
}
IkReal x2152=((1.0)*(x2154.value));
IkReal x2153=x1806;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x2152)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x2152)));
IkReal gconst16=(x2151*x2153);
IkReal gconst17=((-1.0)*rxp1_2*x2153);
IkReal x2155=x1806;
IkReal x2156=(rxp0_2*x2155);
IkReal x2157=(rxp1_2*x2155);
j1eval[0]=((IKabs(((((-1.0)*r20*x2157))+((r21*x2156)))))+(IKabs((((r01*sj0*x2156))+((cj0*r10*x2157))+(((-1.0)*r00*sj0*x2157))+(((-1.0)*cj0*r11*x2156))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x2158=((-1.0)*rxp0_2);
CheckValue<IkReal> x2161 = IKatan2WithCheck(IkReal(x2158),IkReal(rxp1_2),IKFAST_ATAN2_MAGTHRESH);
if(!x2161.valid){
continue;
}
IkReal x2159=((1.0)*(x2161.value));
IkReal x2160=x1806;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x2159)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x2159)));
IkReal gconst16=(x2158*x2160);
IkReal gconst17=((-1.0)*rxp1_2*x2160);
IkReal x2162=x1806;
IkReal x2163=(sj0*x2162);
IkReal x2164=(rxp1_2*x2162);
IkReal x2165=((1.0)*rxp0_2*x2162);
j1eval[0]=((IKabs(((((-1.0)*r21*x2165))+((r20*x2164)))))+(IKabs(((((-1.0)*r00*rxp1_2*x2163))+((r01*rxp0_2*x2163))+(((-1.0)*cj0*r11*x2165))+((cj0*r10*x2164))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x2166=((1.0)*gconst17);
CheckValue<IkReal> x2168 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x2166))+((gconst16*r21)))),IkReal(((((-1.0)*gconst16*r01*sj0))+((cj0*gconst16*r11))+(((-1.0)*cj0*r10*x2166))+((gconst17*r00*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2168.valid){
continue;
}
IkReal x2167=x2168.value;
j1array[0]=((-1.0)*x2167);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2167)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2169=IKcos(j1);
IkReal x2170=IKsin(j1);
IkReal x2171=((1.0)*gconst16);
IkReal x2172=(sj0*x2169);
IkReal x2173=(cj0*x2169);
evalcond[0]=(((gconst17*r20*x2170))+((gconst16*r11*x2173))+(((-1.0)*r21*x2170*x2171))+(((-1.0)*gconst17*r10*x2173))+((gconst17*r00*x2172))+(((-1.0)*r01*x2171*x2172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2174=(cj1*cj4);
IkReal x2175=(sj1*sj4);
IkReal x2176=(cj4*sj1);
IkReal x2177=(cj1*sj4);
IkReal x2178=(r02*sj0);
IkReal x2179=((1.0)*cj0*r12);
if( IKabs((((r22*x2176))+(((-1.0)*x2174*x2179))+((x2174*x2178))+((x2175*x2178))+(((-1.0)*r22*x2177))+(((-1.0)*x2175*x2179)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x2174))+((r22*x2175))+(((-1.0)*x2176*x2178))+((x2177*x2178))+((cj0*r12*x2176))+(((-1.0)*x2177*x2179)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x2176))+(((-1.0)*x2174*x2179))+((x2174*x2178))+((x2175*x2178))+(((-1.0)*r22*x2177))+(((-1.0)*x2175*x2179))))+IKsqr((((r22*x2174))+((r22*x2175))+(((-1.0)*x2176*x2178))+((x2177*x2178))+((cj0*r12*x2176))+(((-1.0)*x2177*x2179))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r22*x2176))+(((-1.0)*x2174*x2179))+((x2174*x2178))+((x2175*x2178))+(((-1.0)*r22*x2177))+(((-1.0)*x2175*x2179))), (((r22*x2174))+((r22*x2175))+(((-1.0)*x2176*x2178))+((x2177*x2178))+((cj0*r12*x2176))+(((-1.0)*x2177*x2179))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2180=IKcos(j2);
IkReal x2181=IKsin(j2);
IkReal x2182=((1.17e-6)*cj4);
IkReal x2183=(gconst16*sj1);
IkReal x2184=(px*sj0);
IkReal x2185=((1.0)*cj0);
IkReal x2186=((1.0)*cj1);
IkReal x2187=(gconst17*r21);
IkReal x2188=(cj1*sj0);
IkReal x2189=(gconst17*r01);
IkReal x2190=(sj0*sj1);
IkReal x2191=(gconst17*r11);
IkReal x2192=(cj4*x2180);
IkReal x2193=(sj4*x2181);
IkReal x2194=(sj4*x2180);
IkReal x2195=(cj4*x2181);
IkReal x2196=((1.0)*x2193);
evalcond[0]=((((-1.0)*x2195))+(((-1.0)*x2194))+((r22*sj1))+(((-1.0)*cj1*r12*x2185))+((r02*x2188)));
evalcond[1]=((((-1.0)*r12*sj1*x2185))+x2192+(((-1.0)*r22*x2186))+(((-1.0)*x2196))+((r02*x2190)));
evalcond[2]=((((-1.0)*x2180*x2182))+(((-1.0)*cj1*py*x2185))+((cj1*x2184))+(((-0.56747)*x2181))+((pz*sj1))+(((1.17e-6)*x2193))+(((-1.08e-6)*x2180)));
evalcond[3]=((0.73)+(((-1.17e-6)*x2194))+(((0.56747)*x2180))+((sj1*x2184))+(((-1.0)*pz*x2186))+(((-1.0)*x2181*x2182))+(((-1.08e-6)*x2181))+(((-1.0)*py*sj1*x2185)));
evalcond[4]=((((-1.0)*cj1*x2185*x2191))+((gconst16*r00*x2188))+x2192+((r20*x2183))+((sj1*x2187))+(((-1.0)*cj1*gconst16*r10*x2185))+(((-1.0)*x2196))+((x2188*x2189)));
evalcond[5]=(((r00*sj0*x2183))+x2194+x2195+(((-1.0)*gconst16*r20*x2186))+(((-1.0)*x2186*x2187))+((x2189*x2190))+(((-1.0)*r10*x2183*x2185))+(((-1.0)*sj1*x2185*x2191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x2197=((1.0)*gconst16);
CheckValue<IkReal> x2199 = IKatan2WithCheck(IkReal((((cj0*gconst16*r11))+(((-1.0)*r01*sj0*x2197))+((gconst17*r00*sj0))+(((-1.0)*cj0*gconst17*r10)))),IkReal(((((-1.0)*r21*x2197))+((gconst17*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2199.valid){
continue;
}
IkReal x2198=x2199.value;
j1array[0]=((-1.0)*x2198);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2198)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2200=IKsin(j1);
IkReal x2201=IKcos(j1);
IkReal x2202=((1.0)*gconst17);
IkReal x2203=(cj0*x2200);
IkReal x2204=(sj0*x2200);
evalcond[0]=((((-1.0)*r10*x2202*x2203))+(((-1.0)*gconst16*r01*x2204))+((gconst17*r00*x2204))+(((-1.0)*r20*x2201*x2202))+((gconst16*r21*x2201))+((gconst16*r11*x2203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2205=(cj1*cj4);
IkReal x2206=(sj1*sj4);
IkReal x2207=(cj4*sj1);
IkReal x2208=(cj1*sj4);
IkReal x2209=(r02*sj0);
IkReal x2210=((1.0)*cj0*r12);
if( IKabs(((((-1.0)*x2205*x2210))+(((-1.0)*r22*x2208))+((x2206*x2209))+((x2205*x2209))+(((-1.0)*x2206*x2210))+((r22*x2207)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2208*x2210))+(((-1.0)*x2207*x2209))+((cj0*r12*x2207))+((r22*x2205))+((r22*x2206))+((x2208*x2209)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2205*x2210))+(((-1.0)*r22*x2208))+((x2206*x2209))+((x2205*x2209))+(((-1.0)*x2206*x2210))+((r22*x2207))))+IKsqr(((((-1.0)*x2208*x2210))+(((-1.0)*x2207*x2209))+((cj0*r12*x2207))+((r22*x2205))+((r22*x2206))+((x2208*x2209))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2205*x2210))+(((-1.0)*r22*x2208))+((x2206*x2209))+((x2205*x2209))+(((-1.0)*x2206*x2210))+((r22*x2207))), ((((-1.0)*x2208*x2210))+(((-1.0)*x2207*x2209))+((cj0*r12*x2207))+((r22*x2205))+((r22*x2206))+((x2208*x2209))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2211=IKcos(j2);
IkReal x2212=IKsin(j2);
IkReal x2213=((1.17e-6)*cj4);
IkReal x2214=(gconst16*sj1);
IkReal x2215=(px*sj0);
IkReal x2216=((1.0)*cj0);
IkReal x2217=((1.0)*cj1);
IkReal x2218=(gconst17*r21);
IkReal x2219=(cj1*sj0);
IkReal x2220=(gconst17*r01);
IkReal x2221=(sj0*sj1);
IkReal x2222=(gconst17*r11);
IkReal x2223=(cj4*x2211);
IkReal x2224=(sj4*x2212);
IkReal x2225=(sj4*x2211);
IkReal x2226=(cj4*x2212);
IkReal x2227=((1.0)*x2224);
evalcond[0]=((((-1.0)*cj1*r12*x2216))+((r22*sj1))+(((-1.0)*x2225))+(((-1.0)*x2226))+((r02*x2219)));
evalcond[1]=(x2223+(((-1.0)*r22*x2217))+((r02*x2221))+(((-1.0)*x2227))+(((-1.0)*r12*sj1*x2216)));
evalcond[2]=((((-1.0)*cj1*py*x2216))+((cj1*x2215))+(((1.17e-6)*x2224))+(((-1.08e-6)*x2211))+(((-0.56747)*x2212))+((pz*sj1))+(((-1.0)*x2211*x2213)));
evalcond[3]=((0.73)+(((-1.17e-6)*x2225))+(((0.56747)*x2211))+(((-1.0)*pz*x2217))+(((-1.0)*py*sj1*x2216))+(((-1.08e-6)*x2212))+((sj1*x2215))+(((-1.0)*x2212*x2213)));
evalcond[4]=(((r20*x2214))+x2223+(((-1.0)*cj1*x2216*x2222))+((gconst16*r00*x2219))+(((-1.0)*cj1*gconst16*r10*x2216))+(((-1.0)*x2227))+((x2219*x2220))+((sj1*x2218)));
evalcond[5]=((((-1.0)*gconst16*r20*x2217))+x2226+x2225+(((-1.0)*r10*x2214*x2216))+(((-1.0)*x2217*x2218))+((r00*sj0*x2214))+(((-1.0)*sj1*x2216*x2222))+((x2220*x2221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2228=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst17*rxp0_2))+((gconst16*rxp1_2)))),-1);
if(!x2228.valid){
continue;
}
CheckValue<IkReal> x2229 = IKatan2WithCheck(IkReal(px),IkReal(((-1.0)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x2229.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2228.value)))+(x2229.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2230=IKcos(j0);
IkReal x2231=IKsin(j0);
IkReal x2232=((1.0)*r10);
IkReal x2233=(gconst16*x2231);
IkReal x2234=((1.0)*x2230);
IkReal x2235=((1.0)*x2231);
evalcond[0]=((((-1.0)*r02*x2234))+(((-1.0)*r12*x2235)));
evalcond[1]=((((-1.0)*py*x2235))+(((-1.0)*px*x2234)));
evalcond[2]=((1.0)+((gconst16*r01*x2230))+(((-1.0)*gconst17*x2231*x2232))+((r11*x2233))+(((-1.0)*gconst17*r00*x2234)));
evalcond[3]=((((-1.0)*x2232*x2233))+(((-1.0)*gconst17*r11*x2235))+(((-1.0)*gconst17*r01*x2234))+(((-1.0)*gconst16*r00*x2234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x2236=((-1.0)*rxp0_2);
CheckValue<IkReal> x2239 = IKatan2WithCheck(IkReal(x2236),IkReal(rxp1_2),IKFAST_ATAN2_MAGTHRESH);
if(!x2239.valid){
continue;
}
IkReal x2237=((1.0)*(x2239.value));
IkReal x2238=x1806;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x2237)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x2237)));
IkReal gconst16=(x2236*x2238);
IkReal gconst17=((-1.0)*rxp1_2*x2238);
IkReal x2240=x1806;
IkReal x2241=(rxp0_2*x2240);
IkReal x2242=(rxp1_2*x2240);
j1eval[0]=((IKabs((((cj0*r10*x2242))+(((-1.0)*cj0*r11*x2241))+(((-1.0)*r00*sj0*x2242))+((r01*sj0*x2241)))))+(IKabs(((((-1.0)*r20*x2242))+((r21*x2241))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x2243=((-1.0)*rxp0_2);
CheckValue<IkReal> x2246 = IKatan2WithCheck(IkReal(x2243),IkReal(rxp1_2),IKFAST_ATAN2_MAGTHRESH);
if(!x2246.valid){
continue;
}
IkReal x2244=((1.0)*(x2246.value));
IkReal x2245=x1806;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x2244)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x2244)));
IkReal gconst16=(x2243*x2245);
IkReal gconst17=((-1.0)*rxp1_2*x2245);
IkReal x2247=x1806;
IkReal x2248=(sj0*x2247);
IkReal x2249=(rxp1_2*x2247);
IkReal x2250=((1.0)*rxp0_2*x2247);
j1eval[0]=((IKabs((((r01*rxp0_2*x2248))+((cj0*r10*x2249))+(((-1.0)*cj0*r11*x2250))+(((-1.0)*r00*rxp1_2*x2248)))))+(IKabs(((((-1.0)*r21*x2250))+((r20*x2249))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x2251=((1.0)*gconst17);
CheckValue<IkReal> x2253 = IKatan2WithCheck(IkReal((((gconst16*r21))+(((-1.0)*r20*x2251)))),IkReal(((((-1.0)*gconst16*r01*sj0))+((cj0*gconst16*r11))+(((-1.0)*cj0*r10*x2251))+((gconst17*r00*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2253.valid){
continue;
}
IkReal x2252=x2253.value;
j1array[0]=((-1.0)*x2252);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2252)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2254=IKcos(j1);
IkReal x2255=IKsin(j1);
IkReal x2256=((1.0)*gconst16);
IkReal x2257=(sj0*x2254);
IkReal x2258=(cj0*x2254);
evalcond[0]=(((gconst16*r11*x2258))+((gconst17*r20*x2255))+((gconst17*r00*x2257))+(((-1.0)*r01*x2256*x2257))+(((-1.0)*gconst17*r10*x2258))+(((-1.0)*r21*x2255*x2256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2259=(cj1*cj4);
IkReal x2260=(sj1*sj4);
IkReal x2261=(cj4*sj1);
IkReal x2262=(cj1*sj4);
IkReal x2263=(r02*sj0);
IkReal x2264=((1.0)*cj0*r12);
if( IKabs((((x2260*x2263))+((x2259*x2263))+(((-1.0)*r22*x2262))+((r22*x2261))+(((-1.0)*x2260*x2264))+(((-1.0)*x2259*x2264)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*r12*x2261))+((r22*x2260))+((x2262*x2263))+((r22*x2259))+(((-1.0)*x2261*x2263))+(((-1.0)*x2262*x2264)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2260*x2263))+((x2259*x2263))+(((-1.0)*r22*x2262))+((r22*x2261))+(((-1.0)*x2260*x2264))+(((-1.0)*x2259*x2264))))+IKsqr((((cj0*r12*x2261))+((r22*x2260))+((x2262*x2263))+((r22*x2259))+(((-1.0)*x2261*x2263))+(((-1.0)*x2262*x2264))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x2260*x2263))+((x2259*x2263))+(((-1.0)*r22*x2262))+((r22*x2261))+(((-1.0)*x2260*x2264))+(((-1.0)*x2259*x2264))), (((cj0*r12*x2261))+((r22*x2260))+((x2262*x2263))+((r22*x2259))+(((-1.0)*x2261*x2263))+(((-1.0)*x2262*x2264))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2265=IKcos(j2);
IkReal x2266=IKsin(j2);
IkReal x2267=((1.17e-6)*cj4);
IkReal x2268=(gconst16*sj1);
IkReal x2269=(px*sj0);
IkReal x2270=((1.0)*cj0);
IkReal x2271=((1.0)*cj1);
IkReal x2272=(gconst17*r21);
IkReal x2273=(cj1*sj0);
IkReal x2274=(gconst17*r01);
IkReal x2275=(sj0*sj1);
IkReal x2276=(gconst17*r11);
IkReal x2277=(cj4*x2265);
IkReal x2278=(sj4*x2266);
IkReal x2279=(sj4*x2265);
IkReal x2280=(cj4*x2266);
IkReal x2281=((1.0)*x2278);
evalcond[0]=(((r22*sj1))+(((-1.0)*x2280))+((r02*x2273))+(((-1.0)*cj1*r12*x2270))+(((-1.0)*x2279)));
evalcond[1]=(x2277+(((-1.0)*x2281))+(((-1.0)*r12*sj1*x2270))+(((-1.0)*r22*x2271))+((r02*x2275)));
evalcond[2]=(((cj1*x2269))+(((-0.56747)*x2266))+(((-1.0)*cj1*py*x2270))+((pz*sj1))+(((-1.08e-6)*x2265))+(((-1.0)*x2265*x2267))+(((1.17e-6)*x2278)));
evalcond[3]=((0.73)+((sj1*x2269))+(((-1.0)*pz*x2271))+(((-1.17e-6)*x2279))+(((0.56747)*x2265))+(((-1.0)*py*sj1*x2270))+(((-1.08e-6)*x2266))+(((-1.0)*x2266*x2267)));
evalcond[4]=(((x2273*x2274))+x2277+((sj1*x2272))+(((-1.0)*x2281))+((r20*x2268))+((gconst16*r00*x2273))+(((-1.0)*cj1*gconst16*r10*x2270))+(((-1.0)*cj1*x2270*x2276)));
evalcond[5]=((((-1.0)*sj1*x2270*x2276))+x2280+x2279+(((-1.0)*r10*x2268*x2270))+((r00*sj0*x2268))+(((-1.0)*gconst16*r20*x2271))+(((-1.0)*x2271*x2272))+((x2274*x2275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x2282=((1.0)*gconst16);
CheckValue<IkReal> x2284 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj0*x2282))+((cj0*gconst16*r11))+((gconst17*r00*sj0))+(((-1.0)*cj0*gconst17*r10)))),IkReal((((gconst17*r20))+(((-1.0)*r21*x2282)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2284.valid){
continue;
}
IkReal x2283=x2284.value;
j1array[0]=((-1.0)*x2283);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2283)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2285=IKsin(j1);
IkReal x2286=IKcos(j1);
IkReal x2287=((1.0)*gconst17);
IkReal x2288=(cj0*x2285);
IkReal x2289=(sj0*x2285);
evalcond[0]=(((gconst17*r00*x2289))+((gconst16*r11*x2288))+((gconst16*r21*x2286))+(((-1.0)*gconst16*r01*x2289))+(((-1.0)*r10*x2287*x2288))+(((-1.0)*r20*x2286*x2287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2290=(cj1*cj4);
IkReal x2291=(sj1*sj4);
IkReal x2292=(cj4*sj1);
IkReal x2293=(cj1*sj4);
IkReal x2294=(r02*sj0);
IkReal x2295=((1.0)*cj0*r12);
if( IKabs((((r22*x2292))+((x2291*x2294))+(((-1.0)*x2291*x2295))+(((-1.0)*r22*x2293))+(((-1.0)*x2290*x2295))+((x2290*x2294)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2293*x2295))+((r22*x2291))+((r22*x2290))+(((-1.0)*x2292*x2294))+((x2293*x2294))+((cj0*r12*x2292)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x2292))+((x2291*x2294))+(((-1.0)*x2291*x2295))+(((-1.0)*r22*x2293))+(((-1.0)*x2290*x2295))+((x2290*x2294))))+IKsqr(((((-1.0)*x2293*x2295))+((r22*x2291))+((r22*x2290))+(((-1.0)*x2292*x2294))+((x2293*x2294))+((cj0*r12*x2292))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r22*x2292))+((x2291*x2294))+(((-1.0)*x2291*x2295))+(((-1.0)*r22*x2293))+(((-1.0)*x2290*x2295))+((x2290*x2294))), ((((-1.0)*x2293*x2295))+((r22*x2291))+((r22*x2290))+(((-1.0)*x2292*x2294))+((x2293*x2294))+((cj0*r12*x2292))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2296=IKcos(j2);
IkReal x2297=IKsin(j2);
IkReal x2298=((1.17e-6)*cj4);
IkReal x2299=(gconst16*sj1);
IkReal x2300=(px*sj0);
IkReal x2301=((1.0)*cj0);
IkReal x2302=((1.0)*cj1);
IkReal x2303=(gconst17*r21);
IkReal x2304=(cj1*sj0);
IkReal x2305=(gconst17*r01);
IkReal x2306=(sj0*sj1);
IkReal x2307=(gconst17*r11);
IkReal x2308=(cj4*x2296);
IkReal x2309=(sj4*x2297);
IkReal x2310=(sj4*x2296);
IkReal x2311=(cj4*x2297);
IkReal x2312=((1.0)*x2309);
evalcond[0]=((((-1.0)*x2311))+(((-1.0)*x2310))+(((-1.0)*cj1*r12*x2301))+((r22*sj1))+((r02*x2304)));
evalcond[1]=((((-1.0)*r22*x2302))+x2308+((r02*x2306))+(((-1.0)*r12*sj1*x2301))+(((-1.0)*x2312)));
evalcond[2]=((((-0.56747)*x2297))+((cj1*x2300))+(((-1.0)*x2296*x2298))+((pz*sj1))+(((1.17e-6)*x2309))+(((-1.08e-6)*x2296))+(((-1.0)*cj1*py*x2301)));
evalcond[3]=((0.73)+((sj1*x2300))+(((0.56747)*x2296))+(((-1.0)*x2297*x2298))+(((-1.0)*py*sj1*x2301))+(((-1.08e-6)*x2297))+(((-1.0)*pz*x2302))+(((-1.17e-6)*x2310)));
evalcond[4]=(((sj1*x2303))+(((-1.0)*cj1*gconst16*r10*x2301))+((x2304*x2305))+x2308+(((-1.0)*cj1*x2301*x2307))+((r20*x2299))+((gconst16*r00*x2304))+(((-1.0)*x2312)));
evalcond[5]=(((x2305*x2306))+(((-1.0)*r10*x2299*x2301))+(((-1.0)*gconst16*r20*x2302))+((r00*sj0*x2299))+x2310+x2311+(((-1.0)*sj1*x2301*x2307))+(((-1.0)*x2302*x2303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2313 = IKatan2WithCheck(IkReal(r02),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2313.valid){
continue;
}
CheckValue<IkReal> x2314=IKPowWithIntegerCheck(IKsign((((gconst17*r21))+((gconst16*r20)))),-1);
if(!x2314.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2313.value)+(((1.5707963267949)*(x2314.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2315=IKcos(j0);
IkReal x2316=IKsin(j0);
IkReal x2317=((1.0)*r10);
IkReal x2318=(gconst16*x2316);
IkReal x2319=((1.0)*x2315);
IkReal x2320=((1.0)*x2316);
evalcond[0]=((((-1.0)*r12*x2320))+(((-1.0)*r02*x2319)));
evalcond[1]=((((-1.0)*py*x2320))+(((-1.0)*px*x2319)));
evalcond[2]=((1.0)+(((-1.0)*gconst17*r00*x2319))+((r11*x2318))+(((-1.0)*gconst17*x2316*x2317))+((gconst16*r01*x2315)));
evalcond[3]=((((-1.0)*gconst17*r01*x2319))+(((-1.0)*x2317*x2318))+(((-1.0)*gconst17*r11*x2320))+(((-1.0)*gconst16*r00*x2319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x2321=((-1.0)*rxp0_2);
CheckValue<IkReal> x2324 = IKatan2WithCheck(IkReal(x2321),IkReal(rxp1_2),IKFAST_ATAN2_MAGTHRESH);
if(!x2324.valid){
continue;
}
IkReal x2322=((1.0)*(x2324.value));
IkReal x2323=x1806;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x2322)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x2322)));
IkReal gconst16=(x2321*x2323);
IkReal gconst17=((-1.0)*rxp1_2*x2323);
IkReal x2325=x1806;
IkReal x2326=(rxp0_2*x2325);
IkReal x2327=(rxp1_2*x2325);
j1eval[0]=((IKabs(((((-1.0)*r20*x2327))+((r21*x2326)))))+(IKabs(((((-1.0)*cj0*r11*x2326))+((cj0*r10*x2327))+((r01*sj0*x2326))+(((-1.0)*r00*sj0*x2327))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x2328=((-1.0)*rxp0_2);
CheckValue<IkReal> x2331 = IKatan2WithCheck(IkReal(x2328),IkReal(rxp1_2),IKFAST_ATAN2_MAGTHRESH);
if(!x2331.valid){
continue;
}
IkReal x2329=((1.0)*(x2331.value));
IkReal x2330=x1806;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x2329)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x2329)));
IkReal gconst16=(x2328*x2330);
IkReal gconst17=((-1.0)*rxp1_2*x2330);
IkReal x2332=x1806;
IkReal x2333=(sj0*x2332);
IkReal x2334=(rxp1_2*x2332);
IkReal x2335=((1.0)*rxp0_2*x2332);
j1eval[0]=((IKabs((((r01*rxp0_2*x2333))+(((-1.0)*r00*rxp1_2*x2333))+((cj0*r10*x2334))+(((-1.0)*cj0*r11*x2335)))))+(IKabs(((((-1.0)*r21*x2335))+((r20*x2334))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x2336=((1.0)*gconst17);
CheckValue<IkReal> x2338 = IKatan2WithCheck(IkReal((((gconst16*r21))+(((-1.0)*r20*x2336)))),IkReal(((((-1.0)*gconst16*r01*sj0))+((cj0*gconst16*r11))+(((-1.0)*cj0*r10*x2336))+((gconst17*r00*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2338.valid){
continue;
}
IkReal x2337=x2338.value;
j1array[0]=((-1.0)*x2337);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2337)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2339=IKcos(j1);
IkReal x2340=IKsin(j1);
IkReal x2341=((1.0)*gconst16);
IkReal x2342=(sj0*x2339);
IkReal x2343=(cj0*x2339);
evalcond[0]=(((gconst17*r20*x2340))+(((-1.0)*gconst17*r10*x2343))+((gconst16*r11*x2343))+(((-1.0)*r01*x2341*x2342))+(((-1.0)*r21*x2340*x2341))+((gconst17*r00*x2342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2344=(cj1*cj4);
IkReal x2345=(sj1*sj4);
IkReal x2346=(cj4*sj1);
IkReal x2347=(cj1*sj4);
IkReal x2348=(r02*sj0);
IkReal x2349=((1.0)*cj0*r12);
if( IKabs(((((-1.0)*x2345*x2349))+(((-1.0)*x2344*x2349))+((r22*x2346))+((x2345*x2348))+((x2344*x2348))+(((-1.0)*r22*x2347)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x2345))+((r22*x2344))+(((-1.0)*x2346*x2348))+((cj0*r12*x2346))+((x2347*x2348))+(((-1.0)*x2347*x2349)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2345*x2349))+(((-1.0)*x2344*x2349))+((r22*x2346))+((x2345*x2348))+((x2344*x2348))+(((-1.0)*r22*x2347))))+IKsqr((((r22*x2345))+((r22*x2344))+(((-1.0)*x2346*x2348))+((cj0*r12*x2346))+((x2347*x2348))+(((-1.0)*x2347*x2349))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2345*x2349))+(((-1.0)*x2344*x2349))+((r22*x2346))+((x2345*x2348))+((x2344*x2348))+(((-1.0)*r22*x2347))), (((r22*x2345))+((r22*x2344))+(((-1.0)*x2346*x2348))+((cj0*r12*x2346))+((x2347*x2348))+(((-1.0)*x2347*x2349))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2350=IKcos(j2);
IkReal x2351=IKsin(j2);
IkReal x2352=((1.17e-6)*cj4);
IkReal x2353=(gconst16*sj1);
IkReal x2354=(px*sj0);
IkReal x2355=((1.0)*cj0);
IkReal x2356=((1.0)*cj1);
IkReal x2357=(gconst17*r21);
IkReal x2358=(cj1*sj0);
IkReal x2359=(gconst17*r01);
IkReal x2360=(sj0*sj1);
IkReal x2361=(gconst17*r11);
IkReal x2362=(cj4*x2350);
IkReal x2363=(sj4*x2351);
IkReal x2364=(sj4*x2350);
IkReal x2365=(cj4*x2351);
IkReal x2366=((1.0)*x2363);
evalcond[0]=(((r22*sj1))+(((-1.0)*x2365))+(((-1.0)*x2364))+(((-1.0)*cj1*r12*x2355))+((r02*x2358)));
evalcond[1]=(((r02*x2360))+x2362+(((-1.0)*x2366))+(((-1.0)*r12*sj1*x2355))+(((-1.0)*r22*x2356)));
evalcond[2]=((((-0.56747)*x2351))+((cj1*x2354))+(((-1.0)*cj1*py*x2355))+(((-1.0)*x2350*x2352))+((pz*sj1))+(((1.17e-6)*x2363))+(((-1.08e-6)*x2350)));
evalcond[3]=((0.73)+(((-1.0)*pz*x2356))+(((-1.17e-6)*x2364))+(((0.56747)*x2350))+(((-1.0)*py*sj1*x2355))+(((-1.0)*x2351*x2352))+(((-1.08e-6)*x2351))+((sj1*x2354)));
evalcond[4]=((((-1.0)*cj1*x2355*x2361))+x2362+(((-1.0)*x2366))+((x2358*x2359))+(((-1.0)*cj1*gconst16*r10*x2355))+((r20*x2353))+((gconst16*r00*x2358))+((sj1*x2357)));
evalcond[5]=((((-1.0)*sj1*x2355*x2361))+(((-1.0)*x2356*x2357))+((r00*sj0*x2353))+(((-1.0)*r10*x2353*x2355))+x2365+x2364+((x2359*x2360))+(((-1.0)*gconst16*r20*x2356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x2367=((1.0)*gconst16);
CheckValue<IkReal> x2369 = IKatan2WithCheck(IkReal((((cj0*gconst16*r11))+(((-1.0)*r01*sj0*x2367))+((gconst17*r00*sj0))+(((-1.0)*cj0*gconst17*r10)))),IkReal(((((-1.0)*r21*x2367))+((gconst17*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2369.valid){
continue;
}
IkReal x2368=x2369.value;
j1array[0]=((-1.0)*x2368);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2368)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2370=IKsin(j1);
IkReal x2371=IKcos(j1);
IkReal x2372=((1.0)*gconst17);
IkReal x2373=(cj0*x2370);
IkReal x2374=(sj0*x2370);
evalcond[0]=(((gconst17*r00*x2374))+(((-1.0)*r20*x2371*x2372))+((gconst16*r11*x2373))+((gconst16*r21*x2371))+(((-1.0)*r10*x2372*x2373))+(((-1.0)*gconst16*r01*x2374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2375=(cj1*cj4);
IkReal x2376=(sj1*sj4);
IkReal x2377=(cj4*sj1);
IkReal x2378=(cj1*sj4);
IkReal x2379=(r02*sj0);
IkReal x2380=((1.0)*cj0*r12);
if( IKabs((((x2375*x2379))+(((-1.0)*x2376*x2380))+(((-1.0)*x2375*x2380))+((r22*x2377))+(((-1.0)*r22*x2378))+((x2376*x2379)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2378*x2379))+(((-1.0)*x2378*x2380))+(((-1.0)*x2377*x2379))+((r22*x2375))+((r22*x2376))+((cj0*r12*x2377)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2375*x2379))+(((-1.0)*x2376*x2380))+(((-1.0)*x2375*x2380))+((r22*x2377))+(((-1.0)*r22*x2378))+((x2376*x2379))))+IKsqr((((x2378*x2379))+(((-1.0)*x2378*x2380))+(((-1.0)*x2377*x2379))+((r22*x2375))+((r22*x2376))+((cj0*r12*x2377))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x2375*x2379))+(((-1.0)*x2376*x2380))+(((-1.0)*x2375*x2380))+((r22*x2377))+(((-1.0)*r22*x2378))+((x2376*x2379))), (((x2378*x2379))+(((-1.0)*x2378*x2380))+(((-1.0)*x2377*x2379))+((r22*x2375))+((r22*x2376))+((cj0*r12*x2377))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2381=IKcos(j2);
IkReal x2382=IKsin(j2);
IkReal x2383=((1.17e-6)*cj4);
IkReal x2384=(gconst16*sj1);
IkReal x2385=(px*sj0);
IkReal x2386=((1.0)*cj0);
IkReal x2387=((1.0)*cj1);
IkReal x2388=(gconst17*r21);
IkReal x2389=(cj1*sj0);
IkReal x2390=(gconst17*r01);
IkReal x2391=(sj0*sj1);
IkReal x2392=(gconst17*r11);
IkReal x2393=(cj4*x2381);
IkReal x2394=(sj4*x2382);
IkReal x2395=(sj4*x2381);
IkReal x2396=(cj4*x2382);
IkReal x2397=((1.0)*x2394);
evalcond[0]=((((-1.0)*cj1*r12*x2386))+((r22*sj1))+((r02*x2389))+(((-1.0)*x2395))+(((-1.0)*x2396)));
evalcond[1]=(x2393+(((-1.0)*r12*sj1*x2386))+((r02*x2391))+(((-1.0)*r22*x2387))+(((-1.0)*x2397)));
evalcond[2]=((((-1.08e-6)*x2381))+(((-1.0)*x2381*x2383))+(((-0.56747)*x2382))+(((1.17e-6)*x2394))+((pz*sj1))+(((-1.0)*cj1*py*x2386))+((cj1*x2385)));
evalcond[3]=((0.73)+(((-1.08e-6)*x2382))+(((-1.17e-6)*x2395))+(((-1.0)*py*sj1*x2386))+(((-1.0)*pz*x2387))+(((-1.0)*x2382*x2383))+(((0.56747)*x2381))+((sj1*x2385)));
evalcond[4]=(x2393+((r20*x2384))+(((-1.0)*x2397))+(((-1.0)*cj1*x2386*x2392))+(((-1.0)*cj1*gconst16*r10*x2386))+((x2389*x2390))+((gconst16*r00*x2389))+((sj1*x2388)));
evalcond[5]=(((r00*sj0*x2384))+x2396+x2395+((x2390*x2391))+(((-1.0)*sj1*x2386*x2392))+(((-1.0)*x2387*x2388))+(((-1.0)*r10*x2384*x2386))+(((-1.0)*gconst16*r20*x2387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2399 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2399)==0){
continue;
}
IkReal x2398=pow(x2399,-0.5);
CheckValue<IkReal> x2400 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2400.valid){
continue;
}
IkReal gconst18=((-1.0)*(x2400.value));
IkReal gconst19=((-1.0)*r21*x2398);
IkReal gconst20=(r20*x2398);
CheckValue<IkReal> x2401 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2401.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2401.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
CheckValue<IkReal> x2404 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2404.valid){
continue;
}
IkReal x2402=((-1.0)*(x2404.value));
IkReal x2403=x2398;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst19;
cj5=gconst20;
j5=x2402;
IkReal gconst18=x2402;
IkReal gconst19=((-1.0)*r21*x2403);
IkReal gconst20=(r20*x2403);
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
CheckValue<IkReal> x2407 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2407.valid){
continue;
}
IkReal x2405=((-1.0)*(x2407.value));
IkReal x2406=x2398;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst19;
cj5=gconst20;
j5=x2405;
IkReal gconst18=x2405;
IkReal gconst19=((-1.0)*r21*x2406);
IkReal gconst20=(r20*x2406);
j0eval[0]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
CheckValue<IkReal> x2409 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2409.valid){
continue;
}
IkReal x2408=((-1.0)*(x2409.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst19;
cj5=gconst20;
j5=x2408;
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst18=x2408;
IkReal gconst19=((-1.0)*r21);
IkReal gconst20=r20;
IkReal x2410=((((-1.0)*r20*rxp0_2))+(((-1.0)*r21*rxp1_2)));
j0eval[0]=x2410;
j0eval[1]=((IKabs(px))+(IKabs(py)));
j0eval[2]=IKsign(x2410);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2411=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst20*rxp0_2))+((gconst19*rxp1_2)))),-1);
if(!x2411.valid){
continue;
}
CheckValue<IkReal> x2412 = IKatan2WithCheck(IkReal(px),IkReal(((-1.0)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x2412.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2411.value)))+(x2412.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2413=IKcos(j0);
IkReal x2414=IKsin(j0);
IkReal x2415=((1.0)*x2413);
IkReal x2416=(gconst19*x2414);
IkReal x2417=((1.0)*x2414);
evalcond[0]=((((-1.0)*r12*x2417))+(((-1.0)*r02*x2415)));
evalcond[1]=((((-1.0)*py*x2417))+(((-1.0)*px*x2415)));
evalcond[2]=((1.0)+((r11*x2416))+((gconst19*r01*x2413))+(((-1.0)*gconst20*r10*x2417))+(((-1.0)*gconst20*r00*x2415)));
evalcond[3]=((((-1.0)*gconst19*r00*x2415))+(((-1.0)*gconst20*r11*x2417))+(((-1.0)*r10*x2416))+(((-1.0)*gconst20*r01*x2415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x2418=((1.0)*gconst19);
CheckValue<IkReal> x2420 = IKatan2WithCheck(IkReal((((gconst20*r00*sj0))+((cj0*gconst19*r11))+(((-1.0)*r01*sj0*x2418))+(((-1.0)*cj0*gconst20*r10)))),IkReal((((gconst20*r20))+(((-1.0)*r21*x2418)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2420.valid){
continue;
}
IkReal x2419=x2420.value;
j1array[0]=((-1.0)*x2419);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2419)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2421=IKsin(j1);
IkReal x2422=IKcos(j1);
IkReal x2423=((1.0)*gconst20);
IkReal x2424=(cj0*x2421);
IkReal x2425=(sj0*x2421);
evalcond[0]=((((-1.0)*gconst19*r01*x2425))+(((-1.0)*r10*x2423*x2424))+((gconst19*r21*x2422))+(((-1.0)*r20*x2422*x2423))+((gconst20*r00*x2425))+((gconst19*r11*x2424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2426=(cj1*cj4);
IkReal x2427=(sj1*sj4);
IkReal x2428=(cj1*sj4);
IkReal x2429=(r02*sj0);
IkReal x2430=(cj4*sj1);
IkReal x2431=((1.0)*cj0*r12);
if( IKabs((((x2426*x2429))+(((-1.0)*x2426*x2431))+((x2427*x2429))+(((-1.0)*x2427*x2431)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2429*x2430))+((cj0*r12*x2430))+((x2428*x2429))+(((-1.0)*x2428*x2431)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2426*x2429))+(((-1.0)*x2426*x2431))+((x2427*x2429))+(((-1.0)*x2427*x2431))))+IKsqr(((((-1.0)*x2429*x2430))+((cj0*r12*x2430))+((x2428*x2429))+(((-1.0)*x2428*x2431))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x2426*x2429))+(((-1.0)*x2426*x2431))+((x2427*x2429))+(((-1.0)*x2427*x2431))), ((((-1.0)*x2429*x2430))+((cj0*r12*x2430))+((x2428*x2429))+(((-1.0)*x2428*x2431))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2432=IKcos(j2);
IkReal x2433=IKsin(j2);
IkReal x2434=((1.17e-6)*cj4);
IkReal x2435=(cj1*sj0);
IkReal x2436=(gconst20*r01);
IkReal x2437=((1.0)*cj1);
IkReal x2438=(gconst19*r20);
IkReal x2439=(sj0*sj1);
IkReal x2440=(gconst19*r00);
IkReal x2441=(gconst20*sj1);
IkReal x2442=(cj0*r11);
IkReal x2443=(cj0*py);
IkReal x2444=((1.0)*sj1);
IkReal x2445=(cj0*r12);
IkReal x2446=(cj4*x2432);
IkReal x2447=(sj4*x2433);
IkReal x2448=(sj4*x2432);
IkReal x2449=(cj4*x2433);
IkReal x2450=(cj0*gconst19*r10);
IkReal x2451=((1.0)*x2447);
evalcond[0]=(x2446+(((-1.0)*x2444*x2445))+((r02*x2439))+(((-1.0)*x2451)));
evalcond[1]=((((-1.0)*x2437*x2445))+((r02*x2435))+(((-1.0)*x2448))+(((-1.0)*x2449)));
evalcond[2]=((((-0.56747)*x2433))+(((-1.0)*x2437*x2443))+(((-1.08e-6)*x2432))+(((-1.0)*x2432*x2434))+(((1.17e-6)*x2447))+((pz*sj1))+((px*x2435)));
evalcond[3]=((0.73)+(((-1.0)*x2433*x2434))+(((-1.0)*x2443*x2444))+(((-1.17e-6)*x2448))+(((0.56747)*x2432))+(((-1.0)*pz*x2437))+(((-1.08e-6)*x2433))+((px*x2439)));
evalcond[4]=(x2446+((x2435*x2436))+(((-1.0)*x2437*x2450))+(((-1.0)*gconst20*x2437*x2442))+(((-1.0)*x2451))+((sj1*x2438))+((x2435*x2440))+((r21*x2441)));
evalcond[5]=(x2448+x2449+(((-1.0)*gconst20*r21*x2437))+(((-1.0)*x2444*x2450))+((x2436*x2439))+((x2439*x2440))+(((-1.0)*x2441*x2442))+(((-1.0)*x2437*x2438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x2452=((-1.0)*pz);
CheckValue<IkReal> x2455 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2455.valid){
continue;
}
IkReal x2453=((-1.0)*(x2455.value));
IkReal x2454=x2398;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst19;
cj5=gconst20;
j5=x2453;
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2452);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x2452);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x2452);
rxp2_2=0;
IkReal gconst18=x2453;
IkReal gconst19=((-1.0)*r21*x2454);
IkReal gconst20=(r20*x2454);
j0eval[0]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2456 = IKatan2WithCheck(IkReal(((((-1.0)*gconst20*r01))+(((-1.0)*gconst19*r00)))),IkReal((((gconst19*r10))+((gconst20*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2456.valid){
continue;
}
CheckValue<IkReal> x2457=IKPowWithIntegerCheck(IKsign((r22*(((gconst19*gconst19)+(gconst20*gconst20))))),-1);
if(!x2457.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2456.value)+(((1.5707963267949)*(x2457.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x2458=IKcos(j0);
IkReal x2459=IKsin(j0);
IkReal x2460=((1.0)*r00);
IkReal x2461=(gconst19*x2458);
IkReal x2462=(gconst19*x2459);
IkReal x2463=(gconst20*x2458);
IkReal x2464=((1.0)*x2459);
evalcond[0]=((((-1.0)*r12*x2464))+(((-1.0)*r02*x2458)));
evalcond[1]=((1.0)+((r01*x2461))+(((-1.0)*gconst20*r10*x2464))+((r11*x2462))+(((-1.0)*x2460*x2463)));
evalcond[2]=((((-1.0)*r10*x2462))+(((-1.0)*r01*x2463))+(((-1.0)*x2460*x2461))+(((-1.0)*gconst20*r11*x2464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x2465=((-1.0)*pz);
CheckValue<IkReal> x2468 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2468.valid){
continue;
}
IkReal x2466=((-1.0)*(x2468.value));
IkReal x2467=x2398;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst19;
cj5=gconst20;
j5=x2466;
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2465);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x2465);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x2465);
rxp2_2=0;
IkReal gconst18=x2466;
IkReal gconst19=((-1.0)*r21*x2467);
IkReal gconst20=(r20*x2467);
IkReal x2469=r22*r22;
CheckValue<IkReal> x2473=IKPowWithIntegerCheck(((-1.0)+x2469),-1);
if(!x2473.valid){
continue;
}
IkReal x2470=x2473.value;
if((((1.0)+(((-1.0)*x2469)))) < -0.00001)
continue;
IkReal x2471=IKsqrt(((1.0)+(((-1.0)*x2469))));
IkReal x2472=(r22*x2470*x2471);
j1eval[0]=((IKabs(((((-1.0)*cj0*r12*x2472))+((r02*sj0*x2472)))))+(IKabs(x2471)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x2474=((-1.0)*pz);
CheckValue<IkReal> x2477 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2477.valid){
continue;
}
IkReal x2475=((-1.0)*(x2477.value));
IkReal x2476=x2398;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst19;
cj5=gconst20;
j5=x2475;
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2474);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x2474);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x2474);
rxp2_2=0;
IkReal gconst18=x2475;
IkReal gconst19=((-1.0)*r21*x2476);
IkReal gconst20=(r20*x2476);
IkReal x2478=r22*r22;
CheckValue<IkReal> x2482=IKPowWithIntegerCheck(((-1.0)+x2478),-1);
if(!x2482.valid){
continue;
}
IkReal x2479=x2482.value;
if((((1.0)+(((-1.0)*x2478)))) < -0.00001)
continue;
IkReal x2480=IKsqrt(((1.0)+(((-1.0)*x2478))));
IkReal x2481=(x2479*x2480);
j1eval[0]=((IKabs((((r02*r22*sj0*x2481))+(((-1.0)*cj0*r12*r22*x2481)))))+(IKabs(((((-1.0)*x2478*x2481))+x2481))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x2483=((1.0)*gconst20);
CheckValue<IkReal> x2485 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x2483))+((gconst19*r21)))),IkReal((((gconst20*r00*sj0))+(((-1.0)*gconst19*r01*sj0))+((cj0*gconst19*r11))+(((-1.0)*cj0*r10*x2483)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2485.valid){
continue;
}
IkReal x2484=x2485.value;
j1array[0]=((-1.0)*x2484);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2484)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2486=IKcos(j1);
IkReal x2487=IKsin(j1);
IkReal x2488=((1.0)*gconst19);
IkReal x2489=(sj0*x2486);
IkReal x2490=(cj0*x2486);
evalcond[0]=((((-1.0)*gconst20*r10*x2490))+((gconst20*r20*x2487))+((gconst20*r00*x2489))+((gconst19*r11*x2490))+(((-1.0)*r21*x2487*x2488))+(((-1.0)*r01*x2488*x2489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2491=(cj1*cj4);
IkReal x2492=(sj1*sj4);
IkReal x2493=(cj4*sj1);
IkReal x2494=(cj1*sj4);
IkReal x2495=(r02*sj0);
IkReal x2496=((1.0)*cj0*r12);
if( IKabs((((x2492*x2495))+((r22*x2493))+(((-1.0)*x2491*x2496))+((x2491*x2495))+(((-1.0)*r22*x2494))+(((-1.0)*x2492*x2496)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*r12*x2493))+((x2494*x2495))+(((-1.0)*x2493*x2495))+(((-1.0)*x2494*x2496))+((r22*x2491))+((r22*x2492)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2492*x2495))+((r22*x2493))+(((-1.0)*x2491*x2496))+((x2491*x2495))+(((-1.0)*r22*x2494))+(((-1.0)*x2492*x2496))))+IKsqr((((cj0*r12*x2493))+((x2494*x2495))+(((-1.0)*x2493*x2495))+(((-1.0)*x2494*x2496))+((r22*x2491))+((r22*x2492))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x2492*x2495))+((r22*x2493))+(((-1.0)*x2491*x2496))+((x2491*x2495))+(((-1.0)*r22*x2494))+(((-1.0)*x2492*x2496))), (((cj0*r12*x2493))+((x2494*x2495))+(((-1.0)*x2493*x2495))+(((-1.0)*x2494*x2496))+((r22*x2491))+((r22*x2492))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2497=IKcos(j2);
IkReal x2498=IKsin(j2);
IkReal x2499=((1.17e-6)*cj4);
IkReal x2500=(sj0*sj1);
IkReal x2501=(gconst19*r00);
IkReal x2502=(gconst20*r01);
IkReal x2503=(cj1*sj0);
IkReal x2504=((1.0)*cj1);
IkReal x2505=(gconst19*r20);
IkReal x2506=(gconst20*sj1);
IkReal x2507=(cj0*r11);
IkReal x2508=(cj0*r12);
IkReal x2509=((1.0)*sj1);
IkReal x2510=(cj4*x2497);
IkReal x2511=(sj4*x2498);
IkReal x2512=(sj4*x2497);
IkReal x2513=(cj4*x2498);
IkReal x2514=(cj0*gconst19*r10);
IkReal x2515=((1.0)*x2511);
evalcond[0]=(((r02*x2503))+((r22*sj1))+(((-1.0)*x2504*x2508))+(((-1.0)*x2512))+(((-1.0)*x2513)));
evalcond[1]=(x2510+(((-1.0)*x2508*x2509))+(((-1.0)*x2515))+((r02*x2500))+(((-1.0)*r22*x2504)));
evalcond[2]=((((-1.08e-6)*x2497))+(((-1.0)*x2497*x2499))+(((-0.56747)*x2498))+(((1.17e-6)*x2511))+((pz*sj1)));
evalcond[3]=((0.73)+(((-1.08e-6)*x2498))+(((-1.17e-6)*x2512))+(((-1.0)*x2498*x2499))+(((-1.0)*pz*x2504))+(((0.56747)*x2497)));
evalcond[4]=(x2510+(((-1.0)*x2515))+((x2501*x2503))+(((-1.0)*x2504*x2514))+((sj1*x2505))+((r21*x2506))+(((-1.0)*gconst20*x2504*x2507))+((x2502*x2503)));
evalcond[5]=(x2512+x2513+((x2500*x2502))+((x2500*x2501))+(((-1.0)*x2504*x2505))+(((-1.0)*gconst20*r21*x2504))+(((-1.0)*x2509*x2514))+(((-1.0)*x2506*x2507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x2516=((1.0)*gconst19);
CheckValue<IkReal> x2518 = IKatan2WithCheck(IkReal((((gconst20*r00*sj0))+(((-1.0)*r01*sj0*x2516))+((cj0*gconst19*r11))+(((-1.0)*cj0*gconst20*r10)))),IkReal((((gconst20*r20))+(((-1.0)*r21*x2516)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2518.valid){
continue;
}
IkReal x2517=x2518.value;
j1array[0]=((-1.0)*x2517);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2517)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2519=IKsin(j1);
IkReal x2520=IKcos(j1);
IkReal x2521=((1.0)*gconst20);
IkReal x2522=(cj0*x2519);
IkReal x2523=(sj0*x2519);
evalcond[0]=((((-1.0)*r20*x2520*x2521))+((gconst20*r00*x2523))+((gconst19*r21*x2520))+(((-1.0)*r10*x2521*x2522))+(((-1.0)*gconst19*r01*x2523))+((gconst19*r11*x2522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2524=(cj1*cj4);
IkReal x2525=(sj1*sj4);
IkReal x2526=(cj4*sj1);
IkReal x2527=(cj1*sj4);
IkReal x2528=(r02*sj0);
IkReal x2529=((1.0)*cj0*r12);
if( IKabs(((((-1.0)*x2524*x2529))+((r22*x2526))+(((-1.0)*r22*x2527))+(((-1.0)*x2525*x2529))+((x2525*x2528))+((x2524*x2528)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2527*x2528))+((r22*x2525))+((r22*x2524))+(((-1.0)*x2527*x2529))+((cj0*r12*x2526))+(((-1.0)*x2526*x2528)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2524*x2529))+((r22*x2526))+(((-1.0)*r22*x2527))+(((-1.0)*x2525*x2529))+((x2525*x2528))+((x2524*x2528))))+IKsqr((((x2527*x2528))+((r22*x2525))+((r22*x2524))+(((-1.0)*x2527*x2529))+((cj0*r12*x2526))+(((-1.0)*x2526*x2528))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2524*x2529))+((r22*x2526))+(((-1.0)*r22*x2527))+(((-1.0)*x2525*x2529))+((x2525*x2528))+((x2524*x2528))), (((x2527*x2528))+((r22*x2525))+((r22*x2524))+(((-1.0)*x2527*x2529))+((cj0*r12*x2526))+(((-1.0)*x2526*x2528))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2530=IKcos(j2);
IkReal x2531=IKsin(j2);
IkReal x2532=((1.17e-6)*cj4);
IkReal x2533=(sj0*sj1);
IkReal x2534=(gconst19*r00);
IkReal x2535=(gconst20*r01);
IkReal x2536=(cj1*sj0);
IkReal x2537=((1.0)*cj1);
IkReal x2538=(gconst19*r20);
IkReal x2539=(gconst20*sj1);
IkReal x2540=(cj0*r11);
IkReal x2541=(cj0*r12);
IkReal x2542=((1.0)*sj1);
IkReal x2543=(cj4*x2530);
IkReal x2544=(sj4*x2531);
IkReal x2545=(sj4*x2530);
IkReal x2546=(cj4*x2531);
IkReal x2547=(cj0*gconst19*r10);
IkReal x2548=((1.0)*x2544);
evalcond[0]=(((r22*sj1))+(((-1.0)*x2546))+(((-1.0)*x2545))+((r02*x2536))+(((-1.0)*x2537*x2541)));
evalcond[1]=((((-1.0)*x2541*x2542))+x2543+((r02*x2533))+(((-1.0)*r22*x2537))+(((-1.0)*x2548)));
evalcond[2]=((((-0.56747)*x2531))+(((-1.0)*x2530*x2532))+(((-1.08e-6)*x2530))+((pz*sj1))+(((1.17e-6)*x2544)));
evalcond[3]=((0.73)+(((0.56747)*x2530))+(((-1.08e-6)*x2531))+(((-1.0)*x2531*x2532))+(((-1.0)*pz*x2537))+(((-1.17e-6)*x2545)));
evalcond[4]=(x2543+((sj1*x2538))+(((-1.0)*gconst20*x2537*x2540))+((r21*x2539))+(((-1.0)*x2548))+(((-1.0)*x2537*x2547))+((x2534*x2536))+((x2535*x2536)));
evalcond[5]=((((-1.0)*x2542*x2547))+x2546+x2545+(((-1.0)*x2539*x2540))+(((-1.0)*gconst20*r21*x2537))+(((-1.0)*x2537*x2538))+((x2533*x2534))+((x2533*x2535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2549 = IKatan2WithCheck(IkReal(((((-1.0)*gconst20*r01))+(((-1.0)*gconst19*r00)))),IkReal((((gconst19*r10))+((gconst20*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2549.valid){
continue;
}
CheckValue<IkReal> x2550=IKPowWithIntegerCheck(IKsign((r22*(((gconst19*gconst19)+(gconst20*gconst20))))),-1);
if(!x2550.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2549.value)+(((1.5707963267949)*(x2550.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2551=IKcos(j0);
IkReal x2552=IKsin(j0);
IkReal x2553=((1.0)*x2551);
IkReal x2554=(gconst19*x2552);
IkReal x2555=((1.0)*x2552);
evalcond[0]=((((-1.0)*r12*x2555))+(((-1.0)*r02*x2553)));
evalcond[1]=((((-1.0)*py*x2555))+(((-1.0)*px*x2553)));
evalcond[2]=((1.0)+((gconst19*r01*x2551))+(((-1.0)*gconst20*r10*x2555))+(((-1.0)*gconst20*r00*x2553))+((r11*x2554)));
evalcond[3]=((((-1.0)*gconst20*r01*x2553))+(((-1.0)*gconst20*r11*x2555))+(((-1.0)*r10*x2554))+(((-1.0)*gconst19*r00*x2553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
CheckValue<IkReal> x2558 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2558.valid){
continue;
}
IkReal x2556=((-1.0)*(x2558.value));
IkReal x2557=x2398;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst19;
cj5=gconst20;
j5=x2556;
IkReal gconst18=x2556;
IkReal gconst19=((-1.0)*r21*x2557);
IkReal gconst20=(r20*x2557);
IkReal x2559=r22*r22;
CheckValue<IkReal> x2563=IKPowWithIntegerCheck(((-1.0)+x2559),-1);
if(!x2563.valid){
continue;
}
IkReal x2560=x2563.value;
if((((1.0)+(((-1.0)*x2559)))) < -0.00001)
continue;
IkReal x2561=IKsqrt(((1.0)+(((-1.0)*x2559))));
IkReal x2562=(r22*x2560*x2561);
j1eval[0]=((IKabs((((r02*sj0*x2562))+(((-1.0)*cj0*r12*x2562)))))+(IKabs(x2561)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
CheckValue<IkReal> x2566 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2566.valid){
continue;
}
IkReal x2564=((-1.0)*(x2566.value));
IkReal x2565=x2398;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst19;
cj5=gconst20;
j5=x2564;
IkReal gconst18=x2564;
IkReal gconst19=((-1.0)*r21*x2565);
IkReal gconst20=(r20*x2565);
IkReal x2567=r22*r22;
CheckValue<IkReal> x2571=IKPowWithIntegerCheck(((-1.0)+x2567),-1);
if(!x2571.valid){
continue;
}
IkReal x2568=x2571.value;
if((((1.0)+(((-1.0)*x2567)))) < -0.00001)
continue;
IkReal x2569=IKsqrt(((1.0)+(((-1.0)*x2567))));
IkReal x2570=(x2568*x2569);
j1eval[0]=((IKabs(((((-1.0)*cj0*r12*r22*x2570))+((r02*r22*sj0*x2570)))))+(IKabs((x2570+(((-1.0)*x2567*x2570))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x2572=((1.0)*gconst20);
CheckValue<IkReal> x2574 = IKatan2WithCheck(IkReal((((gconst19*r21))+(((-1.0)*r20*x2572)))),IkReal((((gconst20*r00*sj0))+(((-1.0)*gconst19*r01*sj0))+((cj0*gconst19*r11))+(((-1.0)*cj0*r10*x2572)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2574.valid){
continue;
}
IkReal x2573=x2574.value;
j1array[0]=((-1.0)*x2573);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2573)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2575=IKcos(j1);
IkReal x2576=IKsin(j1);
IkReal x2577=((1.0)*gconst19);
IkReal x2578=(sj0*x2575);
IkReal x2579=(cj0*x2575);
evalcond[0]=(((gconst20*r00*x2578))+((gconst19*r11*x2579))+((gconst20*r20*x2576))+(((-1.0)*r01*x2577*x2578))+(((-1.0)*gconst20*r10*x2579))+(((-1.0)*r21*x2576*x2577)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2580=(cj1*cj4);
IkReal x2581=(sj1*sj4);
IkReal x2582=(cj4*sj1);
IkReal x2583=(cj1*sj4);
IkReal x2584=(r02*sj0);
IkReal x2585=((1.0)*cj0*r12);
if( IKabs((((r22*x2582))+((x2580*x2584))+((x2581*x2584))+(((-1.0)*r22*x2583))+(((-1.0)*x2580*x2585))+(((-1.0)*x2581*x2585)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x2581))+((r22*x2580))+(((-1.0)*x2582*x2584))+((cj0*r12*x2582))+(((-1.0)*x2583*x2585))+((x2583*x2584)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x2582))+((x2580*x2584))+((x2581*x2584))+(((-1.0)*r22*x2583))+(((-1.0)*x2580*x2585))+(((-1.0)*x2581*x2585))))+IKsqr((((r22*x2581))+((r22*x2580))+(((-1.0)*x2582*x2584))+((cj0*r12*x2582))+(((-1.0)*x2583*x2585))+((x2583*x2584))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r22*x2582))+((x2580*x2584))+((x2581*x2584))+(((-1.0)*r22*x2583))+(((-1.0)*x2580*x2585))+(((-1.0)*x2581*x2585))), (((r22*x2581))+((r22*x2580))+(((-1.0)*x2582*x2584))+((cj0*r12*x2582))+(((-1.0)*x2583*x2585))+((x2583*x2584))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2586=IKcos(j2);
IkReal x2587=IKsin(j2);
IkReal x2588=((1.17e-6)*cj4);
IkReal x2589=(cj1*sj0);
IkReal x2590=(sj0*sj1);
IkReal x2591=(gconst19*r00);
IkReal x2592=(gconst20*r01);
IkReal x2593=((1.0)*cj1);
IkReal x2594=(gconst19*r20);
IkReal x2595=(gconst20*sj1);
IkReal x2596=(cj0*r11);
IkReal x2597=(cj0*py);
IkReal x2598=((1.0)*sj1);
IkReal x2599=(cj0*r12);
IkReal x2600=(cj4*x2586);
IkReal x2601=(sj4*x2587);
IkReal x2602=(sj4*x2586);
IkReal x2603=(cj4*x2587);
IkReal x2604=(cj0*gconst19*r10);
IkReal x2605=((1.0)*x2601);
evalcond[0]=((((-1.0)*x2602))+(((-1.0)*x2603))+((r22*sj1))+(((-1.0)*x2593*x2599))+((r02*x2589)));
evalcond[1]=((((-1.0)*r22*x2593))+(((-1.0)*x2598*x2599))+(((-1.0)*x2605))+((r02*x2590))+x2600);
evalcond[2]=((((-1.08e-6)*x2586))+(((-1.0)*x2593*x2597))+(((1.17e-6)*x2601))+(((-1.0)*x2586*x2588))+(((-0.56747)*x2587))+((px*x2589))+((pz*sj1)));
evalcond[3]=((0.73)+(((-1.08e-6)*x2587))+(((0.56747)*x2586))+(((-1.0)*x2597*x2598))+((px*x2590))+(((-1.0)*x2587*x2588))+(((-1.0)*pz*x2593))+(((-1.17e-6)*x2602)));
evalcond[4]=((((-1.0)*x2593*x2604))+((x2589*x2592))+((x2589*x2591))+((sj1*x2594))+(((-1.0)*gconst20*x2593*x2596))+(((-1.0)*x2605))+x2600+((r21*x2595)));
evalcond[5]=((((-1.0)*gconst20*r21*x2593))+(((-1.0)*x2593*x2594))+(((-1.0)*x2595*x2596))+(((-1.0)*x2598*x2604))+((x2590*x2591))+((x2590*x2592))+x2602+x2603);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x2606=((1.0)*gconst19);
CheckValue<IkReal> x2608 = IKatan2WithCheck(IkReal((((gconst20*r00*sj0))+((cj0*gconst19*r11))+(((-1.0)*r01*sj0*x2606))+(((-1.0)*cj0*gconst20*r10)))),IkReal((((gconst20*r20))+(((-1.0)*r21*x2606)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2608.valid){
continue;
}
IkReal x2607=x2608.value;
j1array[0]=((-1.0)*x2607);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2607)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2609=IKsin(j1);
IkReal x2610=IKcos(j1);
IkReal x2611=((1.0)*gconst20);
IkReal x2612=(cj0*x2609);
IkReal x2613=(sj0*x2609);
evalcond[0]=(((gconst19*r11*x2612))+((gconst19*r21*x2610))+(((-1.0)*gconst19*r01*x2613))+((gconst20*r00*x2613))+(((-1.0)*r10*x2611*x2612))+(((-1.0)*r20*x2610*x2611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2614=(cj1*cj4);
IkReal x2615=(sj1*sj4);
IkReal x2616=(cj4*sj1);
IkReal x2617=(cj1*sj4);
IkReal x2618=(r02*sj0);
IkReal x2619=((1.0)*cj0*r12);
if( IKabs((((x2615*x2618))+((x2614*x2618))+((r22*x2616))+(((-1.0)*r22*x2617))+(((-1.0)*x2615*x2619))+(((-1.0)*x2614*x2619)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2617*x2619))+((cj0*r12*x2616))+((x2617*x2618))+(((-1.0)*x2616*x2618))+((r22*x2615))+((r22*x2614)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2615*x2618))+((x2614*x2618))+((r22*x2616))+(((-1.0)*r22*x2617))+(((-1.0)*x2615*x2619))+(((-1.0)*x2614*x2619))))+IKsqr(((((-1.0)*x2617*x2619))+((cj0*r12*x2616))+((x2617*x2618))+(((-1.0)*x2616*x2618))+((r22*x2615))+((r22*x2614))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x2615*x2618))+((x2614*x2618))+((r22*x2616))+(((-1.0)*r22*x2617))+(((-1.0)*x2615*x2619))+(((-1.0)*x2614*x2619))), ((((-1.0)*x2617*x2619))+((cj0*r12*x2616))+((x2617*x2618))+(((-1.0)*x2616*x2618))+((r22*x2615))+((r22*x2614))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2620=IKcos(j2);
IkReal x2621=IKsin(j2);
IkReal x2622=((1.17e-6)*cj4);
IkReal x2623=(cj1*sj0);
IkReal x2624=(sj0*sj1);
IkReal x2625=(gconst19*r00);
IkReal x2626=(gconst20*r01);
IkReal x2627=((1.0)*cj1);
IkReal x2628=(gconst19*r20);
IkReal x2629=(gconst20*sj1);
IkReal x2630=(cj0*r11);
IkReal x2631=(cj0*py);
IkReal x2632=((1.0)*sj1);
IkReal x2633=(cj0*r12);
IkReal x2634=(cj4*x2620);
IkReal x2635=(sj4*x2621);
IkReal x2636=(sj4*x2620);
IkReal x2637=(cj4*x2621);
IkReal x2638=(cj0*gconst19*r10);
IkReal x2639=((1.0)*x2635);
evalcond[0]=(((r22*sj1))+((r02*x2623))+(((-1.0)*x2636))+(((-1.0)*x2637))+(((-1.0)*x2627*x2633)));
evalcond[1]=((((-1.0)*x2639))+(((-1.0)*x2632*x2633))+(((-1.0)*r22*x2627))+((r02*x2624))+x2634);
evalcond[2]=((((-1.08e-6)*x2620))+((px*x2623))+(((1.17e-6)*x2635))+(((-0.56747)*x2621))+((pz*sj1))+(((-1.0)*x2620*x2622))+(((-1.0)*x2627*x2631)));
evalcond[3]=((0.73)+(((-1.17e-6)*x2636))+(((-1.08e-6)*x2621))+((px*x2624))+(((0.56747)*x2620))+(((-1.0)*pz*x2627))+(((-1.0)*x2631*x2632))+(((-1.0)*x2621*x2622)));
evalcond[4]=((((-1.0)*x2639))+((x2623*x2625))+((x2623*x2626))+((sj1*x2628))+(((-1.0)*gconst20*x2627*x2630))+((r21*x2629))+x2634+(((-1.0)*x2627*x2638)));
evalcond[5]=(((x2624*x2626))+((x2624*x2625))+(((-1.0)*gconst20*r21*x2627))+(((-1.0)*x2629*x2630))+(((-1.0)*x2627*x2628))+(((-1.0)*x2632*x2638))+x2637+x2636);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2640=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst20*rxp0_2))+((gconst19*rxp1_2)))),-1);
if(!x2640.valid){
continue;
}
CheckValue<IkReal> x2641 = IKatan2WithCheck(IkReal(px),IkReal(((-1.0)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x2641.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2640.value)))+(x2641.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2642=IKcos(j0);
IkReal x2643=IKsin(j0);
IkReal x2644=((1.0)*x2642);
IkReal x2645=(gconst19*x2643);
IkReal x2646=((1.0)*x2643);
evalcond[0]=((((-1.0)*r12*x2646))+(((-1.0)*r02*x2644)));
evalcond[1]=((((-1.0)*py*x2646))+(((-1.0)*px*x2644)));
evalcond[2]=((1.0)+((r11*x2645))+(((-1.0)*gconst20*r10*x2646))+(((-1.0)*gconst20*r00*x2644))+((gconst19*r01*x2642)));
evalcond[3]=((((-1.0)*r10*x2645))+(((-1.0)*gconst20*r01*x2644))+(((-1.0)*gconst19*r00*x2644))+(((-1.0)*gconst20*r11*x2646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
CheckValue<IkReal> x2649 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2649.valid){
continue;
}
IkReal x2647=((-1.0)*(x2649.value));
IkReal x2648=x2398;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst19;
cj5=gconst20;
j5=x2647;
IkReal gconst18=x2647;
IkReal gconst19=((-1.0)*r21*x2648);
IkReal gconst20=(r20*x2648);
IkReal x2650=r22*r22;
CheckValue<IkReal> x2654=IKPowWithIntegerCheck(((-1.0)+x2650),-1);
if(!x2654.valid){
continue;
}
IkReal x2651=x2654.value;
if((((1.0)+(((-1.0)*x2650)))) < -0.00001)
continue;
IkReal x2652=IKsqrt(((1.0)+(((-1.0)*x2650))));
IkReal x2653=(r22*x2651*x2652);
j1eval[0]=((IKabs(((((-1.0)*cj0*r12*x2653))+((r02*sj0*x2653)))))+(IKabs(x2652)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
CheckValue<IkReal> x2657 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2657.valid){
continue;
}
IkReal x2655=((-1.0)*(x2657.value));
IkReal x2656=x2398;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst19;
cj5=gconst20;
j5=x2655;
IkReal gconst18=x2655;
IkReal gconst19=((-1.0)*r21*x2656);
IkReal gconst20=(r20*x2656);
IkReal x2658=r22*r22;
CheckValue<IkReal> x2662=IKPowWithIntegerCheck(((-1.0)+x2658),-1);
if(!x2662.valid){
continue;
}
IkReal x2659=x2662.value;
if((((1.0)+(((-1.0)*x2658)))) < -0.00001)
continue;
IkReal x2660=IKsqrt(((1.0)+(((-1.0)*x2658))));
IkReal x2661=(x2659*x2660);
j1eval[0]=((IKabs(((((-1.0)*x2658*x2661))+x2661)))+(IKabs((((r02*r22*sj0*x2661))+(((-1.0)*cj0*r12*r22*x2661))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x2663=((1.0)*gconst20);
CheckValue<IkReal> x2665 = IKatan2WithCheck(IkReal((((gconst19*r21))+(((-1.0)*r20*x2663)))),IkReal((((gconst20*r00*sj0))+(((-1.0)*gconst19*r01*sj0))+((cj0*gconst19*r11))+(((-1.0)*cj0*r10*x2663)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2665.valid){
continue;
}
IkReal x2664=x2665.value;
j1array[0]=((-1.0)*x2664);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2664)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2666=IKcos(j1);
IkReal x2667=IKsin(j1);
IkReal x2668=((1.0)*gconst19);
IkReal x2669=(sj0*x2666);
IkReal x2670=(cj0*x2666);
evalcond[0]=((((-1.0)*r21*x2667*x2668))+(((-1.0)*r01*x2668*x2669))+((gconst20*r20*x2667))+(((-1.0)*gconst20*r10*x2670))+((gconst19*r11*x2670))+((gconst20*r00*x2669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2671=(cj1*cj4);
IkReal x2672=(sj1*sj4);
IkReal x2673=(cj4*sj1);
IkReal x2674=(cj1*sj4);
IkReal x2675=(r02*sj0);
IkReal x2676=((1.0)*cj0*r12);
if( IKabs(((((-1.0)*r22*x2674))+((x2672*x2675))+((r22*x2673))+(((-1.0)*x2672*x2676))+(((-1.0)*x2671*x2676))+((x2671*x2675)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*r12*x2673))+(((-1.0)*x2674*x2676))+((r22*x2671))+((r22*x2672))+(((-1.0)*x2673*x2675))+((x2674*x2675)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x2674))+((x2672*x2675))+((r22*x2673))+(((-1.0)*x2672*x2676))+(((-1.0)*x2671*x2676))+((x2671*x2675))))+IKsqr((((cj0*r12*x2673))+(((-1.0)*x2674*x2676))+((r22*x2671))+((r22*x2672))+(((-1.0)*x2673*x2675))+((x2674*x2675))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x2674))+((x2672*x2675))+((r22*x2673))+(((-1.0)*x2672*x2676))+(((-1.0)*x2671*x2676))+((x2671*x2675))), (((cj0*r12*x2673))+(((-1.0)*x2674*x2676))+((r22*x2671))+((r22*x2672))+(((-1.0)*x2673*x2675))+((x2674*x2675))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2677=IKcos(j2);
IkReal x2678=IKsin(j2);
IkReal x2679=((1.17e-6)*cj4);
IkReal x2680=(cj1*sj0);
IkReal x2681=(sj0*sj1);
IkReal x2682=(gconst19*r00);
IkReal x2683=(gconst20*r01);
IkReal x2684=((1.0)*cj1);
IkReal x2685=(gconst19*r20);
IkReal x2686=(gconst20*sj1);
IkReal x2687=(cj0*r11);
IkReal x2688=(cj0*py);
IkReal x2689=((1.0)*sj1);
IkReal x2690=(cj0*r12);
IkReal x2691=(cj4*x2677);
IkReal x2692=(sj4*x2678);
IkReal x2693=(sj4*x2677);
IkReal x2694=(cj4*x2678);
IkReal x2695=(cj0*gconst19*r10);
IkReal x2696=((1.0)*x2692);
evalcond[0]=(((r02*x2680))+((r22*sj1))+(((-1.0)*x2684*x2690))+(((-1.0)*x2694))+(((-1.0)*x2693)));
evalcond[1]=(((r02*x2681))+(((-1.0)*x2696))+(((-1.0)*r22*x2684))+(((-1.0)*x2689*x2690))+x2691);
evalcond[2]=((((1.17e-6)*x2692))+(((-1.0)*x2684*x2688))+(((-1.08e-6)*x2677))+(((-0.56747)*x2678))+(((-1.0)*x2677*x2679))+((pz*sj1))+((px*x2680)));
evalcond[3]=((0.73)+(((-1.17e-6)*x2693))+(((0.56747)*x2677))+(((-1.0)*x2688*x2689))+(((-1.08e-6)*x2678))+(((-1.0)*x2678*x2679))+(((-1.0)*pz*x2684))+((px*x2681)));
evalcond[4]=((((-1.0)*gconst20*x2684*x2687))+((sj1*x2685))+((r21*x2686))+(((-1.0)*x2684*x2695))+(((-1.0)*x2696))+((x2680*x2682))+((x2680*x2683))+x2691);
evalcond[5]=((((-1.0)*x2686*x2687))+(((-1.0)*gconst20*r21*x2684))+(((-1.0)*x2684*x2685))+(((-1.0)*x2689*x2695))+((x2681*x2683))+((x2681*x2682))+x2694+x2693);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x2697=((1.0)*gconst19);
CheckValue<IkReal> x2699 = IKatan2WithCheck(IkReal((((gconst20*r00*sj0))+((cj0*gconst19*r11))+(((-1.0)*r01*sj0*x2697))+(((-1.0)*cj0*gconst20*r10)))),IkReal((((gconst20*r20))+(((-1.0)*r21*x2697)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2699.valid){
continue;
}
IkReal x2698=x2699.value;
j1array[0]=((-1.0)*x2698);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2698)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2700=IKsin(j1);
IkReal x2701=IKcos(j1);
IkReal x2702=((1.0)*gconst20);
IkReal x2703=(cj0*x2700);
IkReal x2704=(sj0*x2700);
evalcond[0]=(((gconst19*r21*x2701))+(((-1.0)*gconst19*r01*x2704))+(((-1.0)*r20*x2701*x2702))+((gconst20*r00*x2704))+(((-1.0)*r10*x2702*x2703))+((gconst19*r11*x2703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2705=(cj1*cj4);
IkReal x2706=(sj1*sj4);
IkReal x2707=(cj4*sj1);
IkReal x2708=(cj1*sj4);
IkReal x2709=(r02*sj0);
IkReal x2710=((1.0)*cj0*r12);
if( IKabs((((r22*x2707))+((x2705*x2709))+(((-1.0)*r22*x2708))+(((-1.0)*x2706*x2710))+((x2706*x2709))+(((-1.0)*x2705*x2710)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x2705))+((r22*x2706))+((cj0*r12*x2707))+(((-1.0)*x2707*x2709))+(((-1.0)*x2708*x2710))+((x2708*x2709)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x2707))+((x2705*x2709))+(((-1.0)*r22*x2708))+(((-1.0)*x2706*x2710))+((x2706*x2709))+(((-1.0)*x2705*x2710))))+IKsqr((((r22*x2705))+((r22*x2706))+((cj0*r12*x2707))+(((-1.0)*x2707*x2709))+(((-1.0)*x2708*x2710))+((x2708*x2709))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r22*x2707))+((x2705*x2709))+(((-1.0)*r22*x2708))+(((-1.0)*x2706*x2710))+((x2706*x2709))+(((-1.0)*x2705*x2710))), (((r22*x2705))+((r22*x2706))+((cj0*r12*x2707))+(((-1.0)*x2707*x2709))+(((-1.0)*x2708*x2710))+((x2708*x2709))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2711=IKcos(j2);
IkReal x2712=IKsin(j2);
IkReal x2713=((1.17e-6)*cj4);
IkReal x2714=(cj1*sj0);
IkReal x2715=(sj0*sj1);
IkReal x2716=(gconst19*r00);
IkReal x2717=(gconst20*r01);
IkReal x2718=((1.0)*cj1);
IkReal x2719=(gconst19*r20);
IkReal x2720=(gconst20*sj1);
IkReal x2721=(cj0*r11);
IkReal x2722=(cj0*py);
IkReal x2723=((1.0)*sj1);
IkReal x2724=(cj0*r12);
IkReal x2725=(cj4*x2711);
IkReal x2726=(sj4*x2712);
IkReal x2727=(sj4*x2711);
IkReal x2728=(cj4*x2712);
IkReal x2729=(cj0*gconst19*r10);
IkReal x2730=((1.0)*x2726);
evalcond[0]=((((-1.0)*x2718*x2724))+((r02*x2714))+((r22*sj1))+(((-1.0)*x2728))+(((-1.0)*x2727)));
evalcond[1]=(x2725+((r02*x2715))+(((-1.0)*x2723*x2724))+(((-1.0)*r22*x2718))+(((-1.0)*x2730)));
evalcond[2]=((((-1.0)*x2718*x2722))+(((-0.56747)*x2712))+(((-1.08e-6)*x2711))+((px*x2714))+(((1.17e-6)*x2726))+((pz*sj1))+(((-1.0)*x2711*x2713)));
evalcond[3]=((0.73)+(((-1.0)*x2712*x2713))+(((0.56747)*x2711))+(((-1.17e-6)*x2727))+(((-1.08e-6)*x2712))+(((-1.0)*x2722*x2723))+((px*x2715))+(((-1.0)*pz*x2718)));
evalcond[4]=(x2725+(((-1.0)*x2718*x2729))+((sj1*x2719))+((r21*x2720))+(((-1.0)*x2730))+(((-1.0)*gconst20*x2718*x2721))+((x2714*x2717))+((x2714*x2716)));
evalcond[5]=(x2727+x2728+(((-1.0)*x2718*x2719))+(((-1.0)*x2720*x2721))+(((-1.0)*gconst20*r21*x2718))+(((-1.0)*x2723*x2729))+((x2715*x2717))+((x2715*x2716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2732 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2732)==0){
continue;
}
IkReal x2731=pow(x2732,-0.5);
CheckValue<IkReal> x2733 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2733.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x2733.value))));
IkReal gconst22=((1.0)*r21*x2731);
IkReal gconst23=((-1.0)*r20*x2731);
CheckValue<IkReal> x2734 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2734.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2734.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
CheckValue<IkReal> x2737 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2737.valid){
continue;
}
IkReal x2735=((1.0)*(x2737.value));
IkReal x2736=x2731;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x2735)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x2735)));
IkReal gconst22=((1.0)*r21*x2736);
IkReal gconst23=((-1.0)*r20*x2736);
j0eval[0]=0;
j0eval[1]=0;
j0eval[2]=((IKabs(r02))+(IKabs(r12)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
CheckValue<IkReal> x2740 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2740.valid){
continue;
}
IkReal x2738=((1.0)*(x2740.value));
IkReal x2739=x2731;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x2738)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x2738)));
IkReal gconst22=((1.0)*r21*x2739);
IkReal gconst23=((-1.0)*r20*x2739);
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
CheckValue<IkReal> x2743 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2743.valid){
continue;
}
IkReal x2741=((1.0)*(x2743.value));
IkReal x2742=x2731;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x2741)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x2741)));
IkReal gconst22=((1.0)*r21*x2742);
IkReal gconst23=((-1.0)*r20*x2742);
j0eval[0]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
CheckValue<IkReal> x2745 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2745.valid){
continue;
}
IkReal x2744=((1.0)*(x2745.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x2744)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst21=((3.14159265358979)+(((-1.0)*x2744)));
IkReal gconst22=((1.0)*r21);
IkReal gconst23=((-1.0)*r20);
j0eval[0]=0;
j0eval[1]=0;
j0eval[2]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
CheckValue<IkReal> x2747 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2747.valid){
continue;
}
IkReal x2746=((1.0)*(x2747.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x2746)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst21=((3.14159265358979)+(((-1.0)*x2746)));
IkReal gconst22=((1.0)*r21);
IkReal gconst23=((-1.0)*r20);
IkReal x2748=((((1.0)*r21*rxp1_2))+(((1.0)*r20*rxp0_2)));
j0eval[0]=x2748;
j0eval[1]=((IKabs(px))+(IKabs(py)));
j0eval[2]=IKsign(x2748);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2749 = IKatan2WithCheck(IkReal(px),IkReal(((-1.0)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x2749.valid){
continue;
}
CheckValue<IkReal> x2750=IKPowWithIntegerCheck(IKsign((((gconst22*rxp1_2))+(((-1.0)*gconst23*rxp0_2)))),-1);
if(!x2750.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2749.value)+(((1.5707963267949)*(x2750.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2751=IKcos(j0);
IkReal x2752=IKsin(j0);
IkReal x2753=((1.0)*x2751);
IkReal x2754=((1.0)*x2752);
evalcond[0]=((((-1.0)*r12*x2754))+(((-1.0)*r02*x2753)));
evalcond[1]=((((-1.0)*py*x2754))+(((-1.0)*px*x2753)));
evalcond[2]=((1.0)+((gconst22*r01*x2751))+(((-1.0)*gconst23*r10*x2754))+((gconst22*r11*x2752))+(((-1.0)*gconst23*r00*x2753)));
evalcond[3]=((((-1.0)*gconst23*r11*x2754))+(((-1.0)*gconst22*r10*x2754))+(((-1.0)*gconst22*r00*x2753))+(((-1.0)*gconst23*r01*x2753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x2755=((1.0)*gconst22);
CheckValue<IkReal> x2757 = IKatan2WithCheck(IkReal((((gconst23*r00*sj0))+((cj0*gconst22*r11))+(((-1.0)*cj0*gconst23*r10))+(((-1.0)*r01*sj0*x2755)))),IkReal((((gconst23*r20))+(((-1.0)*r21*x2755)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2757.valid){
continue;
}
IkReal x2756=x2757.value;
j1array[0]=((-1.0)*x2756);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2756)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2758=IKsin(j1);
IkReal x2759=IKcos(j1);
IkReal x2760=((1.0)*gconst23);
IkReal x2761=(cj0*x2758);
IkReal x2762=(sj0*x2758);
evalcond[0]=(((gconst23*r00*x2762))+((gconst22*r11*x2761))+(((-1.0)*gconst22*r01*x2762))+(((-1.0)*r20*x2759*x2760))+(((-1.0)*r10*x2760*x2761))+((gconst22*r21*x2759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2763=(cj1*cj4);
IkReal x2764=(sj1*sj4);
IkReal x2765=(cj1*sj4);
IkReal x2766=(r02*sj0);
IkReal x2767=(cj4*sj1);
IkReal x2768=((1.0)*cj0*r12);
if( IKabs(((((-1.0)*x2764*x2768))+((x2764*x2766))+((x2763*x2766))+(((-1.0)*x2763*x2768)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*r12*x2767))+(((-1.0)*x2766*x2767))+((x2765*x2766))+(((-1.0)*x2765*x2768)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2764*x2768))+((x2764*x2766))+((x2763*x2766))+(((-1.0)*x2763*x2768))))+IKsqr((((cj0*r12*x2767))+(((-1.0)*x2766*x2767))+((x2765*x2766))+(((-1.0)*x2765*x2768))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2764*x2768))+((x2764*x2766))+((x2763*x2766))+(((-1.0)*x2763*x2768))), (((cj0*r12*x2767))+(((-1.0)*x2766*x2767))+((x2765*x2766))+(((-1.0)*x2765*x2768))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2769=IKcos(j2);
IkReal x2770=IKsin(j2);
IkReal x2771=((1.17e-6)*cj4);
IkReal x2772=(px*sj0);
IkReal x2773=(gconst23*r21);
IkReal x2774=((1.0)*cj1);
IkReal x2775=(gconst22*sj1);
IkReal x2776=((1.0)*cj0);
IkReal x2777=(r00*sj0);
IkReal x2778=(gconst23*r11);
IkReal x2779=(r02*sj0);
IkReal x2780=(cj4*x2769);
IkReal x2781=(gconst23*r01*sj0);
IkReal x2782=(sj4*x2770);
IkReal x2783=(sj4*x2769);
IkReal x2784=(cj4*x2770);
IkReal x2785=((1.0)*x2782);
evalcond[0]=((((-1.0)*x2785))+x2780+((sj1*x2779))+(((-1.0)*r12*sj1*x2776)));
evalcond[1]=((((-1.0)*cj0*r12*x2774))+(((-1.0)*x2783))+(((-1.0)*x2784))+((cj1*x2779)));
evalcond[2]=((((1.17e-6)*x2782))+(((-1.0)*x2769*x2771))+(((-1.08e-6)*x2769))+(((-1.0)*cj0*py*x2774))+((pz*sj1))+(((-0.56747)*x2770))+((cj1*x2772)));
evalcond[3]=((0.73)+((sj1*x2772))+(((-1.08e-6)*x2770))+(((-1.0)*py*sj1*x2776))+(((-1.0)*pz*x2774))+(((-1.0)*x2770*x2771))+(((-1.17e-6)*x2783))+(((0.56747)*x2769)));
evalcond[4]=((((-1.0)*x2785))+x2780+((sj1*x2773))+(((-1.0)*cj0*gconst22*r10*x2774))+((cj1*gconst22*x2777))+((r20*x2775))+((cj1*x2781))+(((-1.0)*cj0*x2774*x2778)));
evalcond[5]=(x2784+x2783+((x2775*x2777))+(((-1.0)*x2773*x2774))+(((-1.0)*gconst22*r20*x2774))+((sj1*x2781))+(((-1.0)*r10*x2775*x2776))+(((-1.0)*sj1*x2776*x2778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2786=IKPowWithIntegerCheck(IKsign((((gconst22*r20))+((gconst23*r21)))),-1);
if(!x2786.valid){
continue;
}
CheckValue<IkReal> x2787 = IKatan2WithCheck(IkReal(r02),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2787.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2786.value)))+(x2787.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2788=IKcos(j0);
IkReal x2789=IKsin(j0);
IkReal x2790=((1.0)*x2788);
IkReal x2791=((1.0)*x2789);
evalcond[0]=((((-1.0)*r12*x2791))+(((-1.0)*r02*x2790)));
evalcond[1]=((((-1.0)*px*x2790))+(((-1.0)*py*x2791)));
evalcond[2]=((1.0)+(((-1.0)*gconst23*r10*x2791))+(((-1.0)*gconst23*r00*x2790))+((gconst22*r01*x2788))+((gconst22*r11*x2789)));
evalcond[3]=((((-1.0)*gconst22*r10*x2791))+(((-1.0)*gconst23*r11*x2791))+(((-1.0)*gconst23*r01*x2790))+(((-1.0)*gconst22*r00*x2790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x2792=((1.0)*gconst22);
CheckValue<IkReal> x2794 = IKatan2WithCheck(IkReal((((gconst23*r00*sj0))+(((-1.0)*r01*sj0*x2792))+((cj0*gconst22*r11))+(((-1.0)*cj0*gconst23*r10)))),IkReal(((((-1.0)*r21*x2792))+((gconst23*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2794.valid){
continue;
}
IkReal x2793=x2794.value;
j1array[0]=((-1.0)*x2793);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2793)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2795=IKsin(j1);
IkReal x2796=IKcos(j1);
IkReal x2797=((1.0)*gconst23);
IkReal x2798=(cj0*x2795);
IkReal x2799=(sj0*x2795);
evalcond[0]=((((-1.0)*gconst22*r01*x2799))+((gconst23*r00*x2799))+(((-1.0)*r20*x2796*x2797))+(((-1.0)*r10*x2797*x2798))+((gconst22*r11*x2798))+((gconst22*r21*x2796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2800=(cj1*cj4);
IkReal x2801=(sj1*sj4);
IkReal x2802=(cj1*sj4);
IkReal x2803=(r02*sj0);
IkReal x2804=(cj4*sj1);
IkReal x2805=((1.0)*cj0*r12);
if( IKabs(((((-1.0)*x2800*x2805))+((x2801*x2803))+((x2800*x2803))+(((-1.0)*x2801*x2805)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*r12*x2804))+(((-1.0)*x2802*x2805))+(((-1.0)*x2803*x2804))+((x2802*x2803)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2800*x2805))+((x2801*x2803))+((x2800*x2803))+(((-1.0)*x2801*x2805))))+IKsqr((((cj0*r12*x2804))+(((-1.0)*x2802*x2805))+(((-1.0)*x2803*x2804))+((x2802*x2803))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2800*x2805))+((x2801*x2803))+((x2800*x2803))+(((-1.0)*x2801*x2805))), (((cj0*r12*x2804))+(((-1.0)*x2802*x2805))+(((-1.0)*x2803*x2804))+((x2802*x2803))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2806=IKcos(j2);
IkReal x2807=IKsin(j2);
IkReal x2808=((1.17e-6)*cj4);
IkReal x2809=(px*sj0);
IkReal x2810=(gconst23*r21);
IkReal x2811=((1.0)*cj1);
IkReal x2812=(gconst22*sj1);
IkReal x2813=((1.0)*cj0);
IkReal x2814=(r00*sj0);
IkReal x2815=(gconst23*r11);
IkReal x2816=(r02*sj0);
IkReal x2817=(cj4*x2806);
IkReal x2818=(gconst23*r01*sj0);
IkReal x2819=(sj4*x2807);
IkReal x2820=(sj4*x2806);
IkReal x2821=(cj4*x2807);
IkReal x2822=((1.0)*x2819);
evalcond[0]=((((-1.0)*r12*sj1*x2813))+((sj1*x2816))+(((-1.0)*x2822))+x2817);
evalcond[1]=((((-1.0)*cj0*r12*x2811))+((cj1*x2816))+(((-1.0)*x2821))+(((-1.0)*x2820)));
evalcond[2]=(((cj1*x2809))+(((-1.0)*x2806*x2808))+(((-1.0)*cj0*py*x2811))+(((-1.08e-6)*x2806))+((pz*sj1))+(((1.17e-6)*x2819))+(((-0.56747)*x2807)));
evalcond[3]=((0.73)+((sj1*x2809))+(((-1.0)*pz*x2811))+(((-1.0)*x2807*x2808))+(((-1.0)*py*sj1*x2813))+(((-1.17e-6)*x2820))+(((0.56747)*x2806))+(((-1.08e-6)*x2807)));
evalcond[4]=((((-1.0)*cj0*gconst22*r10*x2811))+((cj1*x2818))+((sj1*x2810))+((cj1*gconst22*x2814))+(((-1.0)*cj0*x2811*x2815))+(((-1.0)*x2822))+x2817+((r20*x2812)));
evalcond[5]=((((-1.0)*x2810*x2811))+((x2812*x2814))+(((-1.0)*sj1*x2813*x2815))+((sj1*x2818))+(((-1.0)*gconst22*r20*x2811))+x2820+x2821+(((-1.0)*r10*x2812*x2813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2823=IKPowWithIntegerCheck(IKsign((r22*(((gconst23*gconst23)+(gconst22*gconst22))))),-1);
if(!x2823.valid){
continue;
}
CheckValue<IkReal> x2824 = IKatan2WithCheck(IkReal(((((-1.0)*gconst22*r00))+(((-1.0)*gconst23*r01)))),IkReal((((gconst22*r10))+((gconst23*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2824.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2823.value)))+(x2824.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2825=IKcos(j0);
IkReal x2826=IKsin(j0);
IkReal x2827=((1.0)*x2825);
IkReal x2828=((1.0)*x2826);
evalcond[0]=((((-1.0)*r12*x2828))+(((-1.0)*r02*x2827)));
evalcond[1]=((((-1.0)*py*x2828))+(((-1.0)*px*x2827)));
evalcond[2]=((1.0)+((gconst22*r11*x2826))+(((-1.0)*gconst23*r00*x2827))+(((-1.0)*gconst23*r10*x2828))+((gconst22*r01*x2825)));
evalcond[3]=((((-1.0)*gconst23*r11*x2828))+(((-1.0)*gconst22*r10*x2828))+(((-1.0)*gconst22*r00*x2827))+(((-1.0)*gconst23*r01*x2827)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
CheckValue<IkReal> x2831 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2831.valid){
continue;
}
IkReal x2829=((1.0)*(x2831.value));
IkReal x2830=x2731;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x2829)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x2829)));
IkReal gconst22=((1.0)*r21*x2830);
IkReal gconst23=((-1.0)*r20*x2830);
IkReal x2832=r22*r22;
CheckValue<IkReal> x2836=IKPowWithIntegerCheck(((-1.0)+x2832),-1);
if(!x2836.valid){
continue;
}
IkReal x2833=x2836.value;
if((((1.0)+(((-1.0)*x2832)))) < -0.00001)
continue;
IkReal x2834=IKsqrt(((1.0)+(((-1.0)*x2832))));
IkReal x2835=(x2833*x2834);
j1eval[0]=((IKabs(((((-1.0)*x2832*x2835))+x2835)))+(IKabs((((cj0*r12*r22*x2835))+(((-1.0)*r02*r22*sj0*x2835))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
CheckValue<IkReal> x2839 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2839.valid){
continue;
}
IkReal x2837=((1.0)*(x2839.value));
IkReal x2838=x2731;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x2837)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x2837)));
IkReal gconst22=((1.0)*r21*x2838);
IkReal gconst23=((-1.0)*r20*x2838);
IkReal x2840=r22*r22;
CheckValue<IkReal> x2844=IKPowWithIntegerCheck(((-1.0)+x2840),-1);
if(!x2844.valid){
continue;
}
IkReal x2841=x2844.value;
if((((1.0)+(((-1.0)*x2840)))) < -0.00001)
continue;
IkReal x2842=IKsqrt(((1.0)+(((-1.0)*x2840))));
IkReal x2843=(r22*x2841*x2842);
j1eval[0]=((IKabs(x2842))+(IKabs((((cj0*r12*x2843))+(((-1.0)*r02*sj0*x2843))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x2845=((1.0)*gconst23);
CheckValue<IkReal> x2847 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x2845))+((gconst22*r21)))),IkReal((((gconst23*r00*sj0))+((cj0*gconst22*r11))+(((-1.0)*gconst22*r01*sj0))+(((-1.0)*cj0*r10*x2845)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2847.valid){
continue;
}
IkReal x2846=x2847.value;
j1array[0]=((-1.0)*x2846);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2846)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2848=IKcos(j1);
IkReal x2849=IKsin(j1);
IkReal x2850=((1.0)*x2848);
evalcond[0]=(((cj0*gconst22*r11*x2848))+(((-1.0)*gconst22*r21*x2849))+((gconst23*r00*sj0*x2848))+(((-1.0)*gconst22*r01*sj0*x2850))+(((-1.0)*cj0*gconst23*r10*x2850))+((gconst23*r20*x2849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2851=(cj1*cj4);
IkReal x2852=(sj1*sj4);
IkReal x2853=(cj4*sj1);
IkReal x2854=(cj1*sj4);
IkReal x2855=(r02*sj0);
IkReal x2856=((1.0)*cj0*r12);
if( IKabs((((x2852*x2855))+(((-1.0)*x2851*x2856))+((x2851*x2855))+(((-1.0)*r22*x2854))+((r22*x2853))+(((-1.0)*x2852*x2856)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*r12*x2853))+(((-1.0)*x2853*x2855))+((r22*x2851))+((r22*x2852))+(((-1.0)*x2854*x2856))+((x2854*x2855)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2852*x2855))+(((-1.0)*x2851*x2856))+((x2851*x2855))+(((-1.0)*r22*x2854))+((r22*x2853))+(((-1.0)*x2852*x2856))))+IKsqr((((cj0*r12*x2853))+(((-1.0)*x2853*x2855))+((r22*x2851))+((r22*x2852))+(((-1.0)*x2854*x2856))+((x2854*x2855))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x2852*x2855))+(((-1.0)*x2851*x2856))+((x2851*x2855))+(((-1.0)*r22*x2854))+((r22*x2853))+(((-1.0)*x2852*x2856))), (((cj0*r12*x2853))+(((-1.0)*x2853*x2855))+((r22*x2851))+((r22*x2852))+(((-1.0)*x2854*x2856))+((x2854*x2855))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2857=IKcos(j2);
IkReal x2858=IKsin(j2);
IkReal x2859=((1.17e-6)*cj4);
IkReal x2860=(px*sj0);
IkReal x2861=((1.0)*cj1);
IkReal x2862=(gconst23*r21);
IkReal x2863=(gconst22*sj1);
IkReal x2864=((1.0)*cj0);
IkReal x2865=(r00*sj0);
IkReal x2866=(gconst23*r11);
IkReal x2867=(r02*sj0);
IkReal x2868=(cj4*x2857);
IkReal x2869=(gconst23*r01*sj0);
IkReal x2870=(sj4*x2858);
IkReal x2871=(sj4*x2857);
IkReal x2872=(cj4*x2858);
IkReal x2873=((1.0)*x2870);
evalcond[0]=((((-1.0)*cj0*r12*x2861))+((r22*sj1))+((cj1*x2867))+(((-1.0)*x2872))+(((-1.0)*x2871)));
evalcond[1]=((((-1.0)*r12*sj1*x2864))+(((-1.0)*x2873))+(((-1.0)*r22*x2861))+((sj1*x2867))+x2868);
evalcond[2]=((((1.17e-6)*x2870))+((cj1*x2860))+(((-1.0)*cj0*py*x2861))+(((-1.0)*x2857*x2859))+(((-0.56747)*x2858))+((pz*sj1))+(((-1.08e-6)*x2857)));
evalcond[3]=((0.73)+(((-1.17e-6)*x2871))+(((-1.0)*pz*x2861))+(((-1.0)*py*sj1*x2864))+(((0.56747)*x2857))+((sj1*x2860))+(((-1.08e-6)*x2858))+(((-1.0)*x2858*x2859)));
evalcond[4]=((((-1.0)*cj0*x2861*x2866))+(((-1.0)*cj0*gconst22*r10*x2861))+((cj1*x2869))+(((-1.0)*x2873))+((sj1*x2862))+((cj1*gconst22*x2865))+((r20*x2863))+x2868);
evalcond[5]=((((-1.0)*sj1*x2864*x2866))+(((-1.0)*x2861*x2862))+((x2863*x2865))+(((-1.0)*r10*x2863*x2864))+((sj1*x2869))+x2872+x2871+(((-1.0)*gconst22*r20*x2861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x2874=((1.0)*gconst22);
CheckValue<IkReal> x2876 = IKatan2WithCheck(IkReal((((gconst23*r00*sj0))+(((-1.0)*r01*sj0*x2874))+((cj0*gconst22*r11))+(((-1.0)*cj0*gconst23*r10)))),IkReal((((gconst23*r20))+(((-1.0)*r21*x2874)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2876.valid){
continue;
}
IkReal x2875=x2876.value;
j1array[0]=((-1.0)*x2875);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2875)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2877=IKsin(j1);
IkReal x2878=IKcos(j1);
IkReal x2879=((1.0)*gconst23);
IkReal x2880=(cj0*x2877);
IkReal x2881=(sj0*x2877);
evalcond[0]=(((gconst23*r00*x2881))+(((-1.0)*r10*x2879*x2880))+(((-1.0)*gconst22*r01*x2881))+((gconst22*r21*x2878))+((gconst22*r11*x2880))+(((-1.0)*r20*x2878*x2879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2882=(cj1*cj4);
IkReal x2883=(sj1*sj4);
IkReal x2884=(cj4*sj1);
IkReal x2885=(cj1*sj4);
IkReal x2886=(r02*sj0);
IkReal x2887=((1.0)*cj0*r12);
if( IKabs(((((-1.0)*x2883*x2887))+(((-1.0)*x2882*x2887))+((r22*x2884))+((x2882*x2886))+(((-1.0)*r22*x2885))+((x2883*x2886)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2885*x2886))+((r22*x2882))+((r22*x2883))+(((-1.0)*x2885*x2887))+((cj0*r12*x2884))+(((-1.0)*x2884*x2886)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2883*x2887))+(((-1.0)*x2882*x2887))+((r22*x2884))+((x2882*x2886))+(((-1.0)*r22*x2885))+((x2883*x2886))))+IKsqr((((x2885*x2886))+((r22*x2882))+((r22*x2883))+(((-1.0)*x2885*x2887))+((cj0*r12*x2884))+(((-1.0)*x2884*x2886))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2883*x2887))+(((-1.0)*x2882*x2887))+((r22*x2884))+((x2882*x2886))+(((-1.0)*r22*x2885))+((x2883*x2886))), (((x2885*x2886))+((r22*x2882))+((r22*x2883))+(((-1.0)*x2885*x2887))+((cj0*r12*x2884))+(((-1.0)*x2884*x2886))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2888=IKcos(j2);
IkReal x2889=IKsin(j2);
IkReal x2890=((1.17e-6)*cj4);
IkReal x2891=(px*sj0);
IkReal x2892=((1.0)*cj1);
IkReal x2893=(gconst23*r21);
IkReal x2894=(gconst22*sj1);
IkReal x2895=((1.0)*cj0);
IkReal x2896=(r00*sj0);
IkReal x2897=(gconst23*r11);
IkReal x2898=(r02*sj0);
IkReal x2899=(cj4*x2888);
IkReal x2900=(gconst23*r01*sj0);
IkReal x2901=(sj4*x2889);
IkReal x2902=(sj4*x2888);
IkReal x2903=(cj4*x2889);
IkReal x2904=((1.0)*x2901);
evalcond[0]=(((r22*sj1))+(((-1.0)*cj0*r12*x2892))+((cj1*x2898))+(((-1.0)*x2903))+(((-1.0)*x2902)));
evalcond[1]=((((-1.0)*r22*x2892))+(((-1.0)*r12*sj1*x2895))+(((-1.0)*x2904))+((sj1*x2898))+x2899);
evalcond[2]=((((-1.08e-6)*x2888))+(((-1.0)*x2888*x2890))+(((-1.0)*cj0*py*x2892))+(((-0.56747)*x2889))+((cj1*x2891))+((pz*sj1))+(((1.17e-6)*x2901)));
evalcond[3]=((0.73)+(((-1.08e-6)*x2889))+(((0.56747)*x2888))+(((-1.0)*py*sj1*x2895))+(((-1.0)*x2889*x2890))+((sj1*x2891))+(((-1.0)*pz*x2892))+(((-1.17e-6)*x2902)));
evalcond[4]=((((-1.0)*cj0*gconst22*r10*x2892))+(((-1.0)*cj0*x2892*x2897))+((cj1*gconst22*x2896))+(((-1.0)*x2904))+((sj1*x2893))+((cj1*x2900))+x2899+((r20*x2894)));
evalcond[5]=((((-1.0)*x2892*x2893))+(((-1.0)*r10*x2894*x2895))+((x2894*x2896))+(((-1.0)*sj1*x2895*x2897))+x2903+x2902+((sj1*x2900))+(((-1.0)*gconst22*r20*x2892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2905 = IKatan2WithCheck(IkReal(px),IkReal(((-1.0)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x2905.valid){
continue;
}
CheckValue<IkReal> x2906=IKPowWithIntegerCheck(IKsign((((gconst22*rxp1_2))+(((-1.0)*gconst23*rxp0_2)))),-1);
if(!x2906.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2905.value)+(((1.5707963267949)*(x2906.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2907=IKcos(j0);
IkReal x2908=IKsin(j0);
IkReal x2909=((1.0)*x2907);
IkReal x2910=((1.0)*x2908);
evalcond[0]=((((-1.0)*r02*x2909))+(((-1.0)*r12*x2910)));
evalcond[1]=((((-1.0)*py*x2910))+(((-1.0)*px*x2909)));
evalcond[2]=((1.0)+(((-1.0)*gconst23*r10*x2910))+((gconst22*r11*x2908))+(((-1.0)*gconst23*r00*x2909))+((gconst22*r01*x2907)));
evalcond[3]=((((-1.0)*gconst23*r01*x2909))+(((-1.0)*gconst23*r11*x2910))+(((-1.0)*gconst22*r00*x2909))+(((-1.0)*gconst22*r10*x2910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
CheckValue<IkReal> x2913 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2913.valid){
continue;
}
IkReal x2911=((1.0)*(x2913.value));
IkReal x2912=x2731;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x2911)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x2911)));
IkReal gconst22=((1.0)*r21*x2912);
IkReal gconst23=((-1.0)*r20*x2912);
IkReal x2914=r22*r22;
CheckValue<IkReal> x2918=IKPowWithIntegerCheck(((-1.0)+x2914),-1);
if(!x2918.valid){
continue;
}
IkReal x2915=x2918.value;
if((((1.0)+(((-1.0)*x2914)))) < -0.00001)
continue;
IkReal x2916=IKsqrt(((1.0)+(((-1.0)*x2914))));
IkReal x2917=(x2915*x2916);
j1eval[0]=((IKabs(((((-1.0)*r02*r22*sj0*x2917))+((cj0*r12*r22*x2917)))))+(IKabs(((((-1.0)*x2914*x2917))+x2917))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
CheckValue<IkReal> x2921 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2921.valid){
continue;
}
IkReal x2919=((1.0)*(x2921.value));
IkReal x2920=x2731;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x2919)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x2919)));
IkReal gconst22=((1.0)*r21*x2920);
IkReal gconst23=((-1.0)*r20*x2920);
IkReal x2922=r22*r22;
CheckValue<IkReal> x2926=IKPowWithIntegerCheck(((-1.0)+x2922),-1);
if(!x2926.valid){
continue;
}
IkReal x2923=x2926.value;
if((((1.0)+(((-1.0)*x2922)))) < -0.00001)
continue;
IkReal x2924=IKsqrt(((1.0)+(((-1.0)*x2922))));
IkReal x2925=(r22*x2923*x2924);
j1eval[0]=((IKabs(((((-1.0)*r02*sj0*x2925))+((cj0*r12*x2925)))))+(IKabs(x2924)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x2927=((1.0)*gconst23);
CheckValue<IkReal> x2929 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x2927))+((gconst22*r21)))),IkReal((((gconst23*r00*sj0))+(((-1.0)*cj0*r10*x2927))+((cj0*gconst22*r11))+(((-1.0)*gconst22*r01*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2929.valid){
continue;
}
IkReal x2928=x2929.value;
j1array[0]=((-1.0)*x2928);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2928)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2930=IKcos(j1);
IkReal x2931=IKsin(j1);
IkReal x2932=((1.0)*x2930);
evalcond[0]=(((gconst23*r20*x2931))+((gconst23*r00*sj0*x2930))+((cj0*gconst22*r11*x2930))+(((-1.0)*gconst22*r01*sj0*x2932))+(((-1.0)*cj0*gconst23*r10*x2932))+(((-1.0)*gconst22*r21*x2931)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2933=(cj1*cj4);
IkReal x2934=(sj1*sj4);
IkReal x2935=(cj4*sj1);
IkReal x2936=(cj1*sj4);
IkReal x2937=(r02*sj0);
IkReal x2938=((1.0)*cj0*r12);
if( IKabs(((((-1.0)*r22*x2936))+(((-1.0)*x2933*x2938))+((r22*x2935))+((x2933*x2937))+(((-1.0)*x2934*x2938))+((x2934*x2937)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x2934))+((r22*x2933))+((x2936*x2937))+(((-1.0)*x2935*x2937))+((cj0*r12*x2935))+(((-1.0)*x2936*x2938)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x2936))+(((-1.0)*x2933*x2938))+((r22*x2935))+((x2933*x2937))+(((-1.0)*x2934*x2938))+((x2934*x2937))))+IKsqr((((r22*x2934))+((r22*x2933))+((x2936*x2937))+(((-1.0)*x2935*x2937))+((cj0*r12*x2935))+(((-1.0)*x2936*x2938))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x2936))+(((-1.0)*x2933*x2938))+((r22*x2935))+((x2933*x2937))+(((-1.0)*x2934*x2938))+((x2934*x2937))), (((r22*x2934))+((r22*x2933))+((x2936*x2937))+(((-1.0)*x2935*x2937))+((cj0*r12*x2935))+(((-1.0)*x2936*x2938))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2939=IKcos(j2);
IkReal x2940=IKsin(j2);
IkReal x2941=((1.17e-6)*cj4);
IkReal x2942=(px*sj0);
IkReal x2943=((1.0)*cj1);
IkReal x2944=(gconst23*r21);
IkReal x2945=(gconst22*sj1);
IkReal x2946=((1.0)*cj0);
IkReal x2947=(r00*sj0);
IkReal x2948=(gconst23*r11);
IkReal x2949=(r02*sj0);
IkReal x2950=(cj4*x2939);
IkReal x2951=(gconst23*r01*sj0);
IkReal x2952=(sj4*x2940);
IkReal x2953=(sj4*x2939);
IkReal x2954=(cj4*x2940);
IkReal x2955=((1.0)*x2952);
evalcond[0]=((((-1.0)*x2953))+(((-1.0)*x2954))+((cj1*x2949))+((r22*sj1))+(((-1.0)*cj0*r12*x2943)));
evalcond[1]=((((-1.0)*x2955))+(((-1.0)*r12*sj1*x2946))+((sj1*x2949))+(((-1.0)*r22*x2943))+x2950);
evalcond[2]=(((cj1*x2942))+(((-1.0)*x2939*x2941))+(((-1.08e-6)*x2939))+(((-1.0)*cj0*py*x2943))+(((-0.56747)*x2940))+((pz*sj1))+(((1.17e-6)*x2952)));
evalcond[3]=((0.73)+(((-1.0)*x2940*x2941))+(((0.56747)*x2939))+(((-1.0)*py*sj1*x2946))+((sj1*x2942))+(((-1.0)*pz*x2943))+(((-1.17e-6)*x2953))+(((-1.08e-6)*x2940)));
evalcond[4]=((((-1.0)*cj0*x2943*x2948))+((cj1*gconst22*x2947))+(((-1.0)*x2955))+(((-1.0)*cj0*gconst22*r10*x2943))+((sj1*x2944))+x2950+((r20*x2945))+((cj1*x2951)));
evalcond[5]=(((sj1*x2951))+((x2945*x2947))+(((-1.0)*x2943*x2944))+(((-1.0)*r10*x2945*x2946))+(((-1.0)*gconst22*r20*x2943))+(((-1.0)*sj1*x2946*x2948))+x2954+x2953);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x2956=((1.0)*gconst22);
CheckValue<IkReal> x2958 = IKatan2WithCheck(IkReal((((gconst23*r00*sj0))+((cj0*gconst22*r11))+(((-1.0)*cj0*gconst23*r10))+(((-1.0)*r01*sj0*x2956)))),IkReal(((((-1.0)*r21*x2956))+((gconst23*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2958.valid){
continue;
}
IkReal x2957=x2958.value;
j1array[0]=((-1.0)*x2957);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2957)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2959=IKsin(j1);
IkReal x2960=IKcos(j1);
IkReal x2961=((1.0)*gconst23);
IkReal x2962=(cj0*x2959);
IkReal x2963=(sj0*x2959);
evalcond[0]=(((gconst22*r11*x2962))+(((-1.0)*r20*x2960*x2961))+((gconst22*r21*x2960))+(((-1.0)*r10*x2961*x2962))+(((-1.0)*gconst22*r01*x2963))+((gconst23*r00*x2963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2964=(cj1*cj4);
IkReal x2965=(sj1*sj4);
IkReal x2966=(cj4*sj1);
IkReal x2967=(cj1*sj4);
IkReal x2968=(r02*sj0);
IkReal x2969=((1.0)*cj0*r12);
if( IKabs((((x2965*x2968))+(((-1.0)*x2965*x2969))+((r22*x2966))+(((-1.0)*r22*x2967))+(((-1.0)*x2964*x2969))+((x2964*x2968)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x2965))+((r22*x2964))+(((-1.0)*x2967*x2969))+(((-1.0)*x2966*x2968))+((cj0*r12*x2966))+((x2967*x2968)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2965*x2968))+(((-1.0)*x2965*x2969))+((r22*x2966))+(((-1.0)*r22*x2967))+(((-1.0)*x2964*x2969))+((x2964*x2968))))+IKsqr((((r22*x2965))+((r22*x2964))+(((-1.0)*x2967*x2969))+(((-1.0)*x2966*x2968))+((cj0*r12*x2966))+((x2967*x2968))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x2965*x2968))+(((-1.0)*x2965*x2969))+((r22*x2966))+(((-1.0)*r22*x2967))+(((-1.0)*x2964*x2969))+((x2964*x2968))), (((r22*x2965))+((r22*x2964))+(((-1.0)*x2967*x2969))+(((-1.0)*x2966*x2968))+((cj0*r12*x2966))+((x2967*x2968))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2970=IKcos(j2);
IkReal x2971=IKsin(j2);
IkReal x2972=((1.17e-6)*cj4);
IkReal x2973=(px*sj0);
IkReal x2974=((1.0)*cj1);
IkReal x2975=(gconst23*r21);
IkReal x2976=(gconst22*sj1);
IkReal x2977=((1.0)*cj0);
IkReal x2978=(r00*sj0);
IkReal x2979=(gconst23*r11);
IkReal x2980=(r02*sj0);
IkReal x2981=(cj4*x2970);
IkReal x2982=(gconst23*r01*sj0);
IkReal x2983=(sj4*x2971);
IkReal x2984=(sj4*x2970);
IkReal x2985=(cj4*x2971);
IkReal x2986=((1.0)*x2983);
evalcond[0]=(((r22*sj1))+(((-1.0)*x2985))+(((-1.0)*x2984))+((cj1*x2980))+(((-1.0)*cj0*r12*x2974)));
evalcond[1]=((((-1.0)*x2986))+(((-1.0)*r12*sj1*x2977))+(((-1.0)*r22*x2974))+((sj1*x2980))+x2981);
evalcond[2]=(((cj1*x2973))+(((-1.0)*cj0*py*x2974))+(((-0.56747)*x2971))+(((1.17e-6)*x2983))+((pz*sj1))+(((-1.08e-6)*x2970))+(((-1.0)*x2970*x2972)));
evalcond[3]=((0.73)+(((0.56747)*x2970))+(((-1.0)*py*sj1*x2977))+(((-1.17e-6)*x2984))+((sj1*x2973))+(((-1.0)*pz*x2974))+(((-1.0)*x2971*x2972))+(((-1.08e-6)*x2971)));
evalcond[4]=(((cj1*gconst22*x2978))+(((-1.0)*cj0*gconst22*r10*x2974))+(((-1.0)*x2986))+((cj1*x2982))+((r20*x2976))+((sj1*x2975))+(((-1.0)*cj0*x2974*x2979))+x2981);
evalcond[5]=((((-1.0)*sj1*x2977*x2979))+(((-1.0)*r10*x2976*x2977))+(((-1.0)*gconst22*r20*x2974))+(((-1.0)*x2974*x2975))+((sj1*x2982))+((x2976*x2978))+x2985+x2984);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2987=IKPowWithIntegerCheck(IKsign((((gconst22*r20))+((gconst23*r21)))),-1);
if(!x2987.valid){
continue;
}
CheckValue<IkReal> x2988 = IKatan2WithCheck(IkReal(r02),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2988.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2987.value)))+(x2988.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2989=IKcos(j0);
IkReal x2990=IKsin(j0);
IkReal x2991=((1.0)*x2989);
IkReal x2992=((1.0)*x2990);
evalcond[0]=((((-1.0)*r12*x2992))+(((-1.0)*r02*x2991)));
evalcond[1]=((((-1.0)*py*x2992))+(((-1.0)*px*x2991)));
evalcond[2]=((1.0)+(((-1.0)*gconst23*r10*x2992))+((gconst22*r11*x2990))+(((-1.0)*gconst23*r00*x2991))+((gconst22*r01*x2989)));
evalcond[3]=((((-1.0)*gconst22*r00*x2991))+(((-1.0)*gconst23*r11*x2992))+(((-1.0)*gconst23*r01*x2991))+(((-1.0)*gconst22*r10*x2992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
CheckValue<IkReal> x2995 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2995.valid){
continue;
}
IkReal x2993=((1.0)*(x2995.value));
IkReal x2994=x2731;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x2993)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x2993)));
IkReal gconst22=((1.0)*r21*x2994);
IkReal gconst23=((-1.0)*r20*x2994);
IkReal x2996=r22*r22;
CheckValue<IkReal> x3000=IKPowWithIntegerCheck(((-1.0)+x2996),-1);
if(!x3000.valid){
continue;
}
IkReal x2997=x3000.value;
if((((1.0)+(((-1.0)*x2996)))) < -0.00001)
continue;
IkReal x2998=IKsqrt(((1.0)+(((-1.0)*x2996))));
IkReal x2999=(x2997*x2998);
j1eval[0]=((IKabs(((((-1.0)*r02*r22*sj0*x2999))+((cj0*r12*r22*x2999)))))+(IKabs(((((-1.0)*x2996*x2999))+x2999))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
CheckValue<IkReal> x3003 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3003.valid){
continue;
}
IkReal x3001=((1.0)*(x3003.value));
IkReal x3002=x2731;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x3001)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x3001)));
IkReal gconst22=((1.0)*r21*x3002);
IkReal gconst23=((-1.0)*r20*x3002);
IkReal x3004=r22*r22;
CheckValue<IkReal> x3008=IKPowWithIntegerCheck(((-1.0)+x3004),-1);
if(!x3008.valid){
continue;
}
IkReal x3005=x3008.value;
if((((1.0)+(((-1.0)*x3004)))) < -0.00001)
continue;
IkReal x3006=IKsqrt(((1.0)+(((-1.0)*x3004))));
IkReal x3007=(r22*x3005*x3006);
j1eval[0]=((IKabs((((cj0*r12*x3007))+(((-1.0)*r02*sj0*x3007)))))+(IKabs(x3006)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x3009=((1.0)*gconst23);
CheckValue<IkReal> x3011 = IKatan2WithCheck(IkReal((((gconst22*r21))+(((-1.0)*r20*x3009)))),IkReal((((gconst23*r00*sj0))+((cj0*gconst22*r11))+(((-1.0)*gconst22*r01*sj0))+(((-1.0)*cj0*r10*x3009)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3011.valid){
continue;
}
IkReal x3010=x3011.value;
j1array[0]=((-1.0)*x3010);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3010)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3012=IKcos(j1);
IkReal x3013=IKsin(j1);
IkReal x3014=((1.0)*x3012);
evalcond[0]=(((gconst23*r00*sj0*x3012))+(((-1.0)*cj0*gconst23*r10*x3014))+(((-1.0)*gconst22*r21*x3013))+((cj0*gconst22*r11*x3012))+(((-1.0)*gconst22*r01*sj0*x3014))+((gconst23*r20*x3013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3015=(cj1*cj4);
IkReal x3016=(sj1*sj4);
IkReal x3017=(cj4*sj1);
IkReal x3018=(cj1*sj4);
IkReal x3019=(r02*sj0);
IkReal x3020=((1.0)*cj0*r12);
if( IKabs((((x3015*x3019))+(((-1.0)*x3015*x3020))+((x3016*x3019))+((r22*x3017))+(((-1.0)*x3016*x3020))+(((-1.0)*r22*x3018)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3018*x3020))+(((-1.0)*x3017*x3019))+((cj0*r12*x3017))+((x3018*x3019))+((r22*x3016))+((r22*x3015)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x3015*x3019))+(((-1.0)*x3015*x3020))+((x3016*x3019))+((r22*x3017))+(((-1.0)*x3016*x3020))+(((-1.0)*r22*x3018))))+IKsqr(((((-1.0)*x3018*x3020))+(((-1.0)*x3017*x3019))+((cj0*r12*x3017))+((x3018*x3019))+((r22*x3016))+((r22*x3015))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x3015*x3019))+(((-1.0)*x3015*x3020))+((x3016*x3019))+((r22*x3017))+(((-1.0)*x3016*x3020))+(((-1.0)*r22*x3018))), ((((-1.0)*x3018*x3020))+(((-1.0)*x3017*x3019))+((cj0*r12*x3017))+((x3018*x3019))+((r22*x3016))+((r22*x3015))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3021=IKcos(j2);
IkReal x3022=IKsin(j2);
IkReal x3023=((1.17e-6)*cj4);
IkReal x3024=(px*sj0);
IkReal x3025=((1.0)*cj1);
IkReal x3026=(gconst23*r21);
IkReal x3027=(gconst22*sj1);
IkReal x3028=((1.0)*cj0);
IkReal x3029=(r00*sj0);
IkReal x3030=(gconst23*r11);
IkReal x3031=(r02*sj0);
IkReal x3032=(cj4*x3021);
IkReal x3033=(gconst23*r01*sj0);
IkReal x3034=(sj4*x3022);
IkReal x3035=(sj4*x3021);
IkReal x3036=(cj4*x3022);
IkReal x3037=((1.0)*x3034);
evalcond[0]=(((cj1*x3031))+((r22*sj1))+(((-1.0)*x3035))+(((-1.0)*x3036))+(((-1.0)*cj0*r12*x3025)));
evalcond[1]=(x3032+((sj1*x3031))+(((-1.0)*x3037))+(((-1.0)*r12*sj1*x3028))+(((-1.0)*r22*x3025)));
evalcond[2]=(((cj1*x3024))+(((-0.56747)*x3022))+(((-1.0)*x3021*x3023))+(((1.17e-6)*x3034))+((pz*sj1))+(((-1.08e-6)*x3021))+(((-1.0)*cj0*py*x3025)));
evalcond[3]=((0.73)+(((-1.0)*pz*x3025))+((sj1*x3024))+(((0.56747)*x3021))+(((-1.0)*py*sj1*x3028))+(((-1.17e-6)*x3035))+(((-1.0)*x3022*x3023))+(((-1.08e-6)*x3022)));
evalcond[4]=(((sj1*x3026))+x3032+((cj1*x3033))+((r20*x3027))+(((-1.0)*cj0*gconst22*r10*x3025))+(((-1.0)*cj0*x3025*x3030))+(((-1.0)*x3037))+((cj1*gconst22*x3029)));
evalcond[5]=((((-1.0)*gconst22*r20*x3025))+((x3027*x3029))+x3035+x3036+((sj1*x3033))+(((-1.0)*x3025*x3026))+(((-1.0)*r10*x3027*x3028))+(((-1.0)*sj1*x3028*x3030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x3038=((1.0)*gconst22);
CheckValue<IkReal> x3040 = IKatan2WithCheck(IkReal((((gconst23*r00*sj0))+((cj0*gconst22*r11))+(((-1.0)*r01*sj0*x3038))+(((-1.0)*cj0*gconst23*r10)))),IkReal(((((-1.0)*r21*x3038))+((gconst23*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3040.valid){
continue;
}
IkReal x3039=x3040.value;
j1array[0]=((-1.0)*x3039);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3039)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3041=IKsin(j1);
IkReal x3042=IKcos(j1);
IkReal x3043=((1.0)*gconst23);
IkReal x3044=(cj0*x3041);
IkReal x3045=(sj0*x3041);
evalcond[0]=(((gconst22*r21*x3042))+((gconst22*r11*x3044))+(((-1.0)*r20*x3042*x3043))+((gconst23*r00*x3045))+(((-1.0)*r10*x3043*x3044))+(((-1.0)*gconst22*r01*x3045)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3046=(cj1*cj4);
IkReal x3047=(sj1*sj4);
IkReal x3048=(cj4*sj1);
IkReal x3049=(cj1*sj4);
IkReal x3050=(r02*sj0);
IkReal x3051=((1.0)*cj0*r12);
if( IKabs((((r22*x3048))+(((-1.0)*x3047*x3051))+(((-1.0)*r22*x3049))+(((-1.0)*x3046*x3051))+((x3047*x3050))+((x3046*x3050)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x3047))+((r22*x3046))+((cj0*r12*x3048))+(((-1.0)*x3048*x3050))+((x3049*x3050))+(((-1.0)*x3049*x3051)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x3048))+(((-1.0)*x3047*x3051))+(((-1.0)*r22*x3049))+(((-1.0)*x3046*x3051))+((x3047*x3050))+((x3046*x3050))))+IKsqr((((r22*x3047))+((r22*x3046))+((cj0*r12*x3048))+(((-1.0)*x3048*x3050))+((x3049*x3050))+(((-1.0)*x3049*x3051))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r22*x3048))+(((-1.0)*x3047*x3051))+(((-1.0)*r22*x3049))+(((-1.0)*x3046*x3051))+((x3047*x3050))+((x3046*x3050))), (((r22*x3047))+((r22*x3046))+((cj0*r12*x3048))+(((-1.0)*x3048*x3050))+((x3049*x3050))+(((-1.0)*x3049*x3051))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3052=IKcos(j2);
IkReal x3053=IKsin(j2);
IkReal x3054=((1.17e-6)*cj4);
IkReal x3055=(px*sj0);
IkReal x3056=((1.0)*cj1);
IkReal x3057=(gconst23*r21);
IkReal x3058=(gconst22*sj1);
IkReal x3059=((1.0)*cj0);
IkReal x3060=(r00*sj0);
IkReal x3061=(gconst23*r11);
IkReal x3062=(r02*sj0);
IkReal x3063=(cj4*x3052);
IkReal x3064=(gconst23*r01*sj0);
IkReal x3065=(sj4*x3053);
IkReal x3066=(sj4*x3052);
IkReal x3067=(cj4*x3053);
IkReal x3068=((1.0)*x3065);
evalcond[0]=((((-1.0)*x3067))+(((-1.0)*x3066))+(((-1.0)*cj0*r12*x3056))+((r22*sj1))+((cj1*x3062)));
evalcond[1]=(x3063+(((-1.0)*x3068))+(((-1.0)*r12*sj1*x3059))+((sj1*x3062))+(((-1.0)*r22*x3056)));
evalcond[2]=(((cj1*x3055))+(((-0.56747)*x3053))+(((-1.08e-6)*x3052))+(((-1.0)*cj0*py*x3056))+(((-1.0)*x3052*x3054))+((pz*sj1))+(((1.17e-6)*x3065)));
evalcond[3]=((0.73)+(((-1.08e-6)*x3053))+(((-1.17e-6)*x3066))+(((-1.0)*x3053*x3054))+((sj1*x3055))+(((-1.0)*py*sj1*x3059))+(((-1.0)*pz*x3056))+(((0.56747)*x3052)));
evalcond[4]=((((-1.0)*cj0*x3056*x3061))+x3063+((sj1*x3057))+(((-1.0)*x3068))+((cj1*x3064))+((r20*x3058))+((cj1*gconst22*x3060))+(((-1.0)*cj0*gconst22*r10*x3056)));
evalcond[5]=((((-1.0)*sj1*x3059*x3061))+x3067+x3066+((x3058*x3060))+(((-1.0)*x3056*x3057))+((sj1*x3064))+(((-1.0)*gconst22*r20*x3056))+(((-1.0)*r10*x3058*x3059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x3069=((-1.0)*pz);
sj3=0;
cj3=1.0;
j3=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x3069);
rxp1_0=(pz*r11);
rxp1_1=(r01*x3069);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x3070=(((rxp1_2*sj5))+(((-1.0)*cj5*rxp0_2)));
j0eval[0]=x3070;
j0eval[1]=IKsign(x3070);
j0eval[2]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x3071=((-1.0)*pz);
sj3=0;
cj3=1.0;
j3=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x3071);
rxp1_0=(pz*r11);
rxp1_1=(r01*x3071);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j0eval[0]=r22;
j0eval[1]=((cj5*cj5)+(sj5*sj5));
j0eval[2]=IKsign(r22);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x3072=((-1.0)*pz);
sj3=0;
cj3=1.0;
j3=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=0;
npy=0;
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x3072);
rxp1_0=(pz*r11);
rxp1_1=(r01*x3072);
rxp2_0=0;
rxp2_1=0;
rxp2_2=0;
px=0;
py=0;
pp=pz*pz;
rxp0_2=0;
rxp1_2=0;
j0eval[0]=r22;
j0eval[1]=((cj5*cj5)+(sj5*sj5));
j0eval[2]=IKsign(r22);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x3073 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3073.valid){
continue;
}
CheckValue<IkReal> x3074=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x3074.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3073.value)+(((1.5707963267949)*(x3074.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3075=IKcos(j0);
IkReal x3076=IKsin(j0);
IkReal x3077=((1.0)*cj5);
IkReal x3078=((1.0)*sj5);
IkReal x3079=(r11*x3076);
IkReal x3080=(r01*x3075);
IkReal x3081=(r10*x3076);
IkReal x3082=(r00*x3075);
evalcond[0]=((1.0)+((sj5*x3079))+(((-1.0)*x3077*x3081))+(((-1.0)*x3077*x3082))+((sj5*x3080)));
evalcond[1]=((((-1.0)*x3077*x3080))+(((-1.0)*x3078*x3082))+(((-1.0)*x3078*x3081))+(((-1.0)*x3077*x3079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x3083=((-1.0)*pz);
sj3=0;
cj3=1.0;
j3=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=0;
npy=0;
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x3083);
rxp1_0=(pz*r11);
rxp1_1=(r01*x3083);
rxp2_0=0;
rxp2_1=0;
rxp2_2=0;
px=0;
py=0;
pp=pz*pz;
rxp0_2=0;
rxp1_2=0;
j1eval[0]=IKabs((((cj0*cj5*r10))+(((-1.0)*cj5*r00*sj0))+((r01*sj0*sj5))+(((-1.0)*cj0*r11*sj5))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x3084=(cj0*r11*sj5);
IkReal x3085=(cj5*r00*sj0);
IkReal x3086=(r01*sj0*sj5);
IkReal x3087=(cj0*cj5*r10);
op[0]=(x3087+x3086+(((-1.0)*x3085))+(((-1.0)*x3084)));
op[1]=0;
op[2]=(x3085+x3084+(((-1.0)*x3087))+(((-1.0)*x3086)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3088=(cj4*r22);
IkReal x3089=(r22*sj4);
if( IKabs((((sj1*x3088))+(((-1.0)*cj1*x3089)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x3089))+((cj1*x3088)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x3088))+(((-1.0)*cj1*x3089))))+IKsqr((((sj1*x3089))+((cj1*x3088))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x3088))+(((-1.0)*cj1*x3089))), (((sj1*x3089))+((cj1*x3088))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3090=IKcos(j2);
IkReal x3091=IKsin(j2);
IkReal x3092=(cj1*cj5);
IkReal x3093=(r01*sj0);
IkReal x3094=(cj5*sj1);
IkReal x3095=((1.0)*cj1);
IkReal x3096=((1.0)*sj4);
IkReal x3097=(cj4*x3090);
IkReal x3098=((1.0)*cj0*r11);
IkReal x3099=((1.17e-6)*x3091);
IkReal x3100=(r00*sj0*sj5);
IkReal x3101=(cj0*r10*sj5);
IkReal x3102=(sj4*x3090);
IkReal x3103=(cj4*x3091);
IkReal x3104=(x3091*x3096);
evalcond[0]=(((r22*sj1))+(((-1.0)*x3103))+(((-1.0)*x3090*x3096)));
evalcond[1]=((((-1.0)*r22*x3095))+x3097+(((-1.0)*x3104)));
evalcond[2]=((((-0.56747)*x3091))+((sj4*x3099))+(((-1.08e-6)*x3090))+((pz*sj1))+(((-1.17e-6)*x3097)));
evalcond[3]=((0.73)+(((-1.0)*cj4*x3099))+(((0.56747)*x3090))+(((-1.08e-6)*x3091))+(((-1.17e-6)*x3102))+(((-1.0)*pz*x3095)));
evalcond[4]=(x3102+x3103+((sj1*x3100))+((x3093*x3094))+(((-1.0)*sj1*x3101))+(((-1.0)*x3094*x3098)));
evalcond[5]=(x3097+((cj1*x3100))+((x3092*x3093))+(((-1.0)*x3092*x3098))+(((-1.0)*x3104))+(((-1.0)*x3095*x3101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x3105 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3105.valid){
continue;
}
CheckValue<IkReal> x3106=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x3106.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3105.value)+(((1.5707963267949)*(x3106.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3107=IKcos(j0);
IkReal x3108=IKsin(j0);
IkReal x3109=((1.0)*x3107);
IkReal x3110=((1.0)*x3108);
evalcond[0]=((((-1.0)*py*x3110))+(((-1.0)*px*x3109)));
evalcond[1]=((1.0)+(((-1.0)*cj5*r00*x3109))+(((-1.0)*cj5*r10*x3110))+((r01*sj5*x3107))+((r11*sj5*x3108)));
evalcond[2]=((((-1.0)*cj5*r01*x3109))+(((-1.0)*cj5*r11*x3110))+(((-1.0)*r00*sj5*x3109))+(((-1.0)*r10*sj5*x3110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x3111=((-1.0)*pz);
sj3=0;
cj3=1.0;
j3=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x3111);
rxp1_0=(pz*r11);
rxp1_1=(r01*x3111);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j1eval[0]=IKabs((((cj0*cj5*r10))+(((-1.0)*cj5*r00*sj0))+((r01*sj0*sj5))+(((-1.0)*cj0*r11*sj5))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x3112=(cj0*r11*sj5);
IkReal x3113=(cj5*r00*sj0);
IkReal x3114=(r01*sj0*sj5);
IkReal x3115=(cj0*cj5*r10);
op[0]=(x3115+x3114+(((-1.0)*x3113))+(((-1.0)*x3112)));
op[1]=0;
op[2]=(x3113+x3112+(((-1.0)*x3115))+(((-1.0)*x3114)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3116=(cj4*r22);
IkReal x3117=(r22*sj4);
if( IKabs((((sj1*x3116))+(((-1.0)*cj1*x3117)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x3117))+((cj1*x3116)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x3116))+(((-1.0)*cj1*x3117))))+IKsqr((((sj1*x3117))+((cj1*x3116))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x3116))+(((-1.0)*cj1*x3117))), (((sj1*x3117))+((cj1*x3116))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3118=IKcos(j2);
IkReal x3119=IKsin(j2);
IkReal x3120=(cj1*cj5);
IkReal x3121=(r01*sj0);
IkReal x3122=(cj1*sj0);
IkReal x3123=(cj5*sj1);
IkReal x3124=((1.0)*cj1);
IkReal x3125=(r00*sj5);
IkReal x3126=(r10*sj5);
IkReal x3127=((1.0)*sj4);
IkReal x3128=(sj0*sj1);
IkReal x3129=(cj4*x3118);
IkReal x3130=((1.0)*cj0*r11);
IkReal x3131=((1.17e-6)*x3119);
IkReal x3132=((1.0)*cj0*sj1);
IkReal x3133=(sj4*x3118);
IkReal x3134=(cj4*x3119);
IkReal x3135=(x3119*x3127);
evalcond[0]=(((r22*sj1))+(((-1.0)*x3134))+(((-1.0)*x3118*x3127)));
evalcond[1]=(x3129+(((-1.0)*r22*x3124))+(((-1.0)*x3135)));
evalcond[2]=(x3134+x3133+((x3125*x3128))+((x3121*x3123))+(((-1.0)*x3123*x3130))+(((-1.0)*x3126*x3132)));
evalcond[3]=(((x3120*x3121))+x3129+(((-1.0)*cj0*x3124*x3126))+(((-1.0)*x3120*x3130))+(((-1.0)*x3135))+((x3122*x3125)));
evalcond[4]=((((-1.08e-6)*x3118))+((sj4*x3131))+(((-0.56747)*x3119))+(((-1.17e-6)*x3129))+((pz*sj1))+((px*x3122))+(((-1.0)*cj0*py*x3124)));
evalcond[5]=((0.73)+(((-1.0)*py*x3132))+(((-1.08e-6)*x3119))+(((-1.0)*cj4*x3131))+(((0.56747)*x3118))+(((-1.17e-6)*x3133))+((px*x3128))+(((-1.0)*pz*x3124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x3136 = IKatan2WithCheck(IkReal(px),IkReal(((-1.0)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x3136.valid){
continue;
}
CheckValue<IkReal> x3137=IKPowWithIntegerCheck(IKsign((((rxp1_2*sj5))+(((-1.0)*cj5*rxp0_2)))),-1);
if(!x3137.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3136.value)+(((1.5707963267949)*(x3137.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3138=IKcos(j0);
IkReal x3139=IKsin(j0);
IkReal x3140=((1.0)*x3138);
IkReal x3141=((1.0)*x3139);
evalcond[0]=((((-1.0)*px*x3140))+(((-1.0)*py*x3141)));
evalcond[1]=((1.0)+(((-1.0)*cj5*r00*x3140))+((r11*sj5*x3139))+((r01*sj5*x3138))+(((-1.0)*cj5*r10*x3141)));
evalcond[2]=((((-1.0)*cj5*r11*x3141))+(((-1.0)*cj5*r01*x3140))+(((-1.0)*r00*sj5*x3140))+(((-1.0)*r10*sj5*x3141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x3142=((-1.0)*pz);
sj3=0;
cj3=1.0;
j3=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x3142);
rxp1_0=(pz*r11);
rxp1_1=(r01*x3142);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j1eval[0]=IKabs((((cj0*cj5*r10))+(((-1.0)*cj5*r00*sj0))+((r01*sj0*sj5))+(((-1.0)*cj0*r11*sj5))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x3143=(cj0*r11*sj5);
IkReal x3144=(cj5*r00*sj0);
IkReal x3145=(r01*sj0*sj5);
IkReal x3146=(cj0*cj5*r10);
op[0]=(x3145+x3146+(((-1.0)*x3143))+(((-1.0)*x3144)));
op[1]=0;
op[2]=(x3143+x3144+(((-1.0)*x3146))+(((-1.0)*x3145)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3147=(cj4*r22);
IkReal x3148=(r22*sj4);
if( IKabs((((sj1*x3147))+(((-1.0)*cj1*x3148)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x3148))+((cj1*x3147)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x3147))+(((-1.0)*cj1*x3148))))+IKsqr((((sj1*x3148))+((cj1*x3147))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x3147))+(((-1.0)*cj1*x3148))), (((sj1*x3148))+((cj1*x3147))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3149=IKcos(j2);
IkReal x3150=IKsin(j2);
IkReal x3151=(cj1*cj5);
IkReal x3152=(r01*sj0);
IkReal x3153=(cj1*sj0);
IkReal x3154=(cj5*sj1);
IkReal x3155=((1.0)*cj1);
IkReal x3156=(r00*sj5);
IkReal x3157=(r10*sj5);
IkReal x3158=((1.0)*sj4);
IkReal x3159=(sj0*sj1);
IkReal x3160=(cj4*x3149);
IkReal x3161=((1.0)*cj0*r11);
IkReal x3162=((1.17e-6)*x3150);
IkReal x3163=((1.0)*cj0*sj1);
IkReal x3164=(sj4*x3149);
IkReal x3165=(cj4*x3150);
IkReal x3166=(x3150*x3158);
evalcond[0]=((((-1.0)*x3165))+((r22*sj1))+(((-1.0)*x3149*x3158)));
evalcond[1]=((((-1.0)*r22*x3155))+x3160+(((-1.0)*x3166)));
evalcond[2]=(x3164+x3165+(((-1.0)*x3157*x3163))+((x3156*x3159))+(((-1.0)*x3154*x3161))+((x3152*x3154)));
evalcond[3]=(((x3151*x3152))+x3160+(((-1.0)*cj0*x3155*x3157))+((x3153*x3156))+(((-1.0)*x3151*x3161))+(((-1.0)*x3166)));
evalcond[4]=(((px*x3153))+(((-0.56747)*x3150))+(((-1.17e-6)*x3160))+(((-1.08e-6)*x3149))+((sj4*x3162))+(((-1.0)*cj0*py*x3155))+((pz*sj1)));
evalcond[5]=((0.73)+(((0.56747)*x3149))+(((-1.0)*cj4*x3162))+((px*x3159))+(((-1.17e-6)*x3164))+(((-1.08e-6)*x3150))+(((-1.0)*pz*x3155))+(((-1.0)*py*x3163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r02))+(IKabs(r12)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x3167=((-1.0)*pz);
sj3=0;
cj3=1.0;
j3=0;
r12=0;
r02=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x3167);
rxp1_0=(pz*r11);
rxp1_1=(r01*x3167);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x3168=(((rxp1_2*sj5))+(((-1.0)*cj5*rxp0_2)));
j0eval[0]=x3168;
j0eval[1]=IKsign(x3168);
j0eval[2]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x3169=((-1.0)*pz);
sj3=0;
cj3=1.0;
j3=0;
r12=0;
r02=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x3169);
rxp1_0=(pz*r11);
rxp1_1=(r01*x3169);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j0eval[0]=r22;
j0eval[1]=((cj5*cj5)+(sj5*sj5));
j0eval[2]=IKsign(r22);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x3170=((-1.0)*pz);
sj3=0;
cj3=1.0;
j3=0;
r12=0;
r02=0;
r20=0;
r21=0;
npx=0;
npy=0;
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x3170);
rxp1_0=(pz*r11);
rxp1_1=(r01*x3170);
rxp2_0=0;
rxp2_1=0;
rxp2_2=0;
px=0;
py=0;
pp=pz*pz;
rxp0_2=0;
rxp1_2=0;
j0eval[0]=r22;
j0eval[1]=((cj5*cj5)+(sj5*sj5));
j0eval[2]=IKsign(r22);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x3171 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3171.valid){
continue;
}
CheckValue<IkReal> x3172=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x3172.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3171.value)+(((1.5707963267949)*(x3172.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3173=IKcos(j0);
IkReal x3174=IKsin(j0);
IkReal x3175=((1.0)*cj5);
IkReal x3176=((1.0)*sj5);
IkReal x3177=(r11*x3174);
IkReal x3178=(r01*x3173);
IkReal x3179=(r10*x3174);
IkReal x3180=(r00*x3173);
evalcond[0]=((1.0)+((sj5*x3177))+((sj5*x3178))+(((-1.0)*x3175*x3180))+(((-1.0)*x3175*x3179)));
evalcond[1]=((((-1.0)*x3176*x3180))+(((-1.0)*x3176*x3179))+(((-1.0)*x3175*x3177))+(((-1.0)*x3175*x3178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x3181=((-1.0)*pz);
sj3=0;
cj3=1.0;
j3=0;
r12=0;
r02=0;
r20=0;
r21=0;
npx=0;
npy=0;
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x3181);
rxp1_0=(pz*r11);
rxp1_1=(r01*x3181);
rxp2_0=0;
rxp2_1=0;
rxp2_2=0;
px=0;
py=0;
pp=pz*pz;
rxp0_2=0;
rxp1_2=0;
j1eval[0]=IKabs((((cj0*cj5*r10))+(((-1.0)*cj5*r00*sj0))+((r01*sj0*sj5))+(((-1.0)*cj0*r11*sj5))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x3182=(cj0*r11*sj5);
IkReal x3183=(cj5*r00*sj0);
IkReal x3184=(r01*sj0*sj5);
IkReal x3185=(cj0*cj5*r10);
op[0]=(x3184+x3185+(((-1.0)*x3182))+(((-1.0)*x3183)));
op[1]=0;
op[2]=(x3182+x3183+(((-1.0)*x3184))+(((-1.0)*x3185)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3186=(cj4*r22);
IkReal x3187=(r22*sj4);
if( IKabs(((((-1.0)*cj1*x3187))+((sj1*x3186)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x3187))+((cj1*x3186)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x3187))+((sj1*x3186))))+IKsqr((((sj1*x3187))+((cj1*x3186))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*x3187))+((sj1*x3186))), (((sj1*x3187))+((cj1*x3186))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3188=IKcos(j2);
IkReal x3189=IKsin(j2);
IkReal x3190=(cj1*cj5);
IkReal x3191=(r01*sj0);
IkReal x3192=(cj5*sj1);
IkReal x3193=((1.0)*cj1);
IkReal x3194=((1.0)*sj4);
IkReal x3195=(cj4*x3188);
IkReal x3196=((1.0)*cj0*r11);
IkReal x3197=((1.17e-6)*x3189);
IkReal x3198=(r00*sj0*sj5);
IkReal x3199=(cj0*r10*sj5);
IkReal x3200=(sj4*x3188);
IkReal x3201=(cj4*x3189);
IkReal x3202=(x3189*x3194);
evalcond[0]=(((r22*sj1))+(((-1.0)*x3201))+(((-1.0)*x3188*x3194)));
evalcond[1]=(x3195+(((-1.0)*r22*x3193))+(((-1.0)*x3202)));
evalcond[2]=((((-0.56747)*x3189))+((sj4*x3197))+(((-1.08e-6)*x3188))+((pz*sj1))+(((-1.17e-6)*x3195)));
evalcond[3]=((0.73)+(((-1.17e-6)*x3200))+(((-1.08e-6)*x3189))+(((-1.0)*cj4*x3197))+(((-1.0)*pz*x3193))+(((0.56747)*x3188)));
evalcond[4]=((((-1.0)*sj1*x3199))+x3201+x3200+(((-1.0)*x3192*x3196))+((sj1*x3198))+((x3191*x3192)));
evalcond[5]=((((-1.0)*x3190*x3196))+x3195+(((-1.0)*x3193*x3199))+(((-1.0)*x3202))+((x3190*x3191))+((cj1*x3198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x3203 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3203.valid){
continue;
}
CheckValue<IkReal> x3204=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x3204.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3203.value)+(((1.5707963267949)*(x3204.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3205=IKcos(j0);
IkReal x3206=IKsin(j0);
IkReal x3207=((1.0)*x3205);
IkReal x3208=((1.0)*x3206);
evalcond[0]=((((-1.0)*py*x3208))+(((-1.0)*px*x3207)));
evalcond[1]=((1.0)+((r11*sj5*x3206))+(((-1.0)*cj5*r00*x3207))+((r01*sj5*x3205))+(((-1.0)*cj5*r10*x3208)));
evalcond[2]=((((-1.0)*r00*sj5*x3207))+(((-1.0)*cj5*r01*x3207))+(((-1.0)*r10*sj5*x3208))+(((-1.0)*cj5*r11*x3208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x3209=((-1.0)*pz);
sj3=0;
cj3=1.0;
j3=0;
r12=0;
r02=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x3209);
rxp1_0=(pz*r11);
rxp1_1=(r01*x3209);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j1eval[0]=IKabs((((cj0*cj5*r10))+(((-1.0)*cj5*r00*sj0))+((r01*sj0*sj5))+(((-1.0)*cj0*r11*sj5))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x3210=(cj0*r11*sj5);
IkReal x3211=(cj5*r00*sj0);
IkReal x3212=(r01*sj0*sj5);
IkReal x3213=(cj0*cj5*r10);
op[0]=(x3212+x3213+(((-1.0)*x3210))+(((-1.0)*x3211)));
op[1]=0;
op[2]=(x3210+x3211+(((-1.0)*x3212))+(((-1.0)*x3213)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3214=(cj4*r22);
IkReal x3215=(r22*sj4);
if( IKabs(((((-1.0)*cj1*x3215))+((sj1*x3214)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x3214))+((sj1*x3215)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x3215))+((sj1*x3214))))+IKsqr((((cj1*x3214))+((sj1*x3215))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*x3215))+((sj1*x3214))), (((cj1*x3214))+((sj1*x3215))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3216=IKcos(j2);
IkReal x3217=IKsin(j2);
IkReal x3218=(cj1*cj5);
IkReal x3219=(r01*sj0);
IkReal x3220=(cj1*sj0);
IkReal x3221=(cj5*sj1);
IkReal x3222=((1.0)*cj1);
IkReal x3223=(r00*sj5);
IkReal x3224=(r10*sj5);
IkReal x3225=((1.0)*sj4);
IkReal x3226=(sj0*sj1);
IkReal x3227=(cj4*x3216);
IkReal x3228=((1.0)*cj0*r11);
IkReal x3229=((1.17e-6)*x3217);
IkReal x3230=((1.0)*cj0*sj1);
IkReal x3231=(sj4*x3216);
IkReal x3232=(cj4*x3217);
IkReal x3233=(x3217*x3225);
evalcond[0]=((((-1.0)*x3216*x3225))+((r22*sj1))+(((-1.0)*x3232)));
evalcond[1]=(x3227+(((-1.0)*r22*x3222))+(((-1.0)*x3233)));
evalcond[2]=(x3232+x3231+((x3223*x3226))+(((-1.0)*x3224*x3230))+(((-1.0)*x3221*x3228))+((x3219*x3221)));
evalcond[3]=(x3227+((x3220*x3223))+(((-1.0)*x3233))+(((-1.0)*cj0*x3222*x3224))+(((-1.0)*x3218*x3228))+((x3218*x3219)));
evalcond[4]=((((-1.0)*cj0*py*x3222))+(((-0.56747)*x3217))+(((-1.08e-6)*x3216))+((px*x3220))+((sj4*x3229))+((pz*sj1))+(((-1.17e-6)*x3227)));
evalcond[5]=((0.73)+(((0.56747)*x3216))+(((-1.08e-6)*x3217))+(((-1.17e-6)*x3231))+((px*x3226))+(((-1.0)*cj4*x3229))+(((-1.0)*pz*x3222))+(((-1.0)*py*x3230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x3234 = IKatan2WithCheck(IkReal(px),IkReal(((-1.0)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x3234.valid){
continue;
}
CheckValue<IkReal> x3235=IKPowWithIntegerCheck(IKsign((((rxp1_2*sj5))+(((-1.0)*cj5*rxp0_2)))),-1);
if(!x3235.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3234.value)+(((1.5707963267949)*(x3235.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3236=IKcos(j0);
IkReal x3237=IKsin(j0);
IkReal x3238=((1.0)*x3236);
IkReal x3239=((1.0)*x3237);
evalcond[0]=((((-1.0)*py*x3239))+(((-1.0)*px*x3238)));
evalcond[1]=((1.0)+((r11*sj5*x3237))+(((-1.0)*cj5*r00*x3238))+((r01*sj5*x3236))+(((-1.0)*cj5*r10*x3239)));
evalcond[2]=((((-1.0)*cj5*r01*x3238))+(((-1.0)*r10*sj5*x3239))+(((-1.0)*r00*sj5*x3238))+(((-1.0)*cj5*r11*x3239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x3240=((-1.0)*pz);
sj3=0;
cj3=1.0;
j3=0;
r12=0;
r02=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x3240);
rxp1_0=(pz*r11);
rxp1_1=(r01*x3240);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j1eval[0]=IKabs((((cj0*cj5*r10))+(((-1.0)*cj5*r00*sj0))+((r01*sj0*sj5))+(((-1.0)*cj0*r11*sj5))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x3241=(cj0*r11*sj5);
IkReal x3242=(cj5*r00*sj0);
IkReal x3243=(r01*sj0*sj5);
IkReal x3244=(cj0*cj5*r10);
op[0]=((((-1.0)*x3242))+(((-1.0)*x3241))+x3243+x3244);
op[1]=0;
op[2]=((((-1.0)*x3244))+(((-1.0)*x3243))+x3242+x3241);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3245=(cj4*r22);
IkReal x3246=(r22*sj4);
if( IKabs((((sj1*x3245))+(((-1.0)*cj1*x3246)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x3246))+((cj1*x3245)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x3245))+(((-1.0)*cj1*x3246))))+IKsqr((((sj1*x3246))+((cj1*x3245))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x3245))+(((-1.0)*cj1*x3246))), (((sj1*x3246))+((cj1*x3245))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3247=IKcos(j2);
IkReal x3248=IKsin(j2);
IkReal x3249=(cj1*cj5);
IkReal x3250=(r01*sj0);
IkReal x3251=(cj1*sj0);
IkReal x3252=(cj5*sj1);
IkReal x3253=((1.0)*cj1);
IkReal x3254=(r00*sj5);
IkReal x3255=(r10*sj5);
IkReal x3256=((1.0)*sj4);
IkReal x3257=(sj0*sj1);
IkReal x3258=(cj4*x3247);
IkReal x3259=((1.0)*cj0*r11);
IkReal x3260=((1.17e-6)*x3248);
IkReal x3261=((1.0)*cj0*sj1);
IkReal x3262=(sj4*x3247);
IkReal x3263=(cj4*x3248);
IkReal x3264=(x3248*x3256);
evalcond[0]=((((-1.0)*x3263))+(((-1.0)*x3247*x3256))+((r22*sj1)));
evalcond[1]=(x3258+(((-1.0)*x3264))+(((-1.0)*r22*x3253)));
evalcond[2]=(x3263+x3262+((x3250*x3252))+(((-1.0)*x3255*x3261))+((x3254*x3257))+(((-1.0)*x3252*x3259)));
evalcond[3]=((((-1.0)*cj0*x3253*x3255))+((x3249*x3250))+x3258+(((-1.0)*x3249*x3259))+(((-1.0)*x3264))+((x3251*x3254)));
evalcond[4]=((((-1.0)*cj0*py*x3253))+(((-0.56747)*x3248))+((px*x3251))+(((-1.08e-6)*x3247))+((pz*sj1))+((sj4*x3260))+(((-1.17e-6)*x3258)));
evalcond[5]=((0.73)+(((0.56747)*x3247))+(((-1.17e-6)*x3262))+((px*x3257))+(((-1.08e-6)*x3248))+(((-1.0)*pz*x3253))+(((-1.0)*py*x3261))+(((-1.0)*cj4*x3260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x3265 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3265.valid){
continue;
}
CheckValue<IkReal> x3266=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x3266.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3265.value)+(((1.5707963267949)*(x3266.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3267=IKcos(j0);
IkReal x3268=IKsin(j0);
IkReal x3269=((1.0)*x3267);
IkReal x3270=((1.0)*x3268);
evalcond[0]=((((-1.0)*r12*x3270))+(((-1.0)*r02*x3269)));
evalcond[1]=((((-1.0)*px*x3269))+(((-1.0)*py*x3270)));
evalcond[2]=((1.0)+((r01*sj5*x3267))+(((-1.0)*cj5*r00*x3269))+((r11*sj5*x3268))+(((-1.0)*cj5*r10*x3270)));
evalcond[3]=((((-1.0)*cj5*r11*x3270))+(((-1.0)*r00*sj5*x3269))+(((-1.0)*cj5*r01*x3269))+(((-1.0)*r10*sj5*x3270)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=0;
cj3=1.0;
j3=0;
IkReal x3271=((1.0)*sj5);
j1eval[0]=((IKabs((((cj5*r20))+(((-1.0)*r21*x3271)))))+(IKabs((((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*r01*sj0*x3271))+(((-1.0)*cj0*cj5*r10))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj3=0;
cj3=1.0;
j3=0;
IkReal x3272=((1.0)*cj5);
j1eval[0]=((IKabs((((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*cj0*r10*x3272))+(((-1.0)*r01*sj0*sj5)))))+(IKabs((((r21*sj5))+(((-1.0)*r20*x3272))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x3273=((1.0)*cj5);
CheckValue<IkReal> x3275 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x3273)))),IkReal((((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*cj0*r10*x3273))+(((-1.0)*r01*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3275.valid){
continue;
}
IkReal x3274=x3275.value;
j1array[0]=((-1.0)*x3274);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3274)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3276=IKcos(j1);
IkReal x3277=IKsin(j1);
IkReal x3278=((1.0)*sj5);
IkReal x3279=(cj5*x3276);
evalcond[0]=(((cj5*r20*x3277))+(((-1.0)*cj0*r10*x3279))+((cj0*r11*sj5*x3276))+(((-1.0)*r21*x3277*x3278))+((r00*sj0*x3279))+(((-1.0)*r01*sj0*x3276*x3278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3280=(cj1*cj4);
IkReal x3281=(sj1*sj4);
IkReal x3282=(cj4*sj1);
IkReal x3283=(cj1*sj4);
IkReal x3284=(r02*sj0);
IkReal x3285=((1.0)*cj0*r12);
if( IKabs(((((-1.0)*x3280*x3285))+(((-1.0)*x3281*x3285))+((x3280*x3284))+((r22*x3282))+((x3281*x3284))+(((-1.0)*r22*x3283)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3282*x3284))+((cj0*r12*x3282))+((x3283*x3284))+(((-1.0)*x3283*x3285))+((r22*x3281))+((r22*x3280)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3280*x3285))+(((-1.0)*x3281*x3285))+((x3280*x3284))+((r22*x3282))+((x3281*x3284))+(((-1.0)*r22*x3283))))+IKsqr(((((-1.0)*x3282*x3284))+((cj0*r12*x3282))+((x3283*x3284))+(((-1.0)*x3283*x3285))+((r22*x3281))+((r22*x3280))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x3280*x3285))+(((-1.0)*x3281*x3285))+((x3280*x3284))+((r22*x3282))+((x3281*x3284))+(((-1.0)*r22*x3283))), ((((-1.0)*x3282*x3284))+((cj0*r12*x3282))+((x3283*x3284))+(((-1.0)*x3283*x3285))+((r22*x3281))+((r22*x3280))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3286=IKcos(j2);
IkReal x3287=IKsin(j2);
IkReal x3288=(cj1*cj5);
IkReal x3289=((1.17e-6)*cj4);
IkReal x3290=(r01*sj0);
IkReal x3291=(cj1*sj0);
IkReal x3292=(cj5*sj1);
IkReal x3293=((1.0)*cj0);
IkReal x3294=((1.0)*cj1);
IkReal x3295=(r00*sj5);
IkReal x3296=(sj1*sj5);
IkReal x3297=(sj0*sj1);
IkReal x3298=(cj4*x3286);
IkReal x3299=(sj4*x3287);
IkReal x3300=(sj4*x3286);
IkReal x3301=(cj4*x3287);
IkReal x3302=((1.0)*x3299);
evalcond[0]=(((r02*x3291))+((r22*sj1))+(((-1.0)*cj1*r12*x3293))+(((-1.0)*x3300))+(((-1.0)*x3301)));
evalcond[1]=(((r02*x3297))+(((-1.0)*r22*x3294))+x3298+(((-1.0)*x3302))+(((-1.0)*r12*sj1*x3293)));
evalcond[2]=((((-1.08e-6)*x3286))+((px*x3291))+(((1.17e-6)*x3299))+(((-0.56747)*x3287))+((pz*sj1))+(((-1.0)*cj1*py*x3293))+(((-1.0)*x3286*x3289)));
evalcond[3]=((0.73)+(((-1.08e-6)*x3287))+(((-1.0)*x3287*x3289))+((px*x3297))+(((-1.17e-6)*x3300))+(((0.56747)*x3286))+(((-1.0)*py*sj1*x3293))+(((-1.0)*pz*x3294)));
evalcond[4]=(((x3288*x3290))+((r20*x3296))+(((-1.0)*cj1*r10*sj5*x3293))+((x3291*x3295))+x3298+(((-1.0)*x3302))+((r21*x3292))+(((-1.0)*r11*x3288*x3293)));
evalcond[5]=((((-1.0)*r11*x3292*x3293))+x3300+x3301+((x3290*x3292))+((x3295*x3297))+(((-1.0)*r10*x3293*x3296))+(((-1.0)*r21*x3288))+(((-1.0)*r20*sj5*x3294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x3303=((1.0)*sj5);
CheckValue<IkReal> x3305 = IKatan2WithCheck(IkReal((((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*cj0*cj5*r10))+(((-1.0)*r01*sj0*x3303)))),IkReal((((cj5*r20))+(((-1.0)*r21*x3303)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3305.valid){
continue;
}
IkReal x3304=x3305.value;
j1array[0]=((-1.0)*x3304);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3304)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3306=IKsin(j1);
IkReal x3307=IKcos(j1);
IkReal x3308=((1.0)*cj5);
IkReal x3309=(cj0*x3306);
IkReal x3310=(sj0*x3306);
evalcond[0]=((((-1.0)*r20*x3307*x3308))+((cj5*r00*x3310))+(((-1.0)*r10*x3308*x3309))+((r21*sj5*x3307))+((r11*sj5*x3309))+(((-1.0)*r01*sj5*x3310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3311=(cj1*cj4);
IkReal x3312=(sj1*sj4);
IkReal x3313=(cj4*sj1);
IkReal x3314=(cj1*sj4);
IkReal x3315=(r02*sj0);
IkReal x3316=((1.0)*cj0*r12);
if( IKabs(((((-1.0)*r22*x3314))+((x3312*x3315))+((r22*x3313))+(((-1.0)*x3312*x3316))+(((-1.0)*x3311*x3316))+((x3311*x3315)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3313*x3315))+((r22*x3311))+((r22*x3312))+(((-1.0)*x3314*x3316))+((cj0*r12*x3313))+((x3314*x3315)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x3314))+((x3312*x3315))+((r22*x3313))+(((-1.0)*x3312*x3316))+(((-1.0)*x3311*x3316))+((x3311*x3315))))+IKsqr(((((-1.0)*x3313*x3315))+((r22*x3311))+((r22*x3312))+(((-1.0)*x3314*x3316))+((cj0*r12*x3313))+((x3314*x3315))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x3314))+((x3312*x3315))+((r22*x3313))+(((-1.0)*x3312*x3316))+(((-1.0)*x3311*x3316))+((x3311*x3315))), ((((-1.0)*x3313*x3315))+((r22*x3311))+((r22*x3312))+(((-1.0)*x3314*x3316))+((cj0*r12*x3313))+((x3314*x3315))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3317=IKcos(j2);
IkReal x3318=IKsin(j2);
IkReal x3319=(cj1*cj5);
IkReal x3320=((1.17e-6)*cj4);
IkReal x3321=(r01*sj0);
IkReal x3322=(cj1*sj0);
IkReal x3323=(cj5*sj1);
IkReal x3324=((1.0)*cj0);
IkReal x3325=((1.0)*cj1);
IkReal x3326=(r00*sj5);
IkReal x3327=(sj1*sj5);
IkReal x3328=(sj0*sj1);
IkReal x3329=(cj4*x3317);
IkReal x3330=(sj4*x3318);
IkReal x3331=(sj4*x3317);
IkReal x3332=(cj4*x3318);
IkReal x3333=((1.0)*x3330);
evalcond[0]=(((r22*sj1))+(((-1.0)*cj1*r12*x3324))+(((-1.0)*x3332))+(((-1.0)*x3331))+((r02*x3322)));
evalcond[1]=(x3329+(((-1.0)*x3333))+(((-1.0)*r22*x3325))+(((-1.0)*r12*sj1*x3324))+((r02*x3328)));
evalcond[2]=(((px*x3322))+(((-1.0)*x3317*x3320))+(((-1.0)*cj1*py*x3324))+((pz*sj1))+(((-1.08e-6)*x3317))+(((-0.56747)*x3318))+(((1.17e-6)*x3330)));
evalcond[3]=((0.73)+(((-1.17e-6)*x3331))+((px*x3328))+(((-1.0)*pz*x3325))+(((-1.0)*x3318*x3320))+(((-1.0)*py*sj1*x3324))+(((0.56747)*x3317))+(((-1.08e-6)*x3318)));
evalcond[4]=(x3329+(((-1.0)*cj1*r10*sj5*x3324))+((r20*x3327))+(((-1.0)*x3333))+((r21*x3323))+((x3322*x3326))+(((-1.0)*r11*x3319*x3324))+((x3319*x3321)));
evalcond[5]=(x3332+x3331+((x3326*x3328))+(((-1.0)*r21*x3319))+(((-1.0)*r10*x3324*x3327))+(((-1.0)*r11*x3323*x3324))+(((-1.0)*r20*sj5*x3325))+((x3321*x3323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x3334 = IKatan2WithCheck(IkReal(px),IkReal(((-1.0)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x3334.valid){
continue;
}
CheckValue<IkReal> x3335=IKPowWithIntegerCheck(IKsign((((rxp1_2*sj5))+(((-1.0)*cj5*rxp0_2)))),-1);
if(!x3335.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3334.value)+(((1.5707963267949)*(x3335.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3336=IKcos(j0);
IkReal x3337=IKsin(j0);
IkReal x3338=((1.0)*x3336);
IkReal x3339=((1.0)*x3337);
evalcond[0]=((((-1.0)*r02*x3338))+(((-1.0)*r12*x3339)));
evalcond[1]=((((-1.0)*py*x3339))+(((-1.0)*px*x3338)));
evalcond[2]=((1.0)+((r01*sj5*x3336))+(((-1.0)*cj5*r00*x3338))+(((-1.0)*cj5*r10*x3339))+((r11*sj5*x3337)));
evalcond[3]=((((-1.0)*cj5*r11*x3339))+(((-1.0)*cj5*r01*x3338))+(((-1.0)*r10*sj5*x3339))+(((-1.0)*r00*sj5*x3338)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=0;
cj3=1.0;
j3=0;
IkReal x3340=((1.0)*sj5);
j1eval[0]=((IKabs((((cj5*r20))+(((-1.0)*r21*x3340)))))+(IKabs(((((-1.0)*r01*sj0*x3340))+((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*cj0*cj5*r10))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj3=0;
cj3=1.0;
j3=0;
IkReal x3341=((1.0)*cj5);
j1eval[0]=((IKabs((((r21*sj5))+(((-1.0)*r20*x3341)))))+(IKabs((((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*cj0*r10*x3341))+(((-1.0)*r01*sj0*sj5))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x3342=((1.0)*cj5);
CheckValue<IkReal> x3344 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x3342)))),IkReal((((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*cj0*r10*x3342))+(((-1.0)*r01*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3344.valid){
continue;
}
IkReal x3343=x3344.value;
j1array[0]=((-1.0)*x3343);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3343)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3345=IKcos(j1);
IkReal x3346=IKsin(j1);
IkReal x3347=((1.0)*sj5);
IkReal x3348=(cj5*x3345);
evalcond[0]=((((-1.0)*cj0*r10*x3348))+(((-1.0)*r01*sj0*x3345*x3347))+(((-1.0)*r21*x3346*x3347))+((cj5*r20*x3346))+((cj0*r11*sj5*x3345))+((r00*sj0*x3348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3349=(cj1*cj4);
IkReal x3350=(sj1*sj4);
IkReal x3351=(cj4*sj1);
IkReal x3352=(cj1*sj4);
IkReal x3353=(r02*sj0);
IkReal x3354=((1.0)*cj0*r12);
if( IKabs(((((-1.0)*r22*x3352))+(((-1.0)*x3349*x3354))+(((-1.0)*x3350*x3354))+((x3350*x3353))+((r22*x3351))+((x3349*x3353)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3352*x3354))+((r22*x3349))+(((-1.0)*x3351*x3353))+((x3352*x3353))+((cj0*r12*x3351))+((r22*x3350)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x3352))+(((-1.0)*x3349*x3354))+(((-1.0)*x3350*x3354))+((x3350*x3353))+((r22*x3351))+((x3349*x3353))))+IKsqr(((((-1.0)*x3352*x3354))+((r22*x3349))+(((-1.0)*x3351*x3353))+((x3352*x3353))+((cj0*r12*x3351))+((r22*x3350))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x3352))+(((-1.0)*x3349*x3354))+(((-1.0)*x3350*x3354))+((x3350*x3353))+((r22*x3351))+((x3349*x3353))), ((((-1.0)*x3352*x3354))+((r22*x3349))+(((-1.0)*x3351*x3353))+((x3352*x3353))+((cj0*r12*x3351))+((r22*x3350))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3355=IKcos(j2);
IkReal x3356=IKsin(j2);
IkReal x3357=(cj1*cj5);
IkReal x3358=((1.17e-6)*cj4);
IkReal x3359=(r01*sj0);
IkReal x3360=(cj1*sj0);
IkReal x3361=(cj5*sj1);
IkReal x3362=((1.0)*cj0);
IkReal x3363=((1.0)*cj1);
IkReal x3364=(r00*sj5);
IkReal x3365=(sj1*sj5);
IkReal x3366=(sj0*sj1);
IkReal x3367=(cj4*x3355);
IkReal x3368=(sj4*x3356);
IkReal x3369=(sj4*x3355);
IkReal x3370=(cj4*x3356);
IkReal x3371=((1.0)*x3368);
evalcond[0]=((((-1.0)*x3370))+((r02*x3360))+(((-1.0)*cj1*r12*x3362))+((r22*sj1))+(((-1.0)*x3369)));
evalcond[1]=(((r02*x3366))+x3367+(((-1.0)*x3371))+(((-1.0)*r22*x3363))+(((-1.0)*r12*sj1*x3362)));
evalcond[2]=(((px*x3360))+(((1.17e-6)*x3368))+(((-1.0)*x3355*x3358))+(((-0.56747)*x3356))+((pz*sj1))+(((-1.08e-6)*x3355))+(((-1.0)*cj1*py*x3362)));
evalcond[3]=((0.73)+((px*x3366))+(((-1.0)*pz*x3363))+(((0.56747)*x3355))+(((-1.0)*py*sj1*x3362))+(((-1.0)*x3356*x3358))+(((-1.17e-6)*x3369))+(((-1.08e-6)*x3356)));
evalcond[4]=(x3367+((r21*x3361))+(((-1.0)*x3371))+((x3360*x3364))+(((-1.0)*cj1*r10*sj5*x3362))+((r20*x3365))+(((-1.0)*r11*x3357*x3362))+((x3357*x3359)));
evalcond[5]=(x3370+x3369+(((-1.0)*r20*sj5*x3363))+(((-1.0)*r21*x3357))+(((-1.0)*r10*x3362*x3365))+(((-1.0)*r11*x3361*x3362))+((x3359*x3361))+((x3364*x3366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x3372=((1.0)*sj5);
CheckValue<IkReal> x3374 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj0*x3372))+((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*cj0*cj5*r10)))),IkReal((((cj5*r20))+(((-1.0)*r21*x3372)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3374.valid){
continue;
}
IkReal x3373=x3374.value;
j1array[0]=((-1.0)*x3373);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3373)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3375=IKsin(j1);
IkReal x3376=IKcos(j1);
IkReal x3377=((1.0)*cj5);
IkReal x3378=(cj0*x3375);
IkReal x3379=(sj0*x3375);
evalcond[0]=((((-1.0)*r01*sj5*x3379))+((cj5*r00*x3379))+((r11*sj5*x3378))+((r21*sj5*x3376))+(((-1.0)*r20*x3376*x3377))+(((-1.0)*r10*x3377*x3378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3380=(cj1*cj4);
IkReal x3381=(sj1*sj4);
IkReal x3382=(cj4*sj1);
IkReal x3383=(cj1*sj4);
IkReal x3384=(r02*sj0);
IkReal x3385=((1.0)*cj0*r12);
if( IKabs((((x3380*x3384))+((x3381*x3384))+(((-1.0)*x3380*x3385))+(((-1.0)*x3381*x3385))+(((-1.0)*r22*x3383))+((r22*x3382)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*r12*x3382))+(((-1.0)*x3383*x3385))+((r22*x3380))+((r22*x3381))+(((-1.0)*x3382*x3384))+((x3383*x3384)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x3380*x3384))+((x3381*x3384))+(((-1.0)*x3380*x3385))+(((-1.0)*x3381*x3385))+(((-1.0)*r22*x3383))+((r22*x3382))))+IKsqr((((cj0*r12*x3382))+(((-1.0)*x3383*x3385))+((r22*x3380))+((r22*x3381))+(((-1.0)*x3382*x3384))+((x3383*x3384))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x3380*x3384))+((x3381*x3384))+(((-1.0)*x3380*x3385))+(((-1.0)*x3381*x3385))+(((-1.0)*r22*x3383))+((r22*x3382))), (((cj0*r12*x3382))+(((-1.0)*x3383*x3385))+((r22*x3380))+((r22*x3381))+(((-1.0)*x3382*x3384))+((x3383*x3384))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3386=IKcos(j2);
IkReal x3387=IKsin(j2);
IkReal x3388=(cj1*cj5);
IkReal x3389=((1.17e-6)*cj4);
IkReal x3390=(r01*sj0);
IkReal x3391=(cj1*sj0);
IkReal x3392=(cj5*sj1);
IkReal x3393=((1.0)*cj0);
IkReal x3394=((1.0)*cj1);
IkReal x3395=(r00*sj5);
IkReal x3396=(sj1*sj5);
IkReal x3397=(sj0*sj1);
IkReal x3398=(cj4*x3386);
IkReal x3399=(sj4*x3387);
IkReal x3400=(sj4*x3386);
IkReal x3401=(cj4*x3387);
IkReal x3402=((1.0)*x3399);
evalcond[0]=((((-1.0)*x3401))+(((-1.0)*x3400))+((r22*sj1))+(((-1.0)*cj1*r12*x3393))+((r02*x3391)));
evalcond[1]=((((-1.0)*r22*x3394))+x3398+(((-1.0)*r12*sj1*x3393))+((r02*x3397))+(((-1.0)*x3402)));
evalcond[2]=((((-0.56747)*x3387))+(((-1.0)*cj1*py*x3393))+((px*x3391))+(((-1.0)*x3386*x3389))+(((1.17e-6)*x3399))+((pz*sj1))+(((-1.08e-6)*x3386)));
evalcond[3]=((0.73)+(((-1.0)*py*sj1*x3393))+((px*x3397))+(((-1.0)*x3387*x3389))+(((-1.17e-6)*x3400))+(((0.56747)*x3386))+(((-1.08e-6)*x3387))+(((-1.0)*pz*x3394)));
evalcond[4]=(((r20*x3396))+((x3391*x3395))+x3398+(((-1.0)*cj1*r10*sj5*x3393))+((x3388*x3390))+(((-1.0)*r11*x3388*x3393))+((r21*x3392))+(((-1.0)*x3402)));
evalcond[5]=((((-1.0)*r21*x3388))+x3401+x3400+((x3390*x3392))+(((-1.0)*r10*x3393*x3396))+(((-1.0)*r11*x3392*x3393))+(((-1.0)*r20*sj5*x3394))+((x3395*x3397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x3403=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3403.valid){
continue;
}
CheckValue<IkReal> x3404 = IKatan2WithCheck(IkReal(r02),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3404.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3403.value)))+(x3404.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3405=IKcos(j0);
IkReal x3406=IKsin(j0);
IkReal x3407=((1.0)*x3405);
IkReal x3408=((1.0)*x3406);
evalcond[0]=((((-1.0)*r12*x3408))+(((-1.0)*r02*x3407)));
evalcond[1]=((((-1.0)*py*x3408))+(((-1.0)*px*x3407)));
evalcond[2]=((1.0)+(((-1.0)*cj5*r10*x3408))+((r01*sj5*x3405))+((r11*sj5*x3406))+(((-1.0)*cj5*r00*x3407)));
evalcond[3]=((((-1.0)*cj5*r11*x3408))+(((-1.0)*cj5*r01*x3407))+(((-1.0)*r10*sj5*x3408))+(((-1.0)*r00*sj5*x3407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=0;
cj3=1.0;
j3=0;
IkReal x3409=((1.0)*sj5);
j1eval[0]=((IKabs(((((-1.0)*r01*sj0*x3409))+((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*cj0*cj5*r10)))))+(IKabs((((cj5*r20))+(((-1.0)*r21*x3409))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj3=0;
cj3=1.0;
j3=0;
IkReal x3410=((1.0)*cj5);
j1eval[0]=((IKabs(((((-1.0)*cj0*r10*x3410))+((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*r01*sj0*sj5)))))+(IKabs((((r21*sj5))+(((-1.0)*r20*x3410))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x3411=((1.0)*cj5);
CheckValue<IkReal> x3413 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x3411)))),IkReal(((((-1.0)*cj0*r10*x3411))+((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*r01*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3413.valid){
continue;
}
IkReal x3412=x3413.value;
j1array[0]=((-1.0)*x3412);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3412)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3414=IKcos(j1);
IkReal x3415=IKsin(j1);
IkReal x3416=((1.0)*sj5);
IkReal x3417=(cj5*x3414);
evalcond[0]=((((-1.0)*r01*sj0*x3414*x3416))+(((-1.0)*r21*x3415*x3416))+((cj0*r11*sj5*x3414))+((cj5*r20*x3415))+(((-1.0)*cj0*r10*x3417))+((r00*sj0*x3417)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3418=(cj1*cj4);
IkReal x3419=(sj1*sj4);
IkReal x3420=(cj4*sj1);
IkReal x3421=(cj1*sj4);
IkReal x3422=(r02*sj0);
IkReal x3423=((1.0)*cj0*r12);
if( IKabs((((x3418*x3422))+(((-1.0)*x3419*x3423))+(((-1.0)*x3418*x3423))+(((-1.0)*r22*x3421))+((r22*x3420))+((x3419*x3422)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3420*x3422))+((r22*x3418))+((r22*x3419))+((x3421*x3422))+((cj0*r12*x3420))+(((-1.0)*x3421*x3423)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x3418*x3422))+(((-1.0)*x3419*x3423))+(((-1.0)*x3418*x3423))+(((-1.0)*r22*x3421))+((r22*x3420))+((x3419*x3422))))+IKsqr(((((-1.0)*x3420*x3422))+((r22*x3418))+((r22*x3419))+((x3421*x3422))+((cj0*r12*x3420))+(((-1.0)*x3421*x3423))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x3418*x3422))+(((-1.0)*x3419*x3423))+(((-1.0)*x3418*x3423))+(((-1.0)*r22*x3421))+((r22*x3420))+((x3419*x3422))), ((((-1.0)*x3420*x3422))+((r22*x3418))+((r22*x3419))+((x3421*x3422))+((cj0*r12*x3420))+(((-1.0)*x3421*x3423))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3424=IKcos(j2);
IkReal x3425=IKsin(j2);
IkReal x3426=(cj1*cj5);
IkReal x3427=((1.17e-6)*cj4);
IkReal x3428=(r01*sj0);
IkReal x3429=(cj1*sj0);
IkReal x3430=(cj5*sj1);
IkReal x3431=((1.0)*cj0);
IkReal x3432=((1.0)*cj1);
IkReal x3433=(r00*sj5);
IkReal x3434=(sj1*sj5);
IkReal x3435=(sj0*sj1);
IkReal x3436=(cj4*x3424);
IkReal x3437=(sj4*x3425);
IkReal x3438=(sj4*x3424);
IkReal x3439=(cj4*x3425);
IkReal x3440=((1.0)*x3437);
evalcond[0]=(((r22*sj1))+(((-1.0)*x3439))+(((-1.0)*x3438))+(((-1.0)*cj1*r12*x3431))+((r02*x3429)));
evalcond[1]=(x3436+(((-1.0)*r12*sj1*x3431))+(((-1.0)*r22*x3432))+((r02*x3435))+(((-1.0)*x3440)));
evalcond[2]=((((1.17e-6)*x3437))+(((-0.56747)*x3425))+(((-1.0)*cj1*py*x3431))+(((-1.0)*x3424*x3427))+((px*x3429))+(((-1.08e-6)*x3424))+((pz*sj1)));
evalcond[3]=((0.73)+(((-1.0)*py*sj1*x3431))+(((-1.17e-6)*x3438))+(((-1.0)*x3425*x3427))+((px*x3435))+(((-1.08e-6)*x3425))+(((-1.0)*pz*x3432))+(((0.56747)*x3424)));
evalcond[4]=(((x3429*x3433))+((r20*x3434))+(((-1.0)*cj1*r10*sj5*x3431))+(((-1.0)*r11*x3426*x3431))+x3436+((r21*x3430))+((x3426*x3428))+(((-1.0)*x3440)));
evalcond[5]=(((x3428*x3430))+(((-1.0)*r11*x3430*x3431))+x3438+x3439+((x3433*x3435))+(((-1.0)*r20*sj5*x3432))+(((-1.0)*r10*x3431*x3434))+(((-1.0)*r21*x3426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x3441=((1.0)*sj5);
CheckValue<IkReal> x3443 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj0*x3441))+((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*cj0*cj5*r10)))),IkReal((((cj5*r20))+(((-1.0)*r21*x3441)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3443.valid){
continue;
}
IkReal x3442=x3443.value;
j1array[0]=((-1.0)*x3442);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3442)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3444=IKsin(j1);
IkReal x3445=IKcos(j1);
IkReal x3446=((1.0)*cj5);
IkReal x3447=(cj0*x3444);
IkReal x3448=(sj0*x3444);
evalcond[0]=((((-1.0)*r20*x3445*x3446))+(((-1.0)*r01*sj5*x3448))+((r21*sj5*x3445))+(((-1.0)*r10*x3446*x3447))+((cj5*r00*x3448))+((r11*sj5*x3447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3449=(cj1*cj4);
IkReal x3450=(sj1*sj4);
IkReal x3451=(cj4*sj1);
IkReal x3452=(cj1*sj4);
IkReal x3453=(r02*sj0);
IkReal x3454=((1.0)*cj0*r12);
if( IKabs(((((-1.0)*r22*x3452))+((r22*x3451))+(((-1.0)*x3450*x3454))+(((-1.0)*x3449*x3454))+((x3449*x3453))+((x3450*x3453)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x3450))+((r22*x3449))+((cj0*r12*x3451))+((x3452*x3453))+(((-1.0)*x3451*x3453))+(((-1.0)*x3452*x3454)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x3452))+((r22*x3451))+(((-1.0)*x3450*x3454))+(((-1.0)*x3449*x3454))+((x3449*x3453))+((x3450*x3453))))+IKsqr((((r22*x3450))+((r22*x3449))+((cj0*r12*x3451))+((x3452*x3453))+(((-1.0)*x3451*x3453))+(((-1.0)*x3452*x3454))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x3452))+((r22*x3451))+(((-1.0)*x3450*x3454))+(((-1.0)*x3449*x3454))+((x3449*x3453))+((x3450*x3453))), (((r22*x3450))+((r22*x3449))+((cj0*r12*x3451))+((x3452*x3453))+(((-1.0)*x3451*x3453))+(((-1.0)*x3452*x3454))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3455=IKcos(j2);
IkReal x3456=IKsin(j2);
IkReal x3457=(cj1*cj5);
IkReal x3458=((1.17e-6)*cj4);
IkReal x3459=(r01*sj0);
IkReal x3460=(cj1*sj0);
IkReal x3461=(cj5*sj1);
IkReal x3462=((1.0)*cj0);
IkReal x3463=((1.0)*cj1);
IkReal x3464=(r00*sj5);
IkReal x3465=(sj1*sj5);
IkReal x3466=(sj0*sj1);
IkReal x3467=(cj4*x3455);
IkReal x3468=(sj4*x3456);
IkReal x3469=(sj4*x3455);
IkReal x3470=(cj4*x3456);
IkReal x3471=((1.0)*x3468);
evalcond[0]=(((r22*sj1))+(((-1.0)*cj1*r12*x3462))+(((-1.0)*x3470))+(((-1.0)*x3469))+((r02*x3460)));
evalcond[1]=(x3467+(((-1.0)*r22*x3463))+(((-1.0)*r12*sj1*x3462))+(((-1.0)*x3471))+((r02*x3466)));
evalcond[2]=((((-1.0)*cj1*py*x3462))+((px*x3460))+(((-1.0)*x3455*x3458))+((pz*sj1))+(((-0.56747)*x3456))+(((1.17e-6)*x3468))+(((-1.08e-6)*x3455)));
evalcond[3]=((0.73)+(((-1.0)*py*sj1*x3462))+(((-1.0)*pz*x3463))+(((-1.17e-6)*x3469))+(((0.56747)*x3455))+((px*x3466))+(((-1.08e-6)*x3456))+(((-1.0)*x3456*x3458)));
evalcond[4]=(((x3457*x3459))+((x3460*x3464))+x3467+(((-1.0)*r11*x3457*x3462))+((r20*x3465))+((r21*x3461))+(((-1.0)*x3471))+(((-1.0)*cj1*r10*sj5*x3462)));
evalcond[5]=((((-1.0)*r20*sj5*x3463))+((x3464*x3466))+(((-1.0)*r11*x3461*x3462))+x3470+x3469+(((-1.0)*r21*x3457))+(((-1.0)*r10*x3462*x3465))+((x3459*x3461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3472=(((cj5*rxp0_2))+(((-1.0)*rxp1_2*sj5)));
j0eval[0]=x3472;
j0eval[1]=((IKabs(px))+(IKabs(py)));
j0eval[2]=IKsign(x3472);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3473=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j0eval[0]=x3473;
j0eval[1]=((IKabs(r02))+(IKabs(r12)));
j0eval[2]=IKsign(x3473);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=r22;
j0eval[1]=((IKabs(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(r22);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3474=((-1.0)*r20);
IkReal x3476 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3476)==0){
continue;
}
IkReal x3475=pow(x3476,-0.5);
CheckValue<IkReal> x3477 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3474),IKFAST_ATAN2_MAGTHRESH);
if(!x3477.valid){
continue;
}
IkReal gconst24=((-1.0)*(x3477.value));
IkReal gconst25=(r21*x3475);
IkReal gconst26=(x3474*x3475);
CheckValue<IkReal> x3478 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3478.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3478.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x3479=((-1.0)*r20);
IkReal x3480=x3475;
CheckValue<IkReal> x3482 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3479),IKFAST_ATAN2_MAGTHRESH);
if(!x3482.valid){
continue;
}
IkReal x3481=((-1.0)*(x3482.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst25;
cj5=gconst26;
j5=x3481;
IkReal gconst24=x3481;
IkReal gconst25=(r21*x3480);
IkReal gconst26=(x3479*x3480);
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x3483=((-1.0)*r20);
IkReal x3484=x3475;
CheckValue<IkReal> x3486 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3483),IKFAST_ATAN2_MAGTHRESH);
if(!x3486.valid){
continue;
}
IkReal x3485=((-1.0)*(x3486.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst25;
cj5=gconst26;
j5=x3485;
IkReal gconst24=x3485;
IkReal gconst25=(r21*x3484);
IkReal gconst26=(x3483*x3484);
j0eval[0]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x3487=((-1.0)*r20);
CheckValue<IkReal> x3489 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3487),IKFAST_ATAN2_MAGTHRESH);
if(!x3489.valid){
continue;
}
IkReal x3488=((-1.0)*(x3489.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst25;
cj5=gconst26;
j5=x3488;
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst24=x3488;
IkReal gconst25=r21;
IkReal gconst26=x3487;
IkReal x3490=((((-1.0)*r20*rxp0_2))+(((-1.0)*r21*rxp1_2)));
j0eval[0]=x3490;
j0eval[1]=IKsign(x3490);
j0eval[2]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x3491 = IKatan2WithCheck(IkReal(px),IkReal(((-1.0)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x3491.valid){
continue;
}
CheckValue<IkReal> x3492=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst25*rxp1_2))+((gconst26*rxp0_2)))),-1);
if(!x3492.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3491.value)+(((1.5707963267949)*(x3492.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3493=IKcos(j0);
IkReal x3494=IKsin(j0);
IkReal x3495=((1.0)*x3493);
IkReal x3496=((1.0)*x3494);
evalcond[0]=((((-1.0)*r12*x3496))+(((-1.0)*r02*x3495)));
evalcond[1]=((((-1.0)*py*x3496))+(((-1.0)*px*x3495)));
evalcond[2]=((-1.0)+((gconst25*r01*x3493))+(((-1.0)*gconst26*r10*x3496))+(((-1.0)*gconst26*r00*x3495))+((gconst25*r11*x3494)));
evalcond[3]=((((-1.0)*gconst26*r01*x3495))+(((-1.0)*gconst26*r11*x3496))+(((-1.0)*gconst25*r10*x3496))+(((-1.0)*gconst25*r00*x3495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x3497=((1.0)*gconst25);
CheckValue<IkReal> x3499 = IKatan2WithCheck(IkReal((((cj0*gconst25*r11))+(((-1.0)*r01*sj0*x3497))+((gconst26*r00*sj0))+(((-1.0)*cj0*gconst26*r10)))),IkReal((((gconst26*r20))+(((-1.0)*r21*x3497)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3499.valid){
continue;
}
IkReal x3498=x3499.value;
j1array[0]=((-1.0)*x3498);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3498)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3500=IKsin(j1);
IkReal x3501=IKcos(j1);
IkReal x3502=(gconst26*x3500);
IkReal x3503=(gconst25*x3500);
evalcond[0]=((((-1.0)*gconst26*r20*x3501))+(((-1.0)*r01*sj0*x3503))+((cj0*r11*x3503))+((r00*sj0*x3502))+((gconst25*r21*x3501))+(((-1.0)*cj0*r10*x3502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3504=((1.0)*cj4);
IkReal x3505=(r02*sj0);
IkReal x3506=(cj0*cj1*r12);
IkReal x3507=(cj0*r12*sj1);
IkReal x3508=((1.0)*sj4*x3505);
if( IKabs((((sj4*x3507))+(((-1.0)*sj1*x3508))+((cj1*cj4*x3505))+(((-1.0)*x3504*x3506)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*x3507))+((sj4*x3506))+(((-1.0)*sj1*x3504*x3505))+(((-1.0)*cj1*x3508)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj4*x3507))+(((-1.0)*sj1*x3508))+((cj1*cj4*x3505))+(((-1.0)*x3504*x3506))))+IKsqr((((cj4*x3507))+((sj4*x3506))+(((-1.0)*sj1*x3504*x3505))+(((-1.0)*cj1*x3508))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj4*x3507))+(((-1.0)*sj1*x3508))+((cj1*cj4*x3505))+(((-1.0)*x3504*x3506))), (((cj4*x3507))+((sj4*x3506))+(((-1.0)*sj1*x3504*x3505))+(((-1.0)*cj1*x3508))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3509=IKcos(j2);
IkReal x3510=IKsin(j2);
IkReal x3511=(gconst25*sj1);
IkReal x3512=((1.17e-6)*cj4);
IkReal x3513=(cj1*sj0);
IkReal x3514=(gconst26*r01);
IkReal x3515=((1.0)*cj1);
IkReal x3516=(gconst26*r21);
IkReal x3517=((1.0)*cj4);
IkReal x3518=(sj0*sj1);
IkReal x3519=(cj0*py);
IkReal x3520=((1.0)*sj1);
IkReal x3521=(cj0*r12);
IkReal x3522=(sj4*x3509);
IkReal x3523=((1.0)*cj0*r10);
IkReal x3524=(sj4*x3510);
IkReal x3525=(cj0*gconst26*r11);
IkReal x3526=(x3510*x3517);
evalcond[0]=(((cj4*x3509))+x3524+((r02*x3518))+(((-1.0)*x3520*x3521)));
evalcond[1]=((((-1.0)*x3526))+x3522+((r02*x3513))+(((-1.0)*x3515*x3521)));
evalcond[2]=((((-1.0)*x3515*x3519))+(((1.17e-6)*x3524))+((px*x3513))+((x3509*x3512))+(((-0.56747)*x3510))+((pz*sj1))+(((-1.08e-6)*x3509)));
evalcond[3]=((0.73)+(((-1.08e-6)*x3510))+(((-1.0)*x3519*x3520))+((x3510*x3512))+(((-1.0)*pz*x3515))+((px*x3518))+(((-1.17e-6)*x3522))+(((0.56747)*x3509)));
evalcond[4]=((((-1.0)*x3524))+(((-1.0)*x3509*x3517))+((gconst25*r00*x3513))+((r20*x3511))+(((-1.0)*cj0*gconst25*r10*x3515))+((sj1*x3516))+((x3513*x3514))+(((-1.0)*x3515*x3525)));
evalcond[5]=((((-1.0)*x3515*x3516))+(((-1.0)*x3526))+x3522+(((-1.0)*x3511*x3523))+(((-1.0)*gconst25*r20*x3515))+((x3514*x3518))+(((-1.0)*x3520*x3525))+((r00*sj0*x3511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x3527=((-1.0)*r20);
IkReal x3528=((-1.0)*pz);
IkReal x3529=x3475;
CheckValue<IkReal> x3531 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3527),IKFAST_ATAN2_MAGTHRESH);
if(!x3531.valid){
continue;
}
IkReal x3530=((-1.0)*(x3531.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst25;
cj5=gconst26;
j5=x3530;
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x3528);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x3528);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x3528);
rxp2_2=0;
IkReal gconst24=x3530;
IkReal gconst25=(r21*x3529);
IkReal gconst26=(x3527*x3529);
j0eval[0]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x3532=IKPowWithIntegerCheck(IKsign((r22*(((((-1.0)*(gconst25*gconst25)))+(((-1.0)*(gconst26*gconst26))))))),-1);
if(!x3532.valid){
continue;
}
CheckValue<IkReal> x3533 = IKatan2WithCheck(IkReal(((((-1.0)*gconst26*r01))+(((-1.0)*gconst25*r00)))),IkReal((((gconst25*r10))+((gconst26*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3533.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3532.value)))+(x3533.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3534=IKsin(j0);
IkReal x3535=IKcos(j0);
IkReal x3536=((1.0)*gconst26);
IkReal x3537=((1.0)*gconst25);
IkReal x3538=(r01*x3535);
IkReal x3539=(r11*x3534);
IkReal x3540=(r00*x3535);
IkReal x3541=(r10*x3534);
evalcond[0]=((((-1.0)*r02*x3535))+(((-1.0)*r12*x3534)));
evalcond[1]=((-1.0)+((gconst25*x3538))+((gconst25*x3539))+(((-1.0)*x3536*x3541))+(((-1.0)*x3536*x3540)));
evalcond[2]=((((-1.0)*x3537*x3540))+(((-1.0)*x3537*x3541))+(((-1.0)*x3536*x3538))+(((-1.0)*x3536*x3539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x3542=((-1.0)*r20);
IkReal x3543=((-1.0)*pz);
IkReal x3544=x3475;
CheckValue<IkReal> x3546 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3542),IKFAST_ATAN2_MAGTHRESH);
if(!x3546.valid){
continue;
}
IkReal x3545=((-1.0)*(x3546.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst25;
cj5=gconst26;
j5=x3545;
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x3543);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x3543);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x3543);
rxp2_2=0;
IkReal gconst24=x3545;
IkReal gconst25=(r21*x3544);
IkReal gconst26=(x3542*x3544);
IkReal x3547=r22*r22;
CheckValue<IkReal> x3551=IKPowWithIntegerCheck(((-1.0)+x3547),-1);
if(!x3551.valid){
continue;
}
IkReal x3548=x3551.value;
if((((1.0)+(((-1.0)*x3547)))) < -0.00001)
continue;
IkReal x3549=IKsqrt(((1.0)+(((-1.0)*x3547))));
IkReal x3550=(x3548*x3549);
j1eval[0]=((IKabs(((((-1.0)*x3547*x3550))+x3550)))+(IKabs(((((-1.0)*r02*r22*sj0*x3550))+((cj0*r12*r22*x3550))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x3552=((-1.0)*r20);
IkReal x3553=((-1.0)*pz);
IkReal x3554=x3475;
CheckValue<IkReal> x3556 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3552),IKFAST_ATAN2_MAGTHRESH);
if(!x3556.valid){
continue;
}
IkReal x3555=((-1.0)*(x3556.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst25;
cj5=gconst26;
j5=x3555;
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x3553);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x3553);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x3553);
rxp2_2=0;
IkReal gconst24=x3555;
IkReal gconst25=(r21*x3554);
IkReal gconst26=(x3552*x3554);
IkReal x3557=r22*r22;
CheckValue<IkReal> x3561=IKPowWithIntegerCheck(((-1.0)+x3557),-1);
if(!x3561.valid){
continue;
}
IkReal x3558=x3561.value;
if((((1.0)+(((-1.0)*x3557)))) < -0.00001)
continue;
IkReal x3559=IKsqrt(((1.0)+(((-1.0)*x3557))));
IkReal x3560=(r22*x3558*x3559);
j1eval[0]=((IKabs(((((-1.0)*r02*sj0*x3560))+((cj0*r12*x3560)))))+(IKabs(x3559)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x3562=((1.0)*gconst26);
CheckValue<IkReal> x3564 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x3562))+((gconst25*r21)))),IkReal(((((-1.0)*cj0*r10*x3562))+((cj0*gconst25*r11))+(((-1.0)*gconst25*r01*sj0))+((gconst26*r00*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3564.valid){
continue;
}
IkReal x3563=x3564.value;
j1array[0]=((-1.0)*x3563);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3563)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3565=IKcos(j1);
IkReal x3566=IKsin(j1);
IkReal x3567=((1.0)*gconst25);
IkReal x3568=(cj0*x3565);
IkReal x3569=(sj0*x3565);
evalcond[0]=(((gconst25*r11*x3568))+(((-1.0)*r01*x3567*x3569))+((gconst26*r00*x3569))+((gconst26*r20*x3566))+(((-1.0)*r21*x3566*x3567))+(((-1.0)*gconst26*r10*x3568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3570=((1.0)*sj4);
IkReal x3571=(r02*sj0);
IkReal x3572=(r22*sj1);
IkReal x3573=(cj1*cj4);
IkReal x3574=(cj0*r12);
IkReal x3575=(cj1*sj4);
IkReal x3576=(cj4*sj1);
if( IKabs(((((-1.0)*x3573*x3574))+((x3571*x3573))+(((-1.0)*sj1*x3570*x3571))+((cj4*x3572))+((r22*x3575))+((sj1*sj4*x3574)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*x3570*x3571))+(((-1.0)*x3571*x3576))+((r22*x3573))+((x3574*x3575))+((x3574*x3576))+(((-1.0)*x3570*x3572)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3573*x3574))+((x3571*x3573))+(((-1.0)*sj1*x3570*x3571))+((cj4*x3572))+((r22*x3575))+((sj1*sj4*x3574))))+IKsqr(((((-1.0)*cj1*x3570*x3571))+(((-1.0)*x3571*x3576))+((r22*x3573))+((x3574*x3575))+((x3574*x3576))+(((-1.0)*x3570*x3572))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x3573*x3574))+((x3571*x3573))+(((-1.0)*sj1*x3570*x3571))+((cj4*x3572))+((r22*x3575))+((sj1*sj4*x3574))), ((((-1.0)*cj1*x3570*x3571))+(((-1.0)*x3571*x3576))+((r22*x3573))+((x3574*x3575))+((x3574*x3576))+(((-1.0)*x3570*x3572))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3577=IKsin(j2);
IkReal x3578=IKcos(j2);
IkReal x3579=(gconst25*sj1);
IkReal x3580=((1.17e-6)*cj4);
IkReal x3581=(cj1*gconst26);
IkReal x3582=(r01*sj0);
IkReal x3583=(r00*sj0);
IkReal x3584=((1.0)*cj1);
IkReal x3585=((1.0)*cj4);
IkReal x3586=(cj1*gconst25);
IkReal x3587=(gconst26*sj1);
IkReal x3588=(r02*sj0);
IkReal x3589=((1.0)*cj0);
IkReal x3590=(sj4*x3578);
IkReal x3591=(r10*x3589);
IkReal x3592=(sj4*x3577);
IkReal x3593=(x3577*x3585);
evalcond[0]=((((-1.0)*cj0*r12*x3584))+((r22*sj1))+x3590+((cj1*x3588))+(((-1.0)*x3593)));
evalcond[1]=((((-1.0)*r22*x3584))+x3592+((cj4*x3578))+(((-1.0)*r12*sj1*x3589))+((sj1*x3588)));
evalcond[2]=(((x3578*x3580))+((pz*sj1))+(((-1.08e-6)*x3578))+(((-0.56747)*x3577))+(((1.17e-6)*x3592)));
evalcond[3]=((0.73)+(((-1.0)*pz*x3584))+(((0.56747)*x3578))+((x3577*x3580))+(((-1.17e-6)*x3590))+(((-1.08e-6)*x3577)));
evalcond[4]=(((x3583*x3586))+(((-1.0)*r11*x3581*x3589))+(((-1.0)*cj0*gconst25*r10*x3584))+((r20*x3579))+(((-1.0)*x3578*x3585))+(((-1.0)*x3592))+((x3581*x3582))+((r21*x3587)));
evalcond[5]=(((x3579*x3583))+x3590+(((-1.0)*r21*x3581))+(((-1.0)*x3579*x3591))+(((-1.0)*r11*x3587*x3589))+(((-1.0)*x3593))+((x3582*x3587))+(((-1.0)*gconst25*r20*x3584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x3594=((1.0)*gconst25);
CheckValue<IkReal> x3596 = IKatan2WithCheck(IkReal((((cj0*gconst25*r11))+((gconst26*r00*sj0))+(((-1.0)*r01*sj0*x3594))+(((-1.0)*cj0*gconst26*r10)))),IkReal(((((-1.0)*r21*x3594))+((gconst26*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3596.valid){
continue;
}
IkReal x3595=x3596.value;
j1array[0]=((-1.0)*x3595);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3595)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3597=IKsin(j1);
IkReal x3598=IKcos(j1);
IkReal x3599=(gconst26*x3597);
IkReal x3600=(gconst25*x3597);
evalcond[0]=((((-1.0)*gconst26*r20*x3598))+((r00*sj0*x3599))+((cj0*r11*x3600))+(((-1.0)*cj0*r10*x3599))+(((-1.0)*r01*sj0*x3600))+((gconst25*r21*x3598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3601=((1.0)*sj4);
IkReal x3602=(r02*sj0);
IkReal x3603=(r22*sj1);
IkReal x3604=(cj1*cj4);
IkReal x3605=(cj0*r12);
IkReal x3606=(cj1*sj4);
IkReal x3607=(cj4*sj1);
if( IKabs((((cj4*x3603))+(((-1.0)*x3604*x3605))+((r22*x3606))+((x3602*x3604))+((sj1*sj4*x3605))+(((-1.0)*sj1*x3601*x3602)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3602*x3607))+((r22*x3604))+(((-1.0)*x3601*x3603))+(((-1.0)*cj1*x3601*x3602))+((x3605*x3607))+((x3605*x3606)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*x3603))+(((-1.0)*x3604*x3605))+((r22*x3606))+((x3602*x3604))+((sj1*sj4*x3605))+(((-1.0)*sj1*x3601*x3602))))+IKsqr(((((-1.0)*x3602*x3607))+((r22*x3604))+(((-1.0)*x3601*x3603))+(((-1.0)*cj1*x3601*x3602))+((x3605*x3607))+((x3605*x3606))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj4*x3603))+(((-1.0)*x3604*x3605))+((r22*x3606))+((x3602*x3604))+((sj1*sj4*x3605))+(((-1.0)*sj1*x3601*x3602))), ((((-1.0)*x3602*x3607))+((r22*x3604))+(((-1.0)*x3601*x3603))+(((-1.0)*cj1*x3601*x3602))+((x3605*x3607))+((x3605*x3606))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3608=IKsin(j2);
IkReal x3609=IKcos(j2);
IkReal x3610=(gconst25*sj1);
IkReal x3611=((1.17e-6)*cj4);
IkReal x3612=(cj1*gconst26);
IkReal x3613=(r01*sj0);
IkReal x3614=(r00*sj0);
IkReal x3615=((1.0)*cj1);
IkReal x3616=((1.0)*cj4);
IkReal x3617=(cj1*gconst25);
IkReal x3618=(gconst26*sj1);
IkReal x3619=(r02*sj0);
IkReal x3620=((1.0)*cj0);
IkReal x3621=(sj4*x3609);
IkReal x3622=(r10*x3620);
IkReal x3623=(sj4*x3608);
IkReal x3624=(x3608*x3616);
evalcond[0]=((((-1.0)*x3624))+((cj1*x3619))+((r22*sj1))+x3621+(((-1.0)*cj0*r12*x3615)));
evalcond[1]=(((cj4*x3609))+(((-1.0)*r12*sj1*x3620))+x3623+(((-1.0)*r22*x3615))+((sj1*x3619)));
evalcond[2]=((((-1.08e-6)*x3609))+((x3609*x3611))+(((-0.56747)*x3608))+(((1.17e-6)*x3623))+((pz*sj1)));
evalcond[3]=((0.73)+(((-1.08e-6)*x3608))+(((-1.17e-6)*x3621))+(((-1.0)*pz*x3615))+((x3608*x3611))+(((0.56747)*x3609)));
evalcond[4]=(((x3612*x3613))+((r21*x3618))+(((-1.0)*x3609*x3616))+(((-1.0)*cj0*gconst25*r10*x3615))+(((-1.0)*r11*x3612*x3620))+((x3614*x3617))+((r20*x3610))+(((-1.0)*x3623)));
evalcond[5]=((((-1.0)*x3624))+((x3613*x3618))+(((-1.0)*gconst25*r20*x3615))+(((-1.0)*x3610*x3622))+x3621+((x3610*x3614))+(((-1.0)*r21*x3612))+(((-1.0)*r11*x3618*x3620)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x3625=IKPowWithIntegerCheck(IKsign((r22*(((((-1.0)*(gconst25*gconst25)))+(((-1.0)*(gconst26*gconst26))))))),-1);
if(!x3625.valid){
continue;
}
CheckValue<IkReal> x3626 = IKatan2WithCheck(IkReal(((((-1.0)*gconst26*r01))+(((-1.0)*gconst25*r00)))),IkReal((((gconst25*r10))+((gconst26*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3626.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3625.value)))+(x3626.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3627=IKcos(j0);
IkReal x3628=IKsin(j0);
IkReal x3629=((1.0)*x3627);
IkReal x3630=((1.0)*x3628);
evalcond[0]=((((-1.0)*r12*x3630))+(((-1.0)*r02*x3629)));
evalcond[1]=((((-1.0)*py*x3630))+(((-1.0)*px*x3629)));
evalcond[2]=((-1.0)+(((-1.0)*gconst26*r10*x3630))+(((-1.0)*gconst26*r00*x3629))+((gconst25*r01*x3627))+((gconst25*r11*x3628)));
evalcond[3]=((((-1.0)*gconst25*r10*x3630))+(((-1.0)*gconst25*r00*x3629))+(((-1.0)*gconst26*r01*x3629))+(((-1.0)*gconst26*r11*x3630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x3631=((-1.0)*r20);
IkReal x3632=x3475;
CheckValue<IkReal> x3634 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3631),IKFAST_ATAN2_MAGTHRESH);
if(!x3634.valid){
continue;
}
IkReal x3633=((-1.0)*(x3634.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst25;
cj5=gconst26;
j5=x3633;
IkReal gconst24=x3633;
IkReal gconst25=(r21*x3632);
IkReal gconst26=(x3631*x3632);
IkReal x3635=r22*r22;
CheckValue<IkReal> x3639=IKPowWithIntegerCheck(((-1.0)+x3635),-1);
if(!x3639.valid){
continue;
}
IkReal x3636=x3639.value;
if((((1.0)+(((-1.0)*x3635)))) < -0.00001)
continue;
IkReal x3637=IKsqrt(((1.0)+(((-1.0)*x3635))));
IkReal x3638=(x3636*x3637);
j1eval[0]=((IKabs((x3638+(((-1.0)*x3635*x3638)))))+(IKabs((((cj0*r12*r22*x3638))+(((-1.0)*r02*r22*sj0*x3638))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x3640=((-1.0)*r20);
IkReal x3641=x3475;
CheckValue<IkReal> x3643 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3640),IKFAST_ATAN2_MAGTHRESH);
if(!x3643.valid){
continue;
}
IkReal x3642=((-1.0)*(x3643.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst25;
cj5=gconst26;
j5=x3642;
IkReal gconst24=x3642;
IkReal gconst25=(r21*x3641);
IkReal gconst26=(x3640*x3641);
IkReal x3644=r22*r22;
CheckValue<IkReal> x3648=IKPowWithIntegerCheck(((-1.0)+x3644),-1);
if(!x3648.valid){
continue;
}
IkReal x3645=x3648.value;
if((((1.0)+(((-1.0)*x3644)))) < -0.00001)
continue;
IkReal x3646=IKsqrt(((1.0)+(((-1.0)*x3644))));
IkReal x3647=(r22*x3645*x3646);
j1eval[0]=((IKabs(((((-1.0)*r02*sj0*x3647))+((cj0*r12*x3647)))))+(IKabs(x3646)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x3649=((1.0)*gconst26);
CheckValue<IkReal> x3651 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x3649))+((gconst25*r21)))),IkReal((((cj0*gconst25*r11))+(((-1.0)*gconst25*r01*sj0))+((gconst26*r00*sj0))+(((-1.0)*cj0*r10*x3649)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3651.valid){
continue;
}
IkReal x3650=x3651.value;
j1array[0]=((-1.0)*x3650);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3650)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3652=IKcos(j1);
IkReal x3653=IKsin(j1);
IkReal x3654=((1.0)*gconst25);
IkReal x3655=(cj0*x3652);
IkReal x3656=(sj0*x3652);
evalcond[0]=(((gconst26*r00*x3656))+(((-1.0)*r21*x3653*x3654))+((gconst26*r20*x3653))+(((-1.0)*r01*x3654*x3656))+((gconst25*r11*x3655))+(((-1.0)*gconst26*r10*x3655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3657=((1.0)*sj4);
IkReal x3658=(r02*sj0);
IkReal x3659=(r22*sj1);
IkReal x3660=(cj1*cj4);
IkReal x3661=(cj0*r12);
IkReal x3662=(cj1*sj4);
IkReal x3663=(cj4*sj1);
if( IKabs((((r22*x3662))+(((-1.0)*sj1*x3657*x3658))+((x3658*x3660))+((cj4*x3659))+(((-1.0)*x3660*x3661))+((sj1*sj4*x3661)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x3660))+(((-1.0)*x3657*x3659))+(((-1.0)*x3658*x3663))+(((-1.0)*cj1*x3657*x3658))+((x3661*x3662))+((x3661*x3663)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x3662))+(((-1.0)*sj1*x3657*x3658))+((x3658*x3660))+((cj4*x3659))+(((-1.0)*x3660*x3661))+((sj1*sj4*x3661))))+IKsqr((((r22*x3660))+(((-1.0)*x3657*x3659))+(((-1.0)*x3658*x3663))+(((-1.0)*cj1*x3657*x3658))+((x3661*x3662))+((x3661*x3663))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r22*x3662))+(((-1.0)*sj1*x3657*x3658))+((x3658*x3660))+((cj4*x3659))+(((-1.0)*x3660*x3661))+((sj1*sj4*x3661))), (((r22*x3660))+(((-1.0)*x3657*x3659))+(((-1.0)*x3658*x3663))+(((-1.0)*cj1*x3657*x3658))+((x3661*x3662))+((x3661*x3663))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3664=IKsin(j2);
IkReal x3665=IKcos(j2);
IkReal x3666=(gconst25*sj1);
IkReal x3667=((1.17e-6)*cj4);
IkReal x3668=(cj1*sj0);
IkReal x3669=(gconst26*r01);
IkReal x3670=((1.0)*cj1);
IkReal x3671=(gconst26*r21);
IkReal x3672=((1.0)*cj4);
IkReal x3673=(sj0*sj1);
IkReal x3674=(cj0*py);
IkReal x3675=((1.0)*sj1);
IkReal x3676=(cj0*r12);
IkReal x3677=(sj4*x3665);
IkReal x3678=((1.0)*cj0*r10);
IkReal x3679=(sj4*x3664);
IkReal x3680=(cj0*gconst26*r11);
IkReal x3681=(x3664*x3672);
evalcond[0]=((((-1.0)*x3670*x3676))+(((-1.0)*x3681))+((r22*sj1))+x3677+((r02*x3668)));
evalcond[1]=(((cj4*x3665))+x3679+((r02*x3673))+(((-1.0)*r22*x3670))+(((-1.0)*x3675*x3676)));
evalcond[2]=(((px*x3668))+(((-1.0)*x3670*x3674))+(((-1.08e-6)*x3665))+((pz*sj1))+(((1.17e-6)*x3679))+(((-0.56747)*x3664))+((x3665*x3667)));
evalcond[3]=((0.73)+(((-1.17e-6)*x3677))+(((-1.0)*pz*x3670))+((x3664*x3667))+(((-1.08e-6)*x3664))+(((0.56747)*x3665))+((px*x3673))+(((-1.0)*x3674*x3675)));
evalcond[4]=((((-1.0)*x3670*x3680))+(((-1.0)*x3665*x3672))+((r20*x3666))+(((-1.0)*x3679))+((x3668*x3669))+((sj1*x3671))+(((-1.0)*cj0*gconst25*r10*x3670))+((gconst25*r00*x3668)));
evalcond[5]=((((-1.0)*x3670*x3671))+(((-1.0)*x3681))+x3677+(((-1.0)*x3675*x3680))+((r00*sj0*x3666))+(((-1.0)*x3666*x3678))+(((-1.0)*gconst25*r20*x3670))+((x3669*x3673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x3682=((1.0)*gconst25);
CheckValue<IkReal> x3684 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj0*x3682))+((cj0*gconst25*r11))+((gconst26*r00*sj0))+(((-1.0)*cj0*gconst26*r10)))),IkReal(((((-1.0)*r21*x3682))+((gconst26*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3684.valid){
continue;
}
IkReal x3683=x3684.value;
j1array[0]=((-1.0)*x3683);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3683)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3685=IKsin(j1);
IkReal x3686=IKcos(j1);
IkReal x3687=(gconst26*x3685);
IkReal x3688=(gconst25*x3685);
evalcond[0]=(((r00*sj0*x3687))+(((-1.0)*cj0*r10*x3687))+(((-1.0)*r01*sj0*x3688))+(((-1.0)*gconst26*r20*x3686))+((gconst25*r21*x3686))+((cj0*r11*x3688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3689=((1.0)*sj4);
IkReal x3690=(r02*sj0);
IkReal x3691=(r22*sj1);
IkReal x3692=(cj1*cj4);
IkReal x3693=(cj0*r12);
IkReal x3694=(cj1*sj4);
IkReal x3695=(cj4*sj1);
if( IKabs(((((-1.0)*x3692*x3693))+((sj1*sj4*x3693))+((r22*x3694))+(((-1.0)*sj1*x3689*x3690))+((x3690*x3692))+((cj4*x3691)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3689*x3691))+((x3693*x3694))+((x3693*x3695))+((r22*x3692))+(((-1.0)*x3690*x3695))+(((-1.0)*cj1*x3689*x3690)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3692*x3693))+((sj1*sj4*x3693))+((r22*x3694))+(((-1.0)*sj1*x3689*x3690))+((x3690*x3692))+((cj4*x3691))))+IKsqr(((((-1.0)*x3689*x3691))+((x3693*x3694))+((x3693*x3695))+((r22*x3692))+(((-1.0)*x3690*x3695))+(((-1.0)*cj1*x3689*x3690))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x3692*x3693))+((sj1*sj4*x3693))+((r22*x3694))+(((-1.0)*sj1*x3689*x3690))+((x3690*x3692))+((cj4*x3691))), ((((-1.0)*x3689*x3691))+((x3693*x3694))+((x3693*x3695))+((r22*x3692))+(((-1.0)*x3690*x3695))+(((-1.0)*cj1*x3689*x3690))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3696=IKsin(j2);
IkReal x3697=IKcos(j2);
IkReal x3698=(gconst25*sj1);
IkReal x3699=((1.17e-6)*cj4);
IkReal x3700=(cj1*sj0);
IkReal x3701=(gconst26*r01);
IkReal x3702=((1.0)*cj1);
IkReal x3703=(gconst26*r21);
IkReal x3704=((1.0)*cj4);
IkReal x3705=(sj0*sj1);
IkReal x3706=(cj0*py);
IkReal x3707=((1.0)*sj1);
IkReal x3708=(cj0*r12);
IkReal x3709=(sj4*x3697);
IkReal x3710=((1.0)*cj0*r10);
IkReal x3711=(sj4*x3696);
IkReal x3712=(cj0*gconst26*r11);
IkReal x3713=(x3696*x3704);
evalcond[0]=(((r22*sj1))+(((-1.0)*x3713))+x3709+(((-1.0)*x3702*x3708))+((r02*x3700)));
evalcond[1]=((((-1.0)*x3707*x3708))+x3711+((cj4*x3697))+((r02*x3705))+(((-1.0)*r22*x3702)));
evalcond[2]=((((1.17e-6)*x3711))+((x3697*x3699))+(((-0.56747)*x3696))+((px*x3700))+((pz*sj1))+(((-1.0)*x3702*x3706))+(((-1.08e-6)*x3697)));
evalcond[3]=((0.73)+(((-1.17e-6)*x3709))+((x3696*x3699))+(((-1.0)*x3706*x3707))+((px*x3705))+(((-1.0)*pz*x3702))+(((-1.08e-6)*x3696))+(((0.56747)*x3697)));
evalcond[4]=((((-1.0)*x3697*x3704))+((sj1*x3703))+((r20*x3698))+((gconst25*r00*x3700))+(((-1.0)*cj0*gconst25*r10*x3702))+(((-1.0)*x3702*x3712))+((x3700*x3701))+(((-1.0)*x3711)));
evalcond[5]=((((-1.0)*x3707*x3712))+(((-1.0)*x3713))+(((-1.0)*gconst25*r20*x3702))+x3709+(((-1.0)*x3702*x3703))+((r00*sj0*x3698))+(((-1.0)*x3698*x3710))+((x3701*x3705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x3714 = IKatan2WithCheck(IkReal(px),IkReal(((-1.0)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x3714.valid){
continue;
}
CheckValue<IkReal> x3715=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst25*rxp1_2))+((gconst26*rxp0_2)))),-1);
if(!x3715.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3714.value)+(((1.5707963267949)*(x3715.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3716=IKcos(j0);
IkReal x3717=IKsin(j0);
IkReal x3718=((1.0)*x3716);
IkReal x3719=((1.0)*x3717);
evalcond[0]=((((-1.0)*r02*x3718))+(((-1.0)*r12*x3719)));
evalcond[1]=((((-1.0)*px*x3718))+(((-1.0)*py*x3719)));
evalcond[2]=((-1.0)+((gconst25*r11*x3717))+(((-1.0)*gconst26*r00*x3718))+(((-1.0)*gconst26*r10*x3719))+((gconst25*r01*x3716)));
evalcond[3]=((((-1.0)*gconst25*r00*x3718))+(((-1.0)*gconst26*r11*x3719))+(((-1.0)*gconst26*r01*x3718))+(((-1.0)*gconst25*r10*x3719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x3720=((-1.0)*r20);
IkReal x3721=x3475;
CheckValue<IkReal> x3723 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3720),IKFAST_ATAN2_MAGTHRESH);
if(!x3723.valid){
continue;
}
IkReal x3722=((-1.0)*(x3723.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst25;
cj5=gconst26;
j5=x3722;
IkReal gconst24=x3722;
IkReal gconst25=(r21*x3721);
IkReal gconst26=(x3720*x3721);
IkReal x3724=r22*r22;
CheckValue<IkReal> x3728=IKPowWithIntegerCheck(((-1.0)+x3724),-1);
if(!x3728.valid){
continue;
}
IkReal x3725=x3728.value;
if((((1.0)+(((-1.0)*x3724)))) < -0.00001)
continue;
IkReal x3726=IKsqrt(((1.0)+(((-1.0)*x3724))));
IkReal x3727=(x3725*x3726);
j1eval[0]=((IKabs(((((-1.0)*r02*r22*sj0*x3727))+((cj0*r12*r22*x3727)))))+(IKabs(((((-1.0)*x3724*x3727))+x3727))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x3729=((-1.0)*r20);
IkReal x3730=x3475;
CheckValue<IkReal> x3732 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3729),IKFAST_ATAN2_MAGTHRESH);
if(!x3732.valid){
continue;
}
IkReal x3731=((-1.0)*(x3732.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst25;
cj5=gconst26;
j5=x3731;
IkReal gconst24=x3731;
IkReal gconst25=(r21*x3730);
IkReal gconst26=(x3729*x3730);
IkReal x3733=r22*r22;
CheckValue<IkReal> x3737=IKPowWithIntegerCheck(((-1.0)+x3733),-1);
if(!x3737.valid){
continue;
}
IkReal x3734=x3737.value;
if((((1.0)+(((-1.0)*x3733)))) < -0.00001)
continue;
IkReal x3735=IKsqrt(((1.0)+(((-1.0)*x3733))));
IkReal x3736=(r22*x3734*x3735);
j1eval[0]=((IKabs(((((-1.0)*r02*sj0*x3736))+((cj0*r12*x3736)))))+(IKabs(x3735)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x3738=((1.0)*gconst26);
CheckValue<IkReal> x3740 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x3738))+((gconst25*r21)))),IkReal(((((-1.0)*cj0*r10*x3738))+((cj0*gconst25*r11))+(((-1.0)*gconst25*r01*sj0))+((gconst26*r00*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3740.valid){
continue;
}
IkReal x3739=x3740.value;
j1array[0]=((-1.0)*x3739);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3739)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3741=IKcos(j1);
IkReal x3742=IKsin(j1);
IkReal x3743=((1.0)*gconst25);
IkReal x3744=(cj0*x3741);
IkReal x3745=(sj0*x3741);
evalcond[0]=((((-1.0)*r21*x3742*x3743))+((gconst25*r11*x3744))+((gconst26*r20*x3742))+(((-1.0)*gconst26*r10*x3744))+(((-1.0)*r01*x3743*x3745))+((gconst26*r00*x3745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3746=((1.0)*sj4);
IkReal x3747=(r02*sj0);
IkReal x3748=(r22*sj1);
IkReal x3749=(cj1*cj4);
IkReal x3750=(cj0*r12);
IkReal x3751=(cj1*sj4);
IkReal x3752=(cj4*sj1);
if( IKabs((((sj1*sj4*x3750))+(((-1.0)*sj1*x3746*x3747))+((r22*x3751))+((cj4*x3748))+(((-1.0)*x3749*x3750))+((x3747*x3749)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3747*x3752))+(((-1.0)*x3746*x3748))+((r22*x3749))+((x3750*x3752))+((x3750*x3751))+(((-1.0)*cj1*x3746*x3747)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*sj4*x3750))+(((-1.0)*sj1*x3746*x3747))+((r22*x3751))+((cj4*x3748))+(((-1.0)*x3749*x3750))+((x3747*x3749))))+IKsqr(((((-1.0)*x3747*x3752))+(((-1.0)*x3746*x3748))+((r22*x3749))+((x3750*x3752))+((x3750*x3751))+(((-1.0)*cj1*x3746*x3747))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*sj4*x3750))+(((-1.0)*sj1*x3746*x3747))+((r22*x3751))+((cj4*x3748))+(((-1.0)*x3749*x3750))+((x3747*x3749))), ((((-1.0)*x3747*x3752))+(((-1.0)*x3746*x3748))+((r22*x3749))+((x3750*x3752))+((x3750*x3751))+(((-1.0)*cj1*x3746*x3747))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3753=IKsin(j2);
IkReal x3754=IKcos(j2);
IkReal x3755=(gconst25*sj1);
IkReal x3756=((1.17e-6)*cj4);
IkReal x3757=(cj1*sj0);
IkReal x3758=(gconst26*r01);
IkReal x3759=((1.0)*cj1);
IkReal x3760=(gconst26*r21);
IkReal x3761=((1.0)*cj4);
IkReal x3762=(sj0*sj1);
IkReal x3763=(cj0*py);
IkReal x3764=((1.0)*sj1);
IkReal x3765=(cj0*r12);
IkReal x3766=(sj4*x3754);
IkReal x3767=((1.0)*cj0*r10);
IkReal x3768=(sj4*x3753);
IkReal x3769=(cj0*gconst26*r11);
IkReal x3770=(x3753*x3761);
evalcond[0]=(((r22*sj1))+(((-1.0)*x3759*x3765))+x3766+((r02*x3757))+(((-1.0)*x3770)));
evalcond[1]=((((-1.0)*r22*x3759))+((r02*x3762))+(((-1.0)*x3764*x3765))+x3768+((cj4*x3754)));
evalcond[2]=(((x3754*x3756))+(((-0.56747)*x3753))+(((-1.08e-6)*x3754))+(((-1.0)*x3759*x3763))+(((1.17e-6)*x3768))+((px*x3757))+((pz*sj1)));
evalcond[3]=((0.73)+((px*x3762))+(((-1.0)*x3763*x3764))+(((-1.08e-6)*x3753))+(((-1.17e-6)*x3766))+(((-1.0)*pz*x3759))+((x3753*x3756))+(((0.56747)*x3754)));
evalcond[4]=((((-1.0)*cj0*gconst25*r10*x3759))+((x3757*x3758))+((r20*x3755))+(((-1.0)*x3754*x3761))+(((-1.0)*x3768))+((gconst25*r00*x3757))+(((-1.0)*x3759*x3769))+((sj1*x3760)));
evalcond[5]=(((r00*sj0*x3755))+(((-1.0)*x3755*x3767))+((x3758*x3762))+(((-1.0)*x3764*x3769))+(((-1.0)*x3759*x3760))+x3766+(((-1.0)*gconst25*r20*x3759))+(((-1.0)*x3770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x3771=((1.0)*gconst25);
CheckValue<IkReal> x3773 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj0*x3771))+((cj0*gconst25*r11))+((gconst26*r00*sj0))+(((-1.0)*cj0*gconst26*r10)))),IkReal(((((-1.0)*r21*x3771))+((gconst26*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3773.valid){
continue;
}
IkReal x3772=x3773.value;
j1array[0]=((-1.0)*x3772);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3772)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3774=IKsin(j1);
IkReal x3775=IKcos(j1);
IkReal x3776=(gconst26*x3774);
IkReal x3777=(gconst25*x3774);
evalcond[0]=(((r00*sj0*x3776))+((cj0*r11*x3777))+((gconst25*r21*x3775))+(((-1.0)*cj0*r10*x3776))+(((-1.0)*r01*sj0*x3777))+(((-1.0)*gconst26*r20*x3775)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3778=((1.0)*sj4);
IkReal x3779=(r02*sj0);
IkReal x3780=(r22*sj1);
IkReal x3781=(cj1*cj4);
IkReal x3782=(cj0*r12);
IkReal x3783=(cj1*sj4);
IkReal x3784=(cj4*sj1);
if( IKabs((((r22*x3783))+((x3779*x3781))+(((-1.0)*sj1*x3778*x3779))+((sj1*sj4*x3782))+(((-1.0)*x3781*x3782))+((cj4*x3780)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x3781))+(((-1.0)*x3778*x3780))+(((-1.0)*x3779*x3784))+((x3782*x3783))+((x3782*x3784))+(((-1.0)*cj1*x3778*x3779)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x3783))+((x3779*x3781))+(((-1.0)*sj1*x3778*x3779))+((sj1*sj4*x3782))+(((-1.0)*x3781*x3782))+((cj4*x3780))))+IKsqr((((r22*x3781))+(((-1.0)*x3778*x3780))+(((-1.0)*x3779*x3784))+((x3782*x3783))+((x3782*x3784))+(((-1.0)*cj1*x3778*x3779))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r22*x3783))+((x3779*x3781))+(((-1.0)*sj1*x3778*x3779))+((sj1*sj4*x3782))+(((-1.0)*x3781*x3782))+((cj4*x3780))), (((r22*x3781))+(((-1.0)*x3778*x3780))+(((-1.0)*x3779*x3784))+((x3782*x3783))+((x3782*x3784))+(((-1.0)*cj1*x3778*x3779))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3785=IKsin(j2);
IkReal x3786=IKcos(j2);
IkReal x3787=(gconst25*sj1);
IkReal x3788=((1.17e-6)*cj4);
IkReal x3789=(cj1*sj0);
IkReal x3790=(gconst26*r01);
IkReal x3791=((1.0)*cj1);
IkReal x3792=(gconst26*r21);
IkReal x3793=((1.0)*cj4);
IkReal x3794=(sj0*sj1);
IkReal x3795=(cj0*py);
IkReal x3796=((1.0)*sj1);
IkReal x3797=(cj0*r12);
IkReal x3798=(sj4*x3786);
IkReal x3799=((1.0)*cj0*r10);
IkReal x3800=(sj4*x3785);
IkReal x3801=(cj0*gconst26*r11);
IkReal x3802=(x3785*x3793);
evalcond[0]=(((r02*x3789))+(((-1.0)*x3791*x3797))+((r22*sj1))+(((-1.0)*x3802))+x3798);
evalcond[1]=((((-1.0)*x3796*x3797))+((r02*x3794))+(((-1.0)*r22*x3791))+x3800+((cj4*x3786)));
evalcond[2]=((((-1.0)*x3791*x3795))+((px*x3789))+(((-0.56747)*x3785))+((x3786*x3788))+(((1.17e-6)*x3800))+((pz*sj1))+(((-1.08e-6)*x3786)));
evalcond[3]=((0.73)+((x3785*x3788))+(((-1.0)*pz*x3791))+(((0.56747)*x3786))+(((-1.17e-6)*x3798))+(((-1.0)*x3795*x3796))+((px*x3794))+(((-1.08e-6)*x3785)));
evalcond[4]=(((gconst25*r00*x3789))+((x3789*x3790))+(((-1.0)*x3786*x3793))+(((-1.0)*x3791*x3801))+((r20*x3787))+((sj1*x3792))+(((-1.0)*cj0*gconst25*r10*x3791))+(((-1.0)*x3800)));
evalcond[5]=((((-1.0)*x3791*x3792))+(((-1.0)*x3796*x3801))+(((-1.0)*x3802))+x3798+((r00*sj0*x3787))+((x3790*x3794))+(((-1.0)*gconst25*r20*x3791))+(((-1.0)*x3787*x3799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3803=((-1.0)*r21);
IkReal x3805 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3805)==0){
continue;
}
IkReal x3804=pow(x3805,-0.5);
CheckValue<IkReal> x3806 = IKatan2WithCheck(IkReal(x3803),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3806.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x3806.value))));
IkReal gconst28=(x3803*x3804);
IkReal gconst29=((1.0)*r20*x3804);
CheckValue<IkReal> x3807 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3807.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3807.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x3808=((-1.0)*r21);
CheckValue<IkReal> x3811 = IKatan2WithCheck(IkReal(x3808),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3811.valid){
continue;
}
IkReal x3809=((1.0)*(x3811.value));
IkReal x3810=x3804;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x3809)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x3809)));
IkReal gconst28=(x3808*x3810);
IkReal gconst29=((1.0)*r20*x3810);
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x3812=((-1.0)*r21);
CheckValue<IkReal> x3815 = IKatan2WithCheck(IkReal(x3812),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3815.valid){
continue;
}
IkReal x3813=((1.0)*(x3815.value));
IkReal x3814=x3804;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x3813)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x3813)));
IkReal gconst28=(x3812*x3814);
IkReal gconst29=((1.0)*r20*x3814);
j0eval[0]=0;
j0eval[1]=((IKabs(r02))+(IKabs(r12)));
j0eval[2]=0;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x3816=((-1.0)*r21);
CheckValue<IkReal> x3819 = IKatan2WithCheck(IkReal(x3816),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3819.valid){
continue;
}
IkReal x3817=((1.0)*(x3819.value));
IkReal x3818=x3804;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x3817)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x3817)));
IkReal gconst28=(x3816*x3818);
IkReal gconst29=((1.0)*r20*x3818);
j0eval[0]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x3820=((-1.0)*r21);
CheckValue<IkReal> x3822 = IKatan2WithCheck(IkReal(x3820),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3822.valid){
continue;
}
IkReal x3821=((1.0)*(x3822.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x3821)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst27=((3.14159265358979)+(((-1.0)*x3821)));
IkReal gconst28=x3820;
IkReal gconst29=((1.0)*r20);
IkReal x3823=((((1.0)*r21*rxp1_2))+(((1.0)*r20*rxp0_2)));
j0eval[0]=x3823;
j0eval[1]=IKsign(x3823);
j0eval[2]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x3824=((-1.0)*r21);
CheckValue<IkReal> x3826 = IKatan2WithCheck(IkReal(x3824),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3826.valid){
continue;
}
IkReal x3825=((1.0)*(x3826.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x3825)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst27=((3.14159265358979)+(((-1.0)*x3825)));
IkReal gconst28=x3824;
IkReal gconst29=((1.0)*r20);
j0eval[0]=0;
j0eval[1]=1.0;
j0eval[2]=0;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x3827 = IKatan2WithCheck(IkReal(r02),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3827.valid){
continue;
}
CheckValue<IkReal> x3828=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r20))+(((-1.0)*gconst29*r21)))),-1);
if(!x3828.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3827.value)+(((1.5707963267949)*(x3828.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3829=IKcos(j0);
IkReal x3830=IKsin(j0);
IkReal x3831=((1.0)*x3829);
IkReal x3832=(r11*x3830);
IkReal x3833=((1.0)*x3830);
IkReal x3834=(r10*x3833);
evalcond[0]=((((-1.0)*r12*x3833))+(((-1.0)*r02*x3831)));
evalcond[1]=((((-1.0)*py*x3833))+(((-1.0)*px*x3831)));
evalcond[2]=((-1.0)+((gconst28*r01*x3829))+(((-1.0)*gconst29*x3834))+(((-1.0)*gconst29*r00*x3831))+((gconst28*x3832)));
evalcond[3]=((((-1.0)*gconst28*r00*x3831))+(((-1.0)*gconst28*x3834))+(((-1.0)*gconst29*r01*x3831))+(((-1.0)*gconst29*x3832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x3835=((1.0)*gconst28);
CheckValue<IkReal> x3837 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj0*x3835))+((cj0*gconst28*r11))+(((-1.0)*cj0*gconst29*r10))+((gconst29*r00*sj0)))),IkReal(((((-1.0)*r21*x3835))+((gconst29*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3837.valid){
continue;
}
IkReal x3836=x3837.value;
j1array[0]=((-1.0)*x3836);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3836)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3838=IKsin(j1);
IkReal x3839=IKcos(j1);
IkReal x3840=((1.0)*x3838);
evalcond[0]=((((-1.0)*gconst28*r01*sj0*x3840))+((gconst28*r21*x3839))+((gconst29*r00*sj0*x3838))+((cj0*gconst28*r11*x3838))+(((-1.0)*gconst29*r20*x3839))+(((-1.0)*cj0*gconst29*r10*x3840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3841=((1.0)*cj4);
IkReal x3842=(r02*sj0);
IkReal x3843=(cj0*cj1*r12);
IkReal x3844=(cj0*r12*sj1);
IkReal x3845=((1.0)*sj4*x3842);
if( IKabs(((((-1.0)*sj1*x3845))+(((-1.0)*x3841*x3843))+((sj4*x3844))+((cj1*cj4*x3842)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x3841*x3842))+((sj4*x3843))+(((-1.0)*cj1*x3845))+((cj4*x3844)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj1*x3845))+(((-1.0)*x3841*x3843))+((sj4*x3844))+((cj1*cj4*x3842))))+IKsqr(((((-1.0)*sj1*x3841*x3842))+((sj4*x3843))+(((-1.0)*cj1*x3845))+((cj4*x3844))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj1*x3845))+(((-1.0)*x3841*x3843))+((sj4*x3844))+((cj1*cj4*x3842))), ((((-1.0)*sj1*x3841*x3842))+((sj4*x3843))+(((-1.0)*cj1*x3845))+((cj4*x3844))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3846=IKcos(j2);
IkReal x3847=IKsin(j2);
IkReal x3848=((1.17e-6)*cj4);
IkReal x3849=((1.0)*cj0);
IkReal x3850=(gconst29*sj1);
IkReal x3851=(cj1*gconst28);
IkReal x3852=(cj1*sj0);
IkReal x3853=(gconst28*sj1);
IkReal x3854=((1.0)*cj4);
IkReal x3855=((1.0)*cj1);
IkReal x3856=(r00*sj0);
IkReal x3857=(sj0*sj1);
IkReal x3858=(sj4*x3846);
IkReal x3859=(sj4*x3847);
IkReal x3860=(x3847*x3854);
evalcond[0]=(((r02*x3857))+(((-1.0)*r12*sj1*x3849))+x3859+((cj4*x3846)));
evalcond[1]=(((r02*x3852))+(((-1.0)*x3860))+x3858+(((-1.0)*cj1*r12*x3849)));
evalcond[2]=(((x3846*x3848))+(((-1.08e-6)*x3846))+(((1.17e-6)*x3859))+(((-1.0)*cj1*py*x3849))+((px*x3852))+((pz*sj1))+(((-0.56747)*x3847)));
evalcond[3]=((0.73)+(((0.56747)*x3846))+(((-1.0)*pz*x3855))+((x3847*x3848))+(((-1.08e-6)*x3847))+(((-1.17e-6)*x3858))+((px*x3857))+(((-1.0)*py*sj1*x3849)));
evalcond[4]=(((r21*x3850))+((gconst29*r01*x3852))+((r20*x3853))+(((-1.0)*x3859))+((x3851*x3856))+(((-1.0)*x3846*x3854))+(((-1.0)*r10*x3849*x3851))+(((-1.0)*cj1*gconst29*r11*x3849)));
evalcond[5]=((((-1.0)*x3860))+((r01*sj0*x3850))+(((-1.0)*r20*x3851))+(((-1.0)*r11*x3849*x3850))+((x3853*x3856))+x3858+(((-1.0)*gconst29*r21*x3855))+(((-1.0)*r10*x3849*x3853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x3861=IKPowWithIntegerCheck(IKsign((((gconst29*rxp0_2))+(((-1.0)*gconst28*rxp1_2)))),-1);
if(!x3861.valid){
continue;
}
CheckValue<IkReal> x3862 = IKatan2WithCheck(IkReal(px),IkReal(((-1.0)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x3862.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3861.value)))+(x3862.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3863=IKcos(j0);
IkReal x3864=IKsin(j0);
IkReal x3865=((1.0)*x3863);
IkReal x3866=(r11*x3864);
IkReal x3867=((1.0)*x3864);
IkReal x3868=(r10*x3867);
evalcond[0]=((((-1.0)*r02*x3865))+(((-1.0)*r12*x3867)));
evalcond[1]=((((-1.0)*py*x3867))+(((-1.0)*px*x3865)));
evalcond[2]=((-1.0)+(((-1.0)*gconst29*x3868))+((gconst28*x3866))+((gconst28*r01*x3863))+(((-1.0)*gconst29*r00*x3865)));
evalcond[3]=((((-1.0)*gconst29*x3866))+(((-1.0)*gconst28*r00*x3865))+(((-1.0)*gconst29*r01*x3865))+(((-1.0)*gconst28*x3868)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x3869=((1.0)*gconst28);
CheckValue<IkReal> x3871 = IKatan2WithCheck(IkReal((((cj0*gconst28*r11))+(((-1.0)*r01*sj0*x3869))+(((-1.0)*cj0*gconst29*r10))+((gconst29*r00*sj0)))),IkReal(((((-1.0)*r21*x3869))+((gconst29*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3871.valid){
continue;
}
IkReal x3870=x3871.value;
j1array[0]=((-1.0)*x3870);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3870)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3872=IKsin(j1);
IkReal x3873=IKcos(j1);
IkReal x3874=((1.0)*x3872);
evalcond[0]=(((gconst29*r00*sj0*x3872))+(((-1.0)*gconst29*r20*x3873))+(((-1.0)*cj0*gconst29*r10*x3874))+((gconst28*r21*x3873))+(((-1.0)*gconst28*r01*sj0*x3874))+((cj0*gconst28*r11*x3872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3875=((1.0)*cj4);
IkReal x3876=(r02*sj0);
IkReal x3877=(cj0*cj1*r12);
IkReal x3878=(cj0*r12*sj1);
IkReal x3879=((1.0)*sj4*x3876);
if( IKabs((((sj4*x3878))+(((-1.0)*x3875*x3877))+(((-1.0)*sj1*x3879))+((cj1*cj4*x3876)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x3875*x3876))+((sj4*x3877))+((cj4*x3878))+(((-1.0)*cj1*x3879)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj4*x3878))+(((-1.0)*x3875*x3877))+(((-1.0)*sj1*x3879))+((cj1*cj4*x3876))))+IKsqr(((((-1.0)*sj1*x3875*x3876))+((sj4*x3877))+((cj4*x3878))+(((-1.0)*cj1*x3879))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj4*x3878))+(((-1.0)*x3875*x3877))+(((-1.0)*sj1*x3879))+((cj1*cj4*x3876))), ((((-1.0)*sj1*x3875*x3876))+((sj4*x3877))+((cj4*x3878))+(((-1.0)*cj1*x3879))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3880=IKcos(j2);
IkReal x3881=IKsin(j2);
IkReal x3882=((1.17e-6)*cj4);
IkReal x3883=((1.0)*cj0);
IkReal x3884=(gconst29*sj1);
IkReal x3885=(cj1*gconst28);
IkReal x3886=(cj1*sj0);
IkReal x3887=(gconst28*sj1);
IkReal x3888=((1.0)*cj4);
IkReal x3889=((1.0)*cj1);
IkReal x3890=(r00*sj0);
IkReal x3891=(sj0*sj1);
IkReal x3892=(sj4*x3880);
IkReal x3893=(sj4*x3881);
IkReal x3894=(x3881*x3888);
evalcond[0]=((((-1.0)*r12*sj1*x3883))+x3893+((cj4*x3880))+((r02*x3891)));
evalcond[1]=(((r02*x3886))+(((-1.0)*cj1*r12*x3883))+x3892+(((-1.0)*x3894)));
evalcond[2]=((((-1.08e-6)*x3880))+(((1.17e-6)*x3893))+((x3880*x3882))+(((-0.56747)*x3881))+(((-1.0)*cj1*py*x3883))+((px*x3886))+((pz*sj1)));
evalcond[3]=((0.73)+(((-1.08e-6)*x3881))+(((-1.17e-6)*x3892))+((px*x3891))+((x3881*x3882))+(((-1.0)*pz*x3889))+(((0.56747)*x3880))+(((-1.0)*py*sj1*x3883)));
evalcond[4]=((((-1.0)*x3893))+(((-1.0)*x3880*x3888))+((r21*x3884))+((x3885*x3890))+(((-1.0)*cj1*gconst29*r11*x3883))+((r20*x3887))+((gconst29*r01*x3886))+(((-1.0)*r10*x3883*x3885)));
evalcond[5]=((((-1.0)*r11*x3883*x3884))+(((-1.0)*r20*x3885))+(((-1.0)*gconst29*r21*x3889))+((x3887*x3890))+x3892+(((-1.0)*r10*x3883*x3887))+(((-1.0)*x3894))+((r01*sj0*x3884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x3895=((-1.0)*pz);
IkReal x3896=((-1.0)*r21);
CheckValue<IkReal> x3899 = IKatan2WithCheck(IkReal(x3896),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3899.valid){
continue;
}
IkReal x3897=((1.0)*(x3899.value));
IkReal x3898=x3804;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x3897)));
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x3895);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x3895);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x3895);
rxp2_2=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x3897)));
IkReal gconst28=(x3896*x3898);
IkReal gconst29=((1.0)*r20*x3898);
j0eval[0]=0;
j0eval[1]=((IKabs(r02))+(IKabs(r12)));
j0eval[2]=0;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x3900=((-1.0)*pz);
IkReal x3901=((-1.0)*r21);
CheckValue<IkReal> x3904 = IKatan2WithCheck(IkReal(x3901),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3904.valid){
continue;
}
IkReal x3902=((1.0)*(x3904.value));
IkReal x3903=x3804;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x3902)));
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x3900);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x3900);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x3900);
rxp2_2=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x3902)));
IkReal gconst28=(x3901*x3903);
IkReal gconst29=((1.0)*r20*x3903);
j0eval[0]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x3905 = IKatan2WithCheck(IkReal(((((-1.0)*gconst28*r00))+(((-1.0)*gconst29*r01)))),IkReal((((gconst28*r10))+((gconst29*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3905.valid){
continue;
}
CheckValue<IkReal> x3906=IKPowWithIntegerCheck(IKsign((r22*(((((-1.0)*(gconst28*gconst28)))+(((-1.0)*(gconst29*gconst29))))))),-1);
if(!x3906.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3905.value)+(((1.5707963267949)*(x3906.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3907=IKsin(j0);
IkReal x3908=IKcos(j0);
IkReal x3909=((1.0)*gconst29);
IkReal x3910=((1.0)*gconst28);
IkReal x3911=(r01*x3908);
IkReal x3912=(r10*x3907);
IkReal x3913=(r11*x3907);
IkReal x3914=(r00*x3908);
evalcond[0]=((((-1.0)*r02*x3908))+(((-1.0)*r12*x3907)));
evalcond[1]=((-1.0)+(((-1.0)*x3909*x3914))+(((-1.0)*x3909*x3912))+((gconst28*x3913))+((gconst28*x3911)));
evalcond[2]=((((-1.0)*x3909*x3911))+(((-1.0)*x3909*x3913))+(((-1.0)*x3910*x3912))+(((-1.0)*x3910*x3914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x3915=((-1.0)*pz);
IkReal x3916=((-1.0)*r21);
CheckValue<IkReal> x3919 = IKatan2WithCheck(IkReal(x3916),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3919.valid){
continue;
}
IkReal x3917=((1.0)*(x3919.value));
IkReal x3918=x3804;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x3917)));
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x3915);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x3915);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x3915);
rxp2_2=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x3917)));
IkReal gconst28=(x3916*x3918);
IkReal gconst29=((1.0)*r20*x3918);
IkReal x3920=r22*r22;
CheckValue<IkReal> x3924=IKPowWithIntegerCheck(((-1.0)+x3920),-1);
if(!x3924.valid){
continue;
}
IkReal x3921=x3924.value;
if((((1.0)+(((-1.0)*x3920)))) < -0.00001)
continue;
IkReal x3922=IKsqrt(((1.0)+(((-1.0)*x3920))));
IkReal x3923=(r22*x3921*x3922);
j1eval[0]=((IKabs(((((-1.0)*cj0*r12*x3923))+((r02*sj0*x3923)))))+(IKabs(x3922)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x3925=((-1.0)*pz);
IkReal x3926=((-1.0)*r21);
CheckValue<IkReal> x3929 = IKatan2WithCheck(IkReal(x3926),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3929.valid){
continue;
}
IkReal x3927=((1.0)*(x3929.value));
IkReal x3928=x3804;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x3927)));
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x3925);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x3925);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x3925);
rxp2_2=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x3927)));
IkReal gconst28=(x3926*x3928);
IkReal gconst29=((1.0)*r20*x3928);
IkReal x3930=r22*r22;
CheckValue<IkReal> x3934=IKPowWithIntegerCheck(((-1.0)+x3930),-1);
if(!x3934.valid){
continue;
}
IkReal x3931=x3934.value;
if((((1.0)+(((-1.0)*x3930)))) < -0.00001)
continue;
IkReal x3932=IKsqrt(((1.0)+(((-1.0)*x3930))));
IkReal x3933=(x3931*x3932);
j1eval[0]=((IKabs(((((-1.0)*x3930*x3933))+x3933)))+(IKabs(((((-1.0)*cj0*r12*r22*x3933))+((r02*r22*sj0*x3933))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x3935=((1.0)*gconst29);
CheckValue<IkReal> x3937 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x3935))+((gconst28*r21)))),IkReal((((cj0*gconst28*r11))+(((-1.0)*gconst28*r01*sj0))+(((-1.0)*cj0*r10*x3935))+((gconst29*r00*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3937.valid){
continue;
}
IkReal x3936=x3937.value;
j1array[0]=((-1.0)*x3936);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3936)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3938=IKcos(j1);
IkReal x3939=IKsin(j1);
IkReal x3940=(gconst28*x3938);
IkReal x3941=(gconst29*x3938);
evalcond[0]=((((-1.0)*cj0*r10*x3941))+((gconst29*r20*x3939))+((cj0*r11*x3940))+((r00*sj0*x3941))+(((-1.0)*gconst28*r21*x3939))+(((-1.0)*r01*sj0*x3940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3942=((1.0)*sj4);
IkReal x3943=(r02*sj0);
IkReal x3944=(r22*sj1);
IkReal x3945=(cj1*cj4);
IkReal x3946=(cj0*r12);
IkReal x3947=(cj1*sj4);
IkReal x3948=(cj4*sj1);
if( IKabs((((r22*x3947))+((sj1*sj4*x3946))+((x3943*x3945))+((cj4*x3944))+(((-1.0)*sj1*x3942*x3943))+(((-1.0)*x3945*x3946)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x3945))+(((-1.0)*x3942*x3944))+(((-1.0)*cj1*x3942*x3943))+((x3946*x3948))+((x3946*x3947))+(((-1.0)*x3943*x3948)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x3947))+((sj1*sj4*x3946))+((x3943*x3945))+((cj4*x3944))+(((-1.0)*sj1*x3942*x3943))+(((-1.0)*x3945*x3946))))+IKsqr((((r22*x3945))+(((-1.0)*x3942*x3944))+(((-1.0)*cj1*x3942*x3943))+((x3946*x3948))+((x3946*x3947))+(((-1.0)*x3943*x3948))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r22*x3947))+((sj1*sj4*x3946))+((x3943*x3945))+((cj4*x3944))+(((-1.0)*sj1*x3942*x3943))+(((-1.0)*x3945*x3946))), (((r22*x3945))+(((-1.0)*x3942*x3944))+(((-1.0)*cj1*x3942*x3943))+((x3946*x3948))+((x3946*x3947))+(((-1.0)*x3943*x3948))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3949=IKsin(j2);
IkReal x3950=IKcos(j2);
IkReal x3951=((1.17e-6)*cj4);
IkReal x3952=((1.0)*cj0);
IkReal x3953=(gconst29*r11);
IkReal x3954=(cj1*gconst28);
IkReal x3955=(gconst28*sj1);
IkReal x3956=((1.0)*cj1);
IkReal x3957=((1.0)*cj4);
IkReal x3958=(cj1*sj0);
IkReal x3959=(gconst29*r01);
IkReal x3960=(r00*sj0);
IkReal x3961=(gconst29*r21);
IkReal x3962=(sj0*sj1);
IkReal x3963=(sj4*x3950);
IkReal x3964=(sj4*x3949);
IkReal x3965=(x3949*x3957);
evalcond[0]=((((-1.0)*cj1*r12*x3952))+(((-1.0)*x3965))+((r22*sj1))+x3963+((r02*x3958)));
evalcond[1]=(((r02*x3962))+(((-1.0)*r22*x3956))+x3964+((cj4*x3950))+(((-1.0)*r12*sj1*x3952)));
evalcond[2]=((((1.17e-6)*x3964))+(((-0.56747)*x3949))+(((-1.08e-6)*x3950))+((x3950*x3951))+((pz*sj1)));
evalcond[3]=((0.73)+(((0.56747)*x3950))+((x3949*x3951))+(((-1.08e-6)*x3949))+(((-1.17e-6)*x3963))+(((-1.0)*pz*x3956)));
evalcond[4]=((((-1.0)*r10*x3952*x3954))+((r20*x3955))+(((-1.0)*cj1*x3952*x3953))+((x3958*x3959))+((x3954*x3960))+(((-1.0)*x3950*x3957))+(((-1.0)*x3964))+((sj1*x3961)));
evalcond[5]=((((-1.0)*r10*x3952*x3955))+(((-1.0)*x3965))+(((-1.0)*r20*x3954))+((x3955*x3960))+x3963+(((-1.0)*x3956*x3961))+(((-1.0)*sj1*x3952*x3953))+((x3959*x3962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x3966=((1.0)*gconst28);
CheckValue<IkReal> x3968 = IKatan2WithCheck(IkReal((((cj0*gconst28*r11))+(((-1.0)*r01*sj0*x3966))+(((-1.0)*cj0*gconst29*r10))+((gconst29*r00*sj0)))),IkReal(((((-1.0)*r21*x3966))+((gconst29*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3968.valid){
continue;
}
IkReal x3967=x3968.value;
j1array[0]=((-1.0)*x3967);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3967)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3969=IKsin(j1);
IkReal x3970=IKcos(j1);
IkReal x3971=((1.0)*x3969);
evalcond[0]=((((-1.0)*gconst29*r20*x3970))+(((-1.0)*gconst28*r01*sj0*x3971))+((cj0*gconst28*r11*x3969))+((gconst28*r21*x3970))+(((-1.0)*cj0*gconst29*r10*x3971))+((gconst29*r00*sj0*x3969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3972=((1.0)*sj4);
IkReal x3973=(r02*sj0);
IkReal x3974=(r22*sj1);
IkReal x3975=(cj1*cj4);
IkReal x3976=(cj0*r12);
IkReal x3977=(cj1*sj4);
IkReal x3978=(cj4*sj1);
if( IKabs(((((-1.0)*x3975*x3976))+((x3973*x3975))+((r22*x3977))+(((-1.0)*sj1*x3972*x3973))+((sj1*sj4*x3976))+((cj4*x3974)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3972*x3974))+((x3976*x3978))+((x3976*x3977))+((r22*x3975))+(((-1.0)*cj1*x3972*x3973))+(((-1.0)*x3973*x3978)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3975*x3976))+((x3973*x3975))+((r22*x3977))+(((-1.0)*sj1*x3972*x3973))+((sj1*sj4*x3976))+((cj4*x3974))))+IKsqr(((((-1.0)*x3972*x3974))+((x3976*x3978))+((x3976*x3977))+((r22*x3975))+(((-1.0)*cj1*x3972*x3973))+(((-1.0)*x3973*x3978))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x3975*x3976))+((x3973*x3975))+((r22*x3977))+(((-1.0)*sj1*x3972*x3973))+((sj1*sj4*x3976))+((cj4*x3974))), ((((-1.0)*x3972*x3974))+((x3976*x3978))+((x3976*x3977))+((r22*x3975))+(((-1.0)*cj1*x3972*x3973))+(((-1.0)*x3973*x3978))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3979=IKsin(j2);
IkReal x3980=IKcos(j2);
IkReal x3981=((1.17e-6)*cj4);
IkReal x3982=((1.0)*cj0);
IkReal x3983=(gconst29*r11);
IkReal x3984=(cj1*gconst28);
IkReal x3985=(gconst28*sj1);
IkReal x3986=((1.0)*cj1);
IkReal x3987=((1.0)*cj4);
IkReal x3988=(cj1*sj0);
IkReal x3989=(gconst29*r01);
IkReal x3990=(r00*sj0);
IkReal x3991=(gconst29*r21);
IkReal x3992=(sj0*sj1);
IkReal x3993=(sj4*x3980);
IkReal x3994=(sj4*x3979);
IkReal x3995=(x3979*x3987);
evalcond[0]=((((-1.0)*x3995))+(((-1.0)*cj1*r12*x3982))+((r22*sj1))+x3993+((r02*x3988)));
evalcond[1]=((((-1.0)*r12*sj1*x3982))+(((-1.0)*r22*x3986))+((r02*x3992))+x3994+((cj4*x3980)));
evalcond[2]=((((1.17e-6)*x3994))+(((-1.08e-6)*x3980))+((x3980*x3981))+(((-0.56747)*x3979))+((pz*sj1)));
evalcond[3]=((0.73)+(((-1.08e-6)*x3979))+(((0.56747)*x3980))+(((-1.0)*pz*x3986))+((x3979*x3981))+(((-1.17e-6)*x3993)));
evalcond[4]=(((x3988*x3989))+(((-1.0)*r10*x3982*x3984))+((r20*x3985))+(((-1.0)*x3994))+((sj1*x3991))+(((-1.0)*cj1*x3982*x3983))+(((-1.0)*x3980*x3987))+((x3984*x3990)));
evalcond[5]=(((x3989*x3992))+(((-1.0)*sj1*x3982*x3983))+(((-1.0)*x3995))+(((-1.0)*r10*x3982*x3985))+(((-1.0)*r20*x3984))+x3993+(((-1.0)*x3986*x3991))+((x3985*x3990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x3996 = IKatan2WithCheck(IkReal(r02),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3996.valid){
continue;
}
CheckValue<IkReal> x3997=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r20))+(((-1.0)*gconst29*r21)))),-1);
if(!x3997.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3996.value)+(((1.5707963267949)*(x3997.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3998=IKsin(j0);
IkReal x3999=IKcos(j0);
IkReal x4000=((1.0)*gconst29);
IkReal x4001=((1.0)*gconst28);
IkReal x4002=(r01*x3999);
IkReal x4003=(r10*x3998);
IkReal x4004=(r11*x3998);
IkReal x4005=(r00*x3999);
evalcond[0]=((((-1.0)*r12*x3998))+(((-1.0)*r02*x3999)));
evalcond[1]=((-1.0)+(((-1.0)*x4000*x4003))+(((-1.0)*x4000*x4005))+((gconst28*x4004))+((gconst28*x4002)));
evalcond[2]=((((-1.0)*x4001*x4005))+(((-1.0)*x4001*x4003))+(((-1.0)*x4000*x4002))+(((-1.0)*x4000*x4004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x4006=((-1.0)*pz);
IkReal x4007=((-1.0)*r21);
CheckValue<IkReal> x4010 = IKatan2WithCheck(IkReal(x4007),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4010.valid){
continue;
}
IkReal x4008=((1.0)*(x4010.value));
IkReal x4009=x3804;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x4008)));
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x4006);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x4006);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x4006);
rxp2_2=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x4008)));
IkReal gconst28=(x4007*x4009);
IkReal gconst29=((1.0)*r20*x4009);
IkReal x4011=r22*r22;
CheckValue<IkReal> x4015=IKPowWithIntegerCheck(((-1.0)+x4011),-1);
if(!x4015.valid){
continue;
}
IkReal x4012=x4015.value;
if((((1.0)+(((-1.0)*x4011)))) < -0.00001)
continue;
IkReal x4013=IKsqrt(((1.0)+(((-1.0)*x4011))));
IkReal x4014=(r22*x4012*x4013);
j1eval[0]=((IKabs((((r02*sj0*x4014))+(((-1.0)*cj0*r12*x4014)))))+(IKabs(x4013)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x4016=((-1.0)*pz);
IkReal x4017=((-1.0)*r21);
CheckValue<IkReal> x4020 = IKatan2WithCheck(IkReal(x4017),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4020.valid){
continue;
}
IkReal x4018=((1.0)*(x4020.value));
IkReal x4019=x3804;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x4018)));
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x4016);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x4016);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x4016);
rxp2_2=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x4018)));
IkReal gconst28=(x4017*x4019);
IkReal gconst29=((1.0)*r20*x4019);
IkReal x4021=r22*r22;
CheckValue<IkReal> x4025=IKPowWithIntegerCheck(((-1.0)+x4021),-1);
if(!x4025.valid){
continue;
}
IkReal x4022=x4025.value;
if((((1.0)+(((-1.0)*x4021)))) < -0.00001)
continue;
IkReal x4023=IKsqrt(((1.0)+(((-1.0)*x4021))));
IkReal x4024=(x4022*x4023);
j1eval[0]=((IKabs(((((-1.0)*cj0*r12*r22*x4024))+((r02*r22*sj0*x4024)))))+(IKabs((x4024+(((-1.0)*x4021*x4024))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x4026=((1.0)*gconst29);
CheckValue<IkReal> x4028 = IKatan2WithCheck(IkReal((((gconst28*r21))+(((-1.0)*r20*x4026)))),IkReal((((cj0*gconst28*r11))+(((-1.0)*gconst28*r01*sj0))+(((-1.0)*cj0*r10*x4026))+((gconst29*r00*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4028.valid){
continue;
}
IkReal x4027=x4028.value;
j1array[0]=((-1.0)*x4027);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4027)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4029=IKcos(j1);
IkReal x4030=IKsin(j1);
IkReal x4031=(gconst28*x4029);
IkReal x4032=(gconst29*x4029);
evalcond[0]=(((gconst29*r20*x4030))+(((-1.0)*cj0*r10*x4032))+(((-1.0)*gconst28*r21*x4030))+((r00*sj0*x4032))+(((-1.0)*r01*sj0*x4031))+((cj0*r11*x4031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4033=((1.0)*sj4);
IkReal x4034=(r02*sj0);
IkReal x4035=(r22*sj1);
IkReal x4036=(cj1*cj4);
IkReal x4037=(cj0*r12);
IkReal x4038=(cj1*sj4);
IkReal x4039=(cj4*sj1);
if( IKabs(((((-1.0)*x4036*x4037))+(((-1.0)*sj1*x4033*x4034))+((x4034*x4036))+((sj1*sj4*x4037))+((r22*x4038))+((cj4*x4035)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x4034*x4039))+(((-1.0)*cj1*x4033*x4034))+((x4037*x4039))+((x4037*x4038))+(((-1.0)*x4033*x4035))+((r22*x4036)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4036*x4037))+(((-1.0)*sj1*x4033*x4034))+((x4034*x4036))+((sj1*sj4*x4037))+((r22*x4038))+((cj4*x4035))))+IKsqr(((((-1.0)*x4034*x4039))+(((-1.0)*cj1*x4033*x4034))+((x4037*x4039))+((x4037*x4038))+(((-1.0)*x4033*x4035))+((r22*x4036))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x4036*x4037))+(((-1.0)*sj1*x4033*x4034))+((x4034*x4036))+((sj1*sj4*x4037))+((r22*x4038))+((cj4*x4035))), ((((-1.0)*x4034*x4039))+(((-1.0)*cj1*x4033*x4034))+((x4037*x4039))+((x4037*x4038))+(((-1.0)*x4033*x4035))+((r22*x4036))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4040=IKsin(j2);
IkReal x4041=IKcos(j2);
IkReal x4042=((1.17e-6)*cj4);
IkReal x4043=((1.0)*cj0);
IkReal x4044=(gconst29*r11);
IkReal x4045=(cj1*gconst28);
IkReal x4046=(gconst28*sj1);
IkReal x4047=((1.0)*cj1);
IkReal x4048=((1.0)*cj4);
IkReal x4049=(cj1*sj0);
IkReal x4050=(gconst29*r01);
IkReal x4051=(r00*sj0);
IkReal x4052=(gconst29*r21);
IkReal x4053=(sj0*sj1);
IkReal x4054=(sj4*x4041);
IkReal x4055=(sj4*x4040);
IkReal x4056=(x4040*x4048);
evalcond[0]=(((r22*sj1))+((r02*x4049))+x4054+(((-1.0)*cj1*r12*x4043))+(((-1.0)*x4056)));
evalcond[1]=(((r02*x4053))+(((-1.0)*r12*sj1*x4043))+x4055+((cj4*x4041))+(((-1.0)*r22*x4047)));
evalcond[2]=(((x4041*x4042))+(((-0.56747)*x4040))+(((1.17e-6)*x4055))+(((-1.08e-6)*x4041))+((pz*sj1)));
evalcond[3]=((0.73)+(((-1.0)*pz*x4047))+((x4040*x4042))+(((-1.17e-6)*x4054))+(((-1.08e-6)*x4040))+(((0.56747)*x4041)));
evalcond[4]=(((x4049*x4050))+((x4045*x4051))+(((-1.0)*r10*x4043*x4045))+(((-1.0)*x4041*x4048))+((r20*x4046))+(((-1.0)*cj1*x4043*x4044))+(((-1.0)*x4055))+((sj1*x4052)));
evalcond[5]=(((x4046*x4051))+(((-1.0)*r10*x4043*x4046))+x4054+(((-1.0)*x4047*x4052))+(((-1.0)*sj1*x4043*x4044))+(((-1.0)*x4056))+((x4050*x4053))+(((-1.0)*r20*x4045)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x4057=((1.0)*gconst28);
CheckValue<IkReal> x4059 = IKatan2WithCheck(IkReal((((cj0*gconst28*r11))+(((-1.0)*r01*sj0*x4057))+(((-1.0)*cj0*gconst29*r10))+((gconst29*r00*sj0)))),IkReal(((((-1.0)*r21*x4057))+((gconst29*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4059.valid){
continue;
}
IkReal x4058=x4059.value;
j1array[0]=((-1.0)*x4058);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4058)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4060=IKsin(j1);
IkReal x4061=IKcos(j1);
IkReal x4062=((1.0)*x4060);
evalcond[0]=((((-1.0)*cj0*gconst29*r10*x4062))+(((-1.0)*gconst28*r01*sj0*x4062))+((gconst28*r21*x4061))+(((-1.0)*gconst29*r20*x4061))+((cj0*gconst28*r11*x4060))+((gconst29*r00*sj0*x4060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4063=((1.0)*sj4);
IkReal x4064=(r02*sj0);
IkReal x4065=(r22*sj1);
IkReal x4066=(cj1*cj4);
IkReal x4067=(cj0*r12);
IkReal x4068=(cj1*sj4);
IkReal x4069=(cj4*sj1);
if( IKabs(((((-1.0)*sj1*x4063*x4064))+((x4064*x4066))+(((-1.0)*x4066*x4067))+((cj4*x4065))+((r22*x4068))+((sj1*sj4*x4067)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x4067*x4068))+((x4067*x4069))+(((-1.0)*x4064*x4069))+(((-1.0)*x4063*x4065))+(((-1.0)*cj1*x4063*x4064))+((r22*x4066)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj1*x4063*x4064))+((x4064*x4066))+(((-1.0)*x4066*x4067))+((cj4*x4065))+((r22*x4068))+((sj1*sj4*x4067))))+IKsqr((((x4067*x4068))+((x4067*x4069))+(((-1.0)*x4064*x4069))+(((-1.0)*x4063*x4065))+(((-1.0)*cj1*x4063*x4064))+((r22*x4066))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj1*x4063*x4064))+((x4064*x4066))+(((-1.0)*x4066*x4067))+((cj4*x4065))+((r22*x4068))+((sj1*sj4*x4067))), (((x4067*x4068))+((x4067*x4069))+(((-1.0)*x4064*x4069))+(((-1.0)*x4063*x4065))+(((-1.0)*cj1*x4063*x4064))+((r22*x4066))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4070=IKsin(j2);
IkReal x4071=IKcos(j2);
IkReal x4072=((1.17e-6)*cj4);
IkReal x4073=((1.0)*cj0);
IkReal x4074=(gconst29*r11);
IkReal x4075=(cj1*gconst28);
IkReal x4076=(gconst28*sj1);
IkReal x4077=((1.0)*cj1);
IkReal x4078=((1.0)*cj4);
IkReal x4079=(cj1*sj0);
IkReal x4080=(gconst29*r01);
IkReal x4081=(r00*sj0);
IkReal x4082=(gconst29*r21);
IkReal x4083=(sj0*sj1);
IkReal x4084=(sj4*x4071);
IkReal x4085=(sj4*x4070);
IkReal x4086=(x4070*x4078);
evalcond[0]=((((-1.0)*x4086))+((r22*sj1))+(((-1.0)*cj1*r12*x4073))+x4084+((r02*x4079)));
evalcond[1]=(((cj4*x4071))+(((-1.0)*r22*x4077))+x4085+((r02*x4083))+(((-1.0)*r12*sj1*x4073)));
evalcond[2]=((((-1.08e-6)*x4071))+((x4071*x4072))+(((-0.56747)*x4070))+((pz*sj1))+(((1.17e-6)*x4085)));
evalcond[3]=((0.73)+(((-1.08e-6)*x4070))+(((-1.17e-6)*x4084))+(((-1.0)*pz*x4077))+((x4070*x4072))+(((0.56747)*x4071)));
evalcond[4]=((((-1.0)*x4071*x4078))+((r20*x4076))+(((-1.0)*cj1*x4073*x4074))+((x4079*x4080))+(((-1.0)*x4085))+((x4075*x4081))+((sj1*x4082))+(((-1.0)*r10*x4073*x4075)));
evalcond[5]=(((x4076*x4081))+(((-1.0)*r20*x4075))+(((-1.0)*x4086))+(((-1.0)*sj1*x4073*x4074))+((x4080*x4083))+x4084+(((-1.0)*x4077*x4082))+(((-1.0)*r10*x4073*x4076)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4087 = IKatan2WithCheck(IkReal(((((-1.0)*gconst28*r00))+(((-1.0)*gconst29*r01)))),IkReal((((gconst28*r10))+((gconst29*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4087.valid){
continue;
}
CheckValue<IkReal> x4088=IKPowWithIntegerCheck(IKsign((r22*(((((-1.0)*(gconst28*gconst28)))+(((-1.0)*(gconst29*gconst29))))))),-1);
if(!x4088.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4087.value)+(((1.5707963267949)*(x4088.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4089=IKcos(j0);
IkReal x4090=IKsin(j0);
IkReal x4091=((1.0)*x4089);
IkReal x4092=(r11*x4090);
IkReal x4093=((1.0)*x4090);
IkReal x4094=(r10*x4093);
evalcond[0]=((((-1.0)*r12*x4093))+(((-1.0)*r02*x4091)));
evalcond[1]=((((-1.0)*py*x4093))+(((-1.0)*px*x4091)));
evalcond[2]=((-1.0)+((gconst28*x4092))+(((-1.0)*gconst29*r00*x4091))+(((-1.0)*gconst29*x4094))+((gconst28*r01*x4089)));
evalcond[3]=((((-1.0)*gconst28*r00*x4091))+(((-1.0)*gconst29*x4092))+(((-1.0)*gconst28*x4094))+(((-1.0)*gconst29*r01*x4091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x4095=((-1.0)*r21);
CheckValue<IkReal> x4098 = IKatan2WithCheck(IkReal(x4095),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4098.valid){
continue;
}
IkReal x4096=((1.0)*(x4098.value));
IkReal x4097=x3804;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x4096)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x4096)));
IkReal gconst28=(x4095*x4097);
IkReal gconst29=((1.0)*r20*x4097);
IkReal x4099=r22*r22;
CheckValue<IkReal> x4103=IKPowWithIntegerCheck(((-1.0)+x4099),-1);
if(!x4103.valid){
continue;
}
IkReal x4100=x4103.value;
if((((1.0)+(((-1.0)*x4099)))) < -0.00001)
continue;
IkReal x4101=IKsqrt(((1.0)+(((-1.0)*x4099))));
IkReal x4102=(r22*x4100*x4101);
j1eval[0]=((IKabs(x4101))+(IKabs((((r02*sj0*x4102))+(((-1.0)*cj0*r12*x4102))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x4104=((-1.0)*r21);
CheckValue<IkReal> x4107 = IKatan2WithCheck(IkReal(x4104),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4107.valid){
continue;
}
IkReal x4105=((1.0)*(x4107.value));
IkReal x4106=x3804;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x4105)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x4105)));
IkReal gconst28=(x4104*x4106);
IkReal gconst29=((1.0)*r20*x4106);
IkReal x4108=r22*r22;
CheckValue<IkReal> x4112=IKPowWithIntegerCheck(((-1.0)+x4108),-1);
if(!x4112.valid){
continue;
}
IkReal x4109=x4112.value;
if((((1.0)+(((-1.0)*x4108)))) < -0.00001)
continue;
IkReal x4110=IKsqrt(((1.0)+(((-1.0)*x4108))));
IkReal x4111=(x4109*x4110);
j1eval[0]=((IKabs(((((-1.0)*cj0*r12*r22*x4111))+((r02*r22*sj0*x4111)))))+(IKabs(((((-1.0)*x4108*x4111))+x4111))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x4113=((1.0)*gconst29);
CheckValue<IkReal> x4115 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x4113))+((gconst28*r21)))),IkReal((((cj0*gconst28*r11))+(((-1.0)*gconst28*r01*sj0))+(((-1.0)*cj0*r10*x4113))+((gconst29*r00*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4115.valid){
continue;
}
IkReal x4114=x4115.value;
j1array[0]=((-1.0)*x4114);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4114)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4116=IKcos(j1);
IkReal x4117=IKsin(j1);
IkReal x4118=(gconst28*x4116);
IkReal x4119=(gconst29*x4116);
evalcond[0]=(((r00*sj0*x4119))+(((-1.0)*cj0*r10*x4119))+(((-1.0)*gconst28*r21*x4117))+((cj0*r11*x4118))+(((-1.0)*r01*sj0*x4118))+((gconst29*r20*x4117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4120=((1.0)*sj4);
IkReal x4121=(r02*sj0);
IkReal x4122=(r22*sj1);
IkReal x4123=(cj1*cj4);
IkReal x4124=(cj0*r12);
IkReal x4125=(cj1*sj4);
IkReal x4126=(cj4*sj1);
if( IKabs(((((-1.0)*x4123*x4124))+((sj1*sj4*x4124))+((cj4*x4122))+((x4121*x4123))+((r22*x4125))+(((-1.0)*sj1*x4120*x4121)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*x4120*x4121))+(((-1.0)*x4121*x4126))+((x4124*x4125))+((x4124*x4126))+((r22*x4123))+(((-1.0)*x4120*x4122)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4123*x4124))+((sj1*sj4*x4124))+((cj4*x4122))+((x4121*x4123))+((r22*x4125))+(((-1.0)*sj1*x4120*x4121))))+IKsqr(((((-1.0)*cj1*x4120*x4121))+(((-1.0)*x4121*x4126))+((x4124*x4125))+((x4124*x4126))+((r22*x4123))+(((-1.0)*x4120*x4122))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x4123*x4124))+((sj1*sj4*x4124))+((cj4*x4122))+((x4121*x4123))+((r22*x4125))+(((-1.0)*sj1*x4120*x4121))), ((((-1.0)*cj1*x4120*x4121))+(((-1.0)*x4121*x4126))+((x4124*x4125))+((x4124*x4126))+((r22*x4123))+(((-1.0)*x4120*x4122))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4127=IKsin(j2);
IkReal x4128=IKcos(j2);
IkReal x4129=((1.17e-6)*cj4);
IkReal x4130=((1.0)*cj0);
IkReal x4131=(gconst29*sj1);
IkReal x4132=(cj1*gconst28);
IkReal x4133=(cj1*sj0);
IkReal x4134=(gconst28*sj1);
IkReal x4135=((1.0)*cj1);
IkReal x4136=((1.0)*cj4);
IkReal x4137=(r00*sj0);
IkReal x4138=(sj0*sj1);
IkReal x4139=(sj4*x4128);
IkReal x4140=(sj4*x4127);
IkReal x4141=(x4127*x4136);
evalcond[0]=(((r22*sj1))+x4139+(((-1.0)*cj1*r12*x4130))+(((-1.0)*x4141))+((r02*x4133)));
evalcond[1]=(((cj4*x4128))+(((-1.0)*r12*sj1*x4130))+x4140+(((-1.0)*r22*x4135))+((r02*x4138)));
evalcond[2]=((((1.17e-6)*x4140))+(((-1.08e-6)*x4128))+(((-0.56747)*x4127))+((pz*sj1))+((px*x4133))+(((-1.0)*cj1*py*x4130))+((x4128*x4129)));
evalcond[3]=((0.73)+((x4127*x4129))+(((-1.0)*py*sj1*x4130))+(((-1.08e-6)*x4127))+(((-1.17e-6)*x4139))+(((-1.0)*pz*x4135))+(((0.56747)*x4128))+((px*x4138)));
evalcond[4]=((((-1.0)*r10*x4130*x4132))+(((-1.0)*cj1*gconst29*r11*x4130))+(((-1.0)*x4140))+((gconst29*r01*x4133))+((r21*x4131))+((x4132*x4137))+(((-1.0)*x4128*x4136))+((r20*x4134)));
evalcond[5]=((((-1.0)*r10*x4130*x4134))+(((-1.0)*gconst29*r21*x4135))+((r01*sj0*x4131))+(((-1.0)*r11*x4130*x4131))+((x4134*x4137))+x4139+(((-1.0)*r20*x4132))+(((-1.0)*x4141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x4142=((1.0)*gconst28);
CheckValue<IkReal> x4144 = IKatan2WithCheck(IkReal((((cj0*gconst28*r11))+(((-1.0)*cj0*gconst29*r10))+(((-1.0)*r01*sj0*x4142))+((gconst29*r00*sj0)))),IkReal((((gconst29*r20))+(((-1.0)*r21*x4142)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4144.valid){
continue;
}
IkReal x4143=x4144.value;
j1array[0]=((-1.0)*x4143);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4143)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4145=IKsin(j1);
IkReal x4146=IKcos(j1);
IkReal x4147=((1.0)*x4145);
evalcond[0]=((((-1.0)*gconst29*r20*x4146))+((gconst28*r21*x4146))+((cj0*gconst28*r11*x4145))+((gconst29*r00*sj0*x4145))+(((-1.0)*cj0*gconst29*r10*x4147))+(((-1.0)*gconst28*r01*sj0*x4147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4148=((1.0)*sj4);
IkReal x4149=(r02*sj0);
IkReal x4150=(r22*sj1);
IkReal x4151=(cj1*cj4);
IkReal x4152=(cj0*r12);
IkReal x4153=(cj1*sj4);
IkReal x4154=(cj4*sj1);
if( IKabs((((sj1*sj4*x4152))+((cj4*x4150))+(((-1.0)*x4151*x4152))+((r22*x4153))+(((-1.0)*sj1*x4148*x4149))+((x4149*x4151)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x4152*x4153))+((x4152*x4154))+(((-1.0)*x4148*x4150))+((r22*x4151))+(((-1.0)*x4149*x4154))+(((-1.0)*cj1*x4148*x4149)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*sj4*x4152))+((cj4*x4150))+(((-1.0)*x4151*x4152))+((r22*x4153))+(((-1.0)*sj1*x4148*x4149))+((x4149*x4151))))+IKsqr((((x4152*x4153))+((x4152*x4154))+(((-1.0)*x4148*x4150))+((r22*x4151))+(((-1.0)*x4149*x4154))+(((-1.0)*cj1*x4148*x4149))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*sj4*x4152))+((cj4*x4150))+(((-1.0)*x4151*x4152))+((r22*x4153))+(((-1.0)*sj1*x4148*x4149))+((x4149*x4151))), (((x4152*x4153))+((x4152*x4154))+(((-1.0)*x4148*x4150))+((r22*x4151))+(((-1.0)*x4149*x4154))+(((-1.0)*cj1*x4148*x4149))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4155=IKsin(j2);
IkReal x4156=IKcos(j2);
IkReal x4157=((1.17e-6)*cj4);
IkReal x4158=((1.0)*cj0);
IkReal x4159=(gconst29*sj1);
IkReal x4160=(cj1*gconst28);
IkReal x4161=(cj1*sj0);
IkReal x4162=(gconst28*sj1);
IkReal x4163=((1.0)*cj1);
IkReal x4164=((1.0)*cj4);
IkReal x4165=(r00*sj0);
IkReal x4166=(sj0*sj1);
IkReal x4167=(sj4*x4156);
IkReal x4168=(sj4*x4155);
IkReal x4169=(x4155*x4164);
evalcond[0]=(((r22*sj1))+(((-1.0)*x4169))+(((-1.0)*cj1*r12*x4158))+x4167+((r02*x4161)));
evalcond[1]=(((cj4*x4156))+(((-1.0)*r12*sj1*x4158))+x4168+((r02*x4166))+(((-1.0)*r22*x4163)));
evalcond[2]=((((-1.0)*cj1*py*x4158))+(((-0.56747)*x4155))+((px*x4161))+((x4156*x4157))+((pz*sj1))+(((1.17e-6)*x4168))+(((-1.08e-6)*x4156)));
evalcond[3]=((0.73)+(((-1.0)*pz*x4163))+((px*x4166))+(((-1.17e-6)*x4167))+((x4155*x4157))+(((0.56747)*x4156))+(((-1.08e-6)*x4155))+(((-1.0)*py*sj1*x4158)));
evalcond[4]=((((-1.0)*cj1*gconst29*r11*x4158))+(((-1.0)*x4168))+((r20*x4162))+((r21*x4159))+((x4160*x4165))+(((-1.0)*r10*x4158*x4160))+((gconst29*r01*x4161))+(((-1.0)*x4156*x4164)));
evalcond[5]=(((r01*sj0*x4159))+(((-1.0)*x4169))+(((-1.0)*r10*x4158*x4162))+(((-1.0)*r11*x4158*x4159))+x4167+(((-1.0)*gconst29*r21*x4163))+((x4162*x4165))+(((-1.0)*r20*x4160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4170 = IKatan2WithCheck(IkReal(r02),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4170.valid){
continue;
}
CheckValue<IkReal> x4171=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r20))+(((-1.0)*gconst29*r21)))),-1);
if(!x4171.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4170.value)+(((1.5707963267949)*(x4171.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4172=IKcos(j0);
IkReal x4173=IKsin(j0);
IkReal x4174=((1.0)*x4172);
IkReal x4175=(r11*x4173);
IkReal x4176=((1.0)*x4173);
IkReal x4177=(r10*x4176);
evalcond[0]=((((-1.0)*r02*x4174))+(((-1.0)*r12*x4176)));
evalcond[1]=((((-1.0)*px*x4174))+(((-1.0)*py*x4176)));
evalcond[2]=((-1.0)+(((-1.0)*gconst29*r00*x4174))+(((-1.0)*gconst29*x4177))+((gconst28*x4175))+((gconst28*r01*x4172)));
evalcond[3]=((((-1.0)*gconst28*x4177))+(((-1.0)*gconst29*x4175))+(((-1.0)*gconst29*r01*x4174))+(((-1.0)*gconst28*r00*x4174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x4178=((-1.0)*r21);
CheckValue<IkReal> x4181 = IKatan2WithCheck(IkReal(x4178),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4181.valid){
continue;
}
IkReal x4179=((1.0)*(x4181.value));
IkReal x4180=x3804;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x4179)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x4179)));
IkReal gconst28=(x4178*x4180);
IkReal gconst29=((1.0)*r20*x4180);
IkReal x4182=r22*r22;
CheckValue<IkReal> x4186=IKPowWithIntegerCheck(((-1.0)+x4182),-1);
if(!x4186.valid){
continue;
}
IkReal x4183=x4186.value;
if((((1.0)+(((-1.0)*x4182)))) < -0.00001)
continue;
IkReal x4184=IKsqrt(((1.0)+(((-1.0)*x4182))));
IkReal x4185=(r22*x4183*x4184);
j1eval[0]=((IKabs(x4184))+(IKabs(((((-1.0)*cj0*r12*x4185))+((r02*sj0*x4185))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x4187=((-1.0)*r21);
CheckValue<IkReal> x4190 = IKatan2WithCheck(IkReal(x4187),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4190.valid){
continue;
}
IkReal x4188=((1.0)*(x4190.value));
IkReal x4189=x3804;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x4188)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x4188)));
IkReal gconst28=(x4187*x4189);
IkReal gconst29=((1.0)*r20*x4189);
IkReal x4191=r22*r22;
CheckValue<IkReal> x4195=IKPowWithIntegerCheck(((-1.0)+x4191),-1);
if(!x4195.valid){
continue;
}
IkReal x4192=x4195.value;
if((((1.0)+(((-1.0)*x4191)))) < -0.00001)
continue;
IkReal x4193=IKsqrt(((1.0)+(((-1.0)*x4191))));
IkReal x4194=(x4192*x4193);
j1eval[0]=((IKabs(((((-1.0)*cj0*r12*r22*x4194))+((r02*r22*sj0*x4194)))))+(IKabs(((((-1.0)*x4191*x4194))+x4194))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x4196=((1.0)*gconst29);
CheckValue<IkReal> x4198 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x4196))+((gconst28*r21)))),IkReal((((cj0*gconst28*r11))+(((-1.0)*gconst28*r01*sj0))+(((-1.0)*cj0*r10*x4196))+((gconst29*r00*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4198.valid){
continue;
}
IkReal x4197=x4198.value;
j1array[0]=((-1.0)*x4197);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4197)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4199=IKcos(j1);
IkReal x4200=IKsin(j1);
IkReal x4201=(gconst28*x4199);
IkReal x4202=(gconst29*x4199);
evalcond[0]=((((-1.0)*cj0*r10*x4202))+((gconst29*r20*x4200))+(((-1.0)*gconst28*r21*x4200))+((cj0*r11*x4201))+((r00*sj0*x4202))+(((-1.0)*r01*sj0*x4201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4203=((1.0)*sj4);
IkReal x4204=(r02*sj0);
IkReal x4205=(r22*sj1);
IkReal x4206=(cj1*cj4);
IkReal x4207=(cj0*r12);
IkReal x4208=(cj1*sj4);
IkReal x4209=(cj4*sj1);
if( IKabs((((cj4*x4205))+((r22*x4208))+(((-1.0)*x4206*x4207))+((sj1*sj4*x4207))+((x4204*x4206))+(((-1.0)*sj1*x4203*x4204)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*x4203*x4204))+((r22*x4206))+(((-1.0)*x4204*x4209))+((x4207*x4208))+((x4207*x4209))+(((-1.0)*x4203*x4205)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*x4205))+((r22*x4208))+(((-1.0)*x4206*x4207))+((sj1*sj4*x4207))+((x4204*x4206))+(((-1.0)*sj1*x4203*x4204))))+IKsqr(((((-1.0)*cj1*x4203*x4204))+((r22*x4206))+(((-1.0)*x4204*x4209))+((x4207*x4208))+((x4207*x4209))+(((-1.0)*x4203*x4205))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj4*x4205))+((r22*x4208))+(((-1.0)*x4206*x4207))+((sj1*sj4*x4207))+((x4204*x4206))+(((-1.0)*sj1*x4203*x4204))), ((((-1.0)*cj1*x4203*x4204))+((r22*x4206))+(((-1.0)*x4204*x4209))+((x4207*x4208))+((x4207*x4209))+(((-1.0)*x4203*x4205))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4210=IKsin(j2);
IkReal x4211=IKcos(j2);
IkReal x4212=((1.17e-6)*cj4);
IkReal x4213=((1.0)*cj0);
IkReal x4214=(gconst29*sj1);
IkReal x4215=(cj1*gconst28);
IkReal x4216=(cj1*sj0);
IkReal x4217=(gconst28*sj1);
IkReal x4218=((1.0)*cj1);
IkReal x4219=((1.0)*cj4);
IkReal x4220=(r00*sj0);
IkReal x4221=(sj0*sj1);
IkReal x4222=(sj4*x4211);
IkReal x4223=(sj4*x4210);
IkReal x4224=(x4210*x4219);
evalcond[0]=((((-1.0)*x4224))+((r22*sj1))+((r02*x4216))+(((-1.0)*cj1*r12*x4213))+x4222);
evalcond[1]=(((cj4*x4211))+((r02*x4221))+(((-1.0)*r22*x4218))+(((-1.0)*r12*sj1*x4213))+x4223);
evalcond[2]=(((px*x4216))+(((-0.56747)*x4210))+(((-1.0)*cj1*py*x4213))+(((-1.08e-6)*x4211))+(((1.17e-6)*x4223))+((pz*sj1))+((x4211*x4212)));
evalcond[3]=((0.73)+(((-1.0)*py*sj1*x4213))+(((-1.08e-6)*x4210))+((x4210*x4212))+(((-1.0)*pz*x4218))+((px*x4221))+(((0.56747)*x4211))+(((-1.17e-6)*x4222)));
evalcond[4]=((((-1.0)*x4223))+(((-1.0)*cj1*gconst29*r11*x4213))+(((-1.0)*x4211*x4219))+((r20*x4217))+((gconst29*r01*x4216))+((x4215*x4220))+(((-1.0)*r10*x4213*x4215))+((r21*x4214)));
evalcond[5]=((((-1.0)*x4224))+(((-1.0)*gconst29*r21*x4218))+(((-1.0)*r11*x4213*x4214))+((x4217*x4220))+(((-1.0)*r20*x4215))+x4222+(((-1.0)*r10*x4213*x4217))+((r01*sj0*x4214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x4225=((1.0)*gconst28);
CheckValue<IkReal> x4227 = IKatan2WithCheck(IkReal((((cj0*gconst28*r11))+(((-1.0)*r01*sj0*x4225))+(((-1.0)*cj0*gconst29*r10))+((gconst29*r00*sj0)))),IkReal((((gconst29*r20))+(((-1.0)*r21*x4225)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4227.valid){
continue;
}
IkReal x4226=x4227.value;
j1array[0]=((-1.0)*x4226);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4226)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4228=IKsin(j1);
IkReal x4229=IKcos(j1);
IkReal x4230=((1.0)*x4228);
evalcond[0]=((((-1.0)*gconst29*r20*x4229))+(((-1.0)*cj0*gconst29*r10*x4230))+((gconst29*r00*sj0*x4228))+((cj0*gconst28*r11*x4228))+((gconst28*r21*x4229))+(((-1.0)*gconst28*r01*sj0*x4230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4231=((1.0)*sj4);
IkReal x4232=(r02*sj0);
IkReal x4233=(r22*sj1);
IkReal x4234=(cj1*cj4);
IkReal x4235=(cj0*r12);
IkReal x4236=(cj1*sj4);
IkReal x4237=(cj4*sj1);
if( IKabs((((cj4*x4233))+(((-1.0)*x4234*x4235))+((x4232*x4234))+((r22*x4236))+(((-1.0)*sj1*x4231*x4232))+((sj1*sj4*x4235)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x4235*x4237))+((x4235*x4236))+(((-1.0)*x4231*x4233))+(((-1.0)*cj1*x4231*x4232))+((r22*x4234))+(((-1.0)*x4232*x4237)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*x4233))+(((-1.0)*x4234*x4235))+((x4232*x4234))+((r22*x4236))+(((-1.0)*sj1*x4231*x4232))+((sj1*sj4*x4235))))+IKsqr((((x4235*x4237))+((x4235*x4236))+(((-1.0)*x4231*x4233))+(((-1.0)*cj1*x4231*x4232))+((r22*x4234))+(((-1.0)*x4232*x4237))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj4*x4233))+(((-1.0)*x4234*x4235))+((x4232*x4234))+((r22*x4236))+(((-1.0)*sj1*x4231*x4232))+((sj1*sj4*x4235))), (((x4235*x4237))+((x4235*x4236))+(((-1.0)*x4231*x4233))+(((-1.0)*cj1*x4231*x4232))+((r22*x4234))+(((-1.0)*x4232*x4237))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4238=IKsin(j2);
IkReal x4239=IKcos(j2);
IkReal x4240=((1.17e-6)*cj4);
IkReal x4241=((1.0)*cj0);
IkReal x4242=(gconst29*sj1);
IkReal x4243=(cj1*gconst28);
IkReal x4244=(cj1*sj0);
IkReal x4245=(gconst28*sj1);
IkReal x4246=((1.0)*cj1);
IkReal x4247=((1.0)*cj4);
IkReal x4248=(r00*sj0);
IkReal x4249=(sj0*sj1);
IkReal x4250=(sj4*x4239);
IkReal x4251=(sj4*x4238);
IkReal x4252=(x4238*x4247);
evalcond[0]=(((r22*sj1))+(((-1.0)*cj1*r12*x4241))+(((-1.0)*x4252))+((r02*x4244))+x4250);
evalcond[1]=(((cj4*x4239))+(((-1.0)*r12*sj1*x4241))+(((-1.0)*r22*x4246))+((r02*x4249))+x4251);
evalcond[2]=(((x4239*x4240))+(((-0.56747)*x4238))+(((-1.08e-6)*x4239))+(((-1.0)*cj1*py*x4241))+((px*x4244))+((pz*sj1))+(((1.17e-6)*x4251)));
evalcond[3]=((0.73)+(((0.56747)*x4239))+((x4238*x4240))+(((-1.0)*pz*x4246))+(((-1.08e-6)*x4238))+(((-1.17e-6)*x4250))+((px*x4249))+(((-1.0)*py*sj1*x4241)));
evalcond[4]=(((r20*x4245))+((x4243*x4248))+((gconst29*r01*x4244))+(((-1.0)*x4251))+(((-1.0)*x4239*x4247))+((r21*x4242))+(((-1.0)*r10*x4241*x4243))+(((-1.0)*cj1*gconst29*r11*x4241)));
evalcond[5]=((((-1.0)*r20*x4243))+(((-1.0)*r11*x4241*x4242))+((r01*sj0*x4242))+(((-1.0)*gconst29*r21*x4246))+(((-1.0)*x4252))+x4250+(((-1.0)*r10*x4241*x4245))+((x4245*x4248)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4253=IKPowWithIntegerCheck(IKsign((((gconst29*rxp0_2))+(((-1.0)*gconst28*rxp1_2)))),-1);
if(!x4253.valid){
continue;
}
CheckValue<IkReal> x4254 = IKatan2WithCheck(IkReal(px),IkReal(((-1.0)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x4254.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4253.value)))+(x4254.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4255=IKcos(j0);
IkReal x4256=IKsin(j0);
IkReal x4257=((1.0)*x4255);
IkReal x4258=(r11*x4256);
IkReal x4259=((1.0)*x4256);
IkReal x4260=(r10*x4259);
evalcond[0]=((((-1.0)*r12*x4259))+(((-1.0)*r02*x4257)));
evalcond[1]=((((-1.0)*py*x4259))+(((-1.0)*px*x4257)));
evalcond[2]=((-1.0)+(((-1.0)*gconst29*x4260))+((gconst28*r01*x4255))+(((-1.0)*gconst29*r00*x4257))+((gconst28*x4258)));
evalcond[3]=((((-1.0)*gconst29*r01*x4257))+(((-1.0)*gconst28*x4260))+(((-1.0)*gconst29*x4258))+(((-1.0)*gconst28*r00*x4257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x4261=((-1.0)*r21);
CheckValue<IkReal> x4264 = IKatan2WithCheck(IkReal(x4261),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4264.valid){
continue;
}
IkReal x4262=((1.0)*(x4264.value));
IkReal x4263=x3804;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x4262)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x4262)));
IkReal gconst28=(x4261*x4263);
IkReal gconst29=((1.0)*r20*x4263);
IkReal x4265=r22*r22;
CheckValue<IkReal> x4269=IKPowWithIntegerCheck(((-1.0)+x4265),-1);
if(!x4269.valid){
continue;
}
IkReal x4266=x4269.value;
if((((1.0)+(((-1.0)*x4265)))) < -0.00001)
continue;
IkReal x4267=IKsqrt(((1.0)+(((-1.0)*x4265))));
IkReal x4268=(r22*x4266*x4267);
j1eval[0]=((IKabs(((((-1.0)*cj0*r12*x4268))+((r02*sj0*x4268)))))+(IKabs(x4267)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x4270=((-1.0)*r21);
CheckValue<IkReal> x4273 = IKatan2WithCheck(IkReal(x4270),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4273.valid){
continue;
}
IkReal x4271=((1.0)*(x4273.value));
IkReal x4272=x3804;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x4271)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x4271)));
IkReal gconst28=(x4270*x4272);
IkReal gconst29=((1.0)*r20*x4272);
IkReal x4274=r22*r22;
CheckValue<IkReal> x4278=IKPowWithIntegerCheck(((-1.0)+x4274),-1);
if(!x4278.valid){
continue;
}
IkReal x4275=x4278.value;
if((((1.0)+(((-1.0)*x4274)))) < -0.00001)
continue;
IkReal x4276=IKsqrt(((1.0)+(((-1.0)*x4274))));
IkReal x4277=(x4275*x4276);
j1eval[0]=((IKabs((x4277+(((-1.0)*x4274*x4277)))))+(IKabs(((((-1.0)*cj0*r12*r22*x4277))+((r02*r22*sj0*x4277))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x4279=((1.0)*gconst29);
CheckValue<IkReal> x4281 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x4279))+((gconst28*r21)))),IkReal((((cj0*gconst28*r11))+(((-1.0)*cj0*r10*x4279))+(((-1.0)*gconst28*r01*sj0))+((gconst29*r00*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4281.valid){
continue;
}
IkReal x4280=x4281.value;
j1array[0]=((-1.0)*x4280);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4280)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4282=IKcos(j1);
IkReal x4283=IKsin(j1);
IkReal x4284=(gconst28*x4282);
IkReal x4285=(gconst29*x4282);
evalcond[0]=((((-1.0)*r01*sj0*x4284))+(((-1.0)*cj0*r10*x4285))+((r00*sj0*x4285))+((cj0*r11*x4284))+(((-1.0)*gconst28*r21*x4283))+((gconst29*r20*x4283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4286=((1.0)*sj4);
IkReal x4287=(r02*sj0);
IkReal x4288=(r22*sj1);
IkReal x4289=(cj1*cj4);
IkReal x4290=(cj0*r12);
IkReal x4291=(cj1*sj4);
IkReal x4292=(cj4*sj1);
if( IKabs((((cj4*x4288))+(((-1.0)*x4289*x4290))+((x4287*x4289))+(((-1.0)*sj1*x4286*x4287))+((r22*x4291))+((sj1*sj4*x4290)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x4286*x4288))+((r22*x4289))+(((-1.0)*cj1*x4286*x4287))+(((-1.0)*x4287*x4292))+((x4290*x4292))+((x4290*x4291)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*x4288))+(((-1.0)*x4289*x4290))+((x4287*x4289))+(((-1.0)*sj1*x4286*x4287))+((r22*x4291))+((sj1*sj4*x4290))))+IKsqr(((((-1.0)*x4286*x4288))+((r22*x4289))+(((-1.0)*cj1*x4286*x4287))+(((-1.0)*x4287*x4292))+((x4290*x4292))+((x4290*x4291))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj4*x4288))+(((-1.0)*x4289*x4290))+((x4287*x4289))+(((-1.0)*sj1*x4286*x4287))+((r22*x4291))+((sj1*sj4*x4290))), ((((-1.0)*x4286*x4288))+((r22*x4289))+(((-1.0)*cj1*x4286*x4287))+(((-1.0)*x4287*x4292))+((x4290*x4292))+((x4290*x4291))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4293=IKsin(j2);
IkReal x4294=IKcos(j2);
IkReal x4295=((1.17e-6)*cj4);
IkReal x4296=((1.0)*cj0);
IkReal x4297=(gconst29*sj1);
IkReal x4298=(cj1*gconst28);
IkReal x4299=(cj1*sj0);
IkReal x4300=(gconst28*sj1);
IkReal x4301=((1.0)*cj1);
IkReal x4302=((1.0)*cj4);
IkReal x4303=(r00*sj0);
IkReal x4304=(sj0*sj1);
IkReal x4305=(sj4*x4294);
IkReal x4306=(sj4*x4293);
IkReal x4307=(x4293*x4302);
evalcond[0]=((((-1.0)*cj1*r12*x4296))+((r22*sj1))+x4305+(((-1.0)*x4307))+((r02*x4299)));
evalcond[1]=(((cj4*x4294))+(((-1.0)*r22*x4301))+((r02*x4304))+x4306+(((-1.0)*r12*sj1*x4296)));
evalcond[2]=((((1.17e-6)*x4306))+(((-1.0)*cj1*py*x4296))+((px*x4299))+(((-0.56747)*x4293))+((pz*sj1))+(((-1.08e-6)*x4294))+((x4294*x4295)));
evalcond[3]=((0.73)+((x4293*x4295))+(((0.56747)*x4294))+((px*x4304))+(((-1.0)*pz*x4301))+(((-1.0)*py*sj1*x4296))+(((-1.08e-6)*x4293))+(((-1.17e-6)*x4305)));
evalcond[4]=(((gconst29*r01*x4299))+(((-1.0)*cj1*gconst29*r11*x4296))+((r21*x4297))+(((-1.0)*x4294*x4302))+(((-1.0)*r10*x4296*x4298))+(((-1.0)*x4306))+((x4298*x4303))+((r20*x4300)));
evalcond[5]=(((x4300*x4303))+(((-1.0)*r20*x4298))+(((-1.0)*gconst29*r21*x4301))+(((-1.0)*r10*x4296*x4300))+((r01*sj0*x4297))+x4305+(((-1.0)*r11*x4296*x4297))+(((-1.0)*x4307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x4308=((1.0)*gconst28);
CheckValue<IkReal> x4310 = IKatan2WithCheck(IkReal((((cj0*gconst28*r11))+(((-1.0)*r01*sj0*x4308))+(((-1.0)*cj0*gconst29*r10))+((gconst29*r00*sj0)))),IkReal(((((-1.0)*r21*x4308))+((gconst29*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4310.valid){
continue;
}
IkReal x4309=x4310.value;
j1array[0]=((-1.0)*x4309);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4309)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4311=IKsin(j1);
IkReal x4312=IKcos(j1);
IkReal x4313=((1.0)*x4311);
evalcond[0]=(((cj0*gconst28*r11*x4311))+(((-1.0)*gconst29*r20*x4312))+((gconst29*r00*sj0*x4311))+(((-1.0)*gconst28*r01*sj0*x4313))+(((-1.0)*cj0*gconst29*r10*x4313))+((gconst28*r21*x4312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4314=((1.0)*sj4);
IkReal x4315=(r02*sj0);
IkReal x4316=(r22*sj1);
IkReal x4317=(cj1*cj4);
IkReal x4318=(cj0*r12);
IkReal x4319=(cj1*sj4);
IkReal x4320=(cj4*sj1);
if( IKabs((((sj1*sj4*x4318))+((x4315*x4317))+(((-1.0)*sj1*x4314*x4315))+(((-1.0)*x4317*x4318))+((cj4*x4316))+((r22*x4319)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x4318*x4320))+(((-1.0)*x4314*x4316))+(((-1.0)*x4315*x4320))+(((-1.0)*cj1*x4314*x4315))+((x4318*x4319))+((r22*x4317)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*sj4*x4318))+((x4315*x4317))+(((-1.0)*sj1*x4314*x4315))+(((-1.0)*x4317*x4318))+((cj4*x4316))+((r22*x4319))))+IKsqr((((x4318*x4320))+(((-1.0)*x4314*x4316))+(((-1.0)*x4315*x4320))+(((-1.0)*cj1*x4314*x4315))+((x4318*x4319))+((r22*x4317))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*sj4*x4318))+((x4315*x4317))+(((-1.0)*sj1*x4314*x4315))+(((-1.0)*x4317*x4318))+((cj4*x4316))+((r22*x4319))), (((x4318*x4320))+(((-1.0)*x4314*x4316))+(((-1.0)*x4315*x4320))+(((-1.0)*cj1*x4314*x4315))+((x4318*x4319))+((r22*x4317))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4321=IKsin(j2);
IkReal x4322=IKcos(j2);
IkReal x4323=((1.17e-6)*cj4);
IkReal x4324=((1.0)*cj0);
IkReal x4325=(gconst29*sj1);
IkReal x4326=(cj1*gconst28);
IkReal x4327=(cj1*sj0);
IkReal x4328=(gconst28*sj1);
IkReal x4329=((1.0)*cj1);
IkReal x4330=((1.0)*cj4);
IkReal x4331=(r00*sj0);
IkReal x4332=(sj0*sj1);
IkReal x4333=(sj4*x4322);
IkReal x4334=(sj4*x4321);
IkReal x4335=(x4321*x4330);
evalcond[0]=(((r22*sj1))+(((-1.0)*x4335))+(((-1.0)*cj1*r12*x4324))+x4333+((r02*x4327)));
evalcond[1]=(((cj4*x4322))+(((-1.0)*r22*x4329))+x4334+(((-1.0)*r12*sj1*x4324))+((r02*x4332)));
evalcond[2]=((((-1.0)*cj1*py*x4324))+(((1.17e-6)*x4334))+(((-0.56747)*x4321))+((x4322*x4323))+(((-1.08e-6)*x4322))+((pz*sj1))+((px*x4327)));
evalcond[3]=((0.73)+(((-1.0)*py*sj1*x4324))+(((-1.0)*pz*x4329))+((x4321*x4323))+(((0.56747)*x4322))+(((-1.17e-6)*x4333))+((px*x4332))+(((-1.08e-6)*x4321)));
evalcond[4]=(((r20*x4328))+((gconst29*r01*x4327))+((r21*x4325))+(((-1.0)*x4334))+((x4326*x4331))+(((-1.0)*r10*x4324*x4326))+(((-1.0)*x4322*x4330))+(((-1.0)*cj1*gconst29*r11*x4324)));
evalcond[5]=((((-1.0)*r11*x4324*x4325))+(((-1.0)*r20*x4326))+(((-1.0)*x4335))+((r01*sj0*x4325))+(((-1.0)*r10*x4324*x4328))+x4333+((x4328*x4331))+(((-1.0)*gconst29*r21*x4329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4338 = ((rxp1_2*rxp1_2)+(rxp0_2*rxp0_2));
if(IKabs(x4338)==0){
continue;
}
IkReal x4336=pow(x4338,-0.5);
IkReal x4337=((-1.0)*x4336);
CheckValue<IkReal> x4339 = IKatan2WithCheck(IkReal(rxp0_2),IkReal(((-1.0)*rxp1_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4339.valid){
continue;
}
IkReal gconst30=((-1.0)*(x4339.value));
IkReal gconst31=(rxp0_2*x4337);
IkReal gconst32=(rxp1_2*x4337);
CheckValue<IkReal> x4340 = IKatan2WithCheck(IkReal(rxp0_2),IkReal(((-1.0)*rxp1_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4340.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4340.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
CheckValue<IkReal> x4344 = IKatan2WithCheck(IkReal(rxp0_2),IkReal(((-1.0)*rxp1_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4344.valid){
continue;
}
IkReal x4341=((-1.0)*(x4344.value));
IkReal x4342=x4336;
IkReal x4343=((-1.0)*x4342);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst31;
cj5=gconst32;
j5=x4341;
IkReal gconst30=x4341;
IkReal gconst31=(rxp0_2*x4343);
IkReal gconst32=(rxp1_2*x4343);
j0eval[0]=((IKabs(r02))+(IKabs(r12)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
CheckValue<IkReal> x4348 = IKatan2WithCheck(IkReal(rxp0_2),IkReal(((-1.0)*rxp1_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4348.valid){
continue;
}
IkReal x4345=((-1.0)*(x4348.value));
IkReal x4346=x4336;
IkReal x4347=((-1.0)*x4346);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst31;
cj5=gconst32;
j5=x4345;
IkReal gconst30=x4345;
IkReal gconst31=(rxp0_2*x4347);
IkReal gconst32=(rxp1_2*x4347);
IkReal x4349=x4336;
IkReal x4350=(rxp0_2*x4349);
IkReal x4351=(rxp1_2*x4349);
j0eval[0]=((IKabs((((r00*x4350))+((r01*x4351)))))+(IKabs((((r11*x4351))+((r10*x4350))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
CheckValue<IkReal> x4355 = IKatan2WithCheck(IkReal(rxp0_2),IkReal(((-1.0)*rxp1_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4355.valid){
continue;
}
IkReal x4352=((-1.0)*(x4355.value));
IkReal x4353=x4336;
IkReal x4354=((-1.0)*x4353);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst31;
cj5=gconst32;
j5=x4352;
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst30=x4352;
IkReal gconst31=(rxp0_2*x4354);
IkReal gconst32=(rxp1_2*x4354);
j0eval[0]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4356=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst31*r20))+(((-1.0)*gconst32*r21)))),-1);
if(!x4356.valid){
continue;
}
CheckValue<IkReal> x4357 = IKatan2WithCheck(IkReal(r02),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4357.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4356.value)))+(x4357.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4358=IKcos(j0);
IkReal x4359=IKsin(j0);
IkReal x4360=((1.0)*x4358);
IkReal x4361=((1.0)*x4359);
evalcond[0]=((((-1.0)*r12*x4361))+(((-1.0)*r02*x4360)));
evalcond[1]=((((-1.0)*px*x4360))+(((-1.0)*py*x4361)));
evalcond[2]=((-1.0)+(((-1.0)*gconst32*r00*x4360))+((gconst31*r11*x4359))+((gconst31*r01*x4358))+(((-1.0)*gconst32*r10*x4361)));
evalcond[3]=((((-1.0)*gconst32*r01*x4360))+(((-1.0)*gconst32*r11*x4361))+(((-1.0)*gconst31*r10*x4361))+(((-1.0)*gconst31*r00*x4360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
CheckValue<IkReal> x4365 = IKatan2WithCheck(IkReal(rxp0_2),IkReal(((-1.0)*rxp1_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4365.valid){
continue;
}
IkReal x4362=((-1.0)*(x4365.value));
IkReal x4363=x4336;
IkReal x4364=((-1.0)*x4363);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst31;
cj5=gconst32;
j5=x4362;
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst30=x4362;
IkReal gconst31=(rxp0_2*x4364);
IkReal gconst32=(rxp1_2*x4364);
IkReal x4366=x4336;
IkReal x4367=(rxp0_2*x4366);
IkReal x4368=(rxp1_2*x4366);
j1eval[0]=((IKabs((((r21*x4367))+(((-1.0)*r20*x4368)))))+(IKabs((((cj0*r10*x4368))+(((-1.0)*cj0*r11*x4367))+(((-1.0)*r00*sj0*x4368))+((r01*sj0*x4367))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
CheckValue<IkReal> x4372 = IKatan2WithCheck(IkReal(rxp0_2),IkReal(((-1.0)*rxp1_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4372.valid){
continue;
}
IkReal x4369=((-1.0)*(x4372.value));
IkReal x4370=x4336;
IkReal x4371=((-1.0)*x4370);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst31;
cj5=gconst32;
j5=x4369;
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst30=x4369;
IkReal gconst31=(rxp0_2*x4371);
IkReal gconst32=(rxp1_2*x4371);
IkReal x4373=x4336;
IkReal x4374=(sj0*x4373);
IkReal x4375=(rxp1_2*x4373);
IkReal x4376=((1.0)*rxp0_2*x4373);
j1eval[0]=((IKabs((((r20*x4375))+(((-1.0)*r21*x4376)))))+(IKabs((((cj0*r10*x4375))+(((-1.0)*cj0*r11*x4376))+(((-1.0)*r00*rxp1_2*x4374))+((r01*rxp0_2*x4374))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x4377=((1.0)*gconst32);
CheckValue<IkReal> x4379 = IKatan2WithCheck(IkReal((((gconst31*r21))+(((-1.0)*r20*x4377)))),IkReal(((((-1.0)*gconst31*r01*sj0))+((gconst32*r00*sj0))+(((-1.0)*cj0*r10*x4377))+((cj0*gconst31*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4379.valid){
continue;
}
IkReal x4378=x4379.value;
j1array[0]=((-1.0)*x4378);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4378)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4380=IKcos(j1);
IkReal x4381=IKsin(j1);
IkReal x4382=((1.0)*x4380);
evalcond[0]=(((gconst32*r00*sj0*x4380))+((cj0*gconst31*r11*x4380))+((gconst32*r20*x4381))+(((-1.0)*gconst31*r21*x4381))+(((-1.0)*cj0*gconst32*r10*x4382))+(((-1.0)*gconst31*r01*sj0*x4382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4383=((1.0)*cj4);
IkReal x4384=(r02*sj0);
IkReal x4385=(cj0*cj1*r12);
IkReal x4386=(cj0*r12*sj1);
IkReal x4387=((1.0)*sj4*x4384);
if( IKabs((((cj1*cj4*x4384))+((sj4*x4386))+(((-1.0)*x4383*x4385))+(((-1.0)*sj1*x4387)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*x4386))+(((-1.0)*sj1*x4383*x4384))+((sj4*x4385))+(((-1.0)*cj1*x4387)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*cj4*x4384))+((sj4*x4386))+(((-1.0)*x4383*x4385))+(((-1.0)*sj1*x4387))))+IKsqr((((cj4*x4386))+(((-1.0)*sj1*x4383*x4384))+((sj4*x4385))+(((-1.0)*cj1*x4387))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*cj4*x4384))+((sj4*x4386))+(((-1.0)*x4383*x4385))+(((-1.0)*sj1*x4387))), (((cj4*x4386))+(((-1.0)*sj1*x4383*x4384))+((sj4*x4385))+(((-1.0)*cj1*x4387))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4388=IKcos(j2);
IkReal x4389=IKsin(j2);
IkReal x4390=((1.17e-6)*cj4);
IkReal x4391=(cj1*sj0);
IkReal x4392=(gconst32*sj1);
IkReal x4393=((1.0)*cj4);
IkReal x4394=((1.0)*cj1);
IkReal x4395=(sj0*sj1);
IkReal x4396=(gconst31*r00);
IkReal x4397=(gconst31*r20);
IkReal x4398=(cj0*r11);
IkReal x4399=(cj0*py);
IkReal x4400=((1.0)*sj1);
IkReal x4401=(cj0*r12);
IkReal x4402=(sj4*x4388);
IkReal x4403=(sj4*x4389);
IkReal x4404=(x4389*x4393);
IkReal x4405=((1.0)*cj0*gconst31*r10);
evalcond[0]=(((cj4*x4388))+x4403+(((-1.0)*x4400*x4401))+((r02*x4395)));
evalcond[1]=(x4402+((r02*x4391))+(((-1.0)*x4404))+(((-1.0)*x4394*x4401)));
evalcond[2]=((((-1.08e-6)*x4388))+((px*x4391))+((x4388*x4390))+(((-0.56747)*x4389))+(((1.17e-6)*x4403))+(((-1.0)*x4394*x4399))+((pz*sj1)));
evalcond[3]=((0.73)+(((-1.08e-6)*x4389))+((px*x4395))+(((-1.0)*pz*x4394))+(((-1.17e-6)*x4402))+((x4389*x4390))+(((-1.0)*x4399*x4400))+(((0.56747)*x4388)));
evalcond[4]=(((x4391*x4396))+(((-1.0)*gconst32*x4394*x4398))+(((-1.0)*x4388*x4393))+((gconst32*r01*x4391))+(((-1.0)*x4403))+(((-1.0)*cj0*gconst31*r10*x4394))+((r21*x4392))+((sj1*x4397)));
evalcond[5]=(x4402+(((-1.0)*cj0*gconst31*r10*x4400))+((r01*sj0*x4392))+(((-1.0)*x4392*x4398))+(((-1.0)*x4404))+(((-1.0)*gconst32*r21*x4394))+(((-1.0)*x4394*x4397))+((x4395*x4396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x4406=((1.0)*gconst31);
CheckValue<IkReal> x4408 = IKatan2WithCheck(IkReal((((gconst32*r00*sj0))+((cj0*gconst31*r11))+(((-1.0)*cj0*gconst32*r10))+(((-1.0)*r01*sj0*x4406)))),IkReal((((gconst32*r20))+(((-1.0)*r21*x4406)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4408.valid){
continue;
}
IkReal x4407=x4408.value;
j1array[0]=((-1.0)*x4407);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4407)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4409=IKsin(j1);
IkReal x4410=IKcos(j1);
IkReal x4411=((1.0)*gconst32);
IkReal x4412=(cj0*x4409);
IkReal x4413=(sj0*x4409);
evalcond[0]=(((gconst32*r00*x4413))+(((-1.0)*r20*x4410*x4411))+((gconst31*r11*x4412))+(((-1.0)*gconst31*r01*x4413))+((gconst31*r21*x4410))+(((-1.0)*r10*x4411*x4412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4414=((1.0)*cj4);
IkReal x4415=(r02*sj0);
IkReal x4416=(cj0*cj1*r12);
IkReal x4417=(cj0*r12*sj1);
IkReal x4418=((1.0)*sj4*x4415);
if( IKabs(((((-1.0)*sj1*x4418))+(((-1.0)*x4414*x4416))+((cj1*cj4*x4415))+((sj4*x4417)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*x4417))+(((-1.0)*cj1*x4418))+(((-1.0)*sj1*x4414*x4415))+((sj4*x4416)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj1*x4418))+(((-1.0)*x4414*x4416))+((cj1*cj4*x4415))+((sj4*x4417))))+IKsqr((((cj4*x4417))+(((-1.0)*cj1*x4418))+(((-1.0)*sj1*x4414*x4415))+((sj4*x4416))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj1*x4418))+(((-1.0)*x4414*x4416))+((cj1*cj4*x4415))+((sj4*x4417))), (((cj4*x4417))+(((-1.0)*cj1*x4418))+(((-1.0)*sj1*x4414*x4415))+((sj4*x4416))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4419=IKcos(j2);
IkReal x4420=IKsin(j2);
IkReal x4421=((1.17e-6)*cj4);
IkReal x4422=(cj1*sj0);
IkReal x4423=(gconst32*sj1);
IkReal x4424=((1.0)*cj4);
IkReal x4425=((1.0)*cj1);
IkReal x4426=(sj0*sj1);
IkReal x4427=(gconst31*r00);
IkReal x4428=(gconst31*r20);
IkReal x4429=(cj0*r11);
IkReal x4430=(cj0*py);
IkReal x4431=((1.0)*sj1);
IkReal x4432=(cj0*r12);
IkReal x4433=(sj4*x4419);
IkReal x4434=(sj4*x4420);
IkReal x4435=(x4420*x4424);
IkReal x4436=((1.0)*cj0*gconst31*r10);
evalcond[0]=(x4434+((r02*x4426))+((cj4*x4419))+(((-1.0)*x4431*x4432)));
evalcond[1]=(x4433+((r02*x4422))+(((-1.0)*x4435))+(((-1.0)*x4425*x4432)));
evalcond[2]=(((px*x4422))+((x4419*x4421))+(((1.17e-6)*x4434))+(((-0.56747)*x4420))+(((-1.0)*x4425*x4430))+((pz*sj1))+(((-1.08e-6)*x4419)));
evalcond[3]=((0.73)+((px*x4426))+((x4420*x4421))+(((-1.0)*pz*x4425))+(((-1.0)*x4430*x4431))+(((-1.08e-6)*x4420))+(((-1.17e-6)*x4433))+(((0.56747)*x4419)));
evalcond[4]=(((x4422*x4427))+(((-1.0)*x4434))+((gconst32*r01*x4422))+(((-1.0)*cj0*gconst31*r10*x4425))+((sj1*x4428))+((r21*x4423))+(((-1.0)*x4419*x4424))+(((-1.0)*gconst32*x4425*x4429)));
evalcond[5]=((((-1.0)*x4425*x4428))+(((-1.0)*cj0*gconst31*r10*x4431))+x4433+(((-1.0)*x4423*x4429))+(((-1.0)*x4435))+((x4426*x4427))+(((-1.0)*gconst32*r21*x4425))+((r01*sj0*x4423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x4437=((-1.0)*pz);
IkReal x4438=((-1.0)*rxp1_2);
CheckValue<IkReal> x4441 = IKatan2WithCheck(IkReal(rxp0_2),IkReal(x4438),IKFAST_ATAN2_MAGTHRESH);
if(!x4441.valid){
continue;
}
IkReal x4439=((-1.0)*(x4441.value));
IkReal x4440=x4336;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst31;
cj5=gconst32;
j5=x4439;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x4437);
rxp1_0=(pz*r11);
rxp1_1=(r01*x4437);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal gconst30=x4439;
IkReal gconst31=((-1.0)*rxp0_2*x4440);
IkReal gconst32=(x4438*x4440);
j0eval[0]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4442 = IKatan2WithCheck(IkReal(((((-1.0)*gconst32*r01))+(((-1.0)*gconst31*r00)))),IkReal((((gconst32*r11))+((gconst31*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4442.valid){
continue;
}
CheckValue<IkReal> x4443=IKPowWithIntegerCheck(IKsign((r22*(((((-1.0)*(gconst32*gconst32)))+(((-1.0)*(gconst31*gconst31))))))),-1);
if(!x4443.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4442.value)+(((1.5707963267949)*(x4443.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x4444=IKsin(j0);
IkReal x4445=IKcos(j0);
IkReal x4446=((1.0)*x4445);
IkReal x4447=((1.0)*x4444);
IkReal x4448=(gconst32*x4447);
evalcond[0]=((((-1.0)*py*x4447))+(((-1.0)*px*x4446)));
evalcond[1]=((-1.0)+(((-1.0)*gconst32*r00*x4446))+((gconst31*r01*x4445))+(((-1.0)*r10*x4448))+((gconst31*r11*x4444)));
evalcond[2]=((((-1.0)*gconst31*r00*x4446))+(((-1.0)*gconst31*r10*x4447))+(((-1.0)*gconst32*r01*x4446))+(((-1.0)*r11*x4448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[2+1], zeror[2];
int numroots;
IkReal x4449=(gconst32*r00*sj0);
IkReal x4450=(cj0*gconst31*r11);
IkReal x4451=(cj0*gconst32*r10);
IkReal x4452=(gconst31*r01*sj0);
op[0]=(x4452+x4451+(((-1.0)*x4449))+(((-1.0)*x4450)));
op[1]=0;
op[2]=(x4449+x4450+(((-1.0)*x4452))+(((-1.0)*x4451)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4453=(cj4*r22);
IkReal x4454=(r22*sj4);
if( IKabs((((cj1*x4454))+((sj1*x4453)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x4453))+(((-1.0)*sj1*x4454)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x4454))+((sj1*x4453))))+IKsqr((((cj1*x4453))+(((-1.0)*sj1*x4454))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x4454))+((sj1*x4453))), (((cj1*x4453))+(((-1.0)*sj1*x4454))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4455=IKsin(j2);
IkReal x4456=IKcos(j2);
IkReal x4457=(cj1*sj0);
IkReal x4458=((1.0)*cj1);
IkReal x4459=(gconst32*r01);
IkReal x4460=((1.0)*cj4);
IkReal x4461=(sj0*sj1);
IkReal x4462=(gconst31*r00);
IkReal x4463=(cj0*py);
IkReal x4464=((1.0)*sj1);
IkReal x4465=(sj4*x4456);
IkReal x4466=((1.17e-6)*x4455);
IkReal x4467=(sj4*x4455);
IkReal x4468=(cj0*gconst32*r11);
IkReal x4469=(cj4*x4456);
IkReal x4470=(x4455*x4460);
IkReal x4471=((1.0)*cj0*gconst31*r10);
evalcond[0]=((((-1.0)*x4470))+x4465+((r22*sj1)));
evalcond[1]=(x4469+x4467+(((-1.0)*r22*x4458)));
evalcond[2]=((((-1.0)*x4470))+(((-1.0)*x4464*x4468))+(((-1.0)*cj0*gconst31*r10*x4464))+x4465+((x4459*x4461))+((x4461*x4462)));
evalcond[3]=(((sj4*x4466))+(((-1.0)*x4458*x4463))+(((1.17e-6)*x4469))+((px*x4457))+(((-0.56747)*x4455))+(((-1.08e-6)*x4456))+((pz*sj1)));
evalcond[4]=((((-1.0)*cj0*gconst31*r10*x4458))+(((-1.0)*x4467))+(((-1.0)*x4458*x4468))+((x4457*x4459))+(((-1.0)*x4456*x4460))+((x4457*x4462)));
evalcond[5]=((0.73)+(((-1.0)*x4463*x4464))+((px*x4461))+(((-1.17e-6)*x4465))+(((-1.0)*pz*x4458))+(((0.56747)*x4456))+((cj4*x4466))+(((-1.08e-6)*x4455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r02))+(IKabs(r12)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x4472=((-1.0)*pz);
IkReal x4473=((-1.0)*rxp1_2);
CheckValue<IkReal> x4476 = IKatan2WithCheck(IkReal(rxp0_2),IkReal(x4473),IKFAST_ATAN2_MAGTHRESH);
if(!x4476.valid){
continue;
}
IkReal x4474=((-1.0)*(x4476.value));
IkReal x4475=x4336;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst31;
cj5=gconst32;
j5=x4474;
r12=0;
r02=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x4472);
rxp1_0=(pz*r11);
rxp1_1=(r01*x4472);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal gconst30=x4474;
IkReal gconst31=((-1.0)*rxp0_2*x4475);
IkReal gconst32=(x4473*x4475);
j0eval[0]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4477 = IKatan2WithCheck(IkReal(((((-1.0)*gconst32*r01))+(((-1.0)*gconst31*r00)))),IkReal((((gconst32*r11))+((gconst31*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4477.valid){
continue;
}
CheckValue<IkReal> x4478=IKPowWithIntegerCheck(IKsign((r22*(((((-1.0)*(gconst32*gconst32)))+(((-1.0)*(gconst31*gconst31))))))),-1);
if(!x4478.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4477.value)+(((1.5707963267949)*(x4478.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x4479=IKsin(j0);
IkReal x4480=IKcos(j0);
IkReal x4481=((1.0)*x4480);
IkReal x4482=((1.0)*x4479);
IkReal x4483=(gconst32*x4482);
evalcond[0]=((((-1.0)*px*x4481))+(((-1.0)*py*x4482)));
evalcond[1]=((-1.0)+((gconst31*r01*x4480))+((gconst31*r11*x4479))+(((-1.0)*r10*x4483))+(((-1.0)*gconst32*r00*x4481)));
evalcond[2]=((((-1.0)*gconst31*r00*x4481))+(((-1.0)*r11*x4483))+(((-1.0)*gconst31*r10*x4482))+(((-1.0)*gconst32*r01*x4481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[2+1], zeror[2];
int numroots;
IkReal x4484=(gconst32*r00*sj0);
IkReal x4485=(cj0*gconst31*r11);
IkReal x4486=(cj0*gconst32*r10);
IkReal x4487=(gconst31*r01*sj0);
op[0]=((((-1.0)*x4484))+(((-1.0)*x4485))+x4486+x4487);
op[1]=0;
op[2]=((((-1.0)*x4486))+(((-1.0)*x4487))+x4484+x4485);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4488=(cj4*r22);
IkReal x4489=(r22*sj4);
if( IKabs((((sj1*x4488))+((cj1*x4489)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x4489))+((cj1*x4488)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x4488))+((cj1*x4489))))+IKsqr(((((-1.0)*sj1*x4489))+((cj1*x4488))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x4488))+((cj1*x4489))), ((((-1.0)*sj1*x4489))+((cj1*x4488))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4490=IKsin(j2);
IkReal x4491=IKcos(j2);
IkReal x4492=(cj1*sj0);
IkReal x4493=((1.0)*cj1);
IkReal x4494=(gconst32*r01);
IkReal x4495=((1.0)*cj4);
IkReal x4496=(sj0*sj1);
IkReal x4497=(gconst31*r00);
IkReal x4498=(cj0*py);
IkReal x4499=((1.0)*sj1);
IkReal x4500=(sj4*x4491);
IkReal x4501=((1.17e-6)*x4490);
IkReal x4502=(sj4*x4490);
IkReal x4503=(cj0*gconst32*r11);
IkReal x4504=(cj4*x4491);
IkReal x4505=(x4490*x4495);
IkReal x4506=((1.0)*cj0*gconst31*r10);
evalcond[0]=((((-1.0)*x4505))+x4500+((r22*sj1)));
evalcond[1]=(x4504+x4502+(((-1.0)*r22*x4493)));
evalcond[2]=((((-1.0)*x4505))+x4500+((x4494*x4496))+(((-1.0)*x4499*x4503))+(((-1.0)*cj0*gconst31*r10*x4499))+((x4496*x4497)));
evalcond[3]=(((sj4*x4501))+(((-0.56747)*x4490))+((px*x4492))+((pz*sj1))+(((1.17e-6)*x4504))+(((-1.08e-6)*x4491))+(((-1.0)*x4493*x4498)));
evalcond[4]=(((x4492*x4494))+((x4492*x4497))+(((-1.0)*x4493*x4503))+(((-1.0)*x4502))+(((-1.0)*x4491*x4495))+(((-1.0)*cj0*gconst31*r10*x4493)));
evalcond[5]=((0.73)+(((0.56747)*x4491))+(((-1.0)*x4498*x4499))+((cj4*x4501))+(((-1.17e-6)*x4500))+(((-1.0)*pz*x4493))+((px*x4496))+(((-1.08e-6)*x4490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4507 = IKatan2WithCheck(IkReal(((((-1.0)*gconst32*r01))+(((-1.0)*gconst31*r00)))),IkReal((((gconst32*r11))+((gconst31*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4507.valid){
continue;
}
CheckValue<IkReal> x4508=IKPowWithIntegerCheck(IKsign((r22*(((((-1.0)*(gconst32*gconst32)))+(((-1.0)*(gconst31*gconst31))))))),-1);
if(!x4508.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4507.value)+(((1.5707963267949)*(x4508.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4509=IKcos(j0);
IkReal x4510=IKsin(j0);
IkReal x4511=((1.0)*x4509);
IkReal x4512=((1.0)*x4510);
evalcond[0]=((((-1.0)*r02*x4511))+(((-1.0)*r12*x4512)));
evalcond[1]=((((-1.0)*py*x4512))+(((-1.0)*px*x4511)));
evalcond[2]=((-1.0)+((gconst31*r11*x4510))+((gconst31*r01*x4509))+(((-1.0)*gconst32*r10*x4512))+(((-1.0)*gconst32*r00*x4511)));
evalcond[3]=((((-1.0)*gconst31*r00*x4511))+(((-1.0)*gconst31*r10*x4512))+(((-1.0)*gconst32*r01*x4511))+(((-1.0)*gconst32*r11*x4512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
CheckValue<IkReal> x4516 = IKatan2WithCheck(IkReal(rxp0_2),IkReal(((-1.0)*rxp1_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4516.valid){
continue;
}
IkReal x4513=((-1.0)*(x4516.value));
IkReal x4514=x4336;
IkReal x4515=((-1.0)*x4514);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst31;
cj5=gconst32;
j5=x4513;
IkReal gconst30=x4513;
IkReal gconst31=(rxp0_2*x4515);
IkReal gconst32=(rxp1_2*x4515);
IkReal x4517=x4336;
IkReal x4518=(rxp0_2*x4517);
IkReal x4519=(rxp1_2*x4517);
j1eval[0]=((IKabs((((r01*sj0*x4518))+(((-1.0)*r00*sj0*x4519))+((cj0*r10*x4519))+(((-1.0)*cj0*r11*x4518)))))+(IKabs(((((-1.0)*r20*x4519))+((r21*x4518))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
CheckValue<IkReal> x4523 = IKatan2WithCheck(IkReal(rxp0_2),IkReal(((-1.0)*rxp1_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4523.valid){
continue;
}
IkReal x4520=((-1.0)*(x4523.value));
IkReal x4521=x4336;
IkReal x4522=((-1.0)*x4521);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst31;
cj5=gconst32;
j5=x4520;
IkReal gconst30=x4520;
IkReal gconst31=(rxp0_2*x4522);
IkReal gconst32=(rxp1_2*x4522);
IkReal x4524=x4336;
IkReal x4525=(sj0*x4524);
IkReal x4526=(rxp1_2*x4524);
IkReal x4527=((1.0)*rxp0_2*x4524);
j1eval[0]=((IKabs(((((-1.0)*r21*x4527))+((r20*x4526)))))+(IKabs((((cj0*r10*x4526))+(((-1.0)*r00*rxp1_2*x4525))+((r01*rxp0_2*x4525))+(((-1.0)*cj0*r11*x4527))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x4528=((1.0)*gconst32);
CheckValue<IkReal> x4530 = IKatan2WithCheck(IkReal((((gconst31*r21))+(((-1.0)*r20*x4528)))),IkReal(((((-1.0)*gconst31*r01*sj0))+((gconst32*r00*sj0))+((cj0*gconst31*r11))+(((-1.0)*cj0*r10*x4528)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4530.valid){
continue;
}
IkReal x4529=x4530.value;
j1array[0]=((-1.0)*x4529);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4529)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4531=IKcos(j1);
IkReal x4532=IKsin(j1);
IkReal x4533=((1.0)*x4531);
evalcond[0]=((((-1.0)*gconst31*r21*x4532))+(((-1.0)*gconst31*r01*sj0*x4533))+((cj0*gconst31*r11*x4531))+(((-1.0)*cj0*gconst32*r10*x4533))+((gconst32*r00*sj0*x4531))+((gconst32*r20*x4532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4534=((1.0)*sj4);
IkReal x4535=(r02*sj0);
IkReal x4536=(r22*sj1);
IkReal x4537=(cj1*cj4);
IkReal x4538=(cj0*r12);
IkReal x4539=(cj1*sj4);
IkReal x4540=(cj4*sj1);
if( IKabs((((sj1*sj4*x4538))+((cj4*x4536))+((r22*x4539))+(((-1.0)*x4537*x4538))+(((-1.0)*sj1*x4534*x4535))+((x4535*x4537)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x4538*x4539))+((r22*x4537))+(((-1.0)*cj1*x4534*x4535))+(((-1.0)*x4535*x4540))+(((-1.0)*x4534*x4536))+((x4538*x4540)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*sj4*x4538))+((cj4*x4536))+((r22*x4539))+(((-1.0)*x4537*x4538))+(((-1.0)*sj1*x4534*x4535))+((x4535*x4537))))+IKsqr((((x4538*x4539))+((r22*x4537))+(((-1.0)*cj1*x4534*x4535))+(((-1.0)*x4535*x4540))+(((-1.0)*x4534*x4536))+((x4538*x4540))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*sj4*x4538))+((cj4*x4536))+((r22*x4539))+(((-1.0)*x4537*x4538))+(((-1.0)*sj1*x4534*x4535))+((x4535*x4537))), (((x4538*x4539))+((r22*x4537))+(((-1.0)*cj1*x4534*x4535))+(((-1.0)*x4535*x4540))+(((-1.0)*x4534*x4536))+((x4538*x4540))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4541=IKsin(j2);
IkReal x4542=IKcos(j2);
IkReal x4543=((1.17e-6)*cj4);
IkReal x4544=(cj1*sj0);
IkReal x4545=((1.0)*cj1);
IkReal x4546=(gconst32*sj1);
IkReal x4547=((1.0)*cj4);
IkReal x4548=(sj0*sj1);
IkReal x4549=(gconst31*r00);
IkReal x4550=(gconst31*r20);
IkReal x4551=(cj0*r11);
IkReal x4552=(cj0*py);
IkReal x4553=((1.0)*sj1);
IkReal x4554=(cj0*r12);
IkReal x4555=(sj4*x4542);
IkReal x4556=(sj4*x4541);
IkReal x4557=(x4541*x4547);
IkReal x4558=((1.0)*cj0*gconst31*r10);
evalcond[0]=(((r02*x4544))+x4555+((r22*sj1))+(((-1.0)*x4557))+(((-1.0)*x4545*x4554)));
evalcond[1]=((((-1.0)*r22*x4545))+((r02*x4548))+x4556+(((-1.0)*x4553*x4554))+((cj4*x4542)));
evalcond[2]=((((1.17e-6)*x4556))+((x4542*x4543))+(((-1.0)*x4545*x4552))+(((-0.56747)*x4541))+(((-1.08e-6)*x4542))+((pz*sj1))+((px*x4544)));
evalcond[3]=((0.73)+(((0.56747)*x4542))+(((-1.0)*x4552*x4553))+(((-1.0)*pz*x4545))+(((-1.08e-6)*x4541))+((x4541*x4543))+(((-1.17e-6)*x4555))+((px*x4548)));
evalcond[4]=((((-1.0)*x4542*x4547))+((gconst32*r01*x4544))+((x4544*x4549))+(((-1.0)*cj0*gconst31*r10*x4545))+(((-1.0)*x4556))+((r21*x4546))+(((-1.0)*gconst32*x4545*x4551))+((sj1*x4550)));
evalcond[5]=(((r01*sj0*x4546))+x4555+(((-1.0)*x4557))+(((-1.0)*cj0*gconst31*r10*x4553))+(((-1.0)*x4545*x4550))+((x4548*x4549))+(((-1.0)*gconst32*r21*x4545))+(((-1.0)*x4546*x4551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x4559=((1.0)*gconst31);
CheckValue<IkReal> x4561 = IKatan2WithCheck(IkReal((((gconst32*r00*sj0))+((cj0*gconst31*r11))+(((-1.0)*cj0*gconst32*r10))+(((-1.0)*r01*sj0*x4559)))),IkReal((((gconst32*r20))+(((-1.0)*r21*x4559)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4561.valid){
continue;
}
IkReal x4560=x4561.value;
j1array[0]=((-1.0)*x4560);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4560)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4562=IKsin(j1);
IkReal x4563=IKcos(j1);
IkReal x4564=((1.0)*gconst32);
IkReal x4565=(cj0*x4562);
IkReal x4566=(sj0*x4562);
evalcond[0]=(((gconst31*r21*x4563))+((gconst31*r11*x4565))+(((-1.0)*r20*x4563*x4564))+(((-1.0)*r10*x4564*x4565))+(((-1.0)*gconst31*r01*x4566))+((gconst32*r00*x4566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4567=((1.0)*sj4);
IkReal x4568=(r02*sj0);
IkReal x4569=(r22*sj1);
IkReal x4570=(cj1*cj4);
IkReal x4571=(cj0*r12);
IkReal x4572=(cj1*sj4);
IkReal x4573=(cj4*sj1);
if( IKabs((((sj1*sj4*x4571))+((cj4*x4569))+((r22*x4572))+(((-1.0)*sj1*x4567*x4568))+((x4568*x4570))+(((-1.0)*x4570*x4571)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x4567*x4569))+((r22*x4570))+(((-1.0)*x4568*x4573))+(((-1.0)*cj1*x4567*x4568))+((x4571*x4573))+((x4571*x4572)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*sj4*x4571))+((cj4*x4569))+((r22*x4572))+(((-1.0)*sj1*x4567*x4568))+((x4568*x4570))+(((-1.0)*x4570*x4571))))+IKsqr(((((-1.0)*x4567*x4569))+((r22*x4570))+(((-1.0)*x4568*x4573))+(((-1.0)*cj1*x4567*x4568))+((x4571*x4573))+((x4571*x4572))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*sj4*x4571))+((cj4*x4569))+((r22*x4572))+(((-1.0)*sj1*x4567*x4568))+((x4568*x4570))+(((-1.0)*x4570*x4571))), ((((-1.0)*x4567*x4569))+((r22*x4570))+(((-1.0)*x4568*x4573))+(((-1.0)*cj1*x4567*x4568))+((x4571*x4573))+((x4571*x4572))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4574=IKsin(j2);
IkReal x4575=IKcos(j2);
IkReal x4576=((1.17e-6)*cj4);
IkReal x4577=(cj1*sj0);
IkReal x4578=((1.0)*cj1);
IkReal x4579=(gconst32*sj1);
IkReal x4580=((1.0)*cj4);
IkReal x4581=(sj0*sj1);
IkReal x4582=(gconst31*r00);
IkReal x4583=(gconst31*r20);
IkReal x4584=(cj0*r11);
IkReal x4585=(cj0*py);
IkReal x4586=((1.0)*sj1);
IkReal x4587=(cj0*r12);
IkReal x4588=(sj4*x4575);
IkReal x4589=(sj4*x4574);
IkReal x4590=(x4574*x4580);
IkReal x4591=((1.0)*cj0*gconst31*r10);
evalcond[0]=((((-1.0)*x4590))+x4588+((r22*sj1))+((r02*x4577))+(((-1.0)*x4578*x4587)));
evalcond[1]=(((r02*x4581))+x4589+((cj4*x4575))+(((-1.0)*x4586*x4587))+(((-1.0)*r22*x4578)));
evalcond[2]=((((-1.08e-6)*x4575))+(((1.17e-6)*x4589))+((x4575*x4576))+((pz*sj1))+((px*x4577))+(((-0.56747)*x4574))+(((-1.0)*x4578*x4585)));
evalcond[3]=((0.73)+(((-1.0)*pz*x4578))+(((-1.08e-6)*x4574))+(((-1.17e-6)*x4588))+((x4574*x4576))+((px*x4581))+(((0.56747)*x4575))+(((-1.0)*x4585*x4586)));
evalcond[4]=((((-1.0)*gconst32*x4578*x4584))+((x4577*x4582))+(((-1.0)*x4575*x4580))+((sj1*x4583))+((r21*x4579))+(((-1.0)*x4589))+((gconst32*r01*x4577))+(((-1.0)*cj0*gconst31*r10*x4578)));
evalcond[5]=((((-1.0)*x4590))+((x4581*x4582))+(((-1.0)*cj0*gconst31*r10*x4586))+x4588+(((-1.0)*gconst32*r21*x4578))+(((-1.0)*x4579*x4584))+((r01*sj0*x4579))+(((-1.0)*x4578*x4583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4592=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst31*r20))+(((-1.0)*gconst32*r21)))),-1);
if(!x4592.valid){
continue;
}
CheckValue<IkReal> x4593 = IKatan2WithCheck(IkReal(r02),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4593.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4592.value)))+(x4593.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4594=IKcos(j0);
IkReal x4595=IKsin(j0);
IkReal x4596=((1.0)*x4594);
IkReal x4597=((1.0)*x4595);
evalcond[0]=((((-1.0)*r02*x4596))+(((-1.0)*r12*x4597)));
evalcond[1]=((((-1.0)*px*x4596))+(((-1.0)*py*x4597)));
evalcond[2]=((-1.0)+(((-1.0)*gconst32*r00*x4596))+(((-1.0)*gconst32*r10*x4597))+((gconst31*r01*x4594))+((gconst31*r11*x4595)));
evalcond[3]=((((-1.0)*gconst31*r10*x4597))+(((-1.0)*gconst31*r00*x4596))+(((-1.0)*gconst32*r01*x4596))+(((-1.0)*gconst32*r11*x4597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
CheckValue<IkReal> x4601 = IKatan2WithCheck(IkReal(rxp0_2),IkReal(((-1.0)*rxp1_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4601.valid){
continue;
}
IkReal x4598=((-1.0)*(x4601.value));
IkReal x4599=x4336;
IkReal x4600=((-1.0)*x4599);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst31;
cj5=gconst32;
j5=x4598;
IkReal gconst30=x4598;
IkReal gconst31=(rxp0_2*x4600);
IkReal gconst32=(rxp1_2*x4600);
IkReal x4602=x4336;
IkReal x4603=(rxp0_2*x4602);
IkReal x4604=(rxp1_2*x4602);
j1eval[0]=((IKabs(((((-1.0)*r00*sj0*x4604))+((r01*sj0*x4603))+(((-1.0)*cj0*r11*x4603))+((cj0*r10*x4604)))))+(IKabs(((((-1.0)*r20*x4604))+((r21*x4603))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
CheckValue<IkReal> x4608 = IKatan2WithCheck(IkReal(rxp0_2),IkReal(((-1.0)*rxp1_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4608.valid){
continue;
}
IkReal x4605=((-1.0)*(x4608.value));
IkReal x4606=x4336;
IkReal x4607=((-1.0)*x4606);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst31;
cj5=gconst32;
j5=x4605;
IkReal gconst30=x4605;
IkReal gconst31=(rxp0_2*x4607);
IkReal gconst32=(rxp1_2*x4607);
IkReal x4609=x4336;
IkReal x4610=(sj0*x4609);
IkReal x4611=(rxp1_2*x4609);
IkReal x4612=((1.0)*rxp0_2*x4609);
j1eval[0]=((IKabs((((r01*rxp0_2*x4610))+(((-1.0)*r00*rxp1_2*x4610))+((cj0*r10*x4611))+(((-1.0)*cj0*r11*x4612)))))+(IKabs((((r20*x4611))+(((-1.0)*r21*x4612))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x4613=((1.0)*gconst32);
CheckValue<IkReal> x4615 = IKatan2WithCheck(IkReal((((gconst31*r21))+(((-1.0)*r20*x4613)))),IkReal(((((-1.0)*gconst31*r01*sj0))+(((-1.0)*cj0*r10*x4613))+((gconst32*r00*sj0))+((cj0*gconst31*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4615.valid){
continue;
}
IkReal x4614=x4615.value;
j1array[0]=((-1.0)*x4614);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4614)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4616=IKcos(j1);
IkReal x4617=IKsin(j1);
IkReal x4618=((1.0)*x4616);
evalcond[0]=((((-1.0)*gconst31*r01*sj0*x4618))+((gconst32*r00*sj0*x4616))+((cj0*gconst31*r11*x4616))+(((-1.0)*gconst31*r21*x4617))+((gconst32*r20*x4617))+(((-1.0)*cj0*gconst32*r10*x4618)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4619=((1.0)*sj4);
IkReal x4620=(r02*sj0);
IkReal x4621=(r22*sj1);
IkReal x4622=(cj1*cj4);
IkReal x4623=(cj0*r12);
IkReal x4624=(cj1*sj4);
IkReal x4625=(cj4*sj1);
if( IKabs((((x4620*x4622))+(((-1.0)*x4622*x4623))+((cj4*x4621))+((sj1*sj4*x4623))+(((-1.0)*sj1*x4619*x4620))+((r22*x4624)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*x4619*x4620))+((x4623*x4624))+((x4623*x4625))+(((-1.0)*x4619*x4621))+(((-1.0)*x4620*x4625))+((r22*x4622)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x4620*x4622))+(((-1.0)*x4622*x4623))+((cj4*x4621))+((sj1*sj4*x4623))+(((-1.0)*sj1*x4619*x4620))+((r22*x4624))))+IKsqr(((((-1.0)*cj1*x4619*x4620))+((x4623*x4624))+((x4623*x4625))+(((-1.0)*x4619*x4621))+(((-1.0)*x4620*x4625))+((r22*x4622))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x4620*x4622))+(((-1.0)*x4622*x4623))+((cj4*x4621))+((sj1*sj4*x4623))+(((-1.0)*sj1*x4619*x4620))+((r22*x4624))), ((((-1.0)*cj1*x4619*x4620))+((x4623*x4624))+((x4623*x4625))+(((-1.0)*x4619*x4621))+(((-1.0)*x4620*x4625))+((r22*x4622))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4626=IKsin(j2);
IkReal x4627=IKcos(j2);
IkReal x4628=((1.17e-6)*cj4);
IkReal x4629=(cj1*sj0);
IkReal x4630=((1.0)*cj1);
IkReal x4631=(gconst32*sj1);
IkReal x4632=((1.0)*cj4);
IkReal x4633=(sj0*sj1);
IkReal x4634=(gconst31*r00);
IkReal x4635=(gconst31*r20);
IkReal x4636=(cj0*r11);
IkReal x4637=(cj0*py);
IkReal x4638=((1.0)*sj1);
IkReal x4639=(cj0*r12);
IkReal x4640=(sj4*x4627);
IkReal x4641=(sj4*x4626);
IkReal x4642=(x4626*x4632);
IkReal x4643=((1.0)*cj0*gconst31*r10);
evalcond[0]=(((r22*sj1))+x4640+(((-1.0)*x4630*x4639))+((r02*x4629))+(((-1.0)*x4642)));
evalcond[1]=(x4641+((cj4*x4627))+((r02*x4633))+(((-1.0)*x4638*x4639))+(((-1.0)*r22*x4630)));
evalcond[2]=(((px*x4629))+(((-1.0)*x4630*x4637))+((x4627*x4628))+(((1.17e-6)*x4641))+((pz*sj1))+(((-1.08e-6)*x4627))+(((-0.56747)*x4626)));
evalcond[3]=((0.73)+(((-1.17e-6)*x4640))+(((-1.0)*pz*x4630))+((px*x4633))+(((-1.0)*x4637*x4638))+(((0.56747)*x4627))+((x4626*x4628))+(((-1.08e-6)*x4626)));
evalcond[4]=(((r21*x4631))+((gconst32*r01*x4629))+(((-1.0)*gconst32*x4630*x4636))+((sj1*x4635))+(((-1.0)*x4641))+(((-1.0)*cj0*gconst31*r10*x4630))+((x4629*x4634))+(((-1.0)*x4627*x4632)));
evalcond[5]=(((r01*sj0*x4631))+((x4633*x4634))+x4640+(((-1.0)*x4630*x4635))+(((-1.0)*cj0*gconst31*r10*x4638))+(((-1.0)*x4642))+(((-1.0)*gconst32*r21*x4630))+(((-1.0)*x4631*x4636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x4644=((1.0)*gconst31);
CheckValue<IkReal> x4646 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj0*x4644))+((gconst32*r00*sj0))+((cj0*gconst31*r11))+(((-1.0)*cj0*gconst32*r10)))),IkReal((((gconst32*r20))+(((-1.0)*r21*x4644)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4646.valid){
continue;
}
IkReal x4645=x4646.value;
j1array[0]=((-1.0)*x4645);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4645)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4647=IKsin(j1);
IkReal x4648=IKcos(j1);
IkReal x4649=((1.0)*gconst32);
IkReal x4650=(cj0*x4647);
IkReal x4651=(sj0*x4647);
evalcond[0]=(((gconst31*r21*x4648))+((gconst32*r00*x4651))+(((-1.0)*r10*x4649*x4650))+((gconst31*r11*x4650))+(((-1.0)*gconst31*r01*x4651))+(((-1.0)*r20*x4648*x4649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4652=((1.0)*sj4);
IkReal x4653=(r02*sj0);
IkReal x4654=(r22*sj1);
IkReal x4655=(cj1*cj4);
IkReal x4656=(cj0*r12);
IkReal x4657=(cj1*sj4);
IkReal x4658=(cj4*sj1);
if( IKabs((((x4653*x4655))+((cj4*x4654))+(((-1.0)*sj1*x4652*x4653))+((r22*x4657))+((sj1*sj4*x4656))+(((-1.0)*x4655*x4656)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x4653*x4658))+((x4656*x4657))+((x4656*x4658))+(((-1.0)*cj1*x4652*x4653))+((r22*x4655))+(((-1.0)*x4652*x4654)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x4653*x4655))+((cj4*x4654))+(((-1.0)*sj1*x4652*x4653))+((r22*x4657))+((sj1*sj4*x4656))+(((-1.0)*x4655*x4656))))+IKsqr(((((-1.0)*x4653*x4658))+((x4656*x4657))+((x4656*x4658))+(((-1.0)*cj1*x4652*x4653))+((r22*x4655))+(((-1.0)*x4652*x4654))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x4653*x4655))+((cj4*x4654))+(((-1.0)*sj1*x4652*x4653))+((r22*x4657))+((sj1*sj4*x4656))+(((-1.0)*x4655*x4656))), ((((-1.0)*x4653*x4658))+((x4656*x4657))+((x4656*x4658))+(((-1.0)*cj1*x4652*x4653))+((r22*x4655))+(((-1.0)*x4652*x4654))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4659=IKsin(j2);
IkReal x4660=IKcos(j2);
IkReal x4661=((1.17e-6)*cj4);
IkReal x4662=(cj1*sj0);
IkReal x4663=((1.0)*cj1);
IkReal x4664=(gconst32*sj1);
IkReal x4665=((1.0)*cj4);
IkReal x4666=(sj0*sj1);
IkReal x4667=(gconst31*r00);
IkReal x4668=(gconst31*r20);
IkReal x4669=(cj0*r11);
IkReal x4670=(cj0*py);
IkReal x4671=((1.0)*sj1);
IkReal x4672=(cj0*r12);
IkReal x4673=(sj4*x4660);
IkReal x4674=(sj4*x4659);
IkReal x4675=(x4659*x4665);
IkReal x4676=((1.0)*cj0*gconst31*r10);
evalcond[0]=((((-1.0)*x4663*x4672))+((r02*x4662))+((r22*sj1))+x4673+(((-1.0)*x4675)));
evalcond[1]=(((r02*x4666))+x4674+(((-1.0)*x4671*x4672))+(((-1.0)*r22*x4663))+((cj4*x4660)));
evalcond[2]=((((-0.56747)*x4659))+(((-1.0)*x4663*x4670))+(((-1.08e-6)*x4660))+((px*x4662))+(((1.17e-6)*x4674))+((pz*sj1))+((x4660*x4661)));
evalcond[3]=((0.73)+(((-1.17e-6)*x4673))+((x4659*x4661))+(((-1.0)*pz*x4663))+(((0.56747)*x4660))+((px*x4666))+(((-1.08e-6)*x4659))+(((-1.0)*x4670*x4671)));
evalcond[4]=(((r21*x4664))+((x4662*x4667))+((sj1*x4668))+(((-1.0)*x4674))+(((-1.0)*cj0*gconst31*r10*x4663))+(((-1.0)*x4660*x4665))+((gconst32*r01*x4662))+(((-1.0)*gconst32*x4663*x4669)));
evalcond[5]=((((-1.0)*x4663*x4668))+x4673+(((-1.0)*x4675))+(((-1.0)*cj0*gconst31*r10*x4671))+((r01*sj0*x4664))+((x4666*x4667))+(((-1.0)*gconst32*r21*x4663))+(((-1.0)*x4664*x4669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4679 = ((rxp1_2*rxp1_2)+(rxp0_2*rxp0_2));
if(IKabs(x4679)==0){
continue;
}
IkReal x4677=pow(x4679,-0.5);
IkReal x4678=((1.0)*x4677);
CheckValue<IkReal> x4680 = IKatan2WithCheck(IkReal(rxp0_2),IkReal(((-1.0)*rxp1_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4680.valid){
continue;
}
IkReal gconst33=((3.14159265358979)+(((-1.0)*(x4680.value))));
IkReal gconst34=(rxp0_2*x4678);
IkReal gconst35=(rxp1_2*x4678);
CheckValue<IkReal> x4681 = IKatan2WithCheck(IkReal(rxp0_2),IkReal(((-1.0)*rxp1_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4681.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4681.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
CheckValue<IkReal> x4685 = IKatan2WithCheck(IkReal(rxp0_2),IkReal(((-1.0)*rxp1_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4685.valid){
continue;
}
IkReal x4682=((1.0)*(x4685.value));
IkReal x4683=x4677;
IkReal x4684=((1.0)*x4683);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x4682)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x4682)));
IkReal gconst34=(rxp0_2*x4684);
IkReal gconst35=(rxp1_2*x4684);
j0eval[0]=0;
j0eval[1]=((IKabs(px))+(IKabs(py)));
j0eval[2]=0;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
CheckValue<IkReal> x4689 = IKatan2WithCheck(IkReal(rxp0_2),IkReal(((-1.0)*rxp1_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4689.valid){
continue;
}
IkReal x4686=((1.0)*(x4689.value));
IkReal x4687=x4677;
IkReal x4688=((1.0)*x4687);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x4686)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x4686)));
IkReal gconst34=(rxp0_2*x4688);
IkReal gconst35=(rxp1_2*x4688);
j0eval[0]=((IKabs(r02))+(IKabs(r12)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
CheckValue<IkReal> x4693 = IKatan2WithCheck(IkReal(rxp0_2),IkReal(((-1.0)*rxp1_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4693.valid){
continue;
}
IkReal x4690=((1.0)*(x4693.value));
IkReal x4691=x4677;
IkReal x4692=((1.0)*x4691);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x4690)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x4690)));
IkReal gconst34=(rxp0_2*x4692);
IkReal gconst35=(rxp1_2*x4692);
IkReal x4694=x4677;
IkReal x4695=(rxp0_2*x4694);
IkReal x4696=(rxp1_2*x4694);
j0eval[0]=((IKabs((((r11*x4696))+((r10*x4695)))))+(IKabs((((r01*x4696))+((r00*x4695))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
CheckValue<IkReal> x4700 = IKatan2WithCheck(IkReal(rxp0_2),IkReal(((-1.0)*rxp1_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4700.valid){
continue;
}
IkReal x4697=((1.0)*(x4700.value));
IkReal x4698=x4677;
IkReal x4699=((1.0)*x4698);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x4697)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst33=((3.14159265358979)+(((-1.0)*x4697)));
IkReal gconst34=(rxp0_2*x4699);
IkReal gconst35=(rxp1_2*x4699);
j0eval[0]=0;
j0eval[1]=((IKabs(px))+(IKabs(py)));
j0eval[2]=0;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
CheckValue<IkReal> x4704 = IKatan2WithCheck(IkReal(rxp0_2),IkReal(((-1.0)*rxp1_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4704.valid){
continue;
}
IkReal x4701=((1.0)*(x4704.value));
IkReal x4702=x4677;
IkReal x4703=((1.0)*x4702);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x4701)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst33=((3.14159265358979)+(((-1.0)*x4701)));
IkReal gconst34=(rxp0_2*x4703);
IkReal gconst35=(rxp1_2*x4703);
j0eval[0]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4705=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst35*r21))+(((-1.0)*gconst34*r20)))),-1);
if(!x4705.valid){
continue;
}
CheckValue<IkReal> x4706 = IKatan2WithCheck(IkReal(r02),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4706.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4705.value)))+(x4706.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4707=IKcos(j0);
IkReal x4708=IKsin(j0);
IkReal x4709=((1.0)*gconst35);
IkReal x4710=((1.0)*x4707);
IkReal x4711=(r11*x4708);
IkReal x4712=((1.0)*x4708);
evalcond[0]=((((-1.0)*r02*x4710))+(((-1.0)*r12*x4712)));
evalcond[1]=((((-1.0)*px*x4710))+(((-1.0)*py*x4712)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x4708*x4709))+(((-1.0)*r00*x4707*x4709))+((gconst34*r01*x4707))+((gconst34*x4711)));
evalcond[3]=((((-1.0)*x4709*x4711))+(((-1.0)*gconst34*r10*x4712))+(((-1.0)*gconst34*r00*x4710))+(((-1.0)*r01*x4707*x4709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
CheckValue<IkReal> x4716 = IKatan2WithCheck(IkReal(rxp0_2),IkReal(((-1.0)*rxp1_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4716.valid){
continue;
}
IkReal x4713=((1.0)*(x4716.value));
IkReal x4714=x4677;
IkReal x4715=((1.0)*x4714);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x4713)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst33=((3.14159265358979)+(((-1.0)*x4713)));
IkReal gconst34=(rxp0_2*x4715);
IkReal gconst35=(rxp1_2*x4715);
IkReal x4717=x4677;
IkReal x4718=((1.0)*x4717);
IkReal x4719=(rxp1_2*x4717);
j1eval[0]=((IKabs(((((-1.0)*r21*rxp0_2*x4718))+((r20*x4719)))))+(IKabs((((cj0*r11*rxp0_2*x4717))+(((-1.0)*cj0*r10*rxp1_2*x4718))+((r00*sj0*x4719))+(((-1.0)*r01*rxp0_2*sj0*x4718))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
CheckValue<IkReal> x4723 = IKatan2WithCheck(IkReal(rxp0_2),IkReal(((-1.0)*rxp1_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4723.valid){
continue;
}
IkReal x4720=((1.0)*(x4723.value));
IkReal x4721=x4677;
IkReal x4722=((1.0)*x4721);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x4720)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst33=((3.14159265358979)+(((-1.0)*x4720)));
IkReal gconst34=(rxp0_2*x4722);
IkReal gconst35=(rxp1_2*x4722);
IkReal x4724=x4677;
IkReal x4725=(rxp0_2*x4724);
IkReal x4726=((1.0)*rxp1_2*x4724);
j1eval[0]=((IKabs((((cj0*r11*x4725))+((r00*rxp1_2*sj0*x4724))+(((-1.0)*cj0*r10*x4726))+(((-1.0)*r01*sj0*x4725)))))+(IKabs((((r21*x4725))+(((-1.0)*r20*x4726))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x4727=((1.0)*gconst35);
CheckValue<IkReal> x4729 = IKatan2WithCheck(IkReal((((gconst34*r21))+(((-1.0)*r20*x4727)))),IkReal(((((-1.0)*cj0*r10*x4727))+((gconst35*r00*sj0))+((cj0*gconst34*r11))+(((-1.0)*gconst34*r01*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4729.valid){
continue;
}
IkReal x4728=x4729.value;
j1array[0]=((-1.0)*x4728);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4728)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4730=IKcos(j1);
IkReal x4731=IKsin(j1);
IkReal x4732=((1.0)*gconst34);
IkReal x4733=(cj0*x4730);
IkReal x4734=(sj0*x4730);
evalcond[0]=((((-1.0)*r01*x4732*x4734))+(((-1.0)*gconst35*r10*x4733))+((gconst35*r00*x4734))+((gconst34*r11*x4733))+(((-1.0)*r21*x4731*x4732))+((gconst35*r20*x4731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4735=((1.0)*cj4);
IkReal x4736=(r02*sj0);
IkReal x4737=(cj0*cj1*r12);
IkReal x4738=(cj0*r12*sj1);
IkReal x4739=((1.0)*sj4*x4736);
if( IKabs(((((-1.0)*x4735*x4737))+(((-1.0)*sj1*x4739))+((cj1*cj4*x4736))+((sj4*x4738)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*x4738))+(((-1.0)*cj1*x4739))+(((-1.0)*sj1*x4735*x4736))+((sj4*x4737)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4735*x4737))+(((-1.0)*sj1*x4739))+((cj1*cj4*x4736))+((sj4*x4738))))+IKsqr((((cj4*x4738))+(((-1.0)*cj1*x4739))+(((-1.0)*sj1*x4735*x4736))+((sj4*x4737))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x4735*x4737))+(((-1.0)*sj1*x4739))+((cj1*cj4*x4736))+((sj4*x4738))), (((cj4*x4738))+(((-1.0)*cj1*x4739))+(((-1.0)*sj1*x4735*x4736))+((sj4*x4737))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4740=IKcos(j2);
IkReal x4741=IKsin(j2);
IkReal x4742=((1.17e-6)*cj4);
IkReal x4743=((1.0)*gconst34);
IkReal x4744=(cj0*sj1);
IkReal x4745=(cj1*sj0);
IkReal x4746=(gconst35*r01);
IkReal x4747=((1.0)*cj4);
IkReal x4748=((1.0)*cj1);
IkReal x4749=(sj0*sj1);
IkReal x4750=(gconst35*r11);
IkReal x4751=(gconst35*r21);
IkReal x4752=(gconst34*r00);
IkReal x4753=(sj4*x4740);
IkReal x4754=(sj4*x4741);
IkReal x4755=(x4741*x4747);
evalcond[0]=((((-1.0)*r12*x4744))+x4754+((r02*x4749))+((cj4*x4740)));
evalcond[1]=(x4753+((r02*x4745))+(((-1.0)*x4755))+(((-1.0)*cj0*r12*x4748)));
evalcond[2]=(((px*x4745))+(((-0.56747)*x4741))+(((-1.0)*cj0*py*x4748))+((x4740*x4742))+(((-1.08e-6)*x4740))+(((1.17e-6)*x4754))+((pz*sj1)));
evalcond[3]=((0.73)+((px*x4749))+((x4741*x4742))+(((-1.08e-6)*x4741))+(((0.56747)*x4740))+(((-1.0)*py*x4744))+(((-1.17e-6)*x4753))+(((-1.0)*pz*x4748)));
evalcond[4]=(((x4745*x4752))+((gconst34*r20*sj1))+(((-1.0)*cj0*x4748*x4750))+(((-1.0)*x4740*x4747))+((sj1*x4751))+(((-1.0)*x4754))+(((-1.0)*cj0*cj1*r10*x4743))+((x4745*x4746)));
evalcond[5]=((((-1.0)*r10*x4743*x4744))+(((-1.0)*cj1*r20*x4743))+((x4746*x4749))+(((-1.0)*x4748*x4751))+x4753+((x4749*x4752))+(((-1.0)*x4755))+(((-1.0)*x4744*x4750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x4756=((1.0)*gconst34);
CheckValue<IkReal> x4758 = IKatan2WithCheck(IkReal((((gconst35*r00*sj0))+((cj0*gconst34*r11))+(((-1.0)*cj0*gconst35*r10))+(((-1.0)*r01*sj0*x4756)))),IkReal(((((-1.0)*r21*x4756))+((gconst35*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4758.valid){
continue;
}
IkReal x4757=x4758.value;
j1array[0]=((-1.0)*x4757);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4757)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4759=IKsin(j1);
IkReal x4760=IKcos(j1);
IkReal x4761=((1.0)*gconst35);
IkReal x4762=(sj0*x4759);
IkReal x4763=(cj0*x4759);
evalcond[0]=(((gconst34*r11*x4763))+(((-1.0)*r10*x4761*x4763))+(((-1.0)*r20*x4760*x4761))+((gconst35*r00*x4762))+((gconst34*r21*x4760))+(((-1.0)*gconst34*r01*x4762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4764=((1.0)*cj4);
IkReal x4765=(r02*sj0);
IkReal x4766=(cj0*cj1*r12);
IkReal x4767=(cj0*r12*sj1);
IkReal x4768=((1.0)*sj4*x4765);
if( IKabs((((sj4*x4767))+((cj1*cj4*x4765))+(((-1.0)*sj1*x4768))+(((-1.0)*x4764*x4766)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj4*x4766))+(((-1.0)*cj1*x4768))+(((-1.0)*sj1*x4764*x4765))+((cj4*x4767)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj4*x4767))+((cj1*cj4*x4765))+(((-1.0)*sj1*x4768))+(((-1.0)*x4764*x4766))))+IKsqr((((sj4*x4766))+(((-1.0)*cj1*x4768))+(((-1.0)*sj1*x4764*x4765))+((cj4*x4767))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj4*x4767))+((cj1*cj4*x4765))+(((-1.0)*sj1*x4768))+(((-1.0)*x4764*x4766))), (((sj4*x4766))+(((-1.0)*cj1*x4768))+(((-1.0)*sj1*x4764*x4765))+((cj4*x4767))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4769=IKcos(j2);
IkReal x4770=IKsin(j2);
IkReal x4771=((1.17e-6)*cj4);
IkReal x4772=((1.0)*gconst34);
IkReal x4773=(cj0*sj1);
IkReal x4774=(cj1*sj0);
IkReal x4775=(gconst35*r01);
IkReal x4776=((1.0)*cj4);
IkReal x4777=((1.0)*cj1);
IkReal x4778=(sj0*sj1);
IkReal x4779=(gconst35*r11);
IkReal x4780=(gconst35*r21);
IkReal x4781=(gconst34*r00);
IkReal x4782=(sj4*x4769);
IkReal x4783=(sj4*x4770);
IkReal x4784=(x4770*x4776);
evalcond[0]=(x4783+((r02*x4778))+((cj4*x4769))+(((-1.0)*r12*x4773)));
evalcond[1]=((((-1.0)*cj0*r12*x4777))+x4782+((r02*x4774))+(((-1.0)*x4784)));
evalcond[2]=((((-0.56747)*x4770))+((px*x4774))+(((-1.0)*cj0*py*x4777))+((x4769*x4771))+(((1.17e-6)*x4783))+((pz*sj1))+(((-1.08e-6)*x4769)));
evalcond[3]=((0.73)+(((-1.0)*pz*x4777))+((px*x4778))+(((-1.08e-6)*x4770))+(((-1.17e-6)*x4782))+(((-1.0)*py*x4773))+(((0.56747)*x4769))+((x4770*x4771)));
evalcond[4]=((((-1.0)*x4769*x4776))+((gconst34*r20*sj1))+((x4774*x4781))+(((-1.0)*x4783))+(((-1.0)*cj0*cj1*r10*x4772))+((x4774*x4775))+(((-1.0)*cj0*x4777*x4779))+((sj1*x4780)));
evalcond[5]=(((x4778*x4781))+(((-1.0)*cj1*r20*x4772))+(((-1.0)*r10*x4772*x4773))+((x4775*x4778))+(((-1.0)*x4777*x4780))+x4782+(((-1.0)*x4773*x4779))+(((-1.0)*x4784)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4785=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst34*rxp1_2))+((gconst35*rxp0_2)))),-1);
if(!x4785.valid){
continue;
}
CheckValue<IkReal> x4786 = IKatan2WithCheck(IkReal(px),IkReal(((-1.0)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x4786.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4785.value)))+(x4786.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4787=IKcos(j0);
IkReal x4788=IKsin(j0);
IkReal x4789=((1.0)*gconst35);
IkReal x4790=((1.0)*x4787);
IkReal x4791=(r11*x4788);
IkReal x4792=((1.0)*x4788);
evalcond[0]=((((-1.0)*r02*x4790))+(((-1.0)*r12*x4792)));
evalcond[1]=((((-1.0)*px*x4790))+(((-1.0)*py*x4792)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x4787*x4789))+((gconst34*r01*x4787))+(((-1.0)*r10*x4788*x4789))+((gconst34*x4791)));
evalcond[3]=((((-1.0)*x4789*x4791))+(((-1.0)*gconst34*r00*x4790))+(((-1.0)*r01*x4787*x4789))+(((-1.0)*gconst34*r10*x4792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
CheckValue<IkReal> x4796 = IKatan2WithCheck(IkReal(rxp0_2),IkReal(((-1.0)*rxp1_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4796.valid){
continue;
}
IkReal x4793=((1.0)*(x4796.value));
IkReal x4794=x4677;
IkReal x4795=((1.0)*x4794);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x4793)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst33=((3.14159265358979)+(((-1.0)*x4793)));
IkReal gconst34=(rxp0_2*x4795);
IkReal gconst35=(rxp1_2*x4795);
IkReal x4797=x4677;
IkReal x4798=((1.0)*x4797);
IkReal x4799=(rxp1_2*x4797);
j1eval[0]=((IKabs((((r20*x4799))+(((-1.0)*r21*rxp0_2*x4798)))))+(IKabs(((((-1.0)*r01*rxp0_2*sj0*x4798))+(((-1.0)*cj0*r10*rxp1_2*x4798))+((r00*sj0*x4799))+((cj0*r11*rxp0_2*x4797))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
CheckValue<IkReal> x4803 = IKatan2WithCheck(IkReal(rxp0_2),IkReal(((-1.0)*rxp1_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4803.valid){
continue;
}
IkReal x4800=((1.0)*(x4803.value));
IkReal x4801=x4677;
IkReal x4802=((1.0)*x4801);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x4800)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst33=((3.14159265358979)+(((-1.0)*x4800)));
IkReal gconst34=(rxp0_2*x4802);
IkReal gconst35=(rxp1_2*x4802);
IkReal x4804=x4677;
IkReal x4805=(rxp0_2*x4804);
IkReal x4806=((1.0)*rxp1_2*x4804);
j1eval[0]=((IKabs(((((-1.0)*r20*x4806))+((r21*x4805)))))+(IKabs(((((-1.0)*cj0*r10*x4806))+(((-1.0)*r01*sj0*x4805))+((cj0*r11*x4805))+((r00*rxp1_2*sj0*x4804))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x4807=((1.0)*gconst35);
CheckValue<IkReal> x4809 = IKatan2WithCheck(IkReal((((gconst34*r21))+(((-1.0)*r20*x4807)))),IkReal((((gconst35*r00*sj0))+(((-1.0)*cj0*r10*x4807))+((cj0*gconst34*r11))+(((-1.0)*gconst34*r01*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4809.valid){
continue;
}
IkReal x4808=x4809.value;
j1array[0]=((-1.0)*x4808);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4808)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4810=IKcos(j1);
IkReal x4811=IKsin(j1);
IkReal x4812=((1.0)*gconst34);
IkReal x4813=(cj0*x4810);
IkReal x4814=(sj0*x4810);
evalcond[0]=((((-1.0)*gconst35*r10*x4813))+((gconst34*r11*x4813))+(((-1.0)*r01*x4812*x4814))+(((-1.0)*r21*x4811*x4812))+((gconst35*r00*x4814))+((gconst35*r20*x4811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4815=((1.0)*cj4);
IkReal x4816=(r02*sj0);
IkReal x4817=(cj0*cj1*r12);
IkReal x4818=(cj0*r12*sj1);
IkReal x4819=((1.0)*sj4*x4816);
if( IKabs(((((-1.0)*x4815*x4817))+((cj1*cj4*x4816))+((sj4*x4818))+(((-1.0)*sj1*x4819)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x4815*x4816))+((cj4*x4818))+(((-1.0)*cj1*x4819))+((sj4*x4817)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4815*x4817))+((cj1*cj4*x4816))+((sj4*x4818))+(((-1.0)*sj1*x4819))))+IKsqr(((((-1.0)*sj1*x4815*x4816))+((cj4*x4818))+(((-1.0)*cj1*x4819))+((sj4*x4817))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x4815*x4817))+((cj1*cj4*x4816))+((sj4*x4818))+(((-1.0)*sj1*x4819))), ((((-1.0)*sj1*x4815*x4816))+((cj4*x4818))+(((-1.0)*cj1*x4819))+((sj4*x4817))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4820=IKcos(j2);
IkReal x4821=IKsin(j2);
IkReal x4822=((1.17e-6)*cj4);
IkReal x4823=((1.0)*gconst34);
IkReal x4824=(cj0*sj1);
IkReal x4825=(cj1*sj0);
IkReal x4826=(gconst35*r01);
IkReal x4827=((1.0)*cj4);
IkReal x4828=((1.0)*cj1);
IkReal x4829=(sj0*sj1);
IkReal x4830=(gconst35*r11);
IkReal x4831=(gconst35*r21);
IkReal x4832=(gconst34*r00);
IkReal x4833=(sj4*x4820);
IkReal x4834=(sj4*x4821);
IkReal x4835=(x4821*x4827);
evalcond[0]=(((cj4*x4820))+(((-1.0)*r12*x4824))+((r02*x4829))+x4834);
evalcond[1]=((((-1.0)*cj0*r12*x4828))+((r02*x4825))+(((-1.0)*x4835))+x4833);
evalcond[2]=(((x4820*x4822))+((px*x4825))+(((1.17e-6)*x4834))+((pz*sj1))+(((-1.08e-6)*x4820))+(((-1.0)*cj0*py*x4828))+(((-0.56747)*x4821)));
evalcond[3]=((0.73)+((x4821*x4822))+(((-1.17e-6)*x4833))+((px*x4829))+(((-1.0)*py*x4824))+(((-1.0)*pz*x4828))+(((-1.08e-6)*x4821))+(((0.56747)*x4820)));
evalcond[4]=(((x4825*x4832))+((gconst34*r20*sj1))+(((-1.0)*cj0*cj1*r10*x4823))+(((-1.0)*x4834))+((x4825*x4826))+((sj1*x4831))+(((-1.0)*x4820*x4827))+(((-1.0)*cj0*x4828*x4830)));
evalcond[5]=((((-1.0)*cj1*r20*x4823))+(((-1.0)*x4824*x4830))+((x4829*x4832))+(((-1.0)*x4835))+(((-1.0)*r10*x4823*x4824))+((x4826*x4829))+(((-1.0)*x4828*x4831))+x4833);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x4836=((1.0)*gconst34);
CheckValue<IkReal> x4838 = IKatan2WithCheck(IkReal((((gconst35*r00*sj0))+(((-1.0)*r01*sj0*x4836))+((cj0*gconst34*r11))+(((-1.0)*cj0*gconst35*r10)))),IkReal(((((-1.0)*r21*x4836))+((gconst35*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4838.valid){
continue;
}
IkReal x4837=x4838.value;
j1array[0]=((-1.0)*x4837);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4837)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4839=IKsin(j1);
IkReal x4840=IKcos(j1);
IkReal x4841=((1.0)*gconst35);
IkReal x4842=(sj0*x4839);
IkReal x4843=(cj0*x4839);
evalcond[0]=(((gconst34*r11*x4843))+((gconst34*r21*x4840))+(((-1.0)*gconst34*r01*x4842))+(((-1.0)*r20*x4840*x4841))+(((-1.0)*r10*x4841*x4843))+((gconst35*r00*x4842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4844=((1.0)*cj4);
IkReal x4845=(r02*sj0);
IkReal x4846=(cj0*cj1*r12);
IkReal x4847=(cj0*r12*sj1);
IkReal x4848=((1.0)*sj4*x4845);
if( IKabs(((((-1.0)*sj1*x4848))+(((-1.0)*x4844*x4846))+((cj1*cj4*x4845))+((sj4*x4847)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*x4847))+(((-1.0)*sj1*x4844*x4845))+(((-1.0)*cj1*x4848))+((sj4*x4846)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj1*x4848))+(((-1.0)*x4844*x4846))+((cj1*cj4*x4845))+((sj4*x4847))))+IKsqr((((cj4*x4847))+(((-1.0)*sj1*x4844*x4845))+(((-1.0)*cj1*x4848))+((sj4*x4846))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj1*x4848))+(((-1.0)*x4844*x4846))+((cj1*cj4*x4845))+((sj4*x4847))), (((cj4*x4847))+(((-1.0)*sj1*x4844*x4845))+(((-1.0)*cj1*x4848))+((sj4*x4846))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4849=IKcos(j2);
IkReal x4850=IKsin(j2);
IkReal x4851=((1.17e-6)*cj4);
IkReal x4852=((1.0)*gconst34);
IkReal x4853=(cj0*sj1);
IkReal x4854=(cj1*sj0);
IkReal x4855=(gconst35*r01);
IkReal x4856=((1.0)*cj4);
IkReal x4857=((1.0)*cj1);
IkReal x4858=(sj0*sj1);
IkReal x4859=(gconst35*r11);
IkReal x4860=(gconst35*r21);
IkReal x4861=(gconst34*r00);
IkReal x4862=(sj4*x4849);
IkReal x4863=(sj4*x4850);
IkReal x4864=(x4850*x4856);
evalcond[0]=((((-1.0)*r12*x4853))+((cj4*x4849))+((r02*x4858))+x4863);
evalcond[1]=((((-1.0)*cj0*r12*x4857))+(((-1.0)*x4864))+((r02*x4854))+x4862);
evalcond[2]=(((px*x4854))+(((-1.0)*cj0*py*x4857))+(((-0.56747)*x4850))+(((-1.08e-6)*x4849))+((x4849*x4851))+(((1.17e-6)*x4863))+((pz*sj1)));
evalcond[3]=((0.73)+((px*x4858))+(((-1.17e-6)*x4862))+(((-1.0)*pz*x4857))+(((-1.08e-6)*x4850))+(((0.56747)*x4849))+((x4850*x4851))+(((-1.0)*py*x4853)));
evalcond[4]=(((x4854*x4861))+(((-1.0)*cj0*x4857*x4859))+((gconst34*r20*sj1))+(((-1.0)*cj0*cj1*r10*x4852))+(((-1.0)*x4863))+((sj1*x4860))+(((-1.0)*x4849*x4856))+((x4854*x4855)));
evalcond[5]=((((-1.0)*x4864))+(((-1.0)*x4857*x4860))+(((-1.0)*x4853*x4859))+(((-1.0)*r10*x4852*x4853))+((x4855*x4858))+(((-1.0)*cj1*r20*x4852))+((x4858*x4861))+x4862);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4865 = IKatan2WithCheck(IkReal(((((-1.0)*gconst35*r01))+(((-1.0)*gconst34*r00)))),IkReal((((gconst35*r11))+((gconst34*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4865.valid){
continue;
}
CheckValue<IkReal> x4866=IKPowWithIntegerCheck(IKsign((r22*(((((-1.0)*(gconst34*gconst34)))+(((-1.0)*(gconst35*gconst35))))))),-1);
if(!x4866.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4865.value)+(((1.5707963267949)*(x4866.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4867=IKcos(j0);
IkReal x4868=IKsin(j0);
IkReal x4869=((1.0)*gconst35);
IkReal x4870=((1.0)*x4867);
IkReal x4871=(r11*x4868);
IkReal x4872=((1.0)*x4868);
evalcond[0]=((((-1.0)*r12*x4872))+(((-1.0)*r02*x4870)));
evalcond[1]=((((-1.0)*py*x4872))+(((-1.0)*px*x4870)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x4868*x4869))+((gconst34*r01*x4867))+((gconst34*x4871))+(((-1.0)*r00*x4867*x4869)));
evalcond[3]=((((-1.0)*x4869*x4871))+(((-1.0)*gconst34*r10*x4872))+(((-1.0)*r01*x4867*x4869))+(((-1.0)*gconst34*r00*x4870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
CheckValue<IkReal> x4876 = IKatan2WithCheck(IkReal(rxp0_2),IkReal(((-1.0)*rxp1_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4876.valid){
continue;
}
IkReal x4873=((1.0)*(x4876.value));
IkReal x4874=x4677;
IkReal x4875=((1.0)*x4874);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x4873)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x4873)));
IkReal gconst34=(rxp0_2*x4875);
IkReal gconst35=(rxp1_2*x4875);
IkReal x4877=x4677;
IkReal x4878=((1.0)*x4877);
IkReal x4879=(rxp1_2*x4877);
j1eval[0]=((IKabs((((r20*x4879))+(((-1.0)*r21*rxp0_2*x4878)))))+(IKabs((((cj0*r11*rxp0_2*x4877))+(((-1.0)*cj0*r10*rxp1_2*x4878))+((r00*sj0*x4879))+(((-1.0)*r01*rxp0_2*sj0*x4878))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
CheckValue<IkReal> x4883 = IKatan2WithCheck(IkReal(rxp0_2),IkReal(((-1.0)*rxp1_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4883.valid){
continue;
}
IkReal x4880=((1.0)*(x4883.value));
IkReal x4881=x4677;
IkReal x4882=((1.0)*x4881);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x4880)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x4880)));
IkReal gconst34=(rxp0_2*x4882);
IkReal gconst35=(rxp1_2*x4882);
IkReal x4884=x4677;
IkReal x4885=(rxp0_2*x4884);
IkReal x4886=((1.0)*rxp1_2*x4884);
j1eval[0]=((IKabs(((((-1.0)*r20*x4886))+((r21*x4885)))))+(IKabs(((((-1.0)*r01*sj0*x4885))+((r00*rxp1_2*sj0*x4884))+((cj0*r11*x4885))+(((-1.0)*cj0*r10*x4886))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x4887=((1.0)*gconst35);
CheckValue<IkReal> x4889 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x4887))+((gconst34*r21)))),IkReal((((gconst35*r00*sj0))+((cj0*gconst34*r11))+(((-1.0)*gconst34*r01*sj0))+(((-1.0)*cj0*r10*x4887)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4889.valid){
continue;
}
IkReal x4888=x4889.value;
j1array[0]=((-1.0)*x4888);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4888)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4890=IKcos(j1);
IkReal x4891=IKsin(j1);
IkReal x4892=((1.0)*gconst34);
IkReal x4893=(cj0*x4890);
IkReal x4894=(sj0*x4890);
evalcond[0]=((((-1.0)*gconst35*r10*x4893))+((gconst34*r11*x4893))+(((-1.0)*r21*x4891*x4892))+(((-1.0)*r01*x4892*x4894))+((gconst35*r20*x4891))+((gconst35*r00*x4894)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4895=((1.0)*sj4);
IkReal x4896=(r02*sj0);
IkReal x4897=(r22*sj1);
IkReal x4898=(cj1*cj4);
IkReal x4899=(cj0*r12);
IkReal x4900=(cj1*sj4);
IkReal x4901=(cj4*sj1);
if( IKabs(((((-1.0)*x4898*x4899))+(((-1.0)*sj1*x4895*x4896))+((x4896*x4898))+((cj4*x4897))+((r22*x4900))+((sj1*sj4*x4899)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x4896*x4901))+(((-1.0)*cj1*x4895*x4896))+((r22*x4898))+(((-1.0)*x4895*x4897))+((x4899*x4901))+((x4899*x4900)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4898*x4899))+(((-1.0)*sj1*x4895*x4896))+((x4896*x4898))+((cj4*x4897))+((r22*x4900))+((sj1*sj4*x4899))))+IKsqr(((((-1.0)*x4896*x4901))+(((-1.0)*cj1*x4895*x4896))+((r22*x4898))+(((-1.0)*x4895*x4897))+((x4899*x4901))+((x4899*x4900))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x4898*x4899))+(((-1.0)*sj1*x4895*x4896))+((x4896*x4898))+((cj4*x4897))+((r22*x4900))+((sj1*sj4*x4899))), ((((-1.0)*x4896*x4901))+(((-1.0)*cj1*x4895*x4896))+((r22*x4898))+(((-1.0)*x4895*x4897))+((x4899*x4901))+((x4899*x4900))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4902=IKsin(j2);
IkReal x4903=IKcos(j2);
IkReal x4904=((1.17e-6)*cj4);
IkReal x4905=((1.0)*gconst34);
IkReal x4906=(cj0*sj1);
IkReal x4907=(cj1*sj0);
IkReal x4908=((1.0)*cj1);
IkReal x4909=(gconst35*r01);
IkReal x4910=((1.0)*cj4);
IkReal x4911=(sj0*sj1);
IkReal x4912=(gconst35*r11);
IkReal x4913=(gconst35*r21);
IkReal x4914=(gconst34*r00);
IkReal x4915=(sj4*x4903);
IkReal x4916=(sj4*x4902);
IkReal x4917=(x4902*x4910);
evalcond[0]=((((-1.0)*cj0*r12*x4908))+x4915+((r02*x4907))+(((-1.0)*x4917))+((r22*sj1)));
evalcond[1]=(x4916+((r02*x4911))+(((-1.0)*r22*x4908))+(((-1.0)*r12*x4906))+((cj4*x4903)));
evalcond[2]=((((1.17e-6)*x4916))+(((-1.0)*cj0*py*x4908))+((x4903*x4904))+(((-0.56747)*x4902))+((px*x4907))+((pz*sj1))+(((-1.08e-6)*x4903)));
evalcond[3]=((0.73)+(((-1.17e-6)*x4915))+((x4902*x4904))+(((-1.0)*pz*x4908))+((px*x4911))+(((-1.0)*py*x4906))+(((0.56747)*x4903))+(((-1.08e-6)*x4902)));
evalcond[4]=(((gconst34*r20*sj1))+(((-1.0)*x4916))+(((-1.0)*x4903*x4910))+((x4907*x4914))+((sj1*x4913))+((x4907*x4909))+(((-1.0)*cj0*cj1*r10*x4905))+(((-1.0)*cj0*x4908*x4912)));
evalcond[5]=(x4915+((x4911*x4914))+(((-1.0)*x4908*x4913))+(((-1.0)*x4917))+(((-1.0)*cj1*r20*x4905))+(((-1.0)*x4906*x4912))+((x4909*x4911))+(((-1.0)*r10*x4905*x4906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x4918=((1.0)*gconst34);
CheckValue<IkReal> x4920 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj0*x4918))+((gconst35*r00*sj0))+((cj0*gconst34*r11))+(((-1.0)*cj0*gconst35*r10)))),IkReal(((((-1.0)*r21*x4918))+((gconst35*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4920.valid){
continue;
}
IkReal x4919=x4920.value;
j1array[0]=((-1.0)*x4919);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4919)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4921=IKsin(j1);
IkReal x4922=IKcos(j1);
IkReal x4923=((1.0)*gconst35);
IkReal x4924=(sj0*x4921);
IkReal x4925=(cj0*x4921);
evalcond[0]=(((gconst35*r00*x4924))+((gconst34*r21*x4922))+(((-1.0)*gconst34*r01*x4924))+(((-1.0)*r10*x4923*x4925))+((gconst34*r11*x4925))+(((-1.0)*r20*x4922*x4923)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4926=((1.0)*sj4);
IkReal x4927=(r02*sj0);
IkReal x4928=(r22*sj1);
IkReal x4929=(cj1*cj4);
IkReal x4930=(cj0*r12);
IkReal x4931=(cj1*sj4);
IkReal x4932=(cj4*sj1);
if( IKabs((((cj4*x4928))+((x4927*x4929))+((r22*x4931))+(((-1.0)*x4929*x4930))+((sj1*sj4*x4930))+(((-1.0)*sj1*x4926*x4927)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x4929))+(((-1.0)*cj1*x4926*x4927))+(((-1.0)*x4926*x4928))+(((-1.0)*x4927*x4932))+((x4930*x4931))+((x4930*x4932)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*x4928))+((x4927*x4929))+((r22*x4931))+(((-1.0)*x4929*x4930))+((sj1*sj4*x4930))+(((-1.0)*sj1*x4926*x4927))))+IKsqr((((r22*x4929))+(((-1.0)*cj1*x4926*x4927))+(((-1.0)*x4926*x4928))+(((-1.0)*x4927*x4932))+((x4930*x4931))+((x4930*x4932))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj4*x4928))+((x4927*x4929))+((r22*x4931))+(((-1.0)*x4929*x4930))+((sj1*sj4*x4930))+(((-1.0)*sj1*x4926*x4927))), (((r22*x4929))+(((-1.0)*cj1*x4926*x4927))+(((-1.0)*x4926*x4928))+(((-1.0)*x4927*x4932))+((x4930*x4931))+((x4930*x4932))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4933=IKsin(j2);
IkReal x4934=IKcos(j2);
IkReal x4935=((1.17e-6)*cj4);
IkReal x4936=((1.0)*gconst34);
IkReal x4937=(cj0*sj1);
IkReal x4938=(cj1*sj0);
IkReal x4939=((1.0)*cj1);
IkReal x4940=(gconst35*r01);
IkReal x4941=((1.0)*cj4);
IkReal x4942=(sj0*sj1);
IkReal x4943=(gconst35*r11);
IkReal x4944=(gconst35*r21);
IkReal x4945=(gconst34*r00);
IkReal x4946=(sj4*x4934);
IkReal x4947=(sj4*x4933);
IkReal x4948=(x4933*x4941);
evalcond[0]=(x4946+((r22*sj1))+(((-1.0)*x4948))+(((-1.0)*cj0*r12*x4939))+((r02*x4938)));
evalcond[1]=(x4947+(((-1.0)*r12*x4937))+((cj4*x4934))+((r02*x4942))+(((-1.0)*r22*x4939)));
evalcond[2]=(((px*x4938))+((x4934*x4935))+(((-1.08e-6)*x4934))+(((-0.56747)*x4933))+(((-1.0)*cj0*py*x4939))+((pz*sj1))+(((1.17e-6)*x4947)));
evalcond[3]=((0.73)+(((-1.08e-6)*x4933))+(((-1.17e-6)*x4946))+((x4933*x4935))+(((-1.0)*py*x4937))+((px*x4942))+(((0.56747)*x4934))+(((-1.0)*pz*x4939)));
evalcond[4]=((((-1.0)*cj0*cj1*r10*x4936))+((gconst34*r20*sj1))+(((-1.0)*cj0*x4939*x4943))+((sj1*x4944))+((x4938*x4940))+((x4938*x4945))+(((-1.0)*x4934*x4941))+(((-1.0)*x4947)));
evalcond[5]=((((-1.0)*x4937*x4943))+x4946+(((-1.0)*r10*x4936*x4937))+(((-1.0)*x4939*x4944))+((x4940*x4942))+(((-1.0)*x4948))+((x4942*x4945))+(((-1.0)*cj1*r20*x4936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4949=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst35*r21))+(((-1.0)*gconst34*r20)))),-1);
if(!x4949.valid){
continue;
}
CheckValue<IkReal> x4950 = IKatan2WithCheck(IkReal(r02),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4950.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4949.value)))+(x4950.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4951=IKcos(j0);
IkReal x4952=IKsin(j0);
IkReal x4953=((1.0)*gconst35);
IkReal x4954=((1.0)*x4951);
IkReal x4955=(r11*x4952);
IkReal x4956=((1.0)*x4952);
evalcond[0]=((((-1.0)*r02*x4954))+(((-1.0)*r12*x4956)));
evalcond[1]=((((-1.0)*px*x4954))+(((-1.0)*py*x4956)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x4952*x4953))+(((-1.0)*r00*x4951*x4953))+((gconst34*r01*x4951))+((gconst34*x4955)));
evalcond[3]=((((-1.0)*gconst34*r10*x4956))+(((-1.0)*r01*x4951*x4953))+(((-1.0)*x4953*x4955))+(((-1.0)*gconst34*r00*x4954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
CheckValue<IkReal> x4960 = IKatan2WithCheck(IkReal(rxp0_2),IkReal(((-1.0)*rxp1_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4960.valid){
continue;
}
IkReal x4957=((1.0)*(x4960.value));
IkReal x4958=x4677;
IkReal x4959=((1.0)*x4958);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x4957)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x4957)));
IkReal gconst34=(rxp0_2*x4959);
IkReal gconst35=(rxp1_2*x4959);
IkReal x4961=x4677;
IkReal x4962=((1.0)*x4961);
IkReal x4963=(rxp1_2*x4961);
j1eval[0]=((IKabs((((cj0*r11*rxp0_2*x4961))+((r00*sj0*x4963))+(((-1.0)*cj0*r10*rxp1_2*x4962))+(((-1.0)*r01*rxp0_2*sj0*x4962)))))+(IKabs(((((-1.0)*r21*rxp0_2*x4962))+((r20*x4963))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
CheckValue<IkReal> x4967 = IKatan2WithCheck(IkReal(rxp0_2),IkReal(((-1.0)*rxp1_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4967.valid){
continue;
}
IkReal x4964=((1.0)*(x4967.value));
IkReal x4965=x4677;
IkReal x4966=((1.0)*x4965);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x4964)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x4964)));
IkReal gconst34=(rxp0_2*x4966);
IkReal gconst35=(rxp1_2*x4966);
IkReal x4968=x4677;
IkReal x4969=(rxp0_2*x4968);
IkReal x4970=((1.0)*rxp1_2*x4968);
j1eval[0]=((IKabs((((cj0*r11*x4969))+(((-1.0)*r01*sj0*x4969))+(((-1.0)*cj0*r10*x4970))+((r00*rxp1_2*sj0*x4968)))))+(IKabs((((r21*x4969))+(((-1.0)*r20*x4970))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x4971=((1.0)*gconst35);
CheckValue<IkReal> x4973 = IKatan2WithCheck(IkReal((((gconst34*r21))+(((-1.0)*r20*x4971)))),IkReal((((gconst35*r00*sj0))+(((-1.0)*cj0*r10*x4971))+((cj0*gconst34*r11))+(((-1.0)*gconst34*r01*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4973.valid){
continue;
}
IkReal x4972=x4973.value;
j1array[0]=((-1.0)*x4972);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4972)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4974=IKcos(j1);
IkReal x4975=IKsin(j1);
IkReal x4976=((1.0)*gconst34);
IkReal x4977=(cj0*x4974);
IkReal x4978=(sj0*x4974);
evalcond[0]=((((-1.0)*r01*x4976*x4978))+((gconst35*r00*x4978))+((gconst34*r11*x4977))+(((-1.0)*r21*x4975*x4976))+((gconst35*r20*x4975))+(((-1.0)*gconst35*r10*x4977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4979=((1.0)*sj4);
IkReal x4980=(r02*sj0);
IkReal x4981=(r22*sj1);
IkReal x4982=(cj1*cj4);
IkReal x4983=(cj0*r12);
IkReal x4984=(cj1*sj4);
IkReal x4985=(cj4*sj1);
if( IKabs((((sj1*sj4*x4983))+((r22*x4984))+(((-1.0)*sj1*x4979*x4980))+((cj4*x4981))+(((-1.0)*x4982*x4983))+((x4980*x4982)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x4982))+(((-1.0)*x4979*x4981))+(((-1.0)*cj1*x4979*x4980))+(((-1.0)*x4980*x4985))+((x4983*x4985))+((x4983*x4984)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*sj4*x4983))+((r22*x4984))+(((-1.0)*sj1*x4979*x4980))+((cj4*x4981))+(((-1.0)*x4982*x4983))+((x4980*x4982))))+IKsqr((((r22*x4982))+(((-1.0)*x4979*x4981))+(((-1.0)*cj1*x4979*x4980))+(((-1.0)*x4980*x4985))+((x4983*x4985))+((x4983*x4984))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*sj4*x4983))+((r22*x4984))+(((-1.0)*sj1*x4979*x4980))+((cj4*x4981))+(((-1.0)*x4982*x4983))+((x4980*x4982))), (((r22*x4982))+(((-1.0)*x4979*x4981))+(((-1.0)*cj1*x4979*x4980))+(((-1.0)*x4980*x4985))+((x4983*x4985))+((x4983*x4984))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4986=IKsin(j2);
IkReal x4987=IKcos(j2);
IkReal x4988=((1.17e-6)*cj4);
IkReal x4989=((1.0)*gconst34);
IkReal x4990=(cj0*sj1);
IkReal x4991=(cj1*sj0);
IkReal x4992=((1.0)*cj1);
IkReal x4993=(gconst35*r01);
IkReal x4994=((1.0)*cj4);
IkReal x4995=(sj0*sj1);
IkReal x4996=(gconst35*r11);
IkReal x4997=(gconst35*r21);
IkReal x4998=(gconst34*r00);
IkReal x4999=(sj4*x4987);
IkReal x5000=(sj4*x4986);
IkReal x5001=(x4986*x4994);
evalcond[0]=(x4999+((r22*sj1))+((r02*x4991))+(((-1.0)*cj0*r12*x4992))+(((-1.0)*x5001)));
evalcond[1]=((((-1.0)*r22*x4992))+(((-1.0)*r12*x4990))+((r02*x4995))+x5000+((cj4*x4987)));
evalcond[2]=((((-1.08e-6)*x4987))+(((-0.56747)*x4986))+((px*x4991))+((x4987*x4988))+(((-1.0)*cj0*py*x4992))+((pz*sj1))+(((1.17e-6)*x5000)));
evalcond[3]=((0.73)+(((-1.08e-6)*x4986))+(((0.56747)*x4987))+(((-1.17e-6)*x4999))+((px*x4995))+((x4986*x4988))+(((-1.0)*py*x4990))+(((-1.0)*pz*x4992)));
evalcond[4]=(((gconst34*r20*sj1))+(((-1.0)*x5000))+(((-1.0)*cj0*x4992*x4996))+((sj1*x4997))+(((-1.0)*cj0*cj1*r10*x4989))+(((-1.0)*x4987*x4994))+((x4991*x4993))+((x4991*x4998)));
evalcond[5]=(((x4993*x4995))+x4999+((x4995*x4998))+(((-1.0)*cj1*r20*x4989))+(((-1.0)*r10*x4989*x4990))+(((-1.0)*x4990*x4996))+(((-1.0)*x4992*x4997))+(((-1.0)*x5001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x5002=((1.0)*gconst34);
CheckValue<IkReal> x5004 = IKatan2WithCheck(IkReal((((gconst35*r00*sj0))+(((-1.0)*r01*sj0*x5002))+((cj0*gconst34*r11))+(((-1.0)*cj0*gconst35*r10)))),IkReal((((gconst35*r20))+(((-1.0)*r21*x5002)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5004.valid){
continue;
}
IkReal x5003=x5004.value;
j1array[0]=((-1.0)*x5003);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5003)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5005=IKsin(j1);
IkReal x5006=IKcos(j1);
IkReal x5007=((1.0)*gconst35);
IkReal x5008=(sj0*x5005);
IkReal x5009=(cj0*x5005);
evalcond[0]=((((-1.0)*r20*x5006*x5007))+((gconst34*r21*x5006))+((gconst35*r00*x5008))+(((-1.0)*gconst34*r01*x5008))+((gconst34*r11*x5009))+(((-1.0)*r10*x5007*x5009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5010=((1.0)*sj4);
IkReal x5011=(r02*sj0);
IkReal x5012=(r22*sj1);
IkReal x5013=(cj1*cj4);
IkReal x5014=(cj0*r12);
IkReal x5015=(cj1*sj4);
IkReal x5016=(cj4*sj1);
if( IKabs((((x5011*x5013))+((sj1*sj4*x5014))+(((-1.0)*x5013*x5014))+(((-1.0)*sj1*x5010*x5011))+((r22*x5015))+((cj4*x5012)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x5014*x5015))+((x5014*x5016))+(((-1.0)*x5010*x5012))+(((-1.0)*x5011*x5016))+(((-1.0)*cj1*x5010*x5011))+((r22*x5013)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x5011*x5013))+((sj1*sj4*x5014))+(((-1.0)*x5013*x5014))+(((-1.0)*sj1*x5010*x5011))+((r22*x5015))+((cj4*x5012))))+IKsqr((((x5014*x5015))+((x5014*x5016))+(((-1.0)*x5010*x5012))+(((-1.0)*x5011*x5016))+(((-1.0)*cj1*x5010*x5011))+((r22*x5013))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x5011*x5013))+((sj1*sj4*x5014))+(((-1.0)*x5013*x5014))+(((-1.0)*sj1*x5010*x5011))+((r22*x5015))+((cj4*x5012))), (((x5014*x5015))+((x5014*x5016))+(((-1.0)*x5010*x5012))+(((-1.0)*x5011*x5016))+(((-1.0)*cj1*x5010*x5011))+((r22*x5013))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5017=IKsin(j2);
IkReal x5018=IKcos(j2);
IkReal x5019=((1.17e-6)*cj4);
IkReal x5020=((1.0)*gconst34);
IkReal x5021=(cj0*sj1);
IkReal x5022=(cj1*sj0);
IkReal x5023=((1.0)*cj1);
IkReal x5024=(gconst35*r01);
IkReal x5025=((1.0)*cj4);
IkReal x5026=(sj0*sj1);
IkReal x5027=(gconst35*r11);
IkReal x5028=(gconst35*r21);
IkReal x5029=(gconst34*r00);
IkReal x5030=(sj4*x5018);
IkReal x5031=(sj4*x5017);
IkReal x5032=(x5017*x5025);
evalcond[0]=(((r02*x5022))+((r22*sj1))+x5030+(((-1.0)*x5032))+(((-1.0)*cj0*r12*x5023)));
evalcond[1]=(((r02*x5026))+(((-1.0)*r12*x5021))+x5031+(((-1.0)*r22*x5023))+((cj4*x5018)));
evalcond[2]=((((-1.0)*cj0*py*x5023))+(((-1.08e-6)*x5018))+((px*x5022))+(((-0.56747)*x5017))+((x5018*x5019))+((pz*sj1))+(((1.17e-6)*x5031)));
evalcond[3]=((0.73)+(((-1.08e-6)*x5017))+(((-1.0)*py*x5021))+((px*x5026))+(((-1.0)*pz*x5023))+((x5017*x5019))+(((-1.17e-6)*x5030))+(((0.56747)*x5018)));
evalcond[4]=((((-1.0)*cj0*cj1*r10*x5020))+((x5022*x5024))+((x5022*x5029))+((gconst34*r20*sj1))+(((-1.0)*cj0*x5023*x5027))+(((-1.0)*x5031))+(((-1.0)*x5018*x5025))+((sj1*x5028)));
evalcond[5]=((((-1.0)*cj1*r20*x5020))+((x5026*x5029))+((x5024*x5026))+x5030+(((-1.0)*x5023*x5028))+(((-1.0)*x5021*x5027))+(((-1.0)*r10*x5020*x5021))+(((-1.0)*x5032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x5033=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst34*rxp1_2))+((gconst35*rxp0_2)))),-1);
if(!x5033.valid){
continue;
}
CheckValue<IkReal> x5034 = IKatan2WithCheck(IkReal(px),IkReal(((-1.0)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x5034.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5033.value)))+(x5034.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5035=IKcos(j0);
IkReal x5036=IKsin(j0);
IkReal x5037=((1.0)*gconst35);
IkReal x5038=((1.0)*x5035);
IkReal x5039=(r11*x5036);
IkReal x5040=((1.0)*x5036);
evalcond[0]=((((-1.0)*r12*x5040))+(((-1.0)*r02*x5038)));
evalcond[1]=((((-1.0)*px*x5038))+(((-1.0)*py*x5040)));
evalcond[2]=((-1.0)+((gconst34*r01*x5035))+(((-1.0)*r00*x5035*x5037))+(((-1.0)*r10*x5036*x5037))+((gconst34*x5039)));
evalcond[3]=((((-1.0)*x5037*x5039))+(((-1.0)*gconst34*r10*x5040))+(((-1.0)*r01*x5035*x5037))+(((-1.0)*gconst34*r00*x5038)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
CheckValue<IkReal> x5044 = IKatan2WithCheck(IkReal(rxp0_2),IkReal(((-1.0)*rxp1_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x5044.valid){
continue;
}
IkReal x5041=((1.0)*(x5044.value));
IkReal x5042=x4677;
IkReal x5043=((1.0)*x5042);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x5041)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x5041)));
IkReal gconst34=(rxp0_2*x5043);
IkReal gconst35=(rxp1_2*x5043);
IkReal x5045=x4677;
IkReal x5046=((1.0)*x5045);
IkReal x5047=(rxp1_2*x5045);
j1eval[0]=((IKabs((((cj0*r11*rxp0_2*x5045))+(((-1.0)*r01*rxp0_2*sj0*x5046))+((r00*sj0*x5047))+(((-1.0)*cj0*r10*rxp1_2*x5046)))))+(IKabs((((r20*x5047))+(((-1.0)*r21*rxp0_2*x5046))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
CheckValue<IkReal> x5051 = IKatan2WithCheck(IkReal(rxp0_2),IkReal(((-1.0)*rxp1_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x5051.valid){
continue;
}
IkReal x5048=((1.0)*(x5051.value));
IkReal x5049=x4677;
IkReal x5050=((1.0)*x5049);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x5048)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x5048)));
IkReal gconst34=(rxp0_2*x5050);
IkReal gconst35=(rxp1_2*x5050);
IkReal x5052=x4677;
IkReal x5053=(rxp0_2*x5052);
IkReal x5054=((1.0)*rxp1_2*x5052);
j1eval[0]=((IKabs(((((-1.0)*cj0*r10*x5054))+((r00*rxp1_2*sj0*x5052))+((cj0*r11*x5053))+(((-1.0)*r01*sj0*x5053)))))+(IKabs((((r21*x5053))+(((-1.0)*r20*x5054))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x5055=((1.0)*gconst35);
CheckValue<IkReal> x5057 = IKatan2WithCheck(IkReal((((gconst34*r21))+(((-1.0)*r20*x5055)))),IkReal(((((-1.0)*cj0*r10*x5055))+((gconst35*r00*sj0))+((cj0*gconst34*r11))+(((-1.0)*gconst34*r01*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5057.valid){
continue;
}
IkReal x5056=x5057.value;
j1array[0]=((-1.0)*x5056);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5056)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5058=IKcos(j1);
IkReal x5059=IKsin(j1);
IkReal x5060=((1.0)*gconst34);
IkReal x5061=(cj0*x5058);
IkReal x5062=(sj0*x5058);
evalcond[0]=((((-1.0)*r21*x5059*x5060))+(((-1.0)*gconst35*r10*x5061))+(((-1.0)*r01*x5060*x5062))+((gconst34*r11*x5061))+((gconst35*r00*x5062))+((gconst35*r20*x5059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5063=((1.0)*sj4);
IkReal x5064=(r02*sj0);
IkReal x5065=(r22*sj1);
IkReal x5066=(cj1*cj4);
IkReal x5067=(cj0*r12);
IkReal x5068=(cj1*sj4);
IkReal x5069=(cj4*sj1);
if( IKabs((((sj1*sj4*x5067))+((x5064*x5066))+(((-1.0)*sj1*x5063*x5064))+(((-1.0)*x5066*x5067))+((r22*x5068))+((cj4*x5065)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*x5063*x5064))+(((-1.0)*x5064*x5069))+((x5067*x5068))+((x5067*x5069))+((r22*x5066))+(((-1.0)*x5063*x5065)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*sj4*x5067))+((x5064*x5066))+(((-1.0)*sj1*x5063*x5064))+(((-1.0)*x5066*x5067))+((r22*x5068))+((cj4*x5065))))+IKsqr(((((-1.0)*cj1*x5063*x5064))+(((-1.0)*x5064*x5069))+((x5067*x5068))+((x5067*x5069))+((r22*x5066))+(((-1.0)*x5063*x5065))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*sj4*x5067))+((x5064*x5066))+(((-1.0)*sj1*x5063*x5064))+(((-1.0)*x5066*x5067))+((r22*x5068))+((cj4*x5065))), ((((-1.0)*cj1*x5063*x5064))+(((-1.0)*x5064*x5069))+((x5067*x5068))+((x5067*x5069))+((r22*x5066))+(((-1.0)*x5063*x5065))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5070=IKsin(j2);
IkReal x5071=IKcos(j2);
IkReal x5072=((1.17e-6)*cj4);
IkReal x5073=((1.0)*gconst34);
IkReal x5074=(cj0*sj1);
IkReal x5075=(cj1*sj0);
IkReal x5076=((1.0)*cj1);
IkReal x5077=(gconst35*r01);
IkReal x5078=((1.0)*cj4);
IkReal x5079=(sj0*sj1);
IkReal x5080=(gconst35*r11);
IkReal x5081=(gconst35*r21);
IkReal x5082=(gconst34*r00);
IkReal x5083=(sj4*x5071);
IkReal x5084=(sj4*x5070);
IkReal x5085=(x5070*x5078);
evalcond[0]=((((-1.0)*cj0*r12*x5076))+((r22*sj1))+(((-1.0)*x5085))+x5083+((r02*x5075)));
evalcond[1]=(((cj4*x5071))+x5084+((r02*x5079))+(((-1.0)*r22*x5076))+(((-1.0)*r12*x5074)));
evalcond[2]=(((px*x5075))+(((1.17e-6)*x5084))+((x5071*x5072))+(((-1.0)*cj0*py*x5076))+(((-0.56747)*x5070))+((pz*sj1))+(((-1.08e-6)*x5071)));
evalcond[3]=((0.73)+(((0.56747)*x5071))+((px*x5079))+(((-1.0)*py*x5074))+((x5070*x5072))+(((-1.17e-6)*x5083))+(((-1.0)*pz*x5076))+(((-1.08e-6)*x5070)));
evalcond[4]=(((gconst34*r20*sj1))+(((-1.0)*x5084))+((x5075*x5077))+(((-1.0)*cj0*cj1*r10*x5073))+((sj1*x5081))+(((-1.0)*cj0*x5076*x5080))+(((-1.0)*x5071*x5078))+((x5075*x5082)));
evalcond[5]=((((-1.0)*x5074*x5080))+(((-1.0)*x5085))+((x5079*x5082))+x5083+((x5077*x5079))+(((-1.0)*r10*x5073*x5074))+(((-1.0)*cj1*r20*x5073))+(((-1.0)*x5076*x5081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x5086=((1.0)*gconst34);
CheckValue<IkReal> x5088 = IKatan2WithCheck(IkReal((((gconst35*r00*sj0))+((cj0*gconst34*r11))+(((-1.0)*r01*sj0*x5086))+(((-1.0)*cj0*gconst35*r10)))),IkReal(((((-1.0)*r21*x5086))+((gconst35*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5088.valid){
continue;
}
IkReal x5087=x5088.value;
j1array[0]=((-1.0)*x5087);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5087)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5089=IKsin(j1);
IkReal x5090=IKcos(j1);
IkReal x5091=((1.0)*gconst35);
IkReal x5092=(sj0*x5089);
IkReal x5093=(cj0*x5089);
evalcond[0]=(((gconst35*r00*x5092))+((gconst34*r11*x5093))+(((-1.0)*r10*x5091*x5093))+((gconst34*r21*x5090))+(((-1.0)*r20*x5090*x5091))+(((-1.0)*gconst34*r01*x5092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5094=((1.0)*sj4);
IkReal x5095=(r02*sj0);
IkReal x5096=(r22*sj1);
IkReal x5097=(cj1*cj4);
IkReal x5098=(cj0*r12);
IkReal x5099=(cj1*sj4);
IkReal x5100=(cj4*sj1);
if( IKabs((((r22*x5099))+(((-1.0)*sj1*x5094*x5095))+((cj4*x5096))+(((-1.0)*x5097*x5098))+((x5095*x5097))+((sj1*sj4*x5098)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x5095*x5100))+((x5098*x5100))+((r22*x5097))+((x5098*x5099))+(((-1.0)*x5094*x5096))+(((-1.0)*cj1*x5094*x5095)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x5099))+(((-1.0)*sj1*x5094*x5095))+((cj4*x5096))+(((-1.0)*x5097*x5098))+((x5095*x5097))+((sj1*sj4*x5098))))+IKsqr(((((-1.0)*x5095*x5100))+((x5098*x5100))+((r22*x5097))+((x5098*x5099))+(((-1.0)*x5094*x5096))+(((-1.0)*cj1*x5094*x5095))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r22*x5099))+(((-1.0)*sj1*x5094*x5095))+((cj4*x5096))+(((-1.0)*x5097*x5098))+((x5095*x5097))+((sj1*sj4*x5098))), ((((-1.0)*x5095*x5100))+((x5098*x5100))+((r22*x5097))+((x5098*x5099))+(((-1.0)*x5094*x5096))+(((-1.0)*cj1*x5094*x5095))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5101=IKsin(j2);
IkReal x5102=IKcos(j2);
IkReal x5103=((1.17e-6)*cj4);
IkReal x5104=((1.0)*gconst34);
IkReal x5105=(cj0*sj1);
IkReal x5106=(cj1*sj0);
IkReal x5107=((1.0)*cj1);
IkReal x5108=(gconst35*r01);
IkReal x5109=((1.0)*cj4);
IkReal x5110=(sj0*sj1);
IkReal x5111=(gconst35*r11);
IkReal x5112=(gconst35*r21);
IkReal x5113=(gconst34*r00);
IkReal x5114=(sj4*x5102);
IkReal x5115=(sj4*x5101);
IkReal x5116=(x5101*x5109);
evalcond[0]=(((r22*sj1))+((r02*x5106))+x5114+(((-1.0)*cj0*r12*x5107))+(((-1.0)*x5116)));
evalcond[1]=((((-1.0)*r22*x5107))+((r02*x5110))+(((-1.0)*r12*x5105))+x5115+((cj4*x5102)));
evalcond[2]=(((x5102*x5103))+(((-1.08e-6)*x5102))+(((1.17e-6)*x5115))+(((-1.0)*cj0*py*x5107))+(((-0.56747)*x5101))+((pz*sj1))+((px*x5106)));
evalcond[3]=((0.73)+((px*x5110))+(((-1.17e-6)*x5114))+((x5101*x5103))+(((-1.08e-6)*x5101))+(((-1.0)*py*x5105))+(((0.56747)*x5102))+(((-1.0)*pz*x5107)));
evalcond[4]=(((x5106*x5108))+((x5106*x5113))+((gconst34*r20*sj1))+(((-1.0)*cj0*x5107*x5111))+(((-1.0)*cj0*cj1*r10*x5104))+((sj1*x5112))+(((-1.0)*x5115))+(((-1.0)*x5102*x5109)));
evalcond[5]=(((x5108*x5110))+x5114+(((-1.0)*cj1*r20*x5104))+(((-1.0)*x5105*x5111))+(((-1.0)*x5107*x5112))+(((-1.0)*r10*x5104*x5105))+((x5110*x5113))+(((-1.0)*x5116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x5117=((-1.0)*pz);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x5117);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x5117);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x5117);
rxp2_2=0;
IkReal x5118=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j0eval[0]=x5118;
j0eval[1]=((IKabs(r02))+(IKabs(r12)));
j0eval[2]=IKsign(x5118);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x5119=((-1.0)*pz);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x5119);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x5119);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x5119);
rxp2_2=0;
j0eval[0]=r22;
j0eval[1]=((IKabs(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(r22);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x5120=((-1.0)*pz);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=0;
rxp0_0=(pz*r10);
rxp0_1=(r00*x5120);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x5120);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x5120);
rxp2_2=0;
r22=0;
IkReal x5121=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j0eval[0]=x5121;
j0eval[1]=1.0;
j0eval[2]=IKsign(x5121);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x5122 = IKatan2WithCheck(IkReal(r02),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5122.valid){
continue;
}
CheckValue<IkReal> x5123=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x5123.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x5122.value)+(((1.5707963267949)*(x5123.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x5124=IKcos(j0);
IkReal x5125=IKsin(j0);
IkReal x5126=((1.0)*cj5);
IkReal x5127=((1.0)*sj5);
IkReal x5128=(r11*x5125);
IkReal x5129=(r01*x5124);
IkReal x5130=(r10*x5125);
IkReal x5131=(r00*x5124);
evalcond[0]=((((-1.0)*r12*x5125))+(((-1.0)*r02*x5124)));
evalcond[1]=((-1.0)+(((-1.0)*x5126*x5130))+(((-1.0)*x5126*x5131))+((sj5*x5129))+((sj5*x5128)));
evalcond[2]=((((-1.0)*x5126*x5128))+(((-1.0)*x5126*x5129))+(((-1.0)*x5127*x5131))+(((-1.0)*x5127*x5130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x5132=((-1.0)*pz);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=0;
rxp0_0=(pz*r10);
rxp0_1=(r00*x5132);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x5132);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x5132);
rxp2_2=0;
r22=0;
IkReal x5133=((1.0)*sj5);
j1eval[0]=((IKabs((((cj5*r20))+(((-1.0)*r21*x5133)))))+(IKabs((((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*cj0*cj5*r10))+(((-1.0)*r01*sj0*x5133))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x5134=((-1.0)*pz);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=0;
rxp0_0=(pz*r10);
rxp0_1=(r00*x5134);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x5134);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x5134);
rxp2_2=0;
r22=0;
IkReal x5135=((1.0)*cj5);
j1eval[0]=((IKabs((((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*cj0*r10*x5135))+(((-1.0)*r01*sj0*sj5)))))+(IKabs((((r21*sj5))+(((-1.0)*r20*x5135))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x5136=((1.0)*cj5);
CheckValue<IkReal> x5138 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x5136)))),IkReal((((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*cj0*r10*x5136))+(((-1.0)*r01*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5138.valid){
continue;
}
IkReal x5137=x5138.value;
j1array[0]=((-1.0)*x5137);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5137)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5139=IKcos(j1);
IkReal x5140=IKsin(j1);
IkReal x5141=((1.0)*sj5);
IkReal x5142=(cj5*x5139);
evalcond[0]=(((r00*sj0*x5142))+(((-1.0)*r01*sj0*x5139*x5141))+((cj0*r11*sj5*x5139))+(((-1.0)*cj0*r10*x5142))+(((-1.0)*r21*x5140*x5141))+((cj5*r20*x5140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5143=((1.0)*cj4);
IkReal x5144=(r02*sj0);
IkReal x5145=(cj0*cj1*r12);
IkReal x5146=(cj0*r12*sj1);
IkReal x5147=((1.0)*sj4*x5144);
if( IKabs(((((-1.0)*x5143*x5145))+(((-1.0)*sj1*x5147))+((cj1*cj4*x5144))+((sj4*x5146)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*x5146))+(((-1.0)*sj1*x5143*x5144))+(((-1.0)*cj1*x5147))+((sj4*x5145)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5143*x5145))+(((-1.0)*sj1*x5147))+((cj1*cj4*x5144))+((sj4*x5146))))+IKsqr((((cj4*x5146))+(((-1.0)*sj1*x5143*x5144))+(((-1.0)*cj1*x5147))+((sj4*x5145))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x5143*x5145))+(((-1.0)*sj1*x5147))+((cj1*cj4*x5144))+((sj4*x5146))), (((cj4*x5146))+(((-1.0)*sj1*x5143*x5144))+(((-1.0)*cj1*x5147))+((sj4*x5145))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5148=IKcos(j2);
IkReal x5149=IKsin(j2);
IkReal x5150=(cj1*cj5);
IkReal x5151=((1.17e-6)*cj4);
IkReal x5152=(r01*sj0);
IkReal x5153=(cj5*sj1);
IkReal x5154=((1.0)*cj0);
IkReal x5155=(cj1*sj0);
IkReal x5156=(r00*sj5);
IkReal x5157=((1.0)*cj4);
IkReal x5158=(sj1*sj5);
IkReal x5159=((1.0)*cj1);
IkReal x5160=(sj0*sj1);
IkReal x5161=(sj4*x5148);
IkReal x5162=(sj4*x5149);
IkReal x5163=(x5149*x5157);
evalcond[0]=(x5162+(((-1.0)*r12*sj1*x5154))+((cj4*x5148))+((r02*x5160)));
evalcond[1]=((((-1.0)*cj1*r12*x5154))+x5161+((r02*x5155))+(((-1.0)*x5163)));
evalcond[2]=((((-0.56747)*x5149))+(((1.17e-6)*x5162))+((x5148*x5151))+((pz*sj1))+(((-1.08e-6)*x5148)));
evalcond[3]=((0.73)+(((-1.0)*pz*x5159))+(((0.56747)*x5148))+((x5149*x5151))+(((-1.17e-6)*x5161))+(((-1.08e-6)*x5149)));
evalcond[4]=(((r21*x5153))+((r20*x5158))+((x5155*x5156))+(((-1.0)*x5162))+(((-1.0)*cj1*r10*sj5*x5154))+(((-1.0)*x5148*x5157))+((x5150*x5152))+(((-1.0)*r11*x5150*x5154)));
evalcond[5]=((((-1.0)*r11*x5153*x5154))+(((-1.0)*r20*sj5*x5159))+((x5156*x5160))+(((-1.0)*r21*x5150))+x5161+(((-1.0)*x5163))+((x5152*x5153))+(((-1.0)*r10*x5154*x5158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x5164=((1.0)*sj5);
CheckValue<IkReal> x5166 = IKatan2WithCheck(IkReal((((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*cj0*cj5*r10))+(((-1.0)*r01*sj0*x5164)))),IkReal((((cj5*r20))+(((-1.0)*r21*x5164)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5166.valid){
continue;
}
IkReal x5165=x5166.value;
j1array[0]=((-1.0)*x5165);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5165)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5167=IKsin(j1);
IkReal x5168=IKcos(j1);
IkReal x5169=((1.0)*cj5);
IkReal x5170=(cj0*x5167);
IkReal x5171=(sj0*x5167);
evalcond[0]=(((r11*sj5*x5170))+((cj5*r00*x5171))+((r21*sj5*x5168))+(((-1.0)*r10*x5169*x5170))+(((-1.0)*r20*x5168*x5169))+(((-1.0)*r01*sj5*x5171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5172=((1.0)*cj4);
IkReal x5173=(r02*sj0);
IkReal x5174=(cj0*cj1*r12);
IkReal x5175=(cj0*r12*sj1);
IkReal x5176=((1.0)*sj4*x5173);
if( IKabs(((((-1.0)*x5172*x5174))+(((-1.0)*sj1*x5176))+((cj1*cj4*x5173))+((sj4*x5175)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*x5175))+(((-1.0)*cj1*x5176))+(((-1.0)*sj1*x5172*x5173))+((sj4*x5174)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5172*x5174))+(((-1.0)*sj1*x5176))+((cj1*cj4*x5173))+((sj4*x5175))))+IKsqr((((cj4*x5175))+(((-1.0)*cj1*x5176))+(((-1.0)*sj1*x5172*x5173))+((sj4*x5174))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x5172*x5174))+(((-1.0)*sj1*x5176))+((cj1*cj4*x5173))+((sj4*x5175))), (((cj4*x5175))+(((-1.0)*cj1*x5176))+(((-1.0)*sj1*x5172*x5173))+((sj4*x5174))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5177=IKcos(j2);
IkReal x5178=IKsin(j2);
IkReal x5179=(cj1*cj5);
IkReal x5180=((1.17e-6)*cj4);
IkReal x5181=(r01*sj0);
IkReal x5182=(cj5*sj1);
IkReal x5183=((1.0)*cj0);
IkReal x5184=(cj1*sj0);
IkReal x5185=(r00*sj5);
IkReal x5186=((1.0)*cj4);
IkReal x5187=(sj1*sj5);
IkReal x5188=((1.0)*cj1);
IkReal x5189=(sj0*sj1);
IkReal x5190=(sj4*x5177);
IkReal x5191=(sj4*x5178);
IkReal x5192=(x5178*x5186);
evalcond[0]=((((-1.0)*r12*sj1*x5183))+x5191+((cj4*x5177))+((r02*x5189)));
evalcond[1]=((((-1.0)*cj1*r12*x5183))+(((-1.0)*x5192))+x5190+((r02*x5184)));
evalcond[2]=((((-0.56747)*x5178))+((x5177*x5180))+(((1.17e-6)*x5191))+((pz*sj1))+(((-1.08e-6)*x5177)));
evalcond[3]=((0.73)+(((-1.17e-6)*x5190))+(((0.56747)*x5177))+((x5178*x5180))+(((-1.0)*pz*x5188))+(((-1.08e-6)*x5178)));
evalcond[4]=((((-1.0)*x5191))+(((-1.0)*r11*x5179*x5183))+((r20*x5187))+((x5184*x5185))+((x5179*x5181))+(((-1.0)*x5177*x5186))+(((-1.0)*cj1*r10*sj5*x5183))+((r21*x5182)));
evalcond[5]=((((-1.0)*r20*sj5*x5188))+(((-1.0)*r11*x5182*x5183))+((x5181*x5182))+(((-1.0)*x5192))+(((-1.0)*r21*x5179))+x5190+(((-1.0)*r10*x5183*x5187))+((x5185*x5189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x5193=((-1.0)*pz);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
px=0;
py=0;
pp=pz*pz;
npx=0;
npy=0;
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x5193);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x5193);
rxp1_2=0;
rxp2_0=0;
rxp2_1=0;
rxp2_2=0;
r20=0;
r21=0;
r02=0;
r12=0;
j0eval[0]=r22;
j0eval[1]=((cj5*cj5)+(sj5*sj5));
j0eval[2]=IKsign(r22);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x5194=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x5194.valid){
continue;
}
CheckValue<IkReal> x5195 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5195.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x5194.value)))+(x5195.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5196=IKcos(j0);
IkReal x5197=IKsin(j0);
IkReal x5198=((1.0)*cj5);
IkReal x5199=((1.0)*sj5);
IkReal x5200=(r11*x5197);
IkReal x5201=(r01*x5196);
IkReal x5202=(r10*x5197);
IkReal x5203=(r00*x5196);
evalcond[0]=((-1.0)+(((-1.0)*x5198*x5202))+(((-1.0)*x5198*x5203))+((sj5*x5200))+((sj5*x5201)));
evalcond[1]=((((-1.0)*x5199*x5203))+(((-1.0)*x5199*x5202))+(((-1.0)*x5198*x5200))+(((-1.0)*x5198*x5201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x5204=((-1.0)*pz);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
px=0;
py=0;
pp=pz*pz;
npx=0;
npy=0;
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x5204);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x5204);
rxp1_2=0;
rxp2_0=0;
rxp2_1=0;
rxp2_2=0;
r20=0;
r21=0;
r02=0;
r12=0;
j1eval[0]=IKabs((((cj0*cj5*r10))+(((-1.0)*cj5*r00*sj0))+((r01*sj0*sj5))+(((-1.0)*cj0*r11*sj5))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x5205=(cj0*r11*sj5);
IkReal x5206=(cj5*r00*sj0);
IkReal x5207=(r01*sj0*sj5);
IkReal x5208=(cj0*cj5*r10);
op[0]=(x5207+x5208+(((-1.0)*x5206))+(((-1.0)*x5205)));
op[1]=0;
op[2]=(x5205+x5206+(((-1.0)*x5208))+(((-1.0)*x5207)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5209=(cj4*r22);
IkReal x5210=(r22*sj4);
if( IKabs((((cj1*x5210))+((sj1*x5209)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x5210))+((cj1*x5209)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x5210))+((sj1*x5209))))+IKsqr(((((-1.0)*sj1*x5210))+((cj1*x5209))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x5210))+((sj1*x5209))), ((((-1.0)*sj1*x5210))+((cj1*x5209))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5211=IKsin(j2);
IkReal x5212=IKcos(j2);
IkReal x5213=(cj1*cj5);
IkReal x5214=(r01*sj0);
IkReal x5215=(cj5*sj1);
IkReal x5216=((1.0)*cj1);
IkReal x5217=((1.0)*cj4);
IkReal x5218=(sj4*x5212);
IkReal x5219=((1.0)*cj0*r11);
IkReal x5220=((1.17e-6)*x5211);
IkReal x5221=(r00*sj0*sj5);
IkReal x5222=(cj0*r10*sj5);
IkReal x5223=(sj4*x5211);
IkReal x5224=(cj4*x5212);
IkReal x5225=(x5211*x5217);
evalcond[0]=(((r22*sj1))+x5218+(((-1.0)*x5225)));
evalcond[1]=(x5223+x5224+(((-1.0)*r22*x5216)));
evalcond[2]=(((sj4*x5220))+(((1.17e-6)*x5224))+(((-1.08e-6)*x5212))+((pz*sj1))+(((-0.56747)*x5211)));
evalcond[3]=((0.73)+(((-1.17e-6)*x5218))+((cj4*x5220))+(((-1.0)*pz*x5216))+(((0.56747)*x5212))+(((-1.08e-6)*x5211)));
evalcond[4]=((((-1.0)*x5215*x5219))+x5218+((x5214*x5215))+(((-1.0)*x5225))+(((-1.0)*sj1*x5222))+((sj1*x5221)));
evalcond[5]=((((-1.0)*x5212*x5217))+((cj1*x5221))+(((-1.0)*x5213*x5219))+(((-1.0)*x5216*x5222))+((x5213*x5214))+(((-1.0)*x5223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r02))+(IKabs(r12)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x5226=((-1.0)*pz);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
px=0;
py=0;
pp=pz*pz;
npx=0;
npy=0;
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x5226);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x5226);
rxp1_2=0;
rxp2_0=0;
rxp2_1=0;
rxp2_2=0;
r12=0;
r02=0;
r20=0;
r21=0;
j0eval[0]=r22;
j0eval[1]=((cj5*cj5)+(sj5*sj5));
j0eval[2]=IKsign(r22);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x5227=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x5227.valid){
continue;
}
CheckValue<IkReal> x5228 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5228.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x5227.value)))+(x5228.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5229=IKcos(j0);
IkReal x5230=IKsin(j0);
IkReal x5231=((1.0)*cj5);
IkReal x5232=((1.0)*sj5);
IkReal x5233=(r11*x5230);
IkReal x5234=(r01*x5229);
IkReal x5235=(r10*x5230);
IkReal x5236=(r00*x5229);
evalcond[0]=((-1.0)+((sj5*x5234))+((sj5*x5233))+(((-1.0)*x5231*x5236))+(((-1.0)*x5231*x5235)));
evalcond[1]=((((-1.0)*x5232*x5235))+(((-1.0)*x5232*x5236))+(((-1.0)*x5231*x5234))+(((-1.0)*x5231*x5233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x5237=((-1.0)*pz);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
px=0;
py=0;
pp=pz*pz;
npx=0;
npy=0;
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x5237);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x5237);
rxp1_2=0;
rxp2_0=0;
rxp2_1=0;
rxp2_2=0;
r12=0;
r02=0;
r20=0;
r21=0;
j1eval[0]=IKabs((((cj0*cj5*r10))+(((-1.0)*cj5*r00*sj0))+((r01*sj0*sj5))+(((-1.0)*cj0*r11*sj5))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x5238=(cj0*r11*sj5);
IkReal x5239=(cj5*r00*sj0);
IkReal x5240=(r01*sj0*sj5);
IkReal x5241=(cj0*cj5*r10);
op[0]=((((-1.0)*x5239))+(((-1.0)*x5238))+x5241+x5240);
op[1]=0;
op[2]=((((-1.0)*x5241))+(((-1.0)*x5240))+x5238+x5239);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5242=(cj4*r22);
IkReal x5243=(r22*sj4);
if( IKabs((((sj1*x5242))+((cj1*x5243)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x5243))+((cj1*x5242)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x5242))+((cj1*x5243))))+IKsqr(((((-1.0)*sj1*x5243))+((cj1*x5242))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x5242))+((cj1*x5243))), ((((-1.0)*sj1*x5243))+((cj1*x5242))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5244=IKsin(j2);
IkReal x5245=IKcos(j2);
IkReal x5246=(cj1*cj5);
IkReal x5247=(r01*sj0);
IkReal x5248=(cj5*sj1);
IkReal x5249=((1.0)*cj1);
IkReal x5250=((1.0)*cj4);
IkReal x5251=(sj4*x5245);
IkReal x5252=((1.0)*cj0*r11);
IkReal x5253=((1.17e-6)*x5244);
IkReal x5254=(r00*sj0*sj5);
IkReal x5255=(cj0*r10*sj5);
IkReal x5256=(sj4*x5244);
IkReal x5257=(cj4*x5245);
IkReal x5258=(x5244*x5250);
evalcond[0]=((((-1.0)*x5258))+((r22*sj1))+x5251);
evalcond[1]=((((-1.0)*r22*x5249))+x5256+x5257);
evalcond[2]=((((1.17e-6)*x5257))+(((-1.08e-6)*x5245))+((sj4*x5253))+((pz*sj1))+(((-0.56747)*x5244)));
evalcond[3]=((0.73)+((cj4*x5253))+(((-1.0)*pz*x5249))+(((-1.17e-6)*x5251))+(((0.56747)*x5245))+(((-1.08e-6)*x5244)));
evalcond[4]=((((-1.0)*x5248*x5252))+(((-1.0)*x5258))+((x5247*x5248))+((sj1*x5254))+x5251+(((-1.0)*sj1*x5255)));
evalcond[5]=((((-1.0)*x5256))+((x5246*x5247))+(((-1.0)*x5249*x5255))+(((-1.0)*x5245*x5250))+(((-1.0)*x5246*x5252))+((cj1*x5254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x5259=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x5259.valid){
continue;
}
CheckValue<IkReal> x5260 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5260.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x5259.value)))+(x5260.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x5261=IKcos(j0);
IkReal x5262=IKsin(j0);
IkReal x5263=((1.0)*cj5);
IkReal x5264=((1.0)*sj5);
IkReal x5265=(r11*x5262);
IkReal x5266=(r01*x5261);
IkReal x5267=(r10*x5262);
IkReal x5268=(r00*x5261);
evalcond[0]=((((-1.0)*r02*x5261))+(((-1.0)*r12*x5262)));
evalcond[1]=((-1.0)+(((-1.0)*x5263*x5268))+(((-1.0)*x5263*x5267))+((sj5*x5265))+((sj5*x5266)));
evalcond[2]=((((-1.0)*x5264*x5267))+(((-1.0)*x5264*x5268))+(((-1.0)*x5263*x5266))+(((-1.0)*x5263*x5265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x5269=((-1.0)*pz);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x5269);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x5269);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x5269);
rxp2_2=0;
IkReal x5270=((1.0)*sj5);
j1eval[0]=((IKabs((((cj5*r20))+(((-1.0)*r21*x5270)))))+(IKabs((((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*cj0*cj5*r10))+(((-1.0)*r01*sj0*x5270))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x5271=((-1.0)*pz);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x5271);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x5271);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x5271);
rxp2_2=0;
IkReal x5272=((1.0)*cj5);
j1eval[0]=((IKabs((((r21*sj5))+(((-1.0)*r20*x5272)))))+(IKabs((((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*cj0*r10*x5272))+(((-1.0)*r01*sj0*sj5))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x5273=((1.0)*cj5);
CheckValue<IkReal> x5275 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x5273)))),IkReal((((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*cj0*r10*x5273))+(((-1.0)*r01*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5275.valid){
continue;
}
IkReal x5274=x5275.value;
j1array[0]=((-1.0)*x5274);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5274)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5276=IKcos(j1);
IkReal x5277=IKsin(j1);
IkReal x5278=((1.0)*sj5);
IkReal x5279=(cj5*x5276);
evalcond[0]=((((-1.0)*r21*x5277*x5278))+(((-1.0)*r01*sj0*x5276*x5278))+(((-1.0)*cj0*r10*x5279))+((r00*sj0*x5279))+((cj5*r20*x5277))+((cj0*r11*sj5*x5276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5280=((1.0)*sj4);
IkReal x5281=(r02*sj0);
IkReal x5282=(r22*sj1);
IkReal x5283=(cj1*cj4);
IkReal x5284=(cj0*r12);
IkReal x5285=(cj1*sj4);
IkReal x5286=(cj4*sj1);
if( IKabs(((((-1.0)*x5283*x5284))+((r22*x5285))+(((-1.0)*sj1*x5280*x5281))+((cj4*x5282))+((x5281*x5283))+((sj1*sj4*x5284)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x5283))+(((-1.0)*cj1*x5280*x5281))+((x5284*x5286))+((x5284*x5285))+(((-1.0)*x5281*x5286))+(((-1.0)*x5280*x5282)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5283*x5284))+((r22*x5285))+(((-1.0)*sj1*x5280*x5281))+((cj4*x5282))+((x5281*x5283))+((sj1*sj4*x5284))))+IKsqr((((r22*x5283))+(((-1.0)*cj1*x5280*x5281))+((x5284*x5286))+((x5284*x5285))+(((-1.0)*x5281*x5286))+(((-1.0)*x5280*x5282))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x5283*x5284))+((r22*x5285))+(((-1.0)*sj1*x5280*x5281))+((cj4*x5282))+((x5281*x5283))+((sj1*sj4*x5284))), (((r22*x5283))+(((-1.0)*cj1*x5280*x5281))+((x5284*x5286))+((x5284*x5285))+(((-1.0)*x5281*x5286))+(((-1.0)*x5280*x5282))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5287=IKsin(j2);
IkReal x5288=IKcos(j2);
IkReal x5289=(cj1*cj5);
IkReal x5290=((1.17e-6)*cj4);
IkReal x5291=(r01*sj0);
IkReal x5292=(cj5*sj1);
IkReal x5293=((1.0)*cj0);
IkReal x5294=((1.0)*cj1);
IkReal x5295=(cj1*sj0);
IkReal x5296=(r00*sj5);
IkReal x5297=((1.0)*cj4);
IkReal x5298=(sj1*sj5);
IkReal x5299=(sj0*sj1);
IkReal x5300=(sj4*x5288);
IkReal x5301=(sj4*x5287);
IkReal x5302=(x5287*x5297);
evalcond[0]=((((-1.0)*x5302))+((r02*x5295))+x5300+((r22*sj1))+(((-1.0)*cj1*r12*x5293)));
evalcond[1]=((((-1.0)*r22*x5294))+(((-1.0)*r12*sj1*x5293))+((r02*x5299))+x5301+((cj4*x5288)));
evalcond[2]=((((-0.56747)*x5287))+(((-1.08e-6)*x5288))+((x5288*x5290))+(((1.17e-6)*x5301))+((pz*sj1)));
evalcond[3]=((0.73)+(((-1.08e-6)*x5287))+(((-1.17e-6)*x5300))+((x5287*x5290))+(((-1.0)*pz*x5294))+(((0.56747)*x5288)));
evalcond[4]=((((-1.0)*r11*x5289*x5293))+((x5295*x5296))+(((-1.0)*x5288*x5297))+((x5289*x5291))+((r21*x5292))+((r20*x5298))+(((-1.0)*x5301))+(((-1.0)*cj1*r10*sj5*x5293)));
evalcond[5]=((((-1.0)*r21*x5289))+(((-1.0)*r20*sj5*x5294))+((x5291*x5292))+(((-1.0)*x5302))+x5300+(((-1.0)*r10*x5293*x5298))+((x5296*x5299))+(((-1.0)*r11*x5292*x5293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x5303=((1.0)*sj5);
CheckValue<IkReal> x5305 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj0*x5303))+((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*cj0*cj5*r10)))),IkReal((((cj5*r20))+(((-1.0)*r21*x5303)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5305.valid){
continue;
}
IkReal x5304=x5305.value;
j1array[0]=((-1.0)*x5304);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5304)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5306=IKsin(j1);
IkReal x5307=IKcos(j1);
IkReal x5308=((1.0)*cj5);
IkReal x5309=(cj0*x5306);
IkReal x5310=(sj0*x5306);
evalcond[0]=(((r11*sj5*x5309))+(((-1.0)*r01*sj5*x5310))+(((-1.0)*r10*x5308*x5309))+(((-1.0)*r20*x5307*x5308))+((cj5*r00*x5310))+((r21*sj5*x5307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5311=((1.0)*sj4);
IkReal x5312=(r02*sj0);
IkReal x5313=(r22*sj1);
IkReal x5314=(cj1*cj4);
IkReal x5315=(cj0*r12);
IkReal x5316=(cj1*sj4);
IkReal x5317=(cj4*sj1);
if( IKabs((((r22*x5316))+((sj1*sj4*x5315))+(((-1.0)*x5314*x5315))+((x5312*x5314))+(((-1.0)*sj1*x5311*x5312))+((cj4*x5313)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x5314))+((x5315*x5317))+((x5315*x5316))+(((-1.0)*x5312*x5317))+(((-1.0)*cj1*x5311*x5312))+(((-1.0)*x5311*x5313)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x5316))+((sj1*sj4*x5315))+(((-1.0)*x5314*x5315))+((x5312*x5314))+(((-1.0)*sj1*x5311*x5312))+((cj4*x5313))))+IKsqr((((r22*x5314))+((x5315*x5317))+((x5315*x5316))+(((-1.0)*x5312*x5317))+(((-1.0)*cj1*x5311*x5312))+(((-1.0)*x5311*x5313))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r22*x5316))+((sj1*sj4*x5315))+(((-1.0)*x5314*x5315))+((x5312*x5314))+(((-1.0)*sj1*x5311*x5312))+((cj4*x5313))), (((r22*x5314))+((x5315*x5317))+((x5315*x5316))+(((-1.0)*x5312*x5317))+(((-1.0)*cj1*x5311*x5312))+(((-1.0)*x5311*x5313))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5318=IKsin(j2);
IkReal x5319=IKcos(j2);
IkReal x5320=(cj1*cj5);
IkReal x5321=((1.17e-6)*cj4);
IkReal x5322=(r01*sj0);
IkReal x5323=(cj5*sj1);
IkReal x5324=((1.0)*cj0);
IkReal x5325=((1.0)*cj1);
IkReal x5326=(cj1*sj0);
IkReal x5327=(r00*sj5);
IkReal x5328=((1.0)*cj4);
IkReal x5329=(sj1*sj5);
IkReal x5330=(sj0*sj1);
IkReal x5331=(sj4*x5319);
IkReal x5332=(sj4*x5318);
IkReal x5333=(x5318*x5328);
evalcond[0]=((((-1.0)*cj1*r12*x5324))+x5331+((r22*sj1))+(((-1.0)*x5333))+((r02*x5326)));
evalcond[1]=((((-1.0)*r12*sj1*x5324))+x5332+(((-1.0)*r22*x5325))+((cj4*x5319))+((r02*x5330)));
evalcond[2]=((((-0.56747)*x5318))+(((-1.08e-6)*x5319))+(((1.17e-6)*x5332))+((x5319*x5321))+((pz*sj1)));
evalcond[3]=((0.73)+(((-1.0)*pz*x5325))+((x5318*x5321))+(((-1.08e-6)*x5318))+(((0.56747)*x5319))+(((-1.17e-6)*x5331)));
evalcond[4]=((((-1.0)*x5332))+(((-1.0)*r11*x5320*x5324))+((r20*x5329))+((x5326*x5327))+((x5320*x5322))+((r21*x5323))+(((-1.0)*cj1*r10*sj5*x5324))+(((-1.0)*x5319*x5328)));
evalcond[5]=(((x5322*x5323))+(((-1.0)*r20*sj5*x5325))+x5331+((x5327*x5330))+(((-1.0)*x5333))+(((-1.0)*r10*x5324*x5329))+(((-1.0)*r11*x5323*x5324))+(((-1.0)*r21*x5320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x5334 = IKatan2WithCheck(IkReal(r02),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5334.valid){
continue;
}
CheckValue<IkReal> x5335=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x5335.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x5334.value)+(((1.5707963267949)*(x5335.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x5336=IKcos(j0);
IkReal x5337=IKsin(j0);
IkReal x5338=((1.0)*cj5);
IkReal x5339=((1.0)*sj5);
IkReal x5340=(r11*x5337);
IkReal x5341=(r01*x5336);
IkReal x5342=(r10*x5337);
IkReal x5343=(r00*x5336);
evalcond[0]=((((-1.0)*r12*x5337))+(((-1.0)*r02*x5336)));
evalcond[1]=((-1.0)+(((-1.0)*x5338*x5343))+(((-1.0)*x5338*x5342))+((sj5*x5340))+((sj5*x5341)));
evalcond[2]=((((-1.0)*x5338*x5340))+(((-1.0)*x5338*x5341))+(((-1.0)*x5339*x5343))+(((-1.0)*x5339*x5342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x5344=((-1.0)*pz);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x5344);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x5344);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x5344);
rxp2_2=0;
IkReal x5345=((1.0)*sj5);
j1eval[0]=((IKabs((((cj5*r20))+(((-1.0)*r21*x5345)))))+(IKabs((((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*cj0*cj5*r10))+(((-1.0)*r01*sj0*x5345))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x5346=((-1.0)*pz);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x5346);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x5346);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x5346);
rxp2_2=0;
IkReal x5347=((1.0)*cj5);
j1eval[0]=((IKabs(((((-1.0)*r20*x5347))+((r21*sj5)))))+(IKabs((((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*r01*sj0*sj5))+(((-1.0)*cj0*r10*x5347))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x5348=((1.0)*cj5);
CheckValue<IkReal> x5350 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x5348))+((r21*sj5)))),IkReal((((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*r01*sj0*sj5))+(((-1.0)*cj0*r10*x5348)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5350.valid){
continue;
}
IkReal x5349=x5350.value;
j1array[0]=((-1.0)*x5349);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5349)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5351=IKcos(j1);
IkReal x5352=IKsin(j1);
IkReal x5353=((1.0)*sj5);
IkReal x5354=(cj5*x5351);
evalcond[0]=((((-1.0)*r21*x5352*x5353))+(((-1.0)*r01*sj0*x5351*x5353))+((cj0*r11*sj5*x5351))+((cj5*r20*x5352))+((r00*sj0*x5354))+(((-1.0)*cj0*r10*x5354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5355=((1.0)*sj4);
IkReal x5356=(r02*sj0);
IkReal x5357=(r22*sj1);
IkReal x5358=(cj1*cj4);
IkReal x5359=(cj0*r12);
IkReal x5360=(cj1*sj4);
IkReal x5361=(cj4*sj1);
if( IKabs((((r22*x5360))+((sj1*sj4*x5359))+((cj4*x5357))+((x5356*x5358))+(((-1.0)*sj1*x5355*x5356))+(((-1.0)*x5358*x5359)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x5355*x5357))+((r22*x5358))+(((-1.0)*cj1*x5355*x5356))+((x5359*x5360))+((x5359*x5361))+(((-1.0)*x5356*x5361)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x5360))+((sj1*sj4*x5359))+((cj4*x5357))+((x5356*x5358))+(((-1.0)*sj1*x5355*x5356))+(((-1.0)*x5358*x5359))))+IKsqr(((((-1.0)*x5355*x5357))+((r22*x5358))+(((-1.0)*cj1*x5355*x5356))+((x5359*x5360))+((x5359*x5361))+(((-1.0)*x5356*x5361))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r22*x5360))+((sj1*sj4*x5359))+((cj4*x5357))+((x5356*x5358))+(((-1.0)*sj1*x5355*x5356))+(((-1.0)*x5358*x5359))), ((((-1.0)*x5355*x5357))+((r22*x5358))+(((-1.0)*cj1*x5355*x5356))+((x5359*x5360))+((x5359*x5361))+(((-1.0)*x5356*x5361))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5362=IKsin(j2);
IkReal x5363=IKcos(j2);
IkReal x5364=(cj1*cj5);
IkReal x5365=((1.17e-6)*cj4);
IkReal x5366=(r01*sj0);
IkReal x5367=(cj5*sj1);
IkReal x5368=((1.0)*cj0);
IkReal x5369=((1.0)*cj1);
IkReal x5370=(cj1*sj0);
IkReal x5371=(r00*sj5);
IkReal x5372=((1.0)*cj4);
IkReal x5373=(sj1*sj5);
IkReal x5374=(sj0*sj1);
IkReal x5375=(sj4*x5363);
IkReal x5376=(sj4*x5362);
IkReal x5377=(x5362*x5372);
evalcond[0]=(x5375+(((-1.0)*x5377))+((r22*sj1))+((r02*x5370))+(((-1.0)*cj1*r12*x5368)));
evalcond[1]=((((-1.0)*r22*x5369))+x5376+((r02*x5374))+(((-1.0)*r12*sj1*x5368))+((cj4*x5363)));
evalcond[2]=((((-1.08e-6)*x5363))+((x5363*x5365))+(((1.17e-6)*x5376))+(((-0.56747)*x5362))+((pz*sj1)));
evalcond[3]=((0.73)+(((0.56747)*x5363))+(((-1.08e-6)*x5362))+(((-1.17e-6)*x5375))+((x5362*x5365))+(((-1.0)*pz*x5369)));
evalcond[4]=((((-1.0)*r11*x5364*x5368))+((x5364*x5366))+(((-1.0)*cj1*r10*sj5*x5368))+((r21*x5367))+(((-1.0)*x5376))+((x5370*x5371))+(((-1.0)*x5363*x5372))+((r20*x5373)));
evalcond[5]=(x5375+(((-1.0)*x5377))+(((-1.0)*r11*x5367*x5368))+(((-1.0)*r21*x5364))+((x5371*x5374))+(((-1.0)*r20*sj5*x5369))+(((-1.0)*r10*x5368*x5373))+((x5366*x5367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x5378=((1.0)*sj5);
CheckValue<IkReal> x5380 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj0*x5378))+((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*cj0*cj5*r10)))),IkReal((((cj5*r20))+(((-1.0)*r21*x5378)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5380.valid){
continue;
}
IkReal x5379=x5380.value;
j1array[0]=((-1.0)*x5379);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5379)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5381=IKsin(j1);
IkReal x5382=IKcos(j1);
IkReal x5383=((1.0)*cj5);
IkReal x5384=(cj0*x5381);
IkReal x5385=(sj0*x5381);
evalcond[0]=(((r11*sj5*x5384))+((cj5*r00*x5385))+(((-1.0)*r01*sj5*x5385))+(((-1.0)*r10*x5383*x5384))+((r21*sj5*x5382))+(((-1.0)*r20*x5382*x5383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5386=((1.0)*sj4);
IkReal x5387=(r02*sj0);
IkReal x5388=(r22*sj1);
IkReal x5389=(cj1*cj4);
IkReal x5390=(cj0*r12);
IkReal x5391=(cj1*sj4);
IkReal x5392=(cj4*sj1);
if( IKabs((((x5387*x5389))+((r22*x5391))+((cj4*x5388))+(((-1.0)*x5389*x5390))+(((-1.0)*sj1*x5386*x5387))+((sj1*sj4*x5390)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*x5386*x5387))+(((-1.0)*x5387*x5392))+(((-1.0)*x5386*x5388))+((x5390*x5391))+((x5390*x5392))+((r22*x5389)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x5387*x5389))+((r22*x5391))+((cj4*x5388))+(((-1.0)*x5389*x5390))+(((-1.0)*sj1*x5386*x5387))+((sj1*sj4*x5390))))+IKsqr(((((-1.0)*cj1*x5386*x5387))+(((-1.0)*x5387*x5392))+(((-1.0)*x5386*x5388))+((x5390*x5391))+((x5390*x5392))+((r22*x5389))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x5387*x5389))+((r22*x5391))+((cj4*x5388))+(((-1.0)*x5389*x5390))+(((-1.0)*sj1*x5386*x5387))+((sj1*sj4*x5390))), ((((-1.0)*cj1*x5386*x5387))+(((-1.0)*x5387*x5392))+(((-1.0)*x5386*x5388))+((x5390*x5391))+((x5390*x5392))+((r22*x5389))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5393=IKsin(j2);
IkReal x5394=IKcos(j2);
IkReal x5395=(cj1*cj5);
IkReal x5396=((1.17e-6)*cj4);
IkReal x5397=(r01*sj0);
IkReal x5398=(cj5*sj1);
IkReal x5399=((1.0)*cj0);
IkReal x5400=((1.0)*cj1);
IkReal x5401=(cj1*sj0);
IkReal x5402=(r00*sj5);
IkReal x5403=((1.0)*cj4);
IkReal x5404=(sj1*sj5);
IkReal x5405=(sj0*sj1);
IkReal x5406=(sj4*x5394);
IkReal x5407=(sj4*x5393);
IkReal x5408=(x5393*x5403);
evalcond[0]=(x5406+((r22*sj1))+((r02*x5401))+(((-1.0)*x5408))+(((-1.0)*cj1*r12*x5399)));
evalcond[1]=(((cj4*x5394))+x5407+((r02*x5405))+(((-1.0)*r12*sj1*x5399))+(((-1.0)*r22*x5400)));
evalcond[2]=(((x5394*x5396))+(((-1.08e-6)*x5394))+((pz*sj1))+(((-0.56747)*x5393))+(((1.17e-6)*x5407)));
evalcond[3]=((0.73)+(((-1.0)*pz*x5400))+((x5393*x5396))+(((0.56747)*x5394))+(((-1.08e-6)*x5393))+(((-1.17e-6)*x5406)));
evalcond[4]=((((-1.0)*x5407))+((x5401*x5402))+(((-1.0)*r11*x5395*x5399))+((r20*x5404))+((r21*x5398))+(((-1.0)*x5394*x5403))+((x5395*x5397))+(((-1.0)*cj1*r10*sj5*x5399)));
evalcond[5]=(x5406+(((-1.0)*r20*sj5*x5400))+((x5402*x5405))+(((-1.0)*x5408))+(((-1.0)*r10*x5399*x5404))+(((-1.0)*r11*x5398*x5399))+(((-1.0)*r21*x5395))+((x5397*x5398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x5409=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x5409.valid){
continue;
}
CheckValue<IkReal> x5410 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5410.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x5409.value)))+(x5410.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5411=IKcos(j0);
IkReal x5412=IKsin(j0);
IkReal x5413=((1.0)*x5411);
IkReal x5414=((1.0)*x5412);
evalcond[0]=((((-1.0)*r02*x5413))+(((-1.0)*r12*x5414)));
evalcond[1]=((((-1.0)*py*x5414))+(((-1.0)*px*x5413)));
evalcond[2]=((-1.0)+((r11*sj5*x5412))+(((-1.0)*cj5*r00*x5413))+(((-1.0)*cj5*r10*x5414))+((r01*sj5*x5411)));
evalcond[3]=((((-1.0)*r00*sj5*x5413))+(((-1.0)*cj5*r01*x5413))+(((-1.0)*r10*sj5*x5414))+(((-1.0)*cj5*r11*x5414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x5415=((1.0)*sj5);
j1eval[0]=((IKabs((((cj5*r20))+(((-1.0)*r21*x5415)))))+(IKabs((((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*cj0*cj5*r10))+(((-1.0)*r01*sj0*x5415))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x5416=((1.0)*cj5);
j1eval[0]=((IKabs(((((-1.0)*cj0*r10*x5416))+((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*r01*sj0*sj5)))))+(IKabs((((r21*sj5))+(((-1.0)*r20*x5416))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x5417=((1.0)*cj5);
CheckValue<IkReal> x5419 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x5417)))),IkReal(((((-1.0)*cj0*r10*x5417))+((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*r01*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5419.valid){
continue;
}
IkReal x5418=x5419.value;
j1array[0]=((-1.0)*x5418);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5418)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5420=IKcos(j1);
IkReal x5421=IKsin(j1);
IkReal x5422=((1.0)*sj5);
IkReal x5423=(cj5*x5420);
evalcond[0]=((((-1.0)*r21*x5421*x5422))+((r00*sj0*x5423))+(((-1.0)*cj0*r10*x5423))+((cj5*r20*x5421))+((cj0*r11*sj5*x5420))+(((-1.0)*r01*sj0*x5420*x5422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5424=((1.0)*sj4);
IkReal x5425=(r02*sj0);
IkReal x5426=(r22*sj1);
IkReal x5427=(cj1*cj4);
IkReal x5428=(cj0*r12);
IkReal x5429=(cj1*sj4);
IkReal x5430=(cj4*sj1);
if( IKabs(((((-1.0)*sj1*x5424*x5425))+((cj4*x5426))+((r22*x5429))+((x5425*x5427))+(((-1.0)*x5427*x5428))+((sj1*sj4*x5428)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*x5424*x5425))+((r22*x5427))+(((-1.0)*x5424*x5426))+((x5428*x5430))+(((-1.0)*x5425*x5430))+((x5428*x5429)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj1*x5424*x5425))+((cj4*x5426))+((r22*x5429))+((x5425*x5427))+(((-1.0)*x5427*x5428))+((sj1*sj4*x5428))))+IKsqr(((((-1.0)*cj1*x5424*x5425))+((r22*x5427))+(((-1.0)*x5424*x5426))+((x5428*x5430))+(((-1.0)*x5425*x5430))+((x5428*x5429))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj1*x5424*x5425))+((cj4*x5426))+((r22*x5429))+((x5425*x5427))+(((-1.0)*x5427*x5428))+((sj1*sj4*x5428))), ((((-1.0)*cj1*x5424*x5425))+((r22*x5427))+(((-1.0)*x5424*x5426))+((x5428*x5430))+(((-1.0)*x5425*x5430))+((x5428*x5429))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5431=IKsin(j2);
IkReal x5432=IKcos(j2);
IkReal x5433=(cj1*cj5);
IkReal x5434=((1.17e-6)*cj4);
IkReal x5435=(r01*sj0);
IkReal x5436=(cj1*sj0);
IkReal x5437=(cj5*sj1);
IkReal x5438=((1.0)*cj0);
IkReal x5439=((1.0)*cj1);
IkReal x5440=(r00*sj5);
IkReal x5441=((1.0)*cj4);
IkReal x5442=(sj1*sj5);
IkReal x5443=(sj0*sj1);
IkReal x5444=(sj4*x5432);
IkReal x5445=(sj4*x5431);
IkReal x5446=(x5431*x5441);
evalcond[0]=(x5444+((r22*sj1))+((r02*x5436))+(((-1.0)*x5446))+(((-1.0)*cj1*r12*x5438)));
evalcond[1]=(x5445+(((-1.0)*r12*sj1*x5438))+((cj4*x5432))+(((-1.0)*r22*x5439))+((r02*x5443)));
evalcond[2]=((((-1.0)*cj1*py*x5438))+((px*x5436))+(((-1.08e-6)*x5432))+(((1.17e-6)*x5445))+((pz*sj1))+((x5432*x5434))+(((-0.56747)*x5431)));
evalcond[3]=((0.73)+(((-1.0)*pz*x5439))+((px*x5443))+(((-1.08e-6)*x5431))+((x5431*x5434))+(((-1.17e-6)*x5444))+(((0.56747)*x5432))+(((-1.0)*py*sj1*x5438)));
evalcond[4]=((((-1.0)*x5445))+((r20*x5442))+(((-1.0)*cj1*r10*sj5*x5438))+((x5436*x5440))+((x5433*x5435))+(((-1.0)*x5432*x5441))+(((-1.0)*r11*x5433*x5438))+((r21*x5437)));
evalcond[5]=(((x5440*x5443))+x5444+(((-1.0)*x5446))+(((-1.0)*r20*sj5*x5439))+(((-1.0)*r10*x5438*x5442))+((x5435*x5437))+(((-1.0)*r21*x5433))+(((-1.0)*r11*x5437*x5438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x5447=((1.0)*sj5);
CheckValue<IkReal> x5449 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj0*x5447))+((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*cj0*cj5*r10)))),IkReal((((cj5*r20))+(((-1.0)*r21*x5447)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5449.valid){
continue;
}
IkReal x5448=x5449.value;
j1array[0]=((-1.0)*x5448);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5448)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5450=IKsin(j1);
IkReal x5451=IKcos(j1);
IkReal x5452=((1.0)*cj5);
IkReal x5453=(cj0*x5450);
IkReal x5454=(sj0*x5450);
evalcond[0]=(((r11*sj5*x5453))+(((-1.0)*r01*sj5*x5454))+(((-1.0)*r20*x5451*x5452))+(((-1.0)*r10*x5452*x5453))+((r21*sj5*x5451))+((cj5*r00*x5454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5455=((1.0)*sj4);
IkReal x5456=(r02*sj0);
IkReal x5457=(r22*sj1);
IkReal x5458=(cj1*cj4);
IkReal x5459=(cj0*r12);
IkReal x5460=(cj1*sj4);
IkReal x5461=(cj4*sj1);
if( IKabs((((r22*x5460))+((x5456*x5458))+((cj4*x5457))+(((-1.0)*sj1*x5455*x5456))+((sj1*sj4*x5459))+(((-1.0)*x5458*x5459)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x5455*x5457))+(((-1.0)*cj1*x5455*x5456))+(((-1.0)*x5456*x5461))+((r22*x5458))+((x5459*x5461))+((x5459*x5460)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x5460))+((x5456*x5458))+((cj4*x5457))+(((-1.0)*sj1*x5455*x5456))+((sj1*sj4*x5459))+(((-1.0)*x5458*x5459))))+IKsqr(((((-1.0)*x5455*x5457))+(((-1.0)*cj1*x5455*x5456))+(((-1.0)*x5456*x5461))+((r22*x5458))+((x5459*x5461))+((x5459*x5460))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r22*x5460))+((x5456*x5458))+((cj4*x5457))+(((-1.0)*sj1*x5455*x5456))+((sj1*sj4*x5459))+(((-1.0)*x5458*x5459))), ((((-1.0)*x5455*x5457))+(((-1.0)*cj1*x5455*x5456))+(((-1.0)*x5456*x5461))+((r22*x5458))+((x5459*x5461))+((x5459*x5460))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5462=IKsin(j2);
IkReal x5463=IKcos(j2);
IkReal x5464=(cj1*cj5);
IkReal x5465=((1.17e-6)*cj4);
IkReal x5466=(r01*sj0);
IkReal x5467=(cj1*sj0);
IkReal x5468=(cj5*sj1);
IkReal x5469=((1.0)*cj0);
IkReal x5470=((1.0)*cj1);
IkReal x5471=(r00*sj5);
IkReal x5472=((1.0)*cj4);
IkReal x5473=(sj1*sj5);
IkReal x5474=(sj0*sj1);
IkReal x5475=(sj4*x5463);
IkReal x5476=(sj4*x5462);
IkReal x5477=(x5462*x5472);
evalcond[0]=(x5475+((r22*sj1))+((r02*x5467))+(((-1.0)*x5477))+(((-1.0)*cj1*r12*x5469)));
evalcond[1]=(x5476+((cj4*x5463))+(((-1.0)*r22*x5470))+(((-1.0)*r12*sj1*x5469))+((r02*x5474)));
evalcond[2]=((((-1.08e-6)*x5463))+(((-1.0)*cj1*py*x5469))+((x5463*x5465))+(((1.17e-6)*x5476))+((pz*sj1))+((px*x5467))+(((-0.56747)*x5462)));
evalcond[3]=((0.73)+(((-1.08e-6)*x5462))+(((-1.0)*pz*x5470))+((px*x5474))+(((0.56747)*x5463))+((x5462*x5465))+(((-1.0)*py*sj1*x5469))+(((-1.17e-6)*x5475)));
evalcond[4]=((((-1.0)*x5476))+(((-1.0)*x5463*x5472))+((r20*x5473))+((x5467*x5471))+((r21*x5468))+(((-1.0)*cj1*r10*sj5*x5469))+(((-1.0)*r11*x5464*x5469))+((x5464*x5466)));
evalcond[5]=((((-1.0)*r11*x5468*x5469))+((x5466*x5468))+x5475+((x5471*x5474))+(((-1.0)*x5477))+(((-1.0)*r10*x5469*x5473))+(((-1.0)*r20*sj5*x5470))+(((-1.0)*r21*x5464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x5478 = IKatan2WithCheck(IkReal(r02),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5478.valid){
continue;
}
CheckValue<IkReal> x5479=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x5479.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x5478.value)+(((1.5707963267949)*(x5479.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5480=IKcos(j0);
IkReal x5481=IKsin(j0);
IkReal x5482=((1.0)*x5480);
IkReal x5483=((1.0)*x5481);
evalcond[0]=((((-1.0)*r12*x5483))+(((-1.0)*r02*x5482)));
evalcond[1]=((((-1.0)*px*x5482))+(((-1.0)*py*x5483)));
evalcond[2]=((-1.0)+((r01*sj5*x5480))+((r11*sj5*x5481))+(((-1.0)*cj5*r10*x5483))+(((-1.0)*cj5*r00*x5482)));
evalcond[3]=((((-1.0)*cj5*r11*x5483))+(((-1.0)*r10*sj5*x5483))+(((-1.0)*r00*sj5*x5482))+(((-1.0)*cj5*r01*x5482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x5484=((1.0)*sj5);
j1eval[0]=((IKabs((((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*cj0*cj5*r10))+(((-1.0)*r01*sj0*x5484)))))+(IKabs((((cj5*r20))+(((-1.0)*r21*x5484))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x5485=((1.0)*cj5);
j1eval[0]=((IKabs((((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*r01*sj0*sj5))+(((-1.0)*cj0*r10*x5485)))))+(IKabs(((((-1.0)*r20*x5485))+((r21*sj5))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x5486=((1.0)*cj5);
CheckValue<IkReal> x5488 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x5486))+((r21*sj5)))),IkReal((((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*r01*sj0*sj5))+(((-1.0)*cj0*r10*x5486)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5488.valid){
continue;
}
IkReal x5487=x5488.value;
j1array[0]=((-1.0)*x5487);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5487)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5489=IKcos(j1);
IkReal x5490=IKsin(j1);
IkReal x5491=((1.0)*sj5);
IkReal x5492=(cj5*x5489);
evalcond[0]=(((r00*sj0*x5492))+((cj5*r20*x5490))+(((-1.0)*r21*x5490*x5491))+((cj0*r11*sj5*x5489))+(((-1.0)*cj0*r10*x5492))+(((-1.0)*r01*sj0*x5489*x5491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5493=((1.0)*sj4);
IkReal x5494=(r02*sj0);
IkReal x5495=(r22*sj1);
IkReal x5496=(cj1*cj4);
IkReal x5497=(cj0*r12);
IkReal x5498=(cj1*sj4);
IkReal x5499=(cj4*sj1);
if( IKabs((((cj4*x5495))+((x5494*x5496))+(((-1.0)*sj1*x5493*x5494))+(((-1.0)*x5496*x5497))+((sj1*sj4*x5497))+((r22*x5498)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*x5493*x5494))+(((-1.0)*x5493*x5495))+((r22*x5496))+((x5497*x5499))+((x5497*x5498))+(((-1.0)*x5494*x5499)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*x5495))+((x5494*x5496))+(((-1.0)*sj1*x5493*x5494))+(((-1.0)*x5496*x5497))+((sj1*sj4*x5497))+((r22*x5498))))+IKsqr(((((-1.0)*cj1*x5493*x5494))+(((-1.0)*x5493*x5495))+((r22*x5496))+((x5497*x5499))+((x5497*x5498))+(((-1.0)*x5494*x5499))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj4*x5495))+((x5494*x5496))+(((-1.0)*sj1*x5493*x5494))+(((-1.0)*x5496*x5497))+((sj1*sj4*x5497))+((r22*x5498))), ((((-1.0)*cj1*x5493*x5494))+(((-1.0)*x5493*x5495))+((r22*x5496))+((x5497*x5499))+((x5497*x5498))+(((-1.0)*x5494*x5499))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5500=IKsin(j2);
IkReal x5501=IKcos(j2);
IkReal x5502=(cj1*cj5);
IkReal x5503=((1.17e-6)*cj4);
IkReal x5504=(r01*sj0);
IkReal x5505=(cj1*sj0);
IkReal x5506=(cj5*sj1);
IkReal x5507=((1.0)*cj0);
IkReal x5508=((1.0)*cj1);
IkReal x5509=(r00*sj5);
IkReal x5510=((1.0)*cj4);
IkReal x5511=(sj1*sj5);
IkReal x5512=(sj0*sj1);
IkReal x5513=(sj4*x5501);
IkReal x5514=(sj4*x5500);
IkReal x5515=(x5500*x5510);
evalcond[0]=(x5513+(((-1.0)*cj1*r12*x5507))+((r02*x5505))+((r22*sj1))+(((-1.0)*x5515)));
evalcond[1]=(x5514+(((-1.0)*r22*x5508))+((r02*x5512))+(((-1.0)*r12*sj1*x5507))+((cj4*x5501)));
evalcond[2]=(((px*x5505))+(((-1.08e-6)*x5501))+((x5501*x5503))+(((-0.56747)*x5500))+((pz*sj1))+(((-1.0)*cj1*py*x5507))+(((1.17e-6)*x5514)));
evalcond[3]=((0.73)+(((0.56747)*x5501))+(((-1.0)*py*sj1*x5507))+(((-1.0)*pz*x5508))+((px*x5512))+((x5500*x5503))+(((-1.08e-6)*x5500))+(((-1.17e-6)*x5513)));
evalcond[4]=(((r20*x5511))+(((-1.0)*x5501*x5510))+((r21*x5506))+(((-1.0)*r11*x5502*x5507))+((x5502*x5504))+(((-1.0)*x5514))+(((-1.0)*cj1*r10*sj5*x5507))+((x5505*x5509)));
evalcond[5]=(x5513+(((-1.0)*r11*x5506*x5507))+((x5509*x5512))+(((-1.0)*r20*sj5*x5508))+(((-1.0)*r21*x5502))+(((-1.0)*x5515))+(((-1.0)*r10*x5507*x5511))+((x5504*x5506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x5516=((1.0)*sj5);
CheckValue<IkReal> x5518 = IKatan2WithCheck(IkReal((((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*cj0*cj5*r10))+(((-1.0)*r01*sj0*x5516)))),IkReal((((cj5*r20))+(((-1.0)*r21*x5516)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5518.valid){
continue;
}
IkReal x5517=x5518.value;
j1array[0]=((-1.0)*x5517);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5517)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5519=IKsin(j1);
IkReal x5520=IKcos(j1);
IkReal x5521=((1.0)*cj5);
IkReal x5522=(cj0*x5519);
IkReal x5523=(sj0*x5519);
evalcond[0]=(((cj5*r00*x5523))+(((-1.0)*r20*x5520*x5521))+(((-1.0)*r10*x5521*x5522))+((r21*sj5*x5520))+(((-1.0)*r01*sj5*x5523))+((r11*sj5*x5522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5524=((1.0)*sj4);
IkReal x5525=(r02*sj0);
IkReal x5526=(r22*sj1);
IkReal x5527=(cj1*cj4);
IkReal x5528=(cj0*r12);
IkReal x5529=(cj1*sj4);
IkReal x5530=(cj4*sj1);
if( IKabs((((sj1*sj4*x5528))+((r22*x5529))+(((-1.0)*x5527*x5528))+(((-1.0)*sj1*x5524*x5525))+((x5525*x5527))+((cj4*x5526)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x5528*x5530))+((x5528*x5529))+(((-1.0)*x5525*x5530))+((r22*x5527))+(((-1.0)*cj1*x5524*x5525))+(((-1.0)*x5524*x5526)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*sj4*x5528))+((r22*x5529))+(((-1.0)*x5527*x5528))+(((-1.0)*sj1*x5524*x5525))+((x5525*x5527))+((cj4*x5526))))+IKsqr((((x5528*x5530))+((x5528*x5529))+(((-1.0)*x5525*x5530))+((r22*x5527))+(((-1.0)*cj1*x5524*x5525))+(((-1.0)*x5524*x5526))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*sj4*x5528))+((r22*x5529))+(((-1.0)*x5527*x5528))+(((-1.0)*sj1*x5524*x5525))+((x5525*x5527))+((cj4*x5526))), (((x5528*x5530))+((x5528*x5529))+(((-1.0)*x5525*x5530))+((r22*x5527))+(((-1.0)*cj1*x5524*x5525))+(((-1.0)*x5524*x5526))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5531=IKsin(j2);
IkReal x5532=IKcos(j2);
IkReal x5533=(cj1*cj5);
IkReal x5534=((1.17e-6)*cj4);
IkReal x5535=(r01*sj0);
IkReal x5536=(cj1*sj0);
IkReal x5537=(cj5*sj1);
IkReal x5538=((1.0)*cj0);
IkReal x5539=((1.0)*cj1);
IkReal x5540=(r00*sj5);
IkReal x5541=((1.0)*cj4);
IkReal x5542=(sj1*sj5);
IkReal x5543=(sj0*sj1);
IkReal x5544=(sj4*x5532);
IkReal x5545=(sj4*x5531);
IkReal x5546=(x5531*x5541);
evalcond[0]=(x5544+((r22*sj1))+(((-1.0)*cj1*r12*x5538))+(((-1.0)*x5546))+((r02*x5536)));
evalcond[1]=((((-1.0)*r12*sj1*x5538))+(((-1.0)*r22*x5539))+x5545+((r02*x5543))+((cj4*x5532)));
evalcond[2]=((((-1.0)*cj1*py*x5538))+(((-0.56747)*x5531))+((px*x5536))+(((1.17e-6)*x5545))+((pz*sj1))+((x5532*x5534))+(((-1.08e-6)*x5532)));
evalcond[3]=((0.73)+(((-1.17e-6)*x5544))+((px*x5543))+(((-1.0)*py*sj1*x5538))+(((0.56747)*x5532))+(((-1.0)*pz*x5539))+((x5531*x5534))+(((-1.08e-6)*x5531)));
evalcond[4]=((((-1.0)*cj1*r10*sj5*x5538))+(((-1.0)*x5532*x5541))+((r20*x5542))+((r21*x5537))+(((-1.0)*r11*x5533*x5538))+((x5536*x5540))+((x5533*x5535))+(((-1.0)*x5545)));
evalcond[5]=((((-1.0)*r11*x5537*x5538))+(((-1.0)*r10*x5538*x5542))+x5544+(((-1.0)*r20*sj5*x5539))+(((-1.0)*r21*x5533))+((x5535*x5537))+((x5540*x5543))+(((-1.0)*x5546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x5547 = IKatan2WithCheck(IkReal(px),IkReal(((-1.0)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x5547.valid){
continue;
}
CheckValue<IkReal> x5548=IKPowWithIntegerCheck(IKsign((((cj5*rxp0_2))+(((-1.0)*rxp1_2*sj5)))),-1);
if(!x5548.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x5547.value)+(((1.5707963267949)*(x5548.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5549=IKcos(j0);
IkReal x5550=IKsin(j0);
IkReal x5551=((1.0)*x5549);
IkReal x5552=((1.0)*x5550);
evalcond[0]=((((-1.0)*r12*x5552))+(((-1.0)*r02*x5551)));
evalcond[1]=((((-1.0)*px*x5551))+(((-1.0)*py*x5552)));
evalcond[2]=((-1.0)+(((-1.0)*cj5*r00*x5551))+(((-1.0)*cj5*r10*x5552))+((r11*sj5*x5550))+((r01*sj5*x5549)));
evalcond[3]=((((-1.0)*r10*sj5*x5552))+(((-1.0)*cj5*r11*x5552))+(((-1.0)*cj5*r01*x5551))+(((-1.0)*r00*sj5*x5551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x5553=((1.0)*sj5);
j1eval[0]=((IKabs((((cj5*r20))+(((-1.0)*r21*x5553)))))+(IKabs((((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*cj0*cj5*r10))+(((-1.0)*r01*sj0*x5553))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x5554=((1.0)*cj5);
j1eval[0]=((IKabs(((((-1.0)*r20*x5554))+((r21*sj5)))))+(IKabs((((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*cj0*r10*x5554))+(((-1.0)*r01*sj0*sj5))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x5555=((1.0)*cj5);
CheckValue<IkReal> x5557 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x5555))+((r21*sj5)))),IkReal((((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*cj0*r10*x5555))+(((-1.0)*r01*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5557.valid){
continue;
}
IkReal x5556=x5557.value;
j1array[0]=((-1.0)*x5556);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5556)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5558=IKcos(j1);
IkReal x5559=IKsin(j1);
IkReal x5560=((1.0)*sj5);
IkReal x5561=(cj5*x5558);
evalcond[0]=(((cj0*r11*sj5*x5558))+(((-1.0)*cj0*r10*x5561))+((r00*sj0*x5561))+(((-1.0)*r21*x5559*x5560))+(((-1.0)*r01*sj0*x5558*x5560))+((cj5*r20*x5559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5562=((1.0)*sj4);
IkReal x5563=(r02*sj0);
IkReal x5564=(r22*sj1);
IkReal x5565=(cj1*cj4);
IkReal x5566=(cj0*r12);
IkReal x5567=(cj1*sj4);
IkReal x5568=(cj4*sj1);
if( IKabs(((((-1.0)*sj1*x5562*x5563))+((r22*x5567))+((x5563*x5565))+((sj1*sj4*x5566))+((cj4*x5564))+(((-1.0)*x5565*x5566)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x5566*x5567))+((x5566*x5568))+(((-1.0)*cj1*x5562*x5563))+((r22*x5565))+(((-1.0)*x5562*x5564))+(((-1.0)*x5563*x5568)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj1*x5562*x5563))+((r22*x5567))+((x5563*x5565))+((sj1*sj4*x5566))+((cj4*x5564))+(((-1.0)*x5565*x5566))))+IKsqr((((x5566*x5567))+((x5566*x5568))+(((-1.0)*cj1*x5562*x5563))+((r22*x5565))+(((-1.0)*x5562*x5564))+(((-1.0)*x5563*x5568))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj1*x5562*x5563))+((r22*x5567))+((x5563*x5565))+((sj1*sj4*x5566))+((cj4*x5564))+(((-1.0)*x5565*x5566))), (((x5566*x5567))+((x5566*x5568))+(((-1.0)*cj1*x5562*x5563))+((r22*x5565))+(((-1.0)*x5562*x5564))+(((-1.0)*x5563*x5568))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5569=IKsin(j2);
IkReal x5570=IKcos(j2);
IkReal x5571=(cj1*cj5);
IkReal x5572=((1.17e-6)*cj4);
IkReal x5573=(r01*sj0);
IkReal x5574=(cj1*sj0);
IkReal x5575=(cj5*sj1);
IkReal x5576=((1.0)*cj0);
IkReal x5577=((1.0)*cj1);
IkReal x5578=(r00*sj5);
IkReal x5579=((1.0)*cj4);
IkReal x5580=(sj1*sj5);
IkReal x5581=(sj0*sj1);
IkReal x5582=(sj4*x5570);
IkReal x5583=(sj4*x5569);
IkReal x5584=(x5569*x5579);
evalcond[0]=(((r02*x5574))+x5582+(((-1.0)*cj1*r12*x5576))+((r22*sj1))+(((-1.0)*x5584)));
evalcond[1]=(x5583+((r02*x5581))+((cj4*x5570))+(((-1.0)*r22*x5577))+(((-1.0)*r12*sj1*x5576)));
evalcond[2]=((((-0.56747)*x5569))+((px*x5574))+(((-1.08e-6)*x5570))+((pz*sj1))+(((1.17e-6)*x5583))+(((-1.0)*cj1*py*x5576))+((x5570*x5572)));
evalcond[3]=((0.73)+(((-1.17e-6)*x5582))+(((-1.0)*py*sj1*x5576))+((x5569*x5572))+(((-1.0)*pz*x5577))+(((-1.08e-6)*x5569))+(((0.56747)*x5570))+((px*x5581)));
evalcond[4]=(((x5574*x5578))+(((-1.0)*x5570*x5579))+(((-1.0)*x5583))+((r20*x5580))+((r21*x5575))+(((-1.0)*cj1*r10*sj5*x5576))+(((-1.0)*r11*x5571*x5576))+((x5571*x5573)));
evalcond[5]=(x5582+(((-1.0)*r21*x5571))+((x5573*x5575))+(((-1.0)*r20*sj5*x5577))+(((-1.0)*r10*x5576*x5580))+(((-1.0)*x5584))+((x5578*x5581))+(((-1.0)*r11*x5575*x5576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x5585=((1.0)*sj5);
CheckValue<IkReal> x5587 = IKatan2WithCheck(IkReal((((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*cj0*cj5*r10))+(((-1.0)*r01*sj0*x5585)))),IkReal((((cj5*r20))+(((-1.0)*r21*x5585)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5587.valid){
continue;
}
IkReal x5586=x5587.value;
j1array[0]=((-1.0)*x5586);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5586)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5588=IKsin(j1);
IkReal x5589=IKcos(j1);
IkReal x5590=((1.0)*cj5);
IkReal x5591=(cj0*x5588);
IkReal x5592=(sj0*x5588);
evalcond[0]=(((cj5*r00*x5592))+((r11*sj5*x5591))+((r21*sj5*x5589))+(((-1.0)*r10*x5590*x5591))+(((-1.0)*r20*x5589*x5590))+(((-1.0)*r01*sj5*x5592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5593=((1.0)*sj4);
IkReal x5594=(r02*sj0);
IkReal x5595=(r22*sj1);
IkReal x5596=(cj1*cj4);
IkReal x5597=(cj0*r12);
IkReal x5598=(cj1*sj4);
IkReal x5599=(cj4*sj1);
if( IKabs(((((-1.0)*x5596*x5597))+((cj4*x5595))+((sj1*sj4*x5597))+(((-1.0)*sj1*x5593*x5594))+((r22*x5598))+((x5594*x5596)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x5593*x5595))+(((-1.0)*x5594*x5599))+(((-1.0)*cj1*x5593*x5594))+((r22*x5596))+((x5597*x5598))+((x5597*x5599)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5596*x5597))+((cj4*x5595))+((sj1*sj4*x5597))+(((-1.0)*sj1*x5593*x5594))+((r22*x5598))+((x5594*x5596))))+IKsqr(((((-1.0)*x5593*x5595))+(((-1.0)*x5594*x5599))+(((-1.0)*cj1*x5593*x5594))+((r22*x5596))+((x5597*x5598))+((x5597*x5599))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x5596*x5597))+((cj4*x5595))+((sj1*sj4*x5597))+(((-1.0)*sj1*x5593*x5594))+((r22*x5598))+((x5594*x5596))), ((((-1.0)*x5593*x5595))+(((-1.0)*x5594*x5599))+(((-1.0)*cj1*x5593*x5594))+((r22*x5596))+((x5597*x5598))+((x5597*x5599))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5600=IKsin(j2);
IkReal x5601=IKcos(j2);
IkReal x5602=(cj1*cj5);
IkReal x5603=((1.17e-6)*cj4);
IkReal x5604=(r01*sj0);
IkReal x5605=(cj1*sj0);
IkReal x5606=(cj5*sj1);
IkReal x5607=((1.0)*cj0);
IkReal x5608=((1.0)*cj1);
IkReal x5609=(r00*sj5);
IkReal x5610=((1.0)*cj4);
IkReal x5611=(sj1*sj5);
IkReal x5612=(sj0*sj1);
IkReal x5613=(sj4*x5601);
IkReal x5614=(sj4*x5600);
IkReal x5615=(x5600*x5610);
evalcond[0]=(x5613+((r02*x5605))+((r22*sj1))+(((-1.0)*cj1*r12*x5607))+(((-1.0)*x5615)));
evalcond[1]=(x5614+(((-1.0)*r22*x5608))+((r02*x5612))+(((-1.0)*r12*sj1*x5607))+((cj4*x5601)));
evalcond[2]=((((-0.56747)*x5600))+((px*x5605))+(((-1.08e-6)*x5601))+(((-1.0)*cj1*py*x5607))+((pz*sj1))+((x5601*x5603))+(((1.17e-6)*x5614)));
evalcond[3]=((0.73)+(((-1.17e-6)*x5613))+((x5600*x5603))+((px*x5612))+(((-1.08e-6)*x5600))+(((-1.0)*pz*x5608))+(((0.56747)*x5601))+(((-1.0)*py*sj1*x5607)));
evalcond[4]=((((-1.0)*x5614))+((x5605*x5609))+((r20*x5611))+(((-1.0)*r11*x5602*x5607))+((x5602*x5604))+((r21*x5606))+(((-1.0)*x5601*x5610))+(((-1.0)*cj1*r10*sj5*x5607)));
evalcond[5]=(x5613+(((-1.0)*r10*x5607*x5611))+((x5609*x5612))+((x5604*x5606))+(((-1.0)*r21*x5602))+(((-1.0)*r20*sj5*x5608))+(((-1.0)*r11*x5606*x5607))+(((-1.0)*x5615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5616=((-1.0)*r20);
IkReal x5618 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5618)==0){
continue;
}
IkReal x5617=pow(x5618,-0.5);
CheckValue<IkReal> x5619 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5616),IKFAST_ATAN2_MAGTHRESH);
if(!x5619.valid){
continue;
}
IkReal gconst6=((-1.0)*(x5619.value));
IkReal gconst7=(r21*x5617);
IkReal gconst8=(x5616*x5617);
CheckValue<IkReal> x5620 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5620.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5620.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x5621=((-1.0)*r20);
IkReal x5622=x5617;
CheckValue<IkReal> x5624 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5621),IKFAST_ATAN2_MAGTHRESH);
if(!x5624.valid){
continue;
}
IkReal x5623=((-1.0)*(x5624.value));
sj5=gconst7;
cj5=gconst8;
j5=x5623;
IkReal gconst6=x5623;
IkReal gconst7=(r21*x5622);
IkReal gconst8=(x5621*x5622);
IkReal x5625=((100000000.0)*sj3*sj4);
IkReal x5626=((117.0)*cj4*sj3);
j0eval[0]=rxp2_2;
j0eval[1]=((IKabs((((r12*x5626))+(((-1.0)*py*x5625)))))+(IKabs((((px*x5625))+(((-1.0)*r02*x5626))))));
j0eval[2]=IKsign(rxp2_2);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5627=((1.0)*sj3);
IkReal x5628=(gconst7*sj4);
IkReal x5629=(gconst8*sj4);
CheckValue<IkReal> x5630=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r21))+((gconst8*r20)))),-1);
if(!x5630.valid){
continue;
}
CheckValue<IkReal> x5631 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*r02*x5627))+(((-1.0)*r01*x5627*x5629))+(((-1.0)*r00*x5627*x5628)))),IkReal((((r10*sj3*x5628))+((r11*sj3*x5629))+((cj4*r12*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5631.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5630.value)))+(x5631.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5632=IKcos(j0);
IkReal x5633=IKsin(j0);
IkReal x5634=((1.0)*gconst7);
IkReal x5635=(cj4*sj3);
IkReal x5636=((1.0)*gconst8);
IkReal x5637=(r10*x5633);
IkReal x5638=((1.0)*x5632);
IkReal x5639=(r11*x5633);
IkReal x5640=((1.0)*x5633);
evalcond[0]=((((-1.0)*r12*x5640))+(((-1.0)*r02*x5638))+(((-1.0)*sj3*sj4)));
evalcond[1]=((((-1.0)*py*x5640))+(((-1.17e-6)*x5635))+(((-1.0)*px*x5638)));
evalcond[2]=(cj3+((gconst7*r01*x5632))+(((-1.0)*x5636*x5637))+((gconst7*x5639))+(((-1.0)*r00*x5632*x5636)));
evalcond[3]=(x5635+(((-1.0)*x5636*x5639))+(((-1.0)*r01*x5632*x5636))+(((-1.0)*r00*x5632*x5634))+(((-1.0)*x5634*x5637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x5641=cj3*cj3;
IkReal x5642=cj4*cj4;
IkReal x5643=sj4*sj4;
IkReal x5644=(cj3*r22);
IkReal x5645=(cj4*r22);
IkReal x5646=((4.53976)*sj4);
IkReal x5647=(r02*sj0);
IkReal x5648=((16.0)*pz);
IkReal x5649=((8.0)*pz);
IkReal x5650=((1.872e-5)*sj4);
IkReal x5651=((4.32e-6)*sj4);
IkReal x5652=((9.07952)*sj4);
IkReal x5653=(px*sj0);
IkReal x5654=(cj0*py);
IkReal x5655=((4.68e-6)*sj4);
IkReal x5656=((9.36e-6)*sj4);
IkReal x5657=(cj0*cj3*r12);
IkReal x5658=((1.872e-5)*x5642);
IkReal x5659=(cj0*cj4*r12);
IkReal x5660=(cj4*x5655);
IkReal x5661=((4.0)*x5642);
IkReal x5662=((9.36e-6)*x5642);
IkReal x5663=(x5641*x5643);
IkReal x5664=(cj3*x5643*x5647);
IkReal x5665=(((x5641*x5655*x5659))+(((4.0)*x5653*x5663))+((x5651*x5657))+(((2.26988)*sj4*x5644))+((x5647*x5660))+((x5653*x5661))+(((2.26988)*x5659)));
IkReal x5666=((((2.26988)*cj4*x5647))+(((4.68e-6)*x5642*x5644))+((x5655*x5659))+(((4.32e-6)*x5645))+((cj3*x5647*x5651))+(((4.68e-6)*x5643*x5644))+(((4.0)*x5654*x5663))+((x5654*x5661))+((x5641*x5647*x5660)));
IkReal x5667=((((9.36e-6)*x5643*x5657))+(((-8.64e-6)*cj4*x5647))+((cj3*x5646*x5647))+(((-1.0)*cj3*x5647*x5662))+(((-1.0)*x5642*x5649))+(((-1.0)*x5645*x5656))+(((-1.0)*x5646*x5657))+(((-1.0)*x5649*x5663))+(((8.64e-6)*sj4*x5644))+(((8.64e-6)*x5659))+(((4.53976)*x5645))+((x5657*x5662))+(((-9.36e-6)*x5664))+((x5641*x5645*x5656)));
IkReal x5668=((((-1.0)*x5666))+x5665);
IkReal x5669=((((-1.0)*x5665))+x5666);
op[0]=x5668;
op[1]=x5667;
op[2]=x5668;
op[3]=((((-1.872e-5)*x5664))+(((-1.0)*x5642*x5648))+(((1.728e-5)*sj4*x5644))+(((-1.0)*x5652*x5657))+((x5657*x5658))+(((-1.0)*x5645*x5650))+(((9.07952)*x5645))+(((-1.0)*x5648*x5663))+((cj3*x5647*x5652))+(((-1.0)*cj3*x5647*x5658))+(((-1.728e-5)*cj4*x5647))+(((1.728e-5)*x5659))+(((1.872e-5)*x5643*x5657))+((x5641*x5645*x5650)));
op[4]=x5669;
op[5]=x5667;
op[6]=x5669;
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

j1evalpoly[0]=((((-2.92)*(cj3*cj3)*(sj4*sj4)))+(((4.0)*pz*(cj4*cj4)))+(((-2.92)*(cj4*cj4)))+(((htj1*htj1)*(((((4.0)*pz*(cj4*cj4)))+(((-4.68e-6)*cj0*cj3*r12*(cj4*cj4)))+(((-2.26988)*cj3*r02*sj0*sj4))+(((4.68e-6)*cj3*r02*sj0*(cj4*cj4)))+(((-4.32e-6)*cj3*r22*sj4))+(((4.32e-6)*cj4*r02*sj0))+(((-8.76)*(cj3*cj3)*(sj4*sj4)))+(((-8.76)*(cj4*cj4)))+(((-4.68e-6)*cj0*cj3*r12*(sj4*sj4)))+(((4.68e-6)*cj3*r02*sj0*(sj4*sj4)))+(((-4.32e-6)*cj0*cj4*r12))+(((-2.26988)*cj4*r22))+(((4.0)*pz*(cj3*cj3)*(sj4*sj4)))+(((-4.68e-6)*cj4*r22*sj4*(cj3*cj3)))+(((4.68e-6)*cj4*r22*sj4))+(((2.26988)*cj0*cj3*r12*sj4))))))+(((-4.68e-6)*cj0*cj3*r12*(cj4*cj4)))+(((-2.26988)*cj3*r02*sj0*sj4))+(((4.68e-6)*cj3*r02*sj0*(cj4*cj4)))+(((-4.32e-6)*cj3*r22*sj4))+(((4.32e-6)*cj4*r02*sj0))+(((-4.68e-6)*cj0*cj3*r12*(sj4*sj4)))+(((4.68e-6)*cj3*r02*sj0*(sj4*sj4)))+(((-4.32e-6)*cj0*cj4*r12))+(((-2.26988)*cj4*r22))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-2.92)*(cj3*cj3)*(sj4*sj4)))+(((-2.92)*(cj4*cj4)))+(((-4.68e-6)*cj3*r02*sj0*(sj4*sj4)))+(((-4.68e-6)*cj4*r22*sj4))+(((-4.0)*pz*(cj4*cj4)))+(((-4.68e-6)*cj3*r02*sj0*(cj4*cj4)))+(((-4.0)*pz*(cj3*cj3)*(sj4*sj4)))+(((4.32e-6)*cj0*cj4*r12))+(((-2.26988)*cj0*cj3*r12*sj4))+(((2.26988)*cj4*r22))+(((-4.32e-6)*cj4*r02*sj0))+(((4.68e-6)*cj0*cj3*r12*(sj4*sj4)))+(((4.32e-6)*cj3*r22*sj4))+(((4.68e-6)*cj4*r22*sj4*(cj3*cj3)))+(((4.68e-6)*cj0*cj3*r12*(cj4*cj4)))+(((2.26988)*cj3*r02*sj0*sj4))))))+(((htj1*htj1*htj1*htj1*htj1)*(((((-8.0)*px*sj0*(cj3*cj3)*(sj4*sj4)))+(((-4.53976)*cj0*cj4*r12))+(((9.36e-6)*cj0*cj4*r12*sj4))+(((4.53976)*cj4*r02*sj0))+(((-9.36e-6)*cj4*r02*sj0*sj4))+(((9.36e-6)*cj3*r22*(sj4*sj4)))+(((-8.0)*px*sj0*(cj4*cj4)))+(((9.36e-6)*cj3*r22*(cj4*cj4)))+(((8.0)*cj0*py*(cj4*cj4)))+(((-4.53976)*cj3*r22*sj4))+(((8.0)*cj0*py*(cj3*cj3)*(sj4*sj4)))+(((8.64e-6)*cj3*r02*sj0*sj4))+(((9.36e-6)*cj4*r02*sj0*sj4*(cj3*cj3)))+(((8.64e-6)*cj4*r22))+(((-9.36e-6)*cj0*cj4*r12*sj4*(cj3*cj3)))+(((-8.64e-6)*cj0*cj3*r12*sj4))))))+(((htj1*htj1*htj1)*(((((-16.0)*px*sj0*(cj4*cj4)))+(((-1.872e-5)*cj0*cj4*r12*sj4*(cj3*cj3)))+(((-9.07952)*cj0*cj4*r12))+(((1.872e-5)*cj4*r02*sj0*sj4*(cj3*cj3)))+(((1.872e-5)*cj3*r22*(sj4*sj4)))+(((-1.728e-5)*cj0*cj3*r12*sj4))+(((-9.07952)*cj3*r22*sj4))+(((-16.0)*px*sj0*(cj3*cj3)*(sj4*sj4)))+(((9.07952)*cj4*r02*sj0))+(((16.0)*cj0*py*(cj3*cj3)*(sj4*sj4)))+(((1.872e-5)*cj0*cj4*r12*sj4))+(((1.872e-5)*cj3*r22*(cj4*cj4)))+(((1.728e-5)*cj4*r22))+(((1.728e-5)*cj3*r02*sj0*sj4))+(((16.0)*cj0*py*(cj4*cj4)))+(((-1.872e-5)*cj4*r02*sj0*sj4))))))+((htj1*(((((-8.0)*px*sj0*(cj3*cj3)*(sj4*sj4)))+(((-4.53976)*cj0*cj4*r12))+(((9.36e-6)*cj0*cj4*r12*sj4))+(((4.53976)*cj4*r02*sj0))+(((-9.36e-6)*cj4*r02*sj0*sj4))+(((9.36e-6)*cj3*r22*(sj4*sj4)))+(((-8.0)*px*sj0*(cj4*cj4)))+(((9.36e-6)*cj3*r22*(cj4*cj4)))+(((8.0)*cj0*py*(cj4*cj4)))+(((-4.53976)*cj3*r22*sj4))+(((8.0)*cj0*py*(cj3*cj3)*(sj4*sj4)))+(((8.64e-6)*cj3*r02*sj0*sj4))+(((9.36e-6)*cj4*r02*sj0*sj4*(cj3*cj3)))+(((8.64e-6)*cj4*r22))+(((-9.36e-6)*cj0*cj4*r12*sj4*(cj3*cj3)))+(((-8.64e-6)*cj0*cj3*r12*sj4))))))+(((4.0)*pz*(cj3*cj3)*(sj4*sj4)))+(((-4.68e-6)*cj4*r22*sj4*(cj3*cj3)))+(((4.68e-6)*cj4*r22*sj4))+(((htj1*htj1*htj1*htj1)*(((((-4.68e-6)*cj3*r02*sj0*(sj4*sj4)))+(((-4.68e-6)*cj4*r22*sj4))+(((-4.0)*pz*(cj4*cj4)))+(((-4.68e-6)*cj3*r02*sj0*(cj4*cj4)))+(((-4.0)*pz*(cj3*cj3)*(sj4*sj4)))+(((4.32e-6)*cj0*cj4*r12))+(((-2.26988)*cj0*cj3*r12*sj4))+(((-8.76)*(cj3*cj3)*(sj4*sj4)))+(((2.26988)*cj4*r22))+(((-8.76)*(cj4*cj4)))+(((-4.32e-6)*cj4*r02*sj0))+(((4.68e-6)*cj0*cj3*r12*(sj4*sj4)))+(((4.32e-6)*cj3*r22*sj4))+(((4.68e-6)*cj4*r22*sj4*(cj3*cj3)))+(((4.68e-6)*cj0*cj3*r12*(cj4*cj4)))+(((2.26988)*cj3*r02*sj0*sj4))))))+(((2.26988)*cj0*cj3*r12*sj4)));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[2];
IkReal x5670=((-1.0)*r20);
IkReal x5671=x5617;
CheckValue<IkReal> x5673 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5670),IKFAST_ATAN2_MAGTHRESH);
if(!x5673.valid){
continue;
}
IkReal x5672=((-1.0)*(x5673.value));
sj5=gconst7;
cj5=gconst8;
j5=x5672;
IkReal gconst6=x5672;
IkReal gconst7=(r21*x5671);
IkReal gconst8=(x5670*x5671);
IkReal x5674=cj3*cj3;
IkReal x5675=cj4*cj4;
IkReal x5676=(x5674+x5675+(((-1.0)*x5674*x5675)));
j2eval[0]=x5676;
j2eval[1]=IKsign(x5676);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x5677=((-1.0)*r20);
IkReal x5678=x5617;
CheckValue<IkReal> x5680 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5677),IKFAST_ATAN2_MAGTHRESH);
if(!x5680.valid){
continue;
}
IkReal x5679=((-1.0)*(x5680.value));
sj5=gconst7;
cj5=gconst8;
j5=x5679;
IkReal gconst6=x5679;
IkReal gconst7=(r21*x5678);
IkReal gconst8=(x5677*x5678);
IkReal x5681=(cj3*sj4);
j2eval[0]=(cj4+(((-525435.185185185)*x5681))+(((1.08333333333333)*cj3)));
j2eval[1]=IKsign(((((1.17e-6)*cj3))+(((-0.56747)*x5681))+(((1.08e-6)*cj4))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x5682=((-1.0)*r20);
IkReal x5683=x5617;
CheckValue<IkReal> x5685 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5682),IKFAST_ATAN2_MAGTHRESH);
if(!x5685.valid){
continue;
}
IkReal x5684=((-1.0)*(x5685.value));
sj5=gconst7;
cj5=gconst8;
j5=x5684;
IkReal gconst6=x5684;
IkReal gconst7=(r21*x5683);
IkReal gconst8=(x5682*x5683);
IkReal x5686=cj3*cj3;
IkReal x5687=(cj4*sj4);
IkReal x5688=(cj3*sj4);
j2eval[0]=((((1.08333333333333)*x5687))+(((-525435.185185185)*cj4))+(((-1.0)*x5688))+(((-1.08333333333333)*x5686*x5687)));
j2eval[1]=IKsign(((((1.17e-6)*x5687))+(((-1.17e-6)*x5686*x5687))+(((-0.56747)*cj4))+(((-1.08e-6)*x5688))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5689=((3.35381986224151e-6)*cj1);
IkReal x5690=(px*sj0);
IkReal x5691=((1.76221132708977)*sj1);
IkReal x5692=((1.76221132708977)*cj1);
IkReal x5693=((3.35381986224151e-6)*sj1);
IkReal x5694=(cj0*py);
IkReal x5695=(sj1*x5694);
if( IKabs(((2.4482884994363e-6)+((x5690*x5693))+((x5690*x5692))+(((-1.0)*x5692*x5694))+(((-1.0)*pz*x5689))+((pz*x5691))+(((-1.0)*x5693*x5694)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.28641426877553)+(((-1.0)*x5690*x5691))+((x5691*x5694))+(((-1.0)*x5689*x5694))+((x5689*x5690))+((pz*x5693))+((pz*x5692)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.4482884994363e-6)+((x5690*x5693))+((x5690*x5692))+(((-1.0)*x5692*x5694))+(((-1.0)*pz*x5689))+((pz*x5691))+(((-1.0)*x5693*x5694))))+IKsqr(((-1.28641426877553)+(((-1.0)*x5690*x5691))+((x5691*x5694))+(((-1.0)*x5689*x5694))+((x5689*x5690))+((pz*x5693))+((pz*x5692))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((2.4482884994363e-6)+((x5690*x5693))+((x5690*x5692))+(((-1.0)*x5692*x5694))+(((-1.0)*pz*x5689))+((pz*x5691))+(((-1.0)*x5693*x5694))), ((-1.28641426877553)+(((-1.0)*x5690*x5691))+((x5691*x5694))+(((-1.0)*x5689*x5694))+((x5689*x5690))+((pz*x5693))+((pz*x5692))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5696=IKcos(j2);
IkReal x5697=IKsin(j2);
IkReal x5698=(cj1*gconst7);
IkReal x5699=(r00*sj0);
IkReal x5700=(cj1*gconst8);
IkReal x5701=((1.0)*r20);
IkReal x5702=(gconst8*sj1);
IkReal x5703=(r01*sj0);
IkReal x5704=(px*sj0);
IkReal x5705=(gconst7*sj1);
IkReal x5706=(cj0*r11);
IkReal x5707=((1.0)*cj1);
IkReal x5708=((1.0)*r21);
IkReal x5709=(cj0*py);
IkReal x5710=((1.0)*x5697);
IkReal x5711=((1.0)*cj0*r10);
evalcond[0]=(((cj1*x5704))+(((-1.08e-6)*x5696))+(((-1.0)*x5707*x5709))+((pz*sj1))+(((-0.56746883)*x5697)));
evalcond[1]=((0.73)+((sj1*x5704))+(((0.56746883)*x5696))+(((-1.0)*pz*x5707))+(((-1.08e-6)*x5697))+(((-1.0)*sj1*x5709)));
evalcond[2]=(((r20*x5705))+((x5698*x5699))+((x5700*x5703))+(((-1.0)*x5698*x5711))+(((-1.0)*x5700*x5706))+((r21*x5702))+(((-1.0)*x5710)));
evalcond[3]=(x5696+(((-1.0)*x5700*x5708))+(((-1.0)*x5698*x5701))+(((-1.0)*x5705*x5711))+(((-1.0)*x5702*x5706))+((x5699*x5705))+((x5702*x5703)));
evalcond[4]=(((r20*x5702))+(((-1.0)*x5698*x5703))+(((-1.0)*x5700*x5711))+(((-1.0)*x5696))+(((-1.0)*x5705*x5708))+((x5699*x5700))+((x5698*x5706)));
evalcond[5]=((((-1.0)*x5703*x5705))+((x5705*x5706))+(((-1.0)*x5700*x5701))+(((-1.0)*x5702*x5711))+((r21*x5698))+((x5699*x5702))+(((-1.0)*x5710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5712=(cj1*pz);
IkReal x5713=(cj0*py);
IkReal x5714=((1.76220406051003)*sj1);
IkReal x5715=((3.35379220296043e-6)*sj1);
IkReal x5716=(px*sj0);
IkReal x5717=((3.35379220296043e-6)*cj1);
IkReal x5718=((1.76220406051003)*x5716);
if( IKabs(((2.44826830816111e-6)+((pz*x5714))+((x5715*x5716))+(((-1.0)*x5713*x5715))+((cj1*x5718))+(((-3.35379220296043e-6)*x5712))+(((-1.76220406051003)*cj1*x5713)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.28640896417232)+((x5716*x5717))+((pz*x5715))+(((-1.0)*x5714*x5716))+(((-1.0)*x5713*x5717))+(((1.76220406051003)*x5712))+((x5713*x5714)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.44826830816111e-6)+((pz*x5714))+((x5715*x5716))+(((-1.0)*x5713*x5715))+((cj1*x5718))+(((-3.35379220296043e-6)*x5712))+(((-1.76220406051003)*cj1*x5713))))+IKsqr(((-1.28640896417232)+((x5716*x5717))+((pz*x5715))+(((-1.0)*x5714*x5716))+(((-1.0)*x5713*x5717))+(((1.76220406051003)*x5712))+((x5713*x5714))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((2.44826830816111e-6)+((pz*x5714))+((x5715*x5716))+(((-1.0)*x5713*x5715))+((cj1*x5718))+(((-3.35379220296043e-6)*x5712))+(((-1.76220406051003)*cj1*x5713))), ((-1.28640896417232)+((x5716*x5717))+((pz*x5715))+(((-1.0)*x5714*x5716))+(((-1.0)*x5713*x5717))+(((1.76220406051003)*x5712))+((x5713*x5714))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5719=IKcos(j2);
IkReal x5720=IKsin(j2);
IkReal x5721=(cj1*gconst7);
IkReal x5722=(r00*sj0);
IkReal x5723=(cj1*gconst8);
IkReal x5724=((1.0)*r20);
IkReal x5725=(gconst8*sj1);
IkReal x5726=(r01*sj0);
IkReal x5727=(px*sj0);
IkReal x5728=(gconst7*sj1);
IkReal x5729=(cj0*r11);
IkReal x5730=((1.0)*cj1);
IkReal x5731=((1.0)*r21);
IkReal x5732=(cj0*py);
IkReal x5733=((1.0)*x5719);
IkReal x5734=((1.0)*cj0*r10);
evalcond[0]=(((cj1*x5727))+(((-1.08e-6)*x5719))+(((-0.56747117)*x5720))+(((-1.0)*x5730*x5732))+((pz*sj1)));
evalcond[1]=((0.73)+(((0.56747117)*x5719))+(((-1.0)*pz*x5730))+(((-1.0)*sj1*x5732))+(((-1.08e-6)*x5720))+((sj1*x5727)));
evalcond[2]=(((x5721*x5722))+((x5723*x5726))+(((-1.0)*x5723*x5729))+((r21*x5725))+((r20*x5728))+(((-1.0)*x5721*x5734))+x5720);
evalcond[3]=(((x5721*x5729))+(((-1.0)*x5733))+(((-1.0)*x5728*x5731))+((r20*x5725))+(((-1.0)*x5721*x5726))+((x5722*x5723))+(((-1.0)*x5723*x5734)));
evalcond[4]=((((-1.0)*x5723*x5724))+(((-1.0)*x5725*x5734))+((r21*x5721))+((x5728*x5729))+(((-1.0)*x5726*x5728))+((x5722*x5725))+(((-1.0)*x5720)));
evalcond[5]=((((-1.0)*x5725*x5729))+(((-1.0)*x5733))+((x5725*x5726))+(((-1.0)*x5728*x5734))+((x5722*x5728))+(((-1.0)*x5721*x5724))+(((-1.0)*x5723*x5731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5735=((3.35381986224151e-6)*cj1);
IkReal x5736=(px*sj0);
IkReal x5737=((1.76221132708977)*sj1);
IkReal x5738=((1.76221132708977)*cj1);
IkReal x5739=((3.35381986224151e-6)*sj1);
IkReal x5740=(cj0*py);
IkReal x5741=(sj1*x5740);
if( IKabs(((2.4482884994363e-6)+(((-1.0)*pz*x5735))+((x5736*x5738))+((x5736*x5739))+(((-1.0)*x5738*x5740))+(((-1.0)*x5739*x5740))+((pz*x5737)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.28641426877553)+(((-1.0)*x5735*x5740))+((x5735*x5736))+((x5737*x5740))+(((-1.0)*x5736*x5737))+((pz*x5738))+((pz*x5739)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.4482884994363e-6)+(((-1.0)*pz*x5735))+((x5736*x5738))+((x5736*x5739))+(((-1.0)*x5738*x5740))+(((-1.0)*x5739*x5740))+((pz*x5737))))+IKsqr(((-1.28641426877553)+(((-1.0)*x5735*x5740))+((x5735*x5736))+((x5737*x5740))+(((-1.0)*x5736*x5737))+((pz*x5738))+((pz*x5739))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((2.4482884994363e-6)+(((-1.0)*pz*x5735))+((x5736*x5738))+((x5736*x5739))+(((-1.0)*x5738*x5740))+(((-1.0)*x5739*x5740))+((pz*x5737))), ((-1.28641426877553)+(((-1.0)*x5735*x5740))+((x5735*x5736))+((x5737*x5740))+(((-1.0)*x5736*x5737))+((pz*x5738))+((pz*x5739))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5742=IKcos(j2);
IkReal x5743=IKsin(j2);
IkReal x5744=(cj1*gconst7);
IkReal x5745=(r00*sj0);
IkReal x5746=(cj1*gconst8);
IkReal x5747=((1.0)*r20);
IkReal x5748=(gconst8*sj1);
IkReal x5749=(r01*sj0);
IkReal x5750=(px*sj0);
IkReal x5751=(gconst7*sj1);
IkReal x5752=(cj0*r11);
IkReal x5753=((1.0)*cj1);
IkReal x5754=((1.0)*r21);
IkReal x5755=(cj0*py);
IkReal x5756=((1.0)*cj0*r10);
evalcond[0]=(((cj1*x5750))+(((-0.56746883)*x5743))+(((-1.08e-6)*x5742))+(((-1.0)*x5753*x5755))+((pz*sj1)));
evalcond[1]=((0.73)+(((-1.08e-6)*x5743))+(((-1.0)*sj1*x5755))+(((0.56746883)*x5742))+(((-1.0)*pz*x5753))+((sj1*x5750)));
evalcond[2]=((((-1.0)*x5751*x5754))+(((-1.0)*x5746*x5756))+((x5744*x5752))+((x5745*x5746))+(((-1.0)*x5744*x5749))+((r20*x5748))+x5742);
evalcond[3]=((((-1.0)*x5746*x5747))+(((-1.0)*x5749*x5751))+((x5751*x5752))+(((-1.0)*x5748*x5756))+((x5745*x5748))+((r21*x5744))+x5743);
evalcond[4]=(((x5746*x5749))+(((-1.0)*x5744*x5756))+(((-1.0)*x5746*x5752))+((x5744*x5745))+((r20*x5751))+(((-1.0)*x5743))+((r21*x5748)));
evalcond[5]=(((x5748*x5749))+(((-1.0)*x5751*x5756))+(((-1.0)*x5748*x5752))+(((-1.0)*x5746*x5754))+(((-1.0)*x5744*x5747))+((x5745*x5751))+x5742);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5757=(cj1*pz);
IkReal x5758=(cj0*py);
IkReal x5759=((1.76220406051003)*sj1);
IkReal x5760=((3.35379220296043e-6)*sj1);
IkReal x5761=(px*sj0);
IkReal x5762=((3.35379220296043e-6)*cj1);
IkReal x5763=((1.76220406051003)*x5761);
if( IKabs(((2.44826830816111e-6)+(((-1.76220406051003)*cj1*x5758))+((cj1*x5763))+(((-1.0)*x5758*x5760))+((x5760*x5761))+((pz*x5759))+(((-3.35379220296043e-6)*x5757)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.28640896417232)+(((1.76220406051003)*x5757))+((x5758*x5759))+(((-1.0)*x5758*x5762))+((pz*x5760))+(((-1.0)*x5759*x5761))+((x5761*x5762)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.44826830816111e-6)+(((-1.76220406051003)*cj1*x5758))+((cj1*x5763))+(((-1.0)*x5758*x5760))+((x5760*x5761))+((pz*x5759))+(((-3.35379220296043e-6)*x5757))))+IKsqr(((-1.28640896417232)+(((1.76220406051003)*x5757))+((x5758*x5759))+(((-1.0)*x5758*x5762))+((pz*x5760))+(((-1.0)*x5759*x5761))+((x5761*x5762))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((2.44826830816111e-6)+(((-1.76220406051003)*cj1*x5758))+((cj1*x5763))+(((-1.0)*x5758*x5760))+((x5760*x5761))+((pz*x5759))+(((-3.35379220296043e-6)*x5757))), ((-1.28640896417232)+(((1.76220406051003)*x5757))+((x5758*x5759))+(((-1.0)*x5758*x5762))+((pz*x5760))+(((-1.0)*x5759*x5761))+((x5761*x5762))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5764=IKcos(j2);
IkReal x5765=IKsin(j2);
IkReal x5766=(cj1*gconst7);
IkReal x5767=(r00*sj0);
IkReal x5768=(cj1*gconst8);
IkReal x5769=((1.0)*r20);
IkReal x5770=(gconst8*sj1);
IkReal x5771=(r01*sj0);
IkReal x5772=(px*sj0);
IkReal x5773=(gconst7*sj1);
IkReal x5774=(cj0*r11);
IkReal x5775=((1.0)*cj1);
IkReal x5776=((1.0)*r21);
IkReal x5777=(cj0*py);
IkReal x5778=((1.0)*cj0*r10);
evalcond[0]=(((cj1*x5772))+(((-1.08e-6)*x5764))+(((-1.0)*x5775*x5777))+((pz*sj1))+(((-0.56747117)*x5765)));
evalcond[1]=((0.73)+((sj1*x5772))+(((-1.0)*pz*x5775))+(((-1.0)*sj1*x5777))+(((-1.08e-6)*x5765))+(((0.56747117)*x5764)));
evalcond[2]=((((-1.0)*x5766*x5778))+((x5766*x5767))+(((-1.0)*x5768*x5774))+((r21*x5770))+((r20*x5773))+((x5768*x5771))+x5765);
evalcond[3]=(((x5767*x5768))+((x5766*x5774))+((r20*x5770))+(((-1.0)*x5768*x5778))+(((-1.0)*x5766*x5771))+(((-1.0)*x5773*x5776))+x5764);
evalcond[4]=(((x5767*x5770))+(((-1.0)*x5771*x5773))+(((-1.0)*x5770*x5778))+((r21*x5766))+(((-1.0)*x5768*x5769))+x5765+((x5773*x5774)));
evalcond[5]=(((x5767*x5773))+(((-1.0)*x5770*x5774))+(((-1.0)*x5766*x5769))+((x5770*x5771))+(((-1.0)*x5764))+(((-1.0)*x5768*x5776))+(((-1.0)*x5773*x5778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5779=(cj1*r22);
IkReal x5780=((1.17e-6)*sj4);
IkReal x5781=(cj3*sj0);
IkReal x5782=((1.0)*sj4);
IkReal x5783=(cj1*px);
IkReal x5784=(r02*sj1);
IkReal x5785=((1.17e-6)*cj4);
IkReal x5786=(cj3*sj1);
IkReal x5787=(cj0*r12);
IkReal x5788=(cj3*sj4);
IkReal x5789=((1.0)*cj4);
IkReal x5790=(cj0*cj1*py);
CheckValue<IkReal> x5791=IKPowWithIntegerCheck(IKsign(((((-1.08e-6)*x5788))+(((-0.56747)*cj4))+((cj4*x5780))+(((-1.0)*cj4*x5780*(cj3*cj3))))),-1);
if(!x5791.valid){
continue;
}
CheckValue<IkReal> x5792 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*x5783*x5789))+((cj3*x5779*x5785))+(((-1.0)*x5781*x5784*x5785))+(((-1.08e-6)*sj0*x5784))+((cj4*x5790))+(((1.08e-6)*sj1*x5787))+(((1.08e-6)*x5779))+((x5785*x5786*x5787))+(((-1.0)*pz*sj1*x5789)))),IkReal((((x5788*x5790))+(((0.56747)*sj0*x5784))+((sj1*x5780*x5787))+(((-1.0)*pz*x5782*x5786))+(((-0.56747)*sj1*x5787))+((x5779*x5780))+(((-0.56747)*x5779))+(((-1.0)*sj0*x5780*x5784))+(((-1.0)*x5781*x5782*x5783)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5792.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5791.value)))+(x5792.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5793=IKcos(j2);
IkReal x5794=IKsin(j2);
IkReal x5795=(cj1*gconst7);
IkReal x5796=(r00*sj0);
IkReal x5797=(cj1*gconst8);
IkReal x5798=((1.0)*r20);
IkReal x5799=(gconst8*sj1);
IkReal x5800=(r01*sj0);
IkReal x5801=(px*sj0);
IkReal x5802=(cj3*cj4);
IkReal x5803=(cj3*sj4);
IkReal x5804=((1.0)*cj1);
IkReal x5805=(gconst7*sj1);
IkReal x5806=(cj0*r11);
IkReal x5807=((1.0)*r21);
IkReal x5808=(cj0*py);
IkReal x5809=(r02*sj0);
IkReal x5810=((1.0)*sj1);
IkReal x5811=(cj0*r12);
IkReal x5812=((1.0)*cj0*r10);
IkReal x5813=((1.0)*x5794);
IkReal x5814=((1.17e-6)*x5794);
IkReal x5815=((1.0)*x5793);
IkReal x5816=(sj4*x5793);
evalcond[0]=((((-1.0)*cj4*x5813))+(((-1.0)*x5804*x5811))+((r22*sj1))+(((-1.0)*x5803*x5815))+((cj1*x5809)));
evalcond[1]=((((-1.0)*r22*x5804))+(((-1.0)*x5810*x5811))+(((-1.0)*x5803*x5813))+((cj4*x5793))+((sj1*x5809)));
evalcond[2]=((((-0.56747)*x5794))+(((-1.0)*x5804*x5808))+(((-1.08e-6)*x5793))+(((-1.17e-6)*x5793*x5802))+((sj4*x5814))+((pz*sj1))+((cj1*x5801)));
evalcond[3]=((0.73)+(((-1.08e-6)*x5794))+(((-1.0)*x5808*x5810))+(((-1.17e-6)*x5816))+(((-1.0)*x5802*x5814))+(((-1.0)*pz*x5804))+((sj1*x5801))+(((0.56747)*x5793)));
evalcond[4]=(((x5795*x5806))+(((-1.0)*x5795*x5800))+((r20*x5799))+(((-1.0)*x5805*x5807))+((x5796*x5797))+(((-1.0)*x5797*x5812))+(((-1.0)*sj3*x5815)));
evalcond[5]=((((-1.0)*x5800*x5805))+((x5805*x5806))+((r21*x5795))+((x5796*x5799))+(((-1.0)*x5797*x5798))+(((-1.0)*x5799*x5812))+(((-1.0)*sj3*x5813)));
evalcond[6]=((((-1.0)*x5795*x5812))+(((-1.0)*x5797*x5806))+((r21*x5799))+((x5795*x5796))+(((-1.0)*sj4*x5813))+((x5797*x5800))+((x5793*x5802))+((r20*x5805)));
evalcond[7]=(((x5794*x5802))+(((-1.0)*x5797*x5807))+((x5796*x5805))+((x5799*x5800))+(((-1.0)*x5805*x5812))+(((-1.0)*x5795*x5798))+(((-1.0)*x5799*x5806))+x5816);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5817=(r22*sj1);
IkReal x5818=((1.17e-6)*sj4);
IkReal x5819=(pz*sj1);
IkReal x5820=(cj0*cj1);
IkReal x5821=((1.17e-6)*cj3);
IkReal x5822=(cj3*sj4);
IkReal x5823=(cj1*px*sj0);
IkReal x5824=((1.0)*x5822);
IkReal x5825=(cj1*r02*sj0);
CheckValue<IkReal> x5826 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*r12*x5820*x5821))+(((-1.08e-6)*r12*x5820))+(((-1.0)*x5823*x5824))+(((1.08e-6)*x5817))+((cj4*x5817*x5821))+((cj4*x5821*x5825))+(((1.08e-6)*x5825))+((py*x5820*x5822))+(((-1.0)*x5819*x5824)))),IkReal(((((-1.0)*r12*x5818*x5820))+(((-1.0)*cj4*py*x5820))+(((-0.56747)*x5817))+((cj4*x5819))+(((0.56747)*r12*x5820))+((x5818*x5825))+(((-0.56747)*x5825))+((cj4*x5823))+((x5817*x5818)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5826.valid){
continue;
}
CheckValue<IkReal> x5827=IKPowWithIntegerCheck(IKsign(((((1.08e-6)*cj4))+(((-0.56747)*x5822))+x5821)),-1);
if(!x5827.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x5826.value)+(((1.5707963267949)*(x5827.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5828=IKcos(j2);
IkReal x5829=IKsin(j2);
IkReal x5830=(cj1*gconst7);
IkReal x5831=(r00*sj0);
IkReal x5832=(cj1*gconst8);
IkReal x5833=((1.0)*r20);
IkReal x5834=(gconst8*sj1);
IkReal x5835=(r01*sj0);
IkReal x5836=(px*sj0);
IkReal x5837=(cj3*cj4);
IkReal x5838=(cj3*sj4);
IkReal x5839=((1.0)*cj1);
IkReal x5840=(gconst7*sj1);
IkReal x5841=(cj0*r11);
IkReal x5842=((1.0)*r21);
IkReal x5843=(cj0*py);
IkReal x5844=(r02*sj0);
IkReal x5845=((1.0)*sj1);
IkReal x5846=(cj0*r12);
IkReal x5847=((1.0)*cj0*r10);
IkReal x5848=((1.0)*x5829);
IkReal x5849=((1.17e-6)*x5829);
IkReal x5850=((1.0)*x5828);
IkReal x5851=(sj4*x5828);
evalcond[0]=(((cj1*x5844))+((r22*sj1))+(((-1.0)*x5839*x5846))+(((-1.0)*cj4*x5848))+(((-1.0)*x5838*x5850)));
evalcond[1]=((((-1.0)*r22*x5839))+(((-1.0)*x5845*x5846))+((sj1*x5844))+(((-1.0)*x5838*x5848))+((cj4*x5828)));
evalcond[2]=(((sj4*x5849))+(((-1.17e-6)*x5828*x5837))+(((-1.0)*x5839*x5843))+(((-1.08e-6)*x5828))+((pz*sj1))+(((-0.56747)*x5829))+((cj1*x5836)));
evalcond[3]=((0.73)+(((-1.0)*x5837*x5849))+((sj1*x5836))+(((0.56747)*x5828))+(((-1.0)*pz*x5839))+(((-1.0)*x5843*x5845))+(((-1.17e-6)*x5851))+(((-1.08e-6)*x5829)));
evalcond[4]=((((-1.0)*sj3*x5850))+((r20*x5834))+(((-1.0)*x5840*x5842))+((x5830*x5841))+(((-1.0)*x5830*x5835))+((x5831*x5832))+(((-1.0)*x5832*x5847)));
evalcond[5]=(((r21*x5830))+(((-1.0)*x5834*x5847))+(((-1.0)*x5832*x5833))+((x5840*x5841))+(((-1.0)*x5835*x5840))+((x5831*x5834))+(((-1.0)*sj3*x5848)));
evalcond[6]=(((r21*x5834))+((r20*x5840))+((x5832*x5835))+(((-1.0)*x5830*x5847))+((x5830*x5831))+(((-1.0)*x5832*x5841))+(((-1.0)*sj4*x5848))+((x5828*x5837)));
evalcond[7]=(((x5834*x5835))+(((-1.0)*x5830*x5833))+(((-1.0)*x5834*x5841))+((x5829*x5837))+((x5831*x5840))+(((-1.0)*x5840*x5847))+(((-1.0)*x5832*x5842))+x5851);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5852=cj3*cj3;
IkReal x5853=cj4*cj4;
IkReal x5854=(cj0*r12);
IkReal x5855=(cj1*cj4);
IkReal x5856=(r22*sj1);
IkReal x5857=(cj3*sj4);
IkReal x5858=(r02*sj0);
IkReal x5859=((1.0)*sj1);
IkReal x5860=((1.0)*cj1*x5857);
CheckValue<IkReal> x5861=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5852*x5853))+x5852+x5853)),-1);
if(!x5861.valid){
continue;
}
CheckValue<IkReal> x5862 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x5860))+((cj4*x5856))+((x5855*x5858))+((sj1*x5857*x5858))+(((-1.0)*x5854*x5855))+(((-1.0)*x5854*x5857*x5859)))),IkReal((((x5856*x5857))+(((-1.0)*cj4*x5858*x5859))+(((-1.0)*x5854*x5860))+((cj1*x5857*x5858))+((r22*x5855))+((cj4*sj1*x5854)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5862.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5861.value)))+(x5862.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5863=IKcos(j2);
IkReal x5864=IKsin(j2);
IkReal x5865=(cj1*gconst7);
IkReal x5866=(r00*sj0);
IkReal x5867=(cj1*gconst8);
IkReal x5868=((1.0)*r20);
IkReal x5869=(gconst8*sj1);
IkReal x5870=(r01*sj0);
IkReal x5871=(px*sj0);
IkReal x5872=(cj3*cj4);
IkReal x5873=(cj3*sj4);
IkReal x5874=((1.0)*cj1);
IkReal x5875=(gconst7*sj1);
IkReal x5876=(cj0*r11);
IkReal x5877=((1.0)*r21);
IkReal x5878=(cj0*py);
IkReal x5879=(r02*sj0);
IkReal x5880=((1.0)*sj1);
IkReal x5881=(cj0*r12);
IkReal x5882=((1.0)*cj0*r10);
IkReal x5883=((1.0)*x5864);
IkReal x5884=((1.17e-6)*x5864);
IkReal x5885=((1.0)*x5863);
IkReal x5886=(sj4*x5863);
evalcond[0]=(((cj1*x5879))+(((-1.0)*cj4*x5883))+((r22*sj1))+(((-1.0)*x5873*x5885))+(((-1.0)*x5874*x5881)));
evalcond[1]=((((-1.0)*r22*x5874))+((sj1*x5879))+((cj4*x5863))+(((-1.0)*x5880*x5881))+(((-1.0)*x5873*x5883)));
evalcond[2]=(((cj1*x5871))+(((-1.17e-6)*x5863*x5872))+(((-0.56747)*x5864))+(((-1.0)*x5874*x5878))+(((-1.08e-6)*x5863))+((pz*sj1))+((sj4*x5884)));
evalcond[3]=((0.73)+(((0.56747)*x5863))+((sj1*x5871))+(((-1.0)*x5872*x5884))+(((-1.08e-6)*x5864))+(((-1.17e-6)*x5886))+(((-1.0)*pz*x5874))+(((-1.0)*x5878*x5880)));
evalcond[4]=((((-1.0)*x5875*x5877))+(((-1.0)*sj3*x5885))+(((-1.0)*x5865*x5870))+((x5866*x5867))+(((-1.0)*x5867*x5882))+((r20*x5869))+((x5865*x5876)));
evalcond[5]=((((-1.0)*sj3*x5883))+((r21*x5865))+(((-1.0)*x5870*x5875))+((x5866*x5869))+(((-1.0)*x5869*x5882))+((x5875*x5876))+(((-1.0)*x5867*x5868)));
evalcond[6]=((((-1.0)*x5867*x5876))+((x5867*x5870))+((r21*x5869))+(((-1.0)*x5865*x5882))+((x5865*x5866))+((r20*x5875))+((x5863*x5872))+(((-1.0)*sj4*x5883)));
evalcond[7]=(((x5864*x5872))+((x5866*x5875))+(((-1.0)*x5875*x5882))+((x5869*x5870))+(((-1.0)*x5869*x5876))+(((-1.0)*x5865*x5868))+x5886+(((-1.0)*x5867*x5877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5887=((100000000.0)*sj3*sj4);
IkReal x5888=((117.0)*cj4*sj3);
CheckValue<IkReal> x5889=IKPowWithIntegerCheck(IKsign(rxp2_2),-1);
if(!x5889.valid){
continue;
}
CheckValue<IkReal> x5890 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x5888))+((px*x5887)))),IkReal((((r12*x5888))+(((-1.0)*py*x5887)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5890.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5889.value)))+(x5890.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5891=IKcos(j0);
IkReal x5892=IKsin(j0);
IkReal x5893=((1.0)*gconst7);
IkReal x5894=(cj4*sj3);
IkReal x5895=((1.0)*gconst8);
IkReal x5896=(r10*x5892);
IkReal x5897=((1.0)*x5891);
IkReal x5898=(r11*x5892);
IkReal x5899=((1.0)*x5892);
evalcond[0]=((((-1.0)*r12*x5899))+(((-1.0)*r02*x5897))+(((-1.0)*sj3*sj4)));
evalcond[1]=((((-1.0)*px*x5897))+(((-1.17e-6)*x5894))+(((-1.0)*py*x5899)));
evalcond[2]=((((-1.0)*r00*x5891*x5895))+cj3+((gconst7*r01*x5891))+(((-1.0)*x5895*x5896))+((gconst7*x5898)));
evalcond[3]=((((-1.0)*x5893*x5896))+(((-1.0)*r01*x5891*x5895))+(((-1.0)*r00*x5891*x5893))+(((-1.0)*x5895*x5898))+x5894);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x5900=cj3*cj3;
IkReal x5901=cj4*cj4;
IkReal x5902=sj4*sj4;
IkReal x5903=(cj3*r22);
IkReal x5904=(cj4*r22);
IkReal x5905=((4.53976)*sj4);
IkReal x5906=(r02*sj0);
IkReal x5907=((16.0)*pz);
IkReal x5908=((8.0)*pz);
IkReal x5909=((1.872e-5)*sj4);
IkReal x5910=((4.32e-6)*sj4);
IkReal x5911=((9.07952)*sj4);
IkReal x5912=(px*sj0);
IkReal x5913=(cj0*py);
IkReal x5914=((4.68e-6)*sj4);
IkReal x5915=((9.36e-6)*sj4);
IkReal x5916=(cj0*cj3*r12);
IkReal x5917=((1.872e-5)*x5901);
IkReal x5918=(cj0*cj4*r12);
IkReal x5919=(cj4*x5914);
IkReal x5920=((4.0)*x5901);
IkReal x5921=((9.36e-6)*x5901);
IkReal x5922=(x5900*x5902);
IkReal x5923=(cj3*x5902*x5906);
IkReal x5924=(((x5910*x5916))+((x5900*x5914*x5918))+(((2.26988)*sj4*x5903))+(((2.26988)*x5918))+((x5912*x5920))+((x5906*x5919))+(((4.0)*x5912*x5922)));
IkReal x5925=(((cj3*x5906*x5910))+(((2.26988)*cj4*x5906))+(((4.68e-6)*x5902*x5903))+((x5913*x5920))+(((4.0)*x5913*x5922))+(((4.68e-6)*x5901*x5903))+((x5900*x5906*x5919))+((x5914*x5918))+(((4.32e-6)*x5904)));
IkReal x5926=(((x5900*x5904*x5915))+(((-1.0)*cj3*x5906*x5921))+(((-1.0)*x5904*x5915))+(((-1.0)*x5908*x5922))+(((4.53976)*x5904))+(((8.64e-6)*x5918))+((cj3*x5905*x5906))+(((-1.0)*x5905*x5916))+(((-8.64e-6)*cj4*x5906))+(((8.64e-6)*sj4*x5903))+((x5916*x5921))+(((-9.36e-6)*x5923))+(((-1.0)*x5901*x5908))+(((9.36e-6)*x5902*x5916)));
IkReal x5927=((((-1.0)*x5925))+x5924);
IkReal x5928=((((-1.0)*x5924))+x5925);
op[0]=x5927;
op[1]=x5926;
op[2]=x5927;
op[3]=(((x5900*x5904*x5909))+((cj3*x5906*x5911))+((x5916*x5917))+(((-1.0)*x5904*x5909))+(((1.728e-5)*sj4*x5903))+(((9.07952)*x5904))+(((-1.0)*cj3*x5906*x5917))+(((-1.0)*x5907*x5922))+(((1.872e-5)*x5902*x5916))+(((-1.0)*x5901*x5907))+(((-1.872e-5)*x5923))+(((1.728e-5)*x5918))+(((-1.0)*x5911*x5916))+(((-1.728e-5)*cj4*x5906)));
op[4]=x5928;
op[5]=x5926;
op[6]=x5928;
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

j1evalpoly[0]=((((-2.92)*(cj3*cj3)*(sj4*sj4)))+(((4.0)*pz*(cj4*cj4)))+(((-2.92)*(cj4*cj4)))+(((htj1*htj1)*(((((4.0)*pz*(cj4*cj4)))+(((-4.68e-6)*cj0*cj3*r12*(cj4*cj4)))+(((-2.26988)*cj3*r02*sj0*sj4))+(((4.68e-6)*cj3*r02*sj0*(cj4*cj4)))+(((-4.32e-6)*cj3*r22*sj4))+(((4.32e-6)*cj4*r02*sj0))+(((-8.76)*(cj3*cj3)*(sj4*sj4)))+(((-8.76)*(cj4*cj4)))+(((-4.68e-6)*cj0*cj3*r12*(sj4*sj4)))+(((4.68e-6)*cj3*r02*sj0*(sj4*sj4)))+(((-4.32e-6)*cj0*cj4*r12))+(((-2.26988)*cj4*r22))+(((4.0)*pz*(cj3*cj3)*(sj4*sj4)))+(((-4.68e-6)*cj4*r22*sj4*(cj3*cj3)))+(((4.68e-6)*cj4*r22*sj4))+(((2.26988)*cj0*cj3*r12*sj4))))))+(((-4.68e-6)*cj0*cj3*r12*(cj4*cj4)))+(((-2.26988)*cj3*r02*sj0*sj4))+(((4.68e-6)*cj3*r02*sj0*(cj4*cj4)))+(((-4.32e-6)*cj3*r22*sj4))+(((4.32e-6)*cj4*r02*sj0))+(((-4.68e-6)*cj0*cj3*r12*(sj4*sj4)))+(((4.68e-6)*cj3*r02*sj0*(sj4*sj4)))+(((-4.32e-6)*cj0*cj4*r12))+(((-2.26988)*cj4*r22))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-2.92)*(cj3*cj3)*(sj4*sj4)))+(((-2.92)*(cj4*cj4)))+(((-4.68e-6)*cj3*r02*sj0*(sj4*sj4)))+(((-4.68e-6)*cj4*r22*sj4))+(((-4.0)*pz*(cj4*cj4)))+(((-4.68e-6)*cj3*r02*sj0*(cj4*cj4)))+(((-4.0)*pz*(cj3*cj3)*(sj4*sj4)))+(((4.32e-6)*cj0*cj4*r12))+(((-2.26988)*cj0*cj3*r12*sj4))+(((2.26988)*cj4*r22))+(((-4.32e-6)*cj4*r02*sj0))+(((4.68e-6)*cj0*cj3*r12*(sj4*sj4)))+(((4.32e-6)*cj3*r22*sj4))+(((4.68e-6)*cj4*r22*sj4*(cj3*cj3)))+(((4.68e-6)*cj0*cj3*r12*(cj4*cj4)))+(((2.26988)*cj3*r02*sj0*sj4))))))+(((htj1*htj1*htj1*htj1*htj1)*(((((-8.0)*px*sj0*(cj3*cj3)*(sj4*sj4)))+(((-4.53976)*cj0*cj4*r12))+(((9.36e-6)*cj0*cj4*r12*sj4))+(((4.53976)*cj4*r02*sj0))+(((-9.36e-6)*cj4*r02*sj0*sj4))+(((9.36e-6)*cj3*r22*(sj4*sj4)))+(((-8.0)*px*sj0*(cj4*cj4)))+(((9.36e-6)*cj3*r22*(cj4*cj4)))+(((8.0)*cj0*py*(cj4*cj4)))+(((-4.53976)*cj3*r22*sj4))+(((8.0)*cj0*py*(cj3*cj3)*(sj4*sj4)))+(((8.64e-6)*cj3*r02*sj0*sj4))+(((9.36e-6)*cj4*r02*sj0*sj4*(cj3*cj3)))+(((8.64e-6)*cj4*r22))+(((-9.36e-6)*cj0*cj4*r12*sj4*(cj3*cj3)))+(((-8.64e-6)*cj0*cj3*r12*sj4))))))+(((htj1*htj1*htj1)*(((((-16.0)*px*sj0*(cj4*cj4)))+(((-1.872e-5)*cj0*cj4*r12*sj4*(cj3*cj3)))+(((-9.07952)*cj0*cj4*r12))+(((1.872e-5)*cj4*r02*sj0*sj4*(cj3*cj3)))+(((1.872e-5)*cj3*r22*(sj4*sj4)))+(((-1.728e-5)*cj0*cj3*r12*sj4))+(((-9.07952)*cj3*r22*sj4))+(((-16.0)*px*sj0*(cj3*cj3)*(sj4*sj4)))+(((9.07952)*cj4*r02*sj0))+(((16.0)*cj0*py*(cj3*cj3)*(sj4*sj4)))+(((1.872e-5)*cj0*cj4*r12*sj4))+(((1.872e-5)*cj3*r22*(cj4*cj4)))+(((1.728e-5)*cj4*r22))+(((1.728e-5)*cj3*r02*sj0*sj4))+(((16.0)*cj0*py*(cj4*cj4)))+(((-1.872e-5)*cj4*r02*sj0*sj4))))))+((htj1*(((((-8.0)*px*sj0*(cj3*cj3)*(sj4*sj4)))+(((-4.53976)*cj0*cj4*r12))+(((9.36e-6)*cj0*cj4*r12*sj4))+(((4.53976)*cj4*r02*sj0))+(((-9.36e-6)*cj4*r02*sj0*sj4))+(((9.36e-6)*cj3*r22*(sj4*sj4)))+(((-8.0)*px*sj0*(cj4*cj4)))+(((9.36e-6)*cj3*r22*(cj4*cj4)))+(((8.0)*cj0*py*(cj4*cj4)))+(((-4.53976)*cj3*r22*sj4))+(((8.0)*cj0*py*(cj3*cj3)*(sj4*sj4)))+(((8.64e-6)*cj3*r02*sj0*sj4))+(((9.36e-6)*cj4*r02*sj0*sj4*(cj3*cj3)))+(((8.64e-6)*cj4*r22))+(((-9.36e-6)*cj0*cj4*r12*sj4*(cj3*cj3)))+(((-8.64e-6)*cj0*cj3*r12*sj4))))))+(((4.0)*pz*(cj3*cj3)*(sj4*sj4)))+(((-4.68e-6)*cj4*r22*sj4*(cj3*cj3)))+(((4.68e-6)*cj4*r22*sj4))+(((htj1*htj1*htj1*htj1)*(((((-4.68e-6)*cj3*r02*sj0*(sj4*sj4)))+(((-4.68e-6)*cj4*r22*sj4))+(((-4.0)*pz*(cj4*cj4)))+(((-4.68e-6)*cj3*r02*sj0*(cj4*cj4)))+(((-4.0)*pz*(cj3*cj3)*(sj4*sj4)))+(((4.32e-6)*cj0*cj4*r12))+(((-2.26988)*cj0*cj3*r12*sj4))+(((-8.76)*(cj3*cj3)*(sj4*sj4)))+(((2.26988)*cj4*r22))+(((-8.76)*(cj4*cj4)))+(((-4.32e-6)*cj4*r02*sj0))+(((4.68e-6)*cj0*cj3*r12*(sj4*sj4)))+(((4.32e-6)*cj3*r22*sj4))+(((4.68e-6)*cj4*r22*sj4*(cj3*cj3)))+(((4.68e-6)*cj0*cj3*r12*(cj4*cj4)))+(((2.26988)*cj3*r02*sj0*sj4))))))+(((2.26988)*cj0*cj3*r12*sj4)));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[2];
IkReal x5929=((-1.0)*r20);
IkReal x5930=x5617;
CheckValue<IkReal> x5932 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5929),IKFAST_ATAN2_MAGTHRESH);
if(!x5932.valid){
continue;
}
IkReal x5931=((-1.0)*(x5932.value));
sj5=gconst7;
cj5=gconst8;
j5=x5931;
IkReal gconst6=x5931;
IkReal gconst7=(r21*x5930);
IkReal gconst8=(x5929*x5930);
IkReal x5933=cj3*cj3;
IkReal x5934=cj4*cj4;
IkReal x5935=((((-1.0)*x5933*x5934))+x5934+x5933);
j2eval[0]=x5935;
j2eval[1]=IKsign(x5935);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x5936=((-1.0)*r20);
IkReal x5937=x5617;
CheckValue<IkReal> x5939 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5936),IKFAST_ATAN2_MAGTHRESH);
if(!x5939.valid){
continue;
}
IkReal x5938=((-1.0)*(x5939.value));
sj5=gconst7;
cj5=gconst8;
j5=x5938;
IkReal gconst6=x5938;
IkReal gconst7=(r21*x5937);
IkReal gconst8=(x5936*x5937);
IkReal x5940=(cj3*sj4);
j2eval[0]=(cj4+(((1.08333333333333)*cj3))+(((-525435.185185185)*x5940)));
j2eval[1]=IKsign(((((1.17e-6)*cj3))+(((1.08e-6)*cj4))+(((-0.56747)*x5940))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x5941=((-1.0)*r20);
IkReal x5942=x5617;
CheckValue<IkReal> x5944 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5941),IKFAST_ATAN2_MAGTHRESH);
if(!x5944.valid){
continue;
}
IkReal x5943=((-1.0)*(x5944.value));
sj5=gconst7;
cj5=gconst8;
j5=x5943;
IkReal gconst6=x5943;
IkReal gconst7=(r21*x5942);
IkReal gconst8=(x5941*x5942);
IkReal x5945=cj3*cj3;
IkReal x5946=(cj4*sj4);
IkReal x5947=(cj3*sj4);
j2eval[0]=((((-1.0)*x5947))+(((-525435.185185185)*cj4))+(((1.08333333333333)*x5946))+(((-1.08333333333333)*x5945*x5946)));
j2eval[1]=IKsign(((((-1.17e-6)*x5945*x5946))+(((-0.56747)*cj4))+(((-1.08e-6)*x5947))+(((1.17e-6)*x5946))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5948=((3.35381986224151e-6)*cj1);
IkReal x5949=(px*sj0);
IkReal x5950=((1.76221132708977)*sj1);
IkReal x5951=((1.76221132708977)*cj1);
IkReal x5952=((3.35381986224151e-6)*sj1);
IkReal x5953=(cj0*py);
IkReal x5954=(sj1*x5953);
if( IKabs(((2.4482884994363e-6)+(((-1.0)*pz*x5948))+((x5949*x5951))+((x5949*x5952))+(((-1.0)*x5952*x5953))+(((-1.0)*x5951*x5953))+((pz*x5950)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.28641426877553)+((x5950*x5953))+(((-1.0)*x5949*x5950))+(((-1.0)*x5948*x5953))+((x5948*x5949))+((pz*x5952))+((pz*x5951)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.4482884994363e-6)+(((-1.0)*pz*x5948))+((x5949*x5951))+((x5949*x5952))+(((-1.0)*x5952*x5953))+(((-1.0)*x5951*x5953))+((pz*x5950))))+IKsqr(((-1.28641426877553)+((x5950*x5953))+(((-1.0)*x5949*x5950))+(((-1.0)*x5948*x5953))+((x5948*x5949))+((pz*x5952))+((pz*x5951))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((2.4482884994363e-6)+(((-1.0)*pz*x5948))+((x5949*x5951))+((x5949*x5952))+(((-1.0)*x5952*x5953))+(((-1.0)*x5951*x5953))+((pz*x5950))), ((-1.28641426877553)+((x5950*x5953))+(((-1.0)*x5949*x5950))+(((-1.0)*x5948*x5953))+((x5948*x5949))+((pz*x5952))+((pz*x5951))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5955=IKcos(j2);
IkReal x5956=IKsin(j2);
IkReal x5957=(cj1*gconst7);
IkReal x5958=(r00*sj0);
IkReal x5959=(cj1*gconst8);
IkReal x5960=((1.0)*r20);
IkReal x5961=(gconst8*sj1);
IkReal x5962=(r01*sj0);
IkReal x5963=(px*sj0);
IkReal x5964=(gconst7*sj1);
IkReal x5965=(cj0*r11);
IkReal x5966=((1.0)*cj1);
IkReal x5967=((1.0)*r21);
IkReal x5968=(cj0*py);
IkReal x5969=((1.0)*x5956);
IkReal x5970=((1.0)*cj0*r10);
evalcond[0]=((((-1.08e-6)*x5955))+(((-0.56746883)*x5956))+(((-1.0)*x5966*x5968))+((cj1*x5963))+((pz*sj1)));
evalcond[1]=((0.73)+(((-1.08e-6)*x5956))+(((-1.0)*sj1*x5968))+(((-1.0)*pz*x5966))+(((0.56746883)*x5955))+((sj1*x5963)));
evalcond[2]=(((x5959*x5962))+((x5957*x5958))+(((-1.0)*x5957*x5970))+(((-1.0)*x5969))+((r21*x5961))+(((-1.0)*x5959*x5965))+((r20*x5964)));
evalcond[3]=((((-1.0)*x5957*x5960))+((x5961*x5962))+(((-1.0)*x5961*x5965))+(((-1.0)*x5964*x5970))+((x5958*x5964))+x5955+(((-1.0)*x5959*x5967)));
evalcond[4]=((((-1.0)*x5957*x5962))+((x5958*x5959))+(((-1.0)*x5955))+(((-1.0)*x5959*x5970))+((x5957*x5965))+((r20*x5961))+(((-1.0)*x5964*x5967)));
evalcond[5]=(((r21*x5957))+(((-1.0)*x5961*x5970))+((x5964*x5965))+(((-1.0)*x5969))+(((-1.0)*x5962*x5964))+((x5958*x5961))+(((-1.0)*x5959*x5960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5971=(cj1*pz);
IkReal x5972=(cj0*py);
IkReal x5973=((1.76220406051003)*sj1);
IkReal x5974=((3.35379220296043e-6)*sj1);
IkReal x5975=(px*sj0);
IkReal x5976=((3.35379220296043e-6)*cj1);
IkReal x5977=((1.76220406051003)*x5975);
if( IKabs(((2.44826830816111e-6)+(((-1.76220406051003)*cj1*x5972))+(((-3.35379220296043e-6)*x5971))+((pz*x5973))+(((-1.0)*x5972*x5974))+((cj1*x5977))+((x5974*x5975)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.28640896417232)+((pz*x5974))+(((-1.0)*x5972*x5976))+(((-1.0)*x5973*x5975))+((x5972*x5973))+((x5975*x5976))+(((1.76220406051003)*x5971)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.44826830816111e-6)+(((-1.76220406051003)*cj1*x5972))+(((-3.35379220296043e-6)*x5971))+((pz*x5973))+(((-1.0)*x5972*x5974))+((cj1*x5977))+((x5974*x5975))))+IKsqr(((-1.28640896417232)+((pz*x5974))+(((-1.0)*x5972*x5976))+(((-1.0)*x5973*x5975))+((x5972*x5973))+((x5975*x5976))+(((1.76220406051003)*x5971))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((2.44826830816111e-6)+(((-1.76220406051003)*cj1*x5972))+(((-3.35379220296043e-6)*x5971))+((pz*x5973))+(((-1.0)*x5972*x5974))+((cj1*x5977))+((x5974*x5975))), ((-1.28640896417232)+((pz*x5974))+(((-1.0)*x5972*x5976))+(((-1.0)*x5973*x5975))+((x5972*x5973))+((x5975*x5976))+(((1.76220406051003)*x5971))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5978=IKcos(j2);
IkReal x5979=IKsin(j2);
IkReal x5980=(cj1*gconst7);
IkReal x5981=(r00*sj0);
IkReal x5982=(cj1*gconst8);
IkReal x5983=((1.0)*r20);
IkReal x5984=(gconst8*sj1);
IkReal x5985=(r01*sj0);
IkReal x5986=(px*sj0);
IkReal x5987=(gconst7*sj1);
IkReal x5988=(cj0*r11);
IkReal x5989=((1.0)*cj1);
IkReal x5990=((1.0)*r21);
IkReal x5991=(cj0*py);
IkReal x5992=((1.0)*x5978);
IkReal x5993=((1.0)*cj0*r10);
evalcond[0]=(((cj1*x5986))+(((-0.56747117)*x5979))+(((-1.08e-6)*x5978))+((pz*sj1))+(((-1.0)*x5989*x5991)));
evalcond[1]=((0.73)+((sj1*x5986))+(((0.56747117)*x5978))+(((-1.0)*sj1*x5991))+(((-1.0)*pz*x5989))+(((-1.08e-6)*x5979)));
evalcond[2]=((((-1.0)*x5980*x5993))+((r21*x5984))+((x5982*x5985))+((r20*x5987))+(((-1.0)*x5982*x5988))+((x5980*x5981))+x5979);
evalcond[3]=((((-1.0)*x5987*x5990))+(((-1.0)*x5980*x5985))+((r20*x5984))+((x5980*x5988))+((x5981*x5982))+(((-1.0)*x5982*x5993))+(((-1.0)*x5992)));
evalcond[4]=(((r21*x5980))+(((-1.0)*x5979))+(((-1.0)*x5984*x5993))+((x5987*x5988))+(((-1.0)*x5985*x5987))+((x5981*x5984))+(((-1.0)*x5982*x5983)));
evalcond[5]=((((-1.0)*x5980*x5983))+(((-1.0)*x5987*x5993))+(((-1.0)*x5984*x5988))+((x5981*x5987))+(((-1.0)*x5982*x5990))+(((-1.0)*x5992))+((x5984*x5985)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5994=((3.35381986224151e-6)*cj1);
IkReal x5995=(px*sj0);
IkReal x5996=((1.76221132708977)*sj1);
IkReal x5997=((1.76221132708977)*cj1);
IkReal x5998=((3.35381986224151e-6)*sj1);
IkReal x5999=(cj0*py);
IkReal x6000=(sj1*x5999);
if( IKabs(((2.4482884994363e-6)+((pz*x5996))+(((-1.0)*x5997*x5999))+(((-1.0)*pz*x5994))+((x5995*x5997))+((x5995*x5998))+(((-1.0)*x5998*x5999)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.28641426877553)+((pz*x5997))+((pz*x5998))+((x5996*x5999))+((x5994*x5995))+(((-1.0)*x5994*x5999))+(((-1.0)*x5995*x5996)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.4482884994363e-6)+((pz*x5996))+(((-1.0)*x5997*x5999))+(((-1.0)*pz*x5994))+((x5995*x5997))+((x5995*x5998))+(((-1.0)*x5998*x5999))))+IKsqr(((-1.28641426877553)+((pz*x5997))+((pz*x5998))+((x5996*x5999))+((x5994*x5995))+(((-1.0)*x5994*x5999))+(((-1.0)*x5995*x5996))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((2.4482884994363e-6)+((pz*x5996))+(((-1.0)*x5997*x5999))+(((-1.0)*pz*x5994))+((x5995*x5997))+((x5995*x5998))+(((-1.0)*x5998*x5999))), ((-1.28641426877553)+((pz*x5997))+((pz*x5998))+((x5996*x5999))+((x5994*x5995))+(((-1.0)*x5994*x5999))+(((-1.0)*x5995*x5996))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x6001=IKcos(j2);
IkReal x6002=IKsin(j2);
IkReal x6003=(cj1*gconst7);
IkReal x6004=(r00*sj0);
IkReal x6005=(cj1*gconst8);
IkReal x6006=((1.0)*r20);
IkReal x6007=(gconst8*sj1);
IkReal x6008=(r01*sj0);
IkReal x6009=(px*sj0);
IkReal x6010=(gconst7*sj1);
IkReal x6011=(cj0*r11);
IkReal x6012=((1.0)*cj1);
IkReal x6013=((1.0)*r21);
IkReal x6014=(cj0*py);
IkReal x6015=((1.0)*cj0*r10);
evalcond[0]=((((-0.56746883)*x6002))+(((-1.08e-6)*x6001))+((cj1*x6009))+(((-1.0)*x6012*x6014))+((pz*sj1)));
evalcond[1]=((0.73)+(((-1.0)*sj1*x6014))+(((-1.08e-6)*x6002))+((sj1*x6009))+(((0.56746883)*x6001))+(((-1.0)*pz*x6012)));
evalcond[2]=(x6001+(((-1.0)*x6010*x6013))+((r20*x6007))+((x6003*x6011))+(((-1.0)*x6005*x6015))+((x6004*x6005))+(((-1.0)*x6003*x6008)));
evalcond[3]=(((r21*x6003))+x6002+((x6010*x6011))+((x6004*x6007))+(((-1.0)*x6005*x6006))+(((-1.0)*x6007*x6015))+(((-1.0)*x6008*x6010)));
evalcond[4]=(((r21*x6007))+((r20*x6010))+(((-1.0)*x6005*x6011))+((x6003*x6004))+(((-1.0)*x6003*x6015))+((x6005*x6008))+(((-1.0)*x6002)));
evalcond[5]=(x6001+(((-1.0)*x6010*x6015))+(((-1.0)*x6007*x6011))+(((-1.0)*x6005*x6013))+((x6007*x6008))+(((-1.0)*x6003*x6006))+((x6004*x6010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6016=(cj1*pz);
IkReal x6017=(cj0*py);
IkReal x6018=((1.76220406051003)*sj1);
IkReal x6019=((3.35379220296043e-6)*sj1);
IkReal x6020=(px*sj0);
IkReal x6021=((3.35379220296043e-6)*cj1);
IkReal x6022=((1.76220406051003)*x6020);
if( IKabs(((2.44826830816111e-6)+(((-1.0)*x6017*x6019))+(((-3.35379220296043e-6)*x6016))+((cj1*x6022))+(((-1.76220406051003)*cj1*x6017))+((pz*x6018))+((x6019*x6020)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.28640896417232)+((x6017*x6018))+((x6020*x6021))+(((-1.0)*x6017*x6021))+((pz*x6019))+(((1.76220406051003)*x6016))+(((-1.0)*x6018*x6020)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.44826830816111e-6)+(((-1.0)*x6017*x6019))+(((-3.35379220296043e-6)*x6016))+((cj1*x6022))+(((-1.76220406051003)*cj1*x6017))+((pz*x6018))+((x6019*x6020))))+IKsqr(((-1.28640896417232)+((x6017*x6018))+((x6020*x6021))+(((-1.0)*x6017*x6021))+((pz*x6019))+(((1.76220406051003)*x6016))+(((-1.0)*x6018*x6020))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((2.44826830816111e-6)+(((-1.0)*x6017*x6019))+(((-3.35379220296043e-6)*x6016))+((cj1*x6022))+(((-1.76220406051003)*cj1*x6017))+((pz*x6018))+((x6019*x6020))), ((-1.28640896417232)+((x6017*x6018))+((x6020*x6021))+(((-1.0)*x6017*x6021))+((pz*x6019))+(((1.76220406051003)*x6016))+(((-1.0)*x6018*x6020))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x6023=IKcos(j2);
IkReal x6024=IKsin(j2);
IkReal x6025=(cj1*gconst7);
IkReal x6026=(r00*sj0);
IkReal x6027=(cj1*gconst8);
IkReal x6028=((1.0)*r20);
IkReal x6029=(gconst8*sj1);
IkReal x6030=(r01*sj0);
IkReal x6031=(px*sj0);
IkReal x6032=(gconst7*sj1);
IkReal x6033=(cj0*r11);
IkReal x6034=((1.0)*cj1);
IkReal x6035=((1.0)*r21);
IkReal x6036=(cj0*py);
IkReal x6037=((1.0)*cj0*r10);
evalcond[0]=((((-0.56747117)*x6024))+((cj1*x6031))+(((-1.0)*x6034*x6036))+(((-1.08e-6)*x6023))+((pz*sj1)));
evalcond[1]=((0.73)+(((0.56747117)*x6023))+(((-1.0)*sj1*x6036))+((sj1*x6031))+(((-1.08e-6)*x6024))+(((-1.0)*pz*x6034)));
evalcond[2]=(((x6027*x6030))+x6024+((x6025*x6026))+((r21*x6029))+(((-1.0)*x6025*x6037))+((r20*x6032))+(((-1.0)*x6027*x6033)));
evalcond[3]=((((-1.0)*x6032*x6035))+((x6026*x6027))+x6023+(((-1.0)*x6025*x6030))+(((-1.0)*x6027*x6037))+((x6025*x6033))+((r20*x6029)));
evalcond[4]=((((-1.0)*x6029*x6037))+(((-1.0)*x6027*x6028))+((x6026*x6029))+x6024+(((-1.0)*x6030*x6032))+((r21*x6025))+((x6032*x6033)));
evalcond[5]=((((-1.0)*x6032*x6037))+(((-1.0)*x6025*x6028))+((x6029*x6030))+(((-1.0)*x6023))+(((-1.0)*x6027*x6035))+((x6026*x6032))+(((-1.0)*x6029*x6033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6038=(cj1*r22);
IkReal x6039=((1.17e-6)*sj4);
IkReal x6040=(cj3*sj0);
IkReal x6041=((1.0)*sj4);
IkReal x6042=(cj1*px);
IkReal x6043=(r02*sj1);
IkReal x6044=((1.17e-6)*cj4);
IkReal x6045=(cj3*sj1);
IkReal x6046=(cj0*r12);
IkReal x6047=(cj3*sj4);
IkReal x6048=((1.0)*cj4);
IkReal x6049=(cj0*cj1*py);
CheckValue<IkReal> x6050 = IKatan2WithCheck(IkReal((((cj3*x6038*x6044))+(((-1.0)*pz*sj1*x6048))+(((-1.08e-6)*sj0*x6043))+((cj4*x6049))+(((1.08e-6)*sj1*x6046))+(((1.08e-6)*x6038))+((x6044*x6045*x6046))+(((-1.0)*x6040*x6043*x6044))+(((-1.0)*sj0*x6042*x6048)))),IkReal(((((-1.0)*pz*x6041*x6045))+(((-1.0)*x6040*x6041*x6042))+((sj1*x6039*x6046))+(((-0.56747)*sj1*x6046))+((x6047*x6049))+(((-0.56747)*x6038))+((x6038*x6039))+(((-1.0)*sj0*x6039*x6043))+(((0.56747)*sj0*x6043)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6050.valid){
continue;
}
CheckValue<IkReal> x6051=IKPowWithIntegerCheck(IKsign(((((-1.08e-6)*x6047))+((cj4*x6039))+(((-0.56747)*cj4))+(((-1.0)*cj4*x6039*(cj3*cj3))))),-1);
if(!x6051.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x6050.value)+(((1.5707963267949)*(x6051.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x6052=IKcos(j2);
IkReal x6053=IKsin(j2);
IkReal x6054=(cj1*gconst7);
IkReal x6055=(r00*sj0);
IkReal x6056=(cj1*gconst8);
IkReal x6057=((1.0)*r20);
IkReal x6058=(gconst8*sj1);
IkReal x6059=(r01*sj0);
IkReal x6060=(px*sj0);
IkReal x6061=(cj3*cj4);
IkReal x6062=(cj3*sj4);
IkReal x6063=((1.0)*cj1);
IkReal x6064=(gconst7*sj1);
IkReal x6065=(cj0*r11);
IkReal x6066=((1.0)*r21);
IkReal x6067=(cj0*py);
IkReal x6068=(r02*sj0);
IkReal x6069=((1.0)*sj1);
IkReal x6070=(cj0*r12);
IkReal x6071=((1.0)*cj0*r10);
IkReal x6072=((1.0)*x6053);
IkReal x6073=((1.17e-6)*x6053);
IkReal x6074=((1.0)*x6052);
IkReal x6075=(sj4*x6052);
evalcond[0]=((((-1.0)*x6063*x6070))+((r22*sj1))+((cj1*x6068))+(((-1.0)*cj4*x6072))+(((-1.0)*x6062*x6074)));
evalcond[1]=((((-1.0)*r22*x6063))+((cj4*x6052))+((sj1*x6068))+(((-1.0)*x6062*x6072))+(((-1.0)*x6069*x6070)));
evalcond[2]=((((-1.08e-6)*x6052))+((cj1*x6060))+(((-1.17e-6)*x6052*x6061))+(((-0.56747)*x6053))+((sj4*x6073))+(((-1.0)*x6063*x6067))+((pz*sj1)));
evalcond[3]=((0.73)+(((0.56747)*x6052))+(((-1.08e-6)*x6053))+((sj1*x6060))+(((-1.0)*x6061*x6073))+(((-1.17e-6)*x6075))+(((-1.0)*pz*x6063))+(((-1.0)*x6067*x6069)));
evalcond[4]=((((-1.0)*x6064*x6066))+((x6055*x6056))+((x6054*x6065))+(((-1.0)*x6054*x6059))+(((-1.0)*x6056*x6071))+((r20*x6058))+(((-1.0)*sj3*x6074)));
evalcond[5]=(((x6055*x6058))+(((-1.0)*x6059*x6064))+(((-1.0)*x6058*x6071))+(((-1.0)*x6056*x6057))+(((-1.0)*sj3*x6072))+((x6064*x6065))+((r21*x6054)));
evalcond[6]=(((x6056*x6059))+(((-1.0)*x6056*x6065))+((x6052*x6061))+(((-1.0)*x6054*x6071))+(((-1.0)*sj4*x6072))+((r20*x6064))+((x6054*x6055))+((r21*x6058)));
evalcond[7]=(x6075+(((-1.0)*x6064*x6071))+((x6053*x6061))+((x6055*x6064))+(((-1.0)*x6054*x6057))+((x6058*x6059))+(((-1.0)*x6058*x6065))+(((-1.0)*x6056*x6066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6076=(r22*sj1);
IkReal x6077=((1.17e-6)*sj4);
IkReal x6078=(pz*sj1);
IkReal x6079=(cj0*cj1);
IkReal x6080=((1.17e-6)*cj3);
IkReal x6081=(cj3*sj4);
IkReal x6082=(cj1*px*sj0);
IkReal x6083=((1.0)*x6081);
IkReal x6084=(cj1*r02*sj0);
CheckValue<IkReal> x6085 = IKatan2WithCheck(IkReal(((((1.08e-6)*x6076))+(((1.08e-6)*x6084))+((cj4*x6076*x6080))+(((-1.0)*x6082*x6083))+(((-1.0)*cj4*r12*x6079*x6080))+((cj4*x6080*x6084))+(((-1.0)*x6078*x6083))+(((-1.08e-6)*r12*x6079))+((py*x6079*x6081)))),IkReal((((x6076*x6077))+(((-1.0)*r12*x6077*x6079))+(((0.56747)*r12*x6079))+((cj4*x6078))+(((-0.56747)*x6076))+(((-1.0)*cj4*py*x6079))+((x6077*x6084))+(((-0.56747)*x6084))+((cj4*x6082)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6085.valid){
continue;
}
CheckValue<IkReal> x6086=IKPowWithIntegerCheck(IKsign((x6080+(((1.08e-6)*cj4))+(((-0.56747)*x6081)))),-1);
if(!x6086.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x6085.value)+(((1.5707963267949)*(x6086.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x6087=IKcos(j2);
IkReal x6088=IKsin(j2);
IkReal x6089=(cj1*gconst7);
IkReal x6090=(r00*sj0);
IkReal x6091=(cj1*gconst8);
IkReal x6092=((1.0)*r20);
IkReal x6093=(gconst8*sj1);
IkReal x6094=(r01*sj0);
IkReal x6095=(px*sj0);
IkReal x6096=(cj3*cj4);
IkReal x6097=(cj3*sj4);
IkReal x6098=((1.0)*cj1);
IkReal x6099=(gconst7*sj1);
IkReal x6100=(cj0*r11);
IkReal x6101=((1.0)*r21);
IkReal x6102=(cj0*py);
IkReal x6103=(r02*sj0);
IkReal x6104=((1.0)*sj1);
IkReal x6105=(cj0*r12);
IkReal x6106=((1.0)*cj0*r10);
IkReal x6107=((1.0)*x6088);
IkReal x6108=((1.17e-6)*x6088);
IkReal x6109=((1.0)*x6087);
IkReal x6110=(sj4*x6087);
evalcond[0]=(((r22*sj1))+(((-1.0)*x6098*x6105))+((cj1*x6103))+(((-1.0)*cj4*x6107))+(((-1.0)*x6097*x6109)));
evalcond[1]=((((-1.0)*x6104*x6105))+(((-1.0)*r22*x6098))+((sj1*x6103))+((cj4*x6087))+(((-1.0)*x6097*x6107)));
evalcond[2]=((((-1.0)*x6098*x6102))+((cj1*x6095))+(((-1.17e-6)*x6087*x6096))+((pz*sj1))+((sj4*x6108))+(((-1.08e-6)*x6087))+(((-0.56747)*x6088)));
evalcond[3]=((0.73)+((sj1*x6095))+(((-1.0)*x6102*x6104))+(((-1.0)*pz*x6098))+(((0.56747)*x6087))+(((-1.0)*x6096*x6108))+(((-1.08e-6)*x6088))+(((-1.17e-6)*x6110)));
evalcond[4]=(((x6090*x6091))+(((-1.0)*x6091*x6106))+(((-1.0)*x6089*x6094))+(((-1.0)*sj3*x6109))+(((-1.0)*x6099*x6101))+((r20*x6093))+((x6089*x6100)));
evalcond[5]=(((x6090*x6093))+(((-1.0)*x6094*x6099))+(((-1.0)*x6091*x6092))+(((-1.0)*x6093*x6106))+(((-1.0)*sj3*x6107))+((x6099*x6100))+((r21*x6089)));
evalcond[6]=((((-1.0)*x6089*x6106))+(((-1.0)*sj4*x6107))+((x6089*x6090))+((x6087*x6096))+((r21*x6093))+((x6091*x6094))+(((-1.0)*x6091*x6100))+((r20*x6099)));
evalcond[7]=((((-1.0)*x6089*x6092))+((x6093*x6094))+((x6090*x6099))+(((-1.0)*x6091*x6101))+x6110+(((-1.0)*x6093*x6100))+(((-1.0)*x6099*x6106))+((x6088*x6096)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6111=cj3*cj3;
IkReal x6112=cj4*cj4;
IkReal x6113=(cj0*r12);
IkReal x6114=(cj1*cj4);
IkReal x6115=(r22*sj1);
IkReal x6116=(cj3*sj4);
IkReal x6117=(r02*sj0);
IkReal x6118=((1.0)*sj1);
IkReal x6119=((1.0)*cj1*x6116);
CheckValue<IkReal> x6120=IKPowWithIntegerCheck(IKsign((x6111+x6112+(((-1.0)*x6111*x6112)))),-1);
if(!x6120.valid){
continue;
}
CheckValue<IkReal> x6121 = IKatan2WithCheck(IkReal((((cj4*x6115))+(((-1.0)*r22*x6119))+((sj1*x6116*x6117))+(((-1.0)*x6113*x6116*x6118))+((x6114*x6117))+(((-1.0)*x6113*x6114)))),IkReal((((x6115*x6116))+(((-1.0)*cj4*x6117*x6118))+((r22*x6114))+(((-1.0)*x6113*x6119))+((cj4*sj1*x6113))+((cj1*x6116*x6117)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6121.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6120.value)))+(x6121.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x6122=IKcos(j2);
IkReal x6123=IKsin(j2);
IkReal x6124=(cj1*gconst7);
IkReal x6125=(r00*sj0);
IkReal x6126=(cj1*gconst8);
IkReal x6127=((1.0)*r20);
IkReal x6128=(gconst8*sj1);
IkReal x6129=(r01*sj0);
IkReal x6130=(px*sj0);
IkReal x6131=(cj3*cj4);
IkReal x6132=(cj3*sj4);
IkReal x6133=((1.0)*cj1);
IkReal x6134=(gconst7*sj1);
IkReal x6135=(cj0*r11);
IkReal x6136=((1.0)*r21);
IkReal x6137=(cj0*py);
IkReal x6138=(r02*sj0);
IkReal x6139=((1.0)*sj1);
IkReal x6140=(cj0*r12);
IkReal x6141=((1.0)*cj0*r10);
IkReal x6142=((1.0)*x6123);
IkReal x6143=((1.17e-6)*x6123);
IkReal x6144=((1.0)*x6122);
IkReal x6145=(sj4*x6122);
evalcond[0]=((((-1.0)*x6133*x6140))+(((-1.0)*x6132*x6144))+(((-1.0)*cj4*x6142))+((r22*sj1))+((cj1*x6138)));
evalcond[1]=((((-1.0)*x6139*x6140))+((sj1*x6138))+(((-1.0)*x6132*x6142))+(((-1.0)*r22*x6133))+((cj4*x6122)));
evalcond[2]=(((sj4*x6143))+(((-0.56747)*x6123))+(((-1.08e-6)*x6122))+(((-1.0)*x6133*x6137))+((cj1*x6130))+((pz*sj1))+(((-1.17e-6)*x6122*x6131)));
evalcond[3]=((0.73)+((sj1*x6130))+(((-1.0)*x6137*x6139))+(((-1.0)*x6131*x6143))+(((-1.08e-6)*x6123))+(((-1.0)*pz*x6133))+(((0.56747)*x6122))+(((-1.17e-6)*x6145)));
evalcond[4]=(((x6125*x6126))+(((-1.0)*x6124*x6129))+((r20*x6128))+(((-1.0)*x6134*x6136))+(((-1.0)*sj3*x6144))+((x6124*x6135))+(((-1.0)*x6126*x6141)));
evalcond[5]=(((x6125*x6128))+((r21*x6124))+(((-1.0)*x6126*x6127))+(((-1.0)*x6129*x6134))+((x6134*x6135))+(((-1.0)*sj3*x6142))+(((-1.0)*x6128*x6141)));
evalcond[6]=(((x6124*x6125))+(((-1.0)*x6126*x6135))+((x6126*x6129))+((r21*x6128))+(((-1.0)*sj4*x6142))+((r20*x6134))+((x6122*x6131))+(((-1.0)*x6124*x6141)));
evalcond[7]=(((x6128*x6129))+(((-1.0)*x6124*x6127))+(((-1.0)*x6126*x6136))+x6145+(((-1.0)*x6128*x6135))+((x6123*x6131))+(((-1.0)*x6134*x6141))+((x6125*x6134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6146=((-1.0)*r21);
IkReal x6148 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6148)==0){
continue;
}
IkReal x6147=pow(x6148,-0.5);
CheckValue<IkReal> x6149 = IKatan2WithCheck(IkReal(x6146),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6149.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x6149.value))));
IkReal gconst10=(x6146*x6147);
IkReal gconst11=((1.0)*r20*x6147);
CheckValue<IkReal> x6150 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6150.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6150.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x6151=((-1.0)*r21);
CheckValue<IkReal> x6154 = IKatan2WithCheck(IkReal(x6151),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6154.valid){
continue;
}
IkReal x6152=((1.0)*(x6154.value));
IkReal x6153=x6147;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x6152)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x6152)));
IkReal gconst10=(x6151*x6153);
IkReal gconst11=((1.0)*r20*x6153);
IkReal x6155=((100000000.0)*sj3*sj4);
IkReal x6156=((117.0)*cj4*sj3);
j0eval[0]=rxp2_2;
j0eval[1]=((IKabs(((((-1.0)*r02*x6156))+((px*x6155)))))+(IKabs((((r12*x6156))+(((-1.0)*py*x6155))))));
j0eval[2]=IKsign(rxp2_2);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x6157=((-1.0)*r21);
CheckValue<IkReal> x6160 = IKatan2WithCheck(IkReal(x6157),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6160.valid){
continue;
}
IkReal x6158=((1.0)*(x6160.value));
IkReal x6159=x6147;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x6158)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x6158)));
IkReal gconst10=(x6157*x6159);
IkReal gconst11=((1.0)*r20*x6159);
j0eval[0]=0;
j0eval[1]=0;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6161=((1.0)*gconst10);
IkReal x6162=((1.0)*sj3);
IkReal x6163=(sj3*sj4);
CheckValue<IkReal> x6164=IKPowWithIntegerCheck(IKsign((((gconst11*r20))+(((-1.0)*r21*x6161)))),-1);
if(!x6164.valid){
continue;
}
CheckValue<IkReal> x6165 = IKatan2WithCheck(IkReal(((((-1.0)*gconst11*r01*sj4*x6162))+(((-1.0)*cj4*r02*x6162))+(((-1.0)*r00*x6161*x6163)))),IkReal((((gconst11*r11*x6163))+((gconst10*r10*x6163))+((cj4*r12*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6165.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6164.value)))+(x6165.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6166=IKcos(j0);
IkReal x6167=IKsin(j0);
IkReal x6168=(cj4*sj3);
IkReal x6169=((1.0)*x6166);
IkReal x6170=((1.0)*x6167);
evalcond[0]=((((-1.0)*r12*x6170))+(((-1.0)*r02*x6169))+(((-1.0)*sj3*sj4)));
evalcond[1]=((((-1.0)*py*x6170))+(((-1.0)*px*x6169))+(((-1.17e-6)*x6168)));
evalcond[2]=(((gconst10*r01*x6166))+cj3+(((-1.0)*gconst11*r00*x6169))+(((-1.0)*gconst11*r10*x6170))+((gconst10*r11*x6167)));
evalcond[3]=((((-1.0)*gconst11*r01*x6169))+x6168+(((-1.0)*gconst10*r10*x6170))+(((-1.0)*gconst10*r00*x6169))+(((-1.0)*gconst11*r11*x6170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x6171=cj3*cj3;
IkReal x6172=cj4*cj4;
IkReal x6173=sj4*sj4;
IkReal x6174=(cj3*r22);
IkReal x6175=(cj4*r22);
IkReal x6176=((4.53976)*sj4);
IkReal x6177=(r02*sj0);
IkReal x6178=((16.0)*pz);
IkReal x6179=((8.0)*pz);
IkReal x6180=((1.872e-5)*sj4);
IkReal x6181=((4.32e-6)*sj4);
IkReal x6182=((9.07952)*sj4);
IkReal x6183=(px*sj0);
IkReal x6184=(cj0*py);
IkReal x6185=((4.68e-6)*sj4);
IkReal x6186=((9.36e-6)*sj4);
IkReal x6187=(cj0*cj3*r12);
IkReal x6188=((1.872e-5)*x6172);
IkReal x6189=(cj0*cj4*r12);
IkReal x6190=(cj4*x6185);
IkReal x6191=((4.0)*x6172);
IkReal x6192=((9.36e-6)*x6172);
IkReal x6193=(x6171*x6173);
IkReal x6194=(cj3*x6173*x6177);
IkReal x6195=(((x6171*x6185*x6189))+((x6177*x6190))+((x6181*x6187))+(((4.0)*x6183*x6193))+(((2.26988)*x6189))+((x6183*x6191))+(((2.26988)*sj4*x6174)));
IkReal x6196=((((4.0)*x6184*x6193))+((cj3*x6177*x6181))+((x6185*x6189))+(((4.32e-6)*x6175))+(((4.68e-6)*x6173*x6174))+((x6171*x6177*x6190))+(((2.26988)*cj4*x6177))+(((4.68e-6)*x6172*x6174))+((x6184*x6191)));
IkReal x6197=((((-8.64e-6)*cj4*x6177))+(((9.36e-6)*x6173*x6187))+(((4.53976)*x6175))+((x6171*x6175*x6186))+(((-1.0)*x6179*x6193))+(((-1.0)*cj3*x6177*x6192))+((cj3*x6176*x6177))+(((-1.0)*x6172*x6179))+(((8.64e-6)*sj4*x6174))+((x6187*x6192))+(((-1.0)*x6176*x6187))+(((8.64e-6)*x6189))+(((-9.36e-6)*x6194))+(((-1.0)*x6175*x6186)));
IkReal x6198=((((-1.0)*x6196))+x6195);
IkReal x6199=((((-1.0)*x6195))+x6196);
op[0]=x6198;
op[1]=x6197;
op[2]=x6198;
op[3]=((((1.872e-5)*x6173*x6187))+((x6187*x6188))+((cj3*x6177*x6182))+((x6171*x6175*x6180))+(((-1.0)*x6182*x6187))+(((-1.872e-5)*x6194))+(((9.07952)*x6175))+(((1.728e-5)*x6189))+(((-1.0)*x6172*x6178))+(((1.728e-5)*sj4*x6174))+(((-1.0)*x6178*x6193))+(((-1.0)*cj3*x6177*x6188))+(((-1.728e-5)*cj4*x6177))+(((-1.0)*x6175*x6180)));
op[4]=x6199;
op[5]=x6197;
op[6]=x6199;
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

j1evalpoly[0]=((((-2.92)*(cj3*cj3)*(sj4*sj4)))+(((4.0)*pz*(cj4*cj4)))+(((-2.92)*(cj4*cj4)))+(((htj1*htj1)*(((((4.0)*pz*(cj4*cj4)))+(((-4.68e-6)*cj0*cj3*r12*(cj4*cj4)))+(((-2.26988)*cj3*r02*sj0*sj4))+(((4.68e-6)*cj3*r02*sj0*(cj4*cj4)))+(((-4.32e-6)*cj3*r22*sj4))+(((4.32e-6)*cj4*r02*sj0))+(((-8.76)*(cj3*cj3)*(sj4*sj4)))+(((-8.76)*(cj4*cj4)))+(((-4.68e-6)*cj0*cj3*r12*(sj4*sj4)))+(((4.68e-6)*cj3*r02*sj0*(sj4*sj4)))+(((-4.32e-6)*cj0*cj4*r12))+(((-2.26988)*cj4*r22))+(((4.0)*pz*(cj3*cj3)*(sj4*sj4)))+(((-4.68e-6)*cj4*r22*sj4*(cj3*cj3)))+(((4.68e-6)*cj4*r22*sj4))+(((2.26988)*cj0*cj3*r12*sj4))))))+(((-4.68e-6)*cj0*cj3*r12*(cj4*cj4)))+(((-2.26988)*cj3*r02*sj0*sj4))+(((4.68e-6)*cj3*r02*sj0*(cj4*cj4)))+(((-4.32e-6)*cj3*r22*sj4))+(((4.32e-6)*cj4*r02*sj0))+(((-4.68e-6)*cj0*cj3*r12*(sj4*sj4)))+(((4.68e-6)*cj3*r02*sj0*(sj4*sj4)))+(((-4.32e-6)*cj0*cj4*r12))+(((-2.26988)*cj4*r22))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-2.92)*(cj3*cj3)*(sj4*sj4)))+(((-2.92)*(cj4*cj4)))+(((-4.68e-6)*cj3*r02*sj0*(sj4*sj4)))+(((-4.68e-6)*cj4*r22*sj4))+(((-4.0)*pz*(cj4*cj4)))+(((-4.68e-6)*cj3*r02*sj0*(cj4*cj4)))+(((-4.0)*pz*(cj3*cj3)*(sj4*sj4)))+(((4.32e-6)*cj0*cj4*r12))+(((-2.26988)*cj0*cj3*r12*sj4))+(((2.26988)*cj4*r22))+(((-4.32e-6)*cj4*r02*sj0))+(((4.68e-6)*cj0*cj3*r12*(sj4*sj4)))+(((4.32e-6)*cj3*r22*sj4))+(((4.68e-6)*cj4*r22*sj4*(cj3*cj3)))+(((4.68e-6)*cj0*cj3*r12*(cj4*cj4)))+(((2.26988)*cj3*r02*sj0*sj4))))))+(((htj1*htj1*htj1*htj1*htj1)*(((((-8.0)*px*sj0*(cj3*cj3)*(sj4*sj4)))+(((-4.53976)*cj0*cj4*r12))+(((9.36e-6)*cj0*cj4*r12*sj4))+(((4.53976)*cj4*r02*sj0))+(((-9.36e-6)*cj4*r02*sj0*sj4))+(((9.36e-6)*cj3*r22*(sj4*sj4)))+(((-8.0)*px*sj0*(cj4*cj4)))+(((9.36e-6)*cj3*r22*(cj4*cj4)))+(((8.0)*cj0*py*(cj4*cj4)))+(((-4.53976)*cj3*r22*sj4))+(((8.0)*cj0*py*(cj3*cj3)*(sj4*sj4)))+(((8.64e-6)*cj3*r02*sj0*sj4))+(((9.36e-6)*cj4*r02*sj0*sj4*(cj3*cj3)))+(((8.64e-6)*cj4*r22))+(((-9.36e-6)*cj0*cj4*r12*sj4*(cj3*cj3)))+(((-8.64e-6)*cj0*cj3*r12*sj4))))))+(((htj1*htj1*htj1)*(((((-16.0)*px*sj0*(cj4*cj4)))+(((-1.872e-5)*cj0*cj4*r12*sj4*(cj3*cj3)))+(((-9.07952)*cj0*cj4*r12))+(((1.872e-5)*cj4*r02*sj0*sj4*(cj3*cj3)))+(((1.872e-5)*cj3*r22*(sj4*sj4)))+(((-1.728e-5)*cj0*cj3*r12*sj4))+(((-9.07952)*cj3*r22*sj4))+(((-16.0)*px*sj0*(cj3*cj3)*(sj4*sj4)))+(((9.07952)*cj4*r02*sj0))+(((16.0)*cj0*py*(cj3*cj3)*(sj4*sj4)))+(((1.872e-5)*cj0*cj4*r12*sj4))+(((1.872e-5)*cj3*r22*(cj4*cj4)))+(((1.728e-5)*cj4*r22))+(((1.728e-5)*cj3*r02*sj0*sj4))+(((16.0)*cj0*py*(cj4*cj4)))+(((-1.872e-5)*cj4*r02*sj0*sj4))))))+((htj1*(((((-8.0)*px*sj0*(cj3*cj3)*(sj4*sj4)))+(((-4.53976)*cj0*cj4*r12))+(((9.36e-6)*cj0*cj4*r12*sj4))+(((4.53976)*cj4*r02*sj0))+(((-9.36e-6)*cj4*r02*sj0*sj4))+(((9.36e-6)*cj3*r22*(sj4*sj4)))+(((-8.0)*px*sj0*(cj4*cj4)))+(((9.36e-6)*cj3*r22*(cj4*cj4)))+(((8.0)*cj0*py*(cj4*cj4)))+(((-4.53976)*cj3*r22*sj4))+(((8.0)*cj0*py*(cj3*cj3)*(sj4*sj4)))+(((8.64e-6)*cj3*r02*sj0*sj4))+(((9.36e-6)*cj4*r02*sj0*sj4*(cj3*cj3)))+(((8.64e-6)*cj4*r22))+(((-9.36e-6)*cj0*cj4*r12*sj4*(cj3*cj3)))+(((-8.64e-6)*cj0*cj3*r12*sj4))))))+(((4.0)*pz*(cj3*cj3)*(sj4*sj4)))+(((-4.68e-6)*cj4*r22*sj4*(cj3*cj3)))+(((4.68e-6)*cj4*r22*sj4))+(((htj1*htj1*htj1*htj1)*(((((-4.68e-6)*cj3*r02*sj0*(sj4*sj4)))+(((-4.68e-6)*cj4*r22*sj4))+(((-4.0)*pz*(cj4*cj4)))+(((-4.68e-6)*cj3*r02*sj0*(cj4*cj4)))+(((-4.0)*pz*(cj3*cj3)*(sj4*sj4)))+(((4.32e-6)*cj0*cj4*r12))+(((-2.26988)*cj0*cj3*r12*sj4))+(((-8.76)*(cj3*cj3)*(sj4*sj4)))+(((2.26988)*cj4*r22))+(((-8.76)*(cj4*cj4)))+(((-4.32e-6)*cj4*r02*sj0))+(((4.68e-6)*cj0*cj3*r12*(sj4*sj4)))+(((4.32e-6)*cj3*r22*sj4))+(((4.68e-6)*cj4*r22*sj4*(cj3*cj3)))+(((4.68e-6)*cj0*cj3*r12*(cj4*cj4)))+(((2.26988)*cj3*r02*sj0*sj4))))))+(((2.26988)*cj0*cj3*r12*sj4)));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[2];
IkReal x6200=((-1.0)*r21);
CheckValue<IkReal> x6203 = IKatan2WithCheck(IkReal(x6200),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6203.valid){
continue;
}
IkReal x6201=((1.0)*(x6203.value));
IkReal x6202=x6147;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x6201)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x6201)));
IkReal gconst10=(x6200*x6202);
IkReal gconst11=((1.0)*r20*x6202);
IkReal x6204=cj3*cj3;
IkReal x6205=cj4*cj4;
IkReal x6206=(x6204+x6205+(((-1.0)*x6204*x6205)));
j2eval[0]=x6206;
j2eval[1]=IKsign(x6206);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x6207=((-1.0)*r21);
CheckValue<IkReal> x6210 = IKatan2WithCheck(IkReal(x6207),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6210.valid){
continue;
}
IkReal x6208=((1.0)*(x6210.value));
IkReal x6209=x6147;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x6208)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x6208)));
IkReal gconst10=(x6207*x6209);
IkReal gconst11=((1.0)*r20*x6209);
IkReal x6211=(cj3*sj4);
j2eval[0]=(cj4+(((-525435.185185185)*x6211))+(((1.08333333333333)*cj3)));
j2eval[1]=IKsign(((((1.17e-6)*cj3))+(((1.08e-6)*cj4))+(((-0.56747)*x6211))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x6212=((-1.0)*r21);
CheckValue<IkReal> x6215 = IKatan2WithCheck(IkReal(x6212),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6215.valid){
continue;
}
IkReal x6213=((1.0)*(x6215.value));
IkReal x6214=x6147;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x6213)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x6213)));
IkReal gconst10=(x6212*x6214);
IkReal gconst11=((1.0)*r20*x6214);
IkReal x6216=cj3*cj3;
IkReal x6217=(cj4*sj4);
IkReal x6218=(cj3*sj4);
j2eval[0]=((((-525435.185185185)*cj4))+(((-1.0)*x6218))+(((-1.08333333333333)*x6216*x6217))+(((1.08333333333333)*x6217)));
j2eval[1]=IKsign(((((-1.17e-6)*x6216*x6217))+(((1.17e-6)*x6217))+(((-0.56747)*cj4))+(((-1.08e-6)*x6218))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6219=((3.35381986224151e-6)*cj1);
IkReal x6220=(px*sj0);
IkReal x6221=((1.76221132708977)*sj1);
IkReal x6222=((1.76221132708977)*cj1);
IkReal x6223=((3.35381986224151e-6)*sj1);
IkReal x6224=(cj0*py);
IkReal x6225=(sj1*x6224);
if( IKabs(((2.4482884994363e-6)+(((-1.0)*x6222*x6224))+(((-1.0)*pz*x6219))+(((-1.0)*x6223*x6224))+((x6220*x6223))+((x6220*x6222))+((pz*x6221)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.28641426877553)+((x6219*x6220))+(((-1.0)*x6219*x6224))+(((-1.0)*x6220*x6221))+((x6221*x6224))+((pz*x6223))+((pz*x6222)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.4482884994363e-6)+(((-1.0)*x6222*x6224))+(((-1.0)*pz*x6219))+(((-1.0)*x6223*x6224))+((x6220*x6223))+((x6220*x6222))+((pz*x6221))))+IKsqr(((-1.28641426877553)+((x6219*x6220))+(((-1.0)*x6219*x6224))+(((-1.0)*x6220*x6221))+((x6221*x6224))+((pz*x6223))+((pz*x6222))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((2.4482884994363e-6)+(((-1.0)*x6222*x6224))+(((-1.0)*pz*x6219))+(((-1.0)*x6223*x6224))+((x6220*x6223))+((x6220*x6222))+((pz*x6221))), ((-1.28641426877553)+((x6219*x6220))+(((-1.0)*x6219*x6224))+(((-1.0)*x6220*x6221))+((x6221*x6224))+((pz*x6223))+((pz*x6222))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x6226=IKcos(j2);
IkReal x6227=IKsin(j2);
IkReal x6228=(gconst10*sj1);
IkReal x6229=(cj1*sj0);
IkReal x6230=(gconst11*sj1);
IkReal x6231=(r01*sj0);
IkReal x6232=((1.0)*r21);
IkReal x6233=(r00*sj0);
IkReal x6234=((1.0)*gconst10);
IkReal x6235=((1.0)*cj1);
IkReal x6236=(cj1*gconst11);
IkReal x6237=(cj0*r10);
IkReal x6238=(cj1*gconst10);
IkReal x6239=(cj0*py);
IkReal x6240=(cj0*r11);
IkReal x6241=((1.0)*x6227);
IkReal x6242=((1.0)*x6240);
IkReal x6243=((1.0)*gconst11*x6237);
evalcond[0]=((((-0.56746883)*x6227))+(((-1.0)*x6235*x6239))+((px*x6229))+(((-1.08e-6)*x6226))+((pz*sj1)));
evalcond[1]=((0.73)+(((0.56746883)*x6226))+((px*sj0*sj1))+(((-1.0)*pz*x6235))+(((-1.0)*sj1*x6239))+(((-1.08e-6)*x6227)));
evalcond[2]=((((-1.0)*gconst11*x6235*x6240))+((r20*x6228))+((gconst11*r01*x6229))+(((-1.0)*x6241))+((r21*x6230))+(((-1.0)*cj1*x6234*x6237))+((gconst10*r00*x6229)));
evalcond[3]=(((x6230*x6231))+(((-1.0)*x6232*x6236))+x6226+(((-1.0)*cj1*r20*x6234))+(((-1.0)*x6228*x6237))+((x6228*x6233))+(((-1.0)*x6230*x6242)));
evalcond[4]=(((r20*x6230))+(((-1.0)*gconst11*x6235*x6237))+(((-1.0)*x6228*x6232))+((x6238*x6240))+(((-1.0)*x6226))+(((-1.0)*r01*x6229*x6234))+((gconst11*r00*x6229)));
evalcond[5]=(((x6230*x6233))+((x6228*x6240))+(((-1.0)*x6228*x6231))+(((-1.0)*x6241))+(((-1.0)*x6230*x6237))+((r21*x6238))+(((-1.0)*gconst11*r20*x6235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6244=(cj1*pz);
IkReal x6245=(cj0*py);
IkReal x6246=((1.76220406051003)*sj1);
IkReal x6247=((3.35379220296043e-6)*sj1);
IkReal x6248=(px*sj0);
IkReal x6249=((3.35379220296043e-6)*cj1);
IkReal x6250=((1.76220406051003)*x6248);
if( IKabs(((2.44826830816111e-6)+(((-3.35379220296043e-6)*x6244))+(((-1.76220406051003)*cj1*x6245))+((cj1*x6250))+((x6247*x6248))+(((-1.0)*x6245*x6247))+((pz*x6246)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.28640896417232)+((x6245*x6246))+((x6248*x6249))+(((1.76220406051003)*x6244))+(((-1.0)*x6245*x6249))+(((-1.0)*x6246*x6248))+((pz*x6247)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.44826830816111e-6)+(((-3.35379220296043e-6)*x6244))+(((-1.76220406051003)*cj1*x6245))+((cj1*x6250))+((x6247*x6248))+(((-1.0)*x6245*x6247))+((pz*x6246))))+IKsqr(((-1.28640896417232)+((x6245*x6246))+((x6248*x6249))+(((1.76220406051003)*x6244))+(((-1.0)*x6245*x6249))+(((-1.0)*x6246*x6248))+((pz*x6247))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((2.44826830816111e-6)+(((-3.35379220296043e-6)*x6244))+(((-1.76220406051003)*cj1*x6245))+((cj1*x6250))+((x6247*x6248))+(((-1.0)*x6245*x6247))+((pz*x6246))), ((-1.28640896417232)+((x6245*x6246))+((x6248*x6249))+(((1.76220406051003)*x6244))+(((-1.0)*x6245*x6249))+(((-1.0)*x6246*x6248))+((pz*x6247))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x6251=IKcos(j2);
IkReal x6252=IKsin(j2);
IkReal x6253=((1.0)*cj1);
IkReal x6254=(gconst10*r20);
IkReal x6255=(cj1*sj0);
IkReal x6256=(gconst11*sj1);
IkReal x6257=(r01*sj0);
IkReal x6258=((1.0)*sj1);
IkReal x6259=(cj0*r11);
IkReal x6260=(gconst10*r21);
IkReal x6261=(r00*sj0);
IkReal x6262=(gconst10*sj1);
IkReal x6263=(cj0*py);
IkReal x6264=((1.0)*x6251);
IkReal x6265=(cj0*gconst11*r10);
IkReal x6266=(cj0*gconst10*r10);
evalcond[0]=((((-0.56747117)*x6252))+((px*x6255))+(((-1.08e-6)*x6251))+((pz*sj1))+(((-1.0)*x6253*x6263)));
evalcond[1]=((0.73)+((px*sj0*sj1))+(((-1.0)*pz*x6253))+(((0.56747117)*x6251))+(((-1.0)*x6258*x6263))+(((-1.08e-6)*x6252)));
evalcond[2]=(x6252+((sj1*x6254))+((gconst11*r01*x6255))+((r21*x6256))+((gconst10*r00*x6255))+(((-1.0)*gconst11*x6253*x6259))+(((-1.0)*x6253*x6266)));
evalcond[3]=((((-1.0)*x6258*x6260))+(((-1.0)*gconst10*x6253*x6257))+(((-1.0)*x6264))+((r20*x6256))+((cj1*gconst10*x6259))+((gconst11*r00*x6255))+(((-1.0)*x6253*x6265)));
evalcond[4]=((((-1.0)*cj0*r10*x6256))+((cj1*x6260))+(((-1.0)*x6252))+((x6256*x6261))+((x6259*x6262))+(((-1.0)*gconst11*r20*x6253))+(((-1.0)*gconst10*x6257*x6258)));
evalcond[5]=((((-1.0)*x6256*x6259))+(((-1.0)*gconst11*r21*x6253))+(((-1.0)*x6258*x6266))+((x6256*x6257))+((x6261*x6262))+(((-1.0)*x6264))+(((-1.0)*x6253*x6254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6267=((3.35381986224151e-6)*cj1);
IkReal x6268=(px*sj0);
IkReal x6269=((1.76221132708977)*sj1);
IkReal x6270=((1.76221132708977)*cj1);
IkReal x6271=((3.35381986224151e-6)*sj1);
IkReal x6272=(cj0*py);
IkReal x6273=(sj1*x6272);
if( IKabs(((2.4482884994363e-6)+(((-1.0)*x6270*x6272))+((pz*x6269))+((x6268*x6271))+((x6268*x6270))+(((-1.0)*pz*x6267))+(((-1.0)*x6271*x6272)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.28641426877553)+(((-1.0)*x6267*x6272))+((pz*x6270))+((pz*x6271))+((x6269*x6272))+((x6267*x6268))+(((-1.0)*x6268*x6269)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.4482884994363e-6)+(((-1.0)*x6270*x6272))+((pz*x6269))+((x6268*x6271))+((x6268*x6270))+(((-1.0)*pz*x6267))+(((-1.0)*x6271*x6272))))+IKsqr(((-1.28641426877553)+(((-1.0)*x6267*x6272))+((pz*x6270))+((pz*x6271))+((x6269*x6272))+((x6267*x6268))+(((-1.0)*x6268*x6269))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((2.4482884994363e-6)+(((-1.0)*x6270*x6272))+((pz*x6269))+((x6268*x6271))+((x6268*x6270))+(((-1.0)*pz*x6267))+(((-1.0)*x6271*x6272))), ((-1.28641426877553)+(((-1.0)*x6267*x6272))+((pz*x6270))+((pz*x6271))+((x6269*x6272))+((x6267*x6268))+(((-1.0)*x6268*x6269))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x6274=IKcos(j2);
IkReal x6275=IKsin(j2);
IkReal x6276=(cj1*sj0);
IkReal x6277=(gconst11*sj1);
IkReal x6278=(r01*sj0);
IkReal x6279=((1.0)*gconst10);
IkReal x6280=(cj1*r20);
IkReal x6281=(cj1*gconst11);
IkReal x6282=((1.0)*cj1);
IkReal x6283=(r00*sj0);
IkReal x6284=(gconst10*sj1);
IkReal x6285=(cj0*r10);
IkReal x6286=(cj1*gconst10);
IkReal x6287=(cj0*py);
IkReal x6288=(cj0*r11);
IkReal x6289=((1.0)*x6288);
IkReal x6290=((1.0)*gconst11*x6285);
evalcond[0]=((((-1.0)*x6282*x6287))+(((-0.56746883)*x6275))+((px*x6276))+((pz*sj1))+(((-1.08e-6)*x6274)));
evalcond[1]=((0.73)+(((-1.0)*pz*x6282))+(((-1.0)*sj1*x6287))+((px*sj0*sj1))+(((-1.08e-6)*x6275))+(((0.56746883)*x6274)));
evalcond[2]=((((-1.0)*r21*sj1*x6279))+x6274+(((-1.0)*r01*x6276*x6279))+(((-1.0)*x6281*x6285))+((r20*x6277))+((gconst11*r00*x6276))+((x6286*x6288)));
evalcond[3]=(((x6284*x6288))+x6275+(((-1.0)*sj1*x6278*x6279))+((x6277*x6283))+(((-1.0)*x6277*x6285))+(((-1.0)*gconst11*x6280))+((r21*x6286)));
evalcond[4]=((((-1.0)*x6275))+((gconst11*r01*x6276))+((r21*x6277))+((r20*x6284))+((gconst10*r00*x6276))+(((-1.0)*x6281*x6289))+(((-1.0)*cj1*x6279*x6285)));
evalcond[5]=(x6274+(((-1.0)*x6279*x6280))+((x6283*x6284))+(((-1.0)*sj1*x6279*x6285))+(((-1.0)*r21*x6281))+((x6277*x6278))+(((-1.0)*x6277*x6289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6291=(cj1*pz);
IkReal x6292=(cj0*py);
IkReal x6293=((1.76220406051003)*sj1);
IkReal x6294=((3.35379220296043e-6)*sj1);
IkReal x6295=(px*sj0);
IkReal x6296=((3.35379220296043e-6)*cj1);
IkReal x6297=((1.76220406051003)*x6295);
if( IKabs(((2.44826830816111e-6)+((pz*x6293))+((x6294*x6295))+(((-1.76220406051003)*cj1*x6292))+(((-3.35379220296043e-6)*x6291))+(((-1.0)*x6292*x6294))+((cj1*x6297)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.28640896417232)+((pz*x6294))+((x6295*x6296))+((x6292*x6293))+(((-1.0)*x6293*x6295))+(((1.76220406051003)*x6291))+(((-1.0)*x6292*x6296)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.44826830816111e-6)+((pz*x6293))+((x6294*x6295))+(((-1.76220406051003)*cj1*x6292))+(((-3.35379220296043e-6)*x6291))+(((-1.0)*x6292*x6294))+((cj1*x6297))))+IKsqr(((-1.28640896417232)+((pz*x6294))+((x6295*x6296))+((x6292*x6293))+(((-1.0)*x6293*x6295))+(((1.76220406051003)*x6291))+(((-1.0)*x6292*x6296))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((2.44826830816111e-6)+((pz*x6293))+((x6294*x6295))+(((-1.76220406051003)*cj1*x6292))+(((-3.35379220296043e-6)*x6291))+(((-1.0)*x6292*x6294))+((cj1*x6297))), ((-1.28640896417232)+((pz*x6294))+((x6295*x6296))+((x6292*x6293))+(((-1.0)*x6293*x6295))+(((1.76220406051003)*x6291))+(((-1.0)*x6292*x6296))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x6298=IKcos(j2);
IkReal x6299=IKsin(j2);
IkReal x6300=((1.0)*cj1);
IkReal x6301=(gconst10*r20);
IkReal x6302=(cj1*sj0);
IkReal x6303=(gconst11*sj1);
IkReal x6304=(r01*sj0);
IkReal x6305=((1.0)*sj1);
IkReal x6306=(cj0*r11);
IkReal x6307=(gconst10*r21);
IkReal x6308=(r00*sj0);
IkReal x6309=(gconst10*sj1);
IkReal x6310=(cj0*py);
IkReal x6311=(cj0*gconst11*r10);
IkReal x6312=(cj0*gconst10*r10);
evalcond[0]=((((-1.0)*x6300*x6310))+(((-1.08e-6)*x6298))+((px*x6302))+(((-0.56747117)*x6299))+((pz*sj1)));
evalcond[1]=((0.73)+(((-1.0)*x6305*x6310))+(((-1.0)*pz*x6300))+((px*sj0*sj1))+(((-1.08e-6)*x6299))+(((0.56747117)*x6298)));
evalcond[2]=(x6299+((gconst11*r01*x6302))+(((-1.0)*x6300*x6312))+(((-1.0)*gconst11*x6300*x6306))+((r21*x6303))+((gconst10*r00*x6302))+((sj1*x6301)));
evalcond[3]=((((-1.0)*x6305*x6307))+x6298+(((-1.0)*x6300*x6311))+((gconst11*r00*x6302))+((cj1*gconst10*x6306))+((r20*x6303))+(((-1.0)*gconst10*x6300*x6304)));
evalcond[4]=(x6299+((x6303*x6308))+(((-1.0)*gconst11*r20*x6300))+(((-1.0)*cj0*r10*x6303))+(((-1.0)*gconst10*x6304*x6305))+((x6306*x6309))+((cj1*x6307)));
evalcond[5]=((((-1.0)*gconst11*r21*x6300))+(((-1.0)*x6303*x6306))+(((-1.0)*x6298))+((x6303*x6304))+(((-1.0)*x6305*x6312))+(((-1.0)*x6300*x6301))+((x6308*x6309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6313=(cj1*r22);
IkReal x6314=((1.17e-6)*sj4);
IkReal x6315=(cj3*sj0);
IkReal x6316=((1.0)*sj4);
IkReal x6317=(cj1*px);
IkReal x6318=(r02*sj1);
IkReal x6319=((1.17e-6)*cj4);
IkReal x6320=(cj3*sj1);
IkReal x6321=(cj0*r12);
IkReal x6322=(cj3*sj4);
IkReal x6323=((1.0)*cj4);
IkReal x6324=(cj0*cj1*py);
CheckValue<IkReal> x6325 = IKatan2WithCheck(IkReal(((((-1.0)*pz*sj1*x6323))+(((1.08e-6)*x6313))+(((-1.0)*x6315*x6318*x6319))+(((-1.08e-6)*sj0*x6318))+((cj4*x6324))+((cj3*x6313*x6319))+((x6319*x6320*x6321))+(((-1.0)*sj0*x6317*x6323))+(((1.08e-6)*sj1*x6321)))),IkReal((((x6322*x6324))+((x6313*x6314))+(((0.56747)*sj0*x6318))+(((-0.56747)*x6313))+(((-1.0)*sj0*x6314*x6318))+(((-1.0)*x6315*x6316*x6317))+(((-0.56747)*sj1*x6321))+(((-1.0)*pz*x6316*x6320))+((sj1*x6314*x6321)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6325.valid){
continue;
}
CheckValue<IkReal> x6326=IKPowWithIntegerCheck(IKsign((((cj4*x6314))+(((-1.08e-6)*x6322))+(((-0.56747)*cj4))+(((-1.0)*cj4*x6314*(cj3*cj3))))),-1);
if(!x6326.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x6325.value)+(((1.5707963267949)*(x6326.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x6327=IKcos(j2);
IkReal x6328=IKsin(j2);
IkReal x6329=(cj1*sj0);
IkReal x6330=(cj3*cj4);
IkReal x6331=(gconst11*sj1);
IkReal x6332=(r01*sj0);
IkReal x6333=((1.0)*cj1);
IkReal x6334=(gconst10*r20);
IkReal x6335=(cj3*sj4);
IkReal x6336=(cj0*r11);
IkReal x6337=((1.0)*gconst10);
IkReal x6338=(cj0*r10);
IkReal x6339=(r00*sj0);
IkReal x6340=(gconst10*sj1);
IkReal x6341=(cj1*gconst10);
IkReal x6342=(sj0*sj1);
IkReal x6343=(cj0*py);
IkReal x6344=((1.0)*sj1);
IkReal x6345=(cj0*r12);
IkReal x6346=((1.0)*x6328);
IkReal x6347=((1.17e-6)*x6328);
IkReal x6348=((1.0)*x6327);
IkReal x6349=(sj4*x6327);
IkReal x6350=((1.0)*gconst11*x6338);
evalcond[0]=(((r02*x6329))+(((-1.0)*x6333*x6345))+((r22*sj1))+(((-1.0)*cj4*x6346))+(((-1.0)*x6335*x6348)));
evalcond[1]=(((r02*x6342))+(((-1.0)*x6344*x6345))+(((-1.0)*r22*x6333))+((cj4*x6327))+(((-1.0)*x6335*x6346)));
evalcond[2]=((((-1.0)*x6333*x6343))+(((-1.08e-6)*x6327))+(((-0.56747)*x6328))+((sj4*x6347))+((px*x6329))+((pz*sj1))+(((-1.17e-6)*x6327*x6330)));
evalcond[3]=((0.73)+((px*x6342))+(((-1.0)*x6343*x6344))+(((-1.0)*x6330*x6347))+(((-1.08e-6)*x6328))+(((-1.17e-6)*x6349))+(((-1.0)*pz*x6333))+(((0.56747)*x6327)));
evalcond[4]=((((-1.0)*gconst11*x6333*x6338))+((gconst11*r00*x6329))+(((-1.0)*r01*x6329*x6337))+(((-1.0)*sj3*x6348))+((x6336*x6341))+((r20*x6331))+(((-1.0)*r21*sj1*x6337)));
evalcond[5]=((((-1.0)*sj3*x6346))+(((-1.0)*x6331*x6338))+((x6331*x6339))+(((-1.0)*sj1*x6332*x6337))+((x6336*x6340))+((r21*x6341))+(((-1.0)*gconst11*r20*x6333)));
evalcond[6]=((((-1.0)*gconst11*x6333*x6336))+((gconst10*r00*x6329))+(((-1.0)*gconst10*x6333*x6338))+((sj1*x6334))+((x6327*x6330))+((gconst11*r01*x6329))+((r21*x6331))+(((-1.0)*sj4*x6346)));
evalcond[7]=((((-1.0)*x6333*x6334))+x6349+(((-1.0)*x6331*x6336))+((x6331*x6332))+(((-1.0)*sj1*x6337*x6338))+((x6339*x6340))+((x6328*x6330))+(((-1.0)*gconst11*r21*x6333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6351=(r22*sj1);
IkReal x6352=((1.17e-6)*sj4);
IkReal x6353=(pz*sj1);
IkReal x6354=(cj0*cj1);
IkReal x6355=((1.17e-6)*cj3);
IkReal x6356=(cj3*sj4);
IkReal x6357=(cj1*px*sj0);
IkReal x6358=((1.0)*x6356);
IkReal x6359=(cj1*r02*sj0);
CheckValue<IkReal> x6360 = IKatan2WithCheck(IkReal((((cj4*x6351*x6355))+(((-1.0)*x6353*x6358))+(((-1.0)*x6357*x6358))+((cj4*x6355*x6359))+(((-1.0)*cj4*r12*x6354*x6355))+((py*x6354*x6356))+(((1.08e-6)*x6359))+(((1.08e-6)*x6351))+(((-1.08e-6)*r12*x6354)))),IkReal(((((0.56747)*r12*x6354))+(((-1.0)*cj4*py*x6354))+(((-0.56747)*x6351))+(((-0.56747)*x6359))+(((-1.0)*r12*x6352*x6354))+((x6352*x6359))+((cj4*x6353))+((cj4*x6357))+((x6351*x6352)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6360.valid){
continue;
}
CheckValue<IkReal> x6361=IKPowWithIntegerCheck(IKsign((x6355+(((1.08e-6)*cj4))+(((-0.56747)*x6356)))),-1);
if(!x6361.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x6360.value)+(((1.5707963267949)*(x6361.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x6362=IKcos(j2);
IkReal x6363=IKsin(j2);
IkReal x6364=(cj1*sj0);
IkReal x6365=(cj3*cj4);
IkReal x6366=(gconst11*sj1);
IkReal x6367=(r01*sj0);
IkReal x6368=((1.0)*cj1);
IkReal x6369=(gconst10*r20);
IkReal x6370=(cj3*sj4);
IkReal x6371=(cj0*r11);
IkReal x6372=((1.0)*gconst10);
IkReal x6373=(cj0*r10);
IkReal x6374=(r00*sj0);
IkReal x6375=(gconst10*sj1);
IkReal x6376=(cj1*gconst10);
IkReal x6377=(sj0*sj1);
IkReal x6378=(cj0*py);
IkReal x6379=((1.0)*sj1);
IkReal x6380=(cj0*r12);
IkReal x6381=((1.0)*x6363);
IkReal x6382=((1.17e-6)*x6363);
IkReal x6383=((1.0)*x6362);
IkReal x6384=(sj4*x6362);
IkReal x6385=((1.0)*gconst11*x6373);
evalcond[0]=(((r22*sj1))+(((-1.0)*x6368*x6380))+((r02*x6364))+(((-1.0)*cj4*x6381))+(((-1.0)*x6370*x6383)));
evalcond[1]=((((-1.0)*x6379*x6380))+(((-1.0)*r22*x6368))+((r02*x6377))+((cj4*x6362))+(((-1.0)*x6370*x6381)));
evalcond[2]=((((-1.0)*x6368*x6378))+(((-1.08e-6)*x6362))+(((-0.56747)*x6363))+((pz*sj1))+(((-1.17e-6)*x6362*x6365))+((px*x6364))+((sj4*x6382)));
evalcond[3]=((0.73)+(((-1.0)*pz*x6368))+(((-1.08e-6)*x6363))+(((-1.0)*x6378*x6379))+(((-1.0)*x6365*x6382))+((px*x6377))+(((-1.17e-6)*x6384))+(((0.56747)*x6362)));
evalcond[4]=((((-1.0)*sj3*x6383))+((r20*x6366))+((x6371*x6376))+(((-1.0)*r21*sj1*x6372))+(((-1.0)*gconst11*x6368*x6373))+(((-1.0)*r01*x6364*x6372))+((gconst11*r00*x6364)));
evalcond[5]=(((r21*x6376))+(((-1.0)*sj3*x6381))+(((-1.0)*gconst11*r20*x6368))+(((-1.0)*x6366*x6373))+((x6366*x6374))+(((-1.0)*sj1*x6367*x6372))+((x6371*x6375)));
evalcond[6]=((((-1.0)*sj4*x6381))+((x6362*x6365))+((gconst10*r00*x6364))+((sj1*x6369))+((gconst11*r01*x6364))+(((-1.0)*gconst11*x6368*x6371))+(((-1.0)*gconst10*x6368*x6373))+((r21*x6366)));
evalcond[7]=((((-1.0)*x6368*x6369))+x6384+(((-1.0)*x6366*x6371))+(((-1.0)*gconst11*r21*x6368))+((x6374*x6375))+((x6366*x6367))+((x6363*x6365))+(((-1.0)*sj1*x6372*x6373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6386=cj3*cj3;
IkReal x6387=cj4*cj4;
IkReal x6388=(cj0*r12);
IkReal x6389=(cj1*cj4);
IkReal x6390=(r22*sj1);
IkReal x6391=(cj3*sj4);
IkReal x6392=(r02*sj0);
IkReal x6393=((1.0)*sj1);
IkReal x6394=((1.0)*cj1*x6391);
CheckValue<IkReal> x6395 = IKatan2WithCheck(IkReal(((((-1.0)*x6388*x6389))+(((-1.0)*r22*x6394))+((sj1*x6391*x6392))+((cj4*x6390))+(((-1.0)*x6388*x6391*x6393))+((x6389*x6392)))),IkReal((((x6390*x6391))+((r22*x6389))+((cj4*sj1*x6388))+(((-1.0)*x6388*x6394))+(((-1.0)*cj4*x6392*x6393))+((cj1*x6391*x6392)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6395.valid){
continue;
}
CheckValue<IkReal> x6396=IKPowWithIntegerCheck(IKsign((x6387+x6386+(((-1.0)*x6386*x6387)))),-1);
if(!x6396.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x6395.value)+(((1.5707963267949)*(x6396.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x6397=IKcos(j2);
IkReal x6398=IKsin(j2);
IkReal x6399=(cj1*sj0);
IkReal x6400=(cj3*cj4);
IkReal x6401=(gconst11*sj1);
IkReal x6402=(r01*sj0);
IkReal x6403=((1.0)*cj1);
IkReal x6404=(gconst10*r20);
IkReal x6405=(cj3*sj4);
IkReal x6406=(cj0*r11);
IkReal x6407=((1.0)*gconst10);
IkReal x6408=(cj0*r10);
IkReal x6409=(r00*sj0);
IkReal x6410=(gconst10*sj1);
IkReal x6411=(cj1*gconst10);
IkReal x6412=(sj0*sj1);
IkReal x6413=(cj0*py);
IkReal x6414=((1.0)*sj1);
IkReal x6415=(cj0*r12);
IkReal x6416=((1.0)*x6398);
IkReal x6417=((1.17e-6)*x6398);
IkReal x6418=((1.0)*x6397);
IkReal x6419=(sj4*x6397);
IkReal x6420=((1.0)*gconst11*x6408);
evalcond[0]=((((-1.0)*x6403*x6415))+(((-1.0)*x6405*x6418))+((r22*sj1))+(((-1.0)*cj4*x6416))+((r02*x6399)));
evalcond[1]=((((-1.0)*x6414*x6415))+((r02*x6412))+(((-1.0)*x6405*x6416))+((cj4*x6397))+(((-1.0)*r22*x6403)));
evalcond[2]=((((-1.0)*x6403*x6413))+(((-1.08e-6)*x6397))+((sj4*x6417))+(((-0.56747)*x6398))+(((-1.17e-6)*x6397*x6400))+((px*x6399))+((pz*sj1)));
evalcond[3]=((0.73)+(((0.56747)*x6397))+(((-1.0)*pz*x6403))+(((-1.17e-6)*x6419))+(((-1.0)*x6400*x6417))+(((-1.08e-6)*x6398))+(((-1.0)*x6413*x6414))+((px*x6412)));
evalcond[4]=(((r20*x6401))+(((-1.0)*r01*x6399*x6407))+(((-1.0)*gconst11*x6403*x6408))+((x6406*x6411))+(((-1.0)*sj3*x6418))+(((-1.0)*r21*sj1*x6407))+((gconst11*r00*x6399)));
evalcond[5]=((((-1.0)*gconst11*r20*x6403))+(((-1.0)*sj1*x6402*x6407))+((r21*x6411))+(((-1.0)*x6401*x6408))+((x6406*x6410))+(((-1.0)*sj3*x6416))+((x6401*x6409)));
evalcond[6]=(((sj1*x6404))+((r21*x6401))+((gconst10*r00*x6399))+(((-1.0)*gconst10*x6403*x6408))+((gconst11*r01*x6399))+(((-1.0)*gconst11*x6403*x6406))+(((-1.0)*sj4*x6416))+((x6397*x6400)));
evalcond[7]=((((-1.0)*sj1*x6407*x6408))+(((-1.0)*x6403*x6404))+((x6409*x6410))+x6419+(((-1.0)*x6401*x6406))+((x6398*x6400))+(((-1.0)*gconst11*r21*x6403))+((x6401*x6402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6421=((1.0)*gconst10);
IkReal x6422=(sj3*sj4);
IkReal x6423=((1.0)*gconst11);
CheckValue<IkReal> x6424=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6423))+(((-1.0)*r20*x6421)))),-1);
if(!x6424.valid){
continue;
}
CheckValue<IkReal> x6425 = IKatan2WithCheck(IkReal((((gconst10*r01*x6422))+(((-1.0)*cj3*r02))+(((-1.0)*r00*x6422*x6423)))),IkReal((((gconst11*r10*x6422))+(((-1.0)*r11*x6421*x6422))+((cj3*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6425.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6424.value)))+(x6425.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6426=IKcos(j0);
IkReal x6427=IKsin(j0);
IkReal x6428=(cj4*sj3);
IkReal x6429=((1.0)*x6426);
IkReal x6430=((1.0)*x6427);
evalcond[0]=((((-1.0)*r12*x6430))+(((-1.0)*sj3*sj4))+(((-1.0)*r02*x6429)));
evalcond[1]=((((-1.17e-6)*x6428))+(((-1.0)*py*x6430))+(((-1.0)*px*x6429)));
evalcond[2]=(((gconst10*r01*x6426))+((gconst10*r11*x6427))+(((-1.0)*gconst11*r00*x6429))+cj3+(((-1.0)*gconst11*r10*x6430)));
evalcond[3]=((((-1.0)*gconst11*r01*x6429))+(((-1.0)*gconst11*r11*x6430))+(((-1.0)*gconst10*r00*x6429))+x6428+(((-1.0)*gconst10*r10*x6430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x6431=cj3*cj3;
IkReal x6432=cj4*cj4;
IkReal x6433=sj4*sj4;
IkReal x6434=(cj3*r22);
IkReal x6435=(cj4*r22);
IkReal x6436=((4.53976)*sj4);
IkReal x6437=(r02*sj0);
IkReal x6438=((16.0)*pz);
IkReal x6439=((8.0)*pz);
IkReal x6440=((1.872e-5)*sj4);
IkReal x6441=((4.32e-6)*sj4);
IkReal x6442=((9.07952)*sj4);
IkReal x6443=(px*sj0);
IkReal x6444=(cj0*py);
IkReal x6445=((4.68e-6)*sj4);
IkReal x6446=((9.36e-6)*sj4);
IkReal x6447=(cj0*cj3*r12);
IkReal x6448=((1.872e-5)*x6432);
IkReal x6449=(cj0*cj4*r12);
IkReal x6450=(cj4*x6445);
IkReal x6451=((4.0)*x6432);
IkReal x6452=((9.36e-6)*x6432);
IkReal x6453=(x6431*x6433);
IkReal x6454=(cj3*x6433*x6437);
IkReal x6455=((((2.26988)*x6449))+((x6443*x6451))+((x6431*x6445*x6449))+((x6437*x6450))+(((2.26988)*sj4*x6434))+(((4.0)*x6443*x6453))+((x6441*x6447)));
IkReal x6456=((((2.26988)*cj4*x6437))+((x6445*x6449))+(((4.32e-6)*x6435))+((x6431*x6437*x6450))+((x6444*x6451))+(((4.0)*x6444*x6453))+((cj3*x6437*x6441))+(((4.68e-6)*x6432*x6434))+(((4.68e-6)*x6433*x6434)));
IkReal x6457=(((x6431*x6435*x6446))+(((-1.0)*x6436*x6447))+(((-1.0)*x6439*x6453))+(((-9.36e-6)*x6454))+((x6447*x6452))+(((-1.0)*x6432*x6439))+(((-8.64e-6)*cj4*x6437))+(((8.64e-6)*x6449))+((cj3*x6436*x6437))+(((8.64e-6)*sj4*x6434))+(((-1.0)*x6435*x6446))+(((-1.0)*cj3*x6437*x6452))+(((4.53976)*x6435))+(((9.36e-6)*x6433*x6447)));
IkReal x6458=(x6455+(((-1.0)*x6456)));
IkReal x6459=(x6456+(((-1.0)*x6455)));
op[0]=x6458;
op[1]=x6457;
op[2]=x6458;
op[3]=(((x6431*x6435*x6440))+(((9.07952)*x6435))+(((1.728e-5)*x6449))+(((-1.728e-5)*cj4*x6437))+(((-1.0)*x6438*x6453))+((x6447*x6448))+(((1.872e-5)*x6433*x6447))+(((-1.0)*x6432*x6438))+(((-1.0)*cj3*x6437*x6448))+(((-1.872e-5)*x6454))+((cj3*x6437*x6442))+(((-1.0)*x6435*x6440))+(((-1.0)*x6442*x6447))+(((1.728e-5)*sj4*x6434)));
op[4]=x6459;
op[5]=x6457;
op[6]=x6459;
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

j1evalpoly[0]=((((-2.92)*(cj3*cj3)*(sj4*sj4)))+(((4.0)*pz*(cj4*cj4)))+(((-2.92)*(cj4*cj4)))+(((htj1*htj1)*(((((4.0)*pz*(cj4*cj4)))+(((-4.68e-6)*cj0*cj3*r12*(cj4*cj4)))+(((-2.26988)*cj3*r02*sj0*sj4))+(((4.68e-6)*cj3*r02*sj0*(cj4*cj4)))+(((-4.32e-6)*cj3*r22*sj4))+(((4.32e-6)*cj4*r02*sj0))+(((-8.76)*(cj3*cj3)*(sj4*sj4)))+(((-8.76)*(cj4*cj4)))+(((-4.68e-6)*cj0*cj3*r12*(sj4*sj4)))+(((4.68e-6)*cj3*r02*sj0*(sj4*sj4)))+(((-4.32e-6)*cj0*cj4*r12))+(((-2.26988)*cj4*r22))+(((4.0)*pz*(cj3*cj3)*(sj4*sj4)))+(((-4.68e-6)*cj4*r22*sj4*(cj3*cj3)))+(((4.68e-6)*cj4*r22*sj4))+(((2.26988)*cj0*cj3*r12*sj4))))))+(((-4.68e-6)*cj0*cj3*r12*(cj4*cj4)))+(((-2.26988)*cj3*r02*sj0*sj4))+(((4.68e-6)*cj3*r02*sj0*(cj4*cj4)))+(((-4.32e-6)*cj3*r22*sj4))+(((4.32e-6)*cj4*r02*sj0))+(((-4.68e-6)*cj0*cj3*r12*(sj4*sj4)))+(((4.68e-6)*cj3*r02*sj0*(sj4*sj4)))+(((-4.32e-6)*cj0*cj4*r12))+(((-2.26988)*cj4*r22))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-2.92)*(cj3*cj3)*(sj4*sj4)))+(((-2.92)*(cj4*cj4)))+(((-4.68e-6)*cj3*r02*sj0*(sj4*sj4)))+(((-4.68e-6)*cj4*r22*sj4))+(((-4.0)*pz*(cj4*cj4)))+(((-4.68e-6)*cj3*r02*sj0*(cj4*cj4)))+(((-4.0)*pz*(cj3*cj3)*(sj4*sj4)))+(((4.32e-6)*cj0*cj4*r12))+(((-2.26988)*cj0*cj3*r12*sj4))+(((2.26988)*cj4*r22))+(((-4.32e-6)*cj4*r02*sj0))+(((4.68e-6)*cj0*cj3*r12*(sj4*sj4)))+(((4.32e-6)*cj3*r22*sj4))+(((4.68e-6)*cj4*r22*sj4*(cj3*cj3)))+(((4.68e-6)*cj0*cj3*r12*(cj4*cj4)))+(((2.26988)*cj3*r02*sj0*sj4))))))+(((htj1*htj1*htj1*htj1*htj1)*(((((-8.0)*px*sj0*(cj3*cj3)*(sj4*sj4)))+(((-4.53976)*cj0*cj4*r12))+(((9.36e-6)*cj0*cj4*r12*sj4))+(((4.53976)*cj4*r02*sj0))+(((-9.36e-6)*cj4*r02*sj0*sj4))+(((9.36e-6)*cj3*r22*(sj4*sj4)))+(((-8.0)*px*sj0*(cj4*cj4)))+(((9.36e-6)*cj3*r22*(cj4*cj4)))+(((8.0)*cj0*py*(cj4*cj4)))+(((-4.53976)*cj3*r22*sj4))+(((8.0)*cj0*py*(cj3*cj3)*(sj4*sj4)))+(((8.64e-6)*cj3*r02*sj0*sj4))+(((9.36e-6)*cj4*r02*sj0*sj4*(cj3*cj3)))+(((8.64e-6)*cj4*r22))+(((-9.36e-6)*cj0*cj4*r12*sj4*(cj3*cj3)))+(((-8.64e-6)*cj0*cj3*r12*sj4))))))+(((htj1*htj1*htj1)*(((((-16.0)*px*sj0*(cj4*cj4)))+(((-1.872e-5)*cj0*cj4*r12*sj4*(cj3*cj3)))+(((-9.07952)*cj0*cj4*r12))+(((1.872e-5)*cj4*r02*sj0*sj4*(cj3*cj3)))+(((1.872e-5)*cj3*r22*(sj4*sj4)))+(((-1.728e-5)*cj0*cj3*r12*sj4))+(((-9.07952)*cj3*r22*sj4))+(((-16.0)*px*sj0*(cj3*cj3)*(sj4*sj4)))+(((9.07952)*cj4*r02*sj0))+(((16.0)*cj0*py*(cj3*cj3)*(sj4*sj4)))+(((1.872e-5)*cj0*cj4*r12*sj4))+(((1.872e-5)*cj3*r22*(cj4*cj4)))+(((1.728e-5)*cj4*r22))+(((1.728e-5)*cj3*r02*sj0*sj4))+(((16.0)*cj0*py*(cj4*cj4)))+(((-1.872e-5)*cj4*r02*sj0*sj4))))))+((htj1*(((((-8.0)*px*sj0*(cj3*cj3)*(sj4*sj4)))+(((-4.53976)*cj0*cj4*r12))+(((9.36e-6)*cj0*cj4*r12*sj4))+(((4.53976)*cj4*r02*sj0))+(((-9.36e-6)*cj4*r02*sj0*sj4))+(((9.36e-6)*cj3*r22*(sj4*sj4)))+(((-8.0)*px*sj0*(cj4*cj4)))+(((9.36e-6)*cj3*r22*(cj4*cj4)))+(((8.0)*cj0*py*(cj4*cj4)))+(((-4.53976)*cj3*r22*sj4))+(((8.0)*cj0*py*(cj3*cj3)*(sj4*sj4)))+(((8.64e-6)*cj3*r02*sj0*sj4))+(((9.36e-6)*cj4*r02*sj0*sj4*(cj3*cj3)))+(((8.64e-6)*cj4*r22))+(((-9.36e-6)*cj0*cj4*r12*sj4*(cj3*cj3)))+(((-8.64e-6)*cj0*cj3*r12*sj4))))))+(((4.0)*pz*(cj3*cj3)*(sj4*sj4)))+(((-4.68e-6)*cj4*r22*sj4*(cj3*cj3)))+(((4.68e-6)*cj4*r22*sj4))+(((htj1*htj1*htj1*htj1)*(((((-4.68e-6)*cj3*r02*sj0*(sj4*sj4)))+(((-4.68e-6)*cj4*r22*sj4))+(((-4.0)*pz*(cj4*cj4)))+(((-4.68e-6)*cj3*r02*sj0*(cj4*cj4)))+(((-4.0)*pz*(cj3*cj3)*(sj4*sj4)))+(((4.32e-6)*cj0*cj4*r12))+(((-2.26988)*cj0*cj3*r12*sj4))+(((-8.76)*(cj3*cj3)*(sj4*sj4)))+(((2.26988)*cj4*r22))+(((-8.76)*(cj4*cj4)))+(((-4.32e-6)*cj4*r02*sj0))+(((4.68e-6)*cj0*cj3*r12*(sj4*sj4)))+(((4.32e-6)*cj3*r22*sj4))+(((4.68e-6)*cj4*r22*sj4*(cj3*cj3)))+(((4.68e-6)*cj0*cj3*r12*(cj4*cj4)))+(((2.26988)*cj3*r02*sj0*sj4))))))+(((2.26988)*cj0*cj3*r12*sj4)));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[2];
IkReal x6460=((-1.0)*r21);
CheckValue<IkReal> x6463 = IKatan2WithCheck(IkReal(x6460),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6463.valid){
continue;
}
IkReal x6461=((1.0)*(x6463.value));
IkReal x6462=x6147;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x6461)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x6461)));
IkReal gconst10=(x6460*x6462);
IkReal gconst11=((1.0)*r20*x6462);
IkReal x6464=cj3*cj3;
IkReal x6465=cj4*cj4;
IkReal x6466=(x6464+x6465+(((-1.0)*x6464*x6465)));
j2eval[0]=x6466;
j2eval[1]=IKsign(x6466);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x6467=((-1.0)*r21);
CheckValue<IkReal> x6470 = IKatan2WithCheck(IkReal(x6467),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6470.valid){
continue;
}
IkReal x6468=((1.0)*(x6470.value));
IkReal x6469=x6147;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x6468)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x6468)));
IkReal gconst10=(x6467*x6469);
IkReal gconst11=((1.0)*r20*x6469);
IkReal x6471=(cj3*sj4);
j2eval[0]=(cj4+(((-525435.185185185)*x6471))+(((1.08333333333333)*cj3)));
j2eval[1]=IKsign(((((1.17e-6)*cj3))+(((1.08e-6)*cj4))+(((-0.56747)*x6471))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x6472=((-1.0)*r21);
CheckValue<IkReal> x6475 = IKatan2WithCheck(IkReal(x6472),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6475.valid){
continue;
}
IkReal x6473=((1.0)*(x6475.value));
IkReal x6474=x6147;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x6473)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x6473)));
IkReal gconst10=(x6472*x6474);
IkReal gconst11=((1.0)*r20*x6474);
IkReal x6476=cj3*cj3;
IkReal x6477=(cj4*sj4);
IkReal x6478=(cj3*sj4);
j2eval[0]=((((-525435.185185185)*cj4))+(((1.08333333333333)*x6477))+(((-1.08333333333333)*x6476*x6477))+(((-1.0)*x6478)));
j2eval[1]=IKsign(((((-1.08e-6)*x6478))+(((-0.56747)*cj4))+(((-1.17e-6)*x6476*x6477))+(((1.17e-6)*x6477))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6479=((3.35381986224151e-6)*cj1);
IkReal x6480=(px*sj0);
IkReal x6481=((1.76221132708977)*sj1);
IkReal x6482=((1.76221132708977)*cj1);
IkReal x6483=((3.35381986224151e-6)*sj1);
IkReal x6484=(cj0*py);
IkReal x6485=(sj1*x6484);
if( IKabs(((2.4482884994363e-6)+((pz*x6481))+((x6480*x6483))+((x6480*x6482))+(((-1.0)*x6482*x6484))+(((-1.0)*pz*x6479))+(((-1.0)*x6483*x6484)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.28641426877553)+((x6479*x6480))+(((-1.0)*x6480*x6481))+((pz*x6483))+((pz*x6482))+(((-1.0)*x6479*x6484))+((x6481*x6484)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.4482884994363e-6)+((pz*x6481))+((x6480*x6483))+((x6480*x6482))+(((-1.0)*x6482*x6484))+(((-1.0)*pz*x6479))+(((-1.0)*x6483*x6484))))+IKsqr(((-1.28641426877553)+((x6479*x6480))+(((-1.0)*x6480*x6481))+((pz*x6483))+((pz*x6482))+(((-1.0)*x6479*x6484))+((x6481*x6484))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((2.4482884994363e-6)+((pz*x6481))+((x6480*x6483))+((x6480*x6482))+(((-1.0)*x6482*x6484))+(((-1.0)*pz*x6479))+(((-1.0)*x6483*x6484))), ((-1.28641426877553)+((x6479*x6480))+(((-1.0)*x6480*x6481))+((pz*x6483))+((pz*x6482))+(((-1.0)*x6479*x6484))+((x6481*x6484))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x6486=IKcos(j2);
IkReal x6487=IKsin(j2);
IkReal x6488=(gconst10*sj1);
IkReal x6489=(cj1*sj0);
IkReal x6490=(gconst11*sj1);
IkReal x6491=(r01*sj0);
IkReal x6492=((1.0)*r21);
IkReal x6493=(r00*sj0);
IkReal x6494=((1.0)*gconst10);
IkReal x6495=((1.0)*cj1);
IkReal x6496=(cj1*gconst11);
IkReal x6497=(cj0*r10);
IkReal x6498=(cj1*gconst10);
IkReal x6499=(cj0*py);
IkReal x6500=(cj0*r11);
IkReal x6501=((1.0)*x6487);
IkReal x6502=((1.0)*x6500);
IkReal x6503=((1.0)*gconst11*x6497);
evalcond[0]=((((-1.08e-6)*x6486))+(((-1.0)*x6495*x6499))+(((-0.56746883)*x6487))+((px*x6489))+((pz*sj1)));
evalcond[1]=((0.73)+(((-1.08e-6)*x6487))+(((-1.0)*pz*x6495))+((px*sj0*sj1))+(((0.56746883)*x6486))+(((-1.0)*sj1*x6499)));
evalcond[2]=(((gconst11*r01*x6489))+(((-1.0)*x6501))+((r20*x6488))+(((-1.0)*cj1*x6494*x6497))+(((-1.0)*gconst11*x6495*x6500))+((r21*x6490))+((gconst10*r00*x6489)));
evalcond[3]=((((-1.0)*x6488*x6497))+(((-1.0)*cj1*r20*x6494))+x6486+(((-1.0)*x6490*x6502))+(((-1.0)*x6492*x6496))+((x6490*x6491))+((x6488*x6493)));
evalcond[4]=((((-1.0)*x6486))+(((-1.0)*x6488*x6492))+((x6498*x6500))+(((-1.0)*r01*x6489*x6494))+((r20*x6490))+((gconst11*r00*x6489))+(((-1.0)*gconst11*x6495*x6497)));
evalcond[5]=((((-1.0)*x6501))+((x6488*x6500))+(((-1.0)*x6488*x6491))+(((-1.0)*gconst11*r20*x6495))+((x6490*x6493))+((r21*x6498))+(((-1.0)*x6490*x6497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6504=(cj1*pz);
IkReal x6505=(cj0*py);
IkReal x6506=((1.76220406051003)*sj1);
IkReal x6507=((3.35379220296043e-6)*sj1);
IkReal x6508=(px*sj0);
IkReal x6509=((3.35379220296043e-6)*cj1);
IkReal x6510=((1.76220406051003)*x6508);
if( IKabs(((2.44826830816111e-6)+((x6507*x6508))+(((-1.76220406051003)*cj1*x6505))+((pz*x6506))+(((-3.35379220296043e-6)*x6504))+((cj1*x6510))+(((-1.0)*x6505*x6507)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.28640896417232)+(((1.76220406051003)*x6504))+((pz*x6507))+((x6508*x6509))+(((-1.0)*x6506*x6508))+((x6505*x6506))+(((-1.0)*x6505*x6509)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.44826830816111e-6)+((x6507*x6508))+(((-1.76220406051003)*cj1*x6505))+((pz*x6506))+(((-3.35379220296043e-6)*x6504))+((cj1*x6510))+(((-1.0)*x6505*x6507))))+IKsqr(((-1.28640896417232)+(((1.76220406051003)*x6504))+((pz*x6507))+((x6508*x6509))+(((-1.0)*x6506*x6508))+((x6505*x6506))+(((-1.0)*x6505*x6509))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((2.44826830816111e-6)+((x6507*x6508))+(((-1.76220406051003)*cj1*x6505))+((pz*x6506))+(((-3.35379220296043e-6)*x6504))+((cj1*x6510))+(((-1.0)*x6505*x6507))), ((-1.28640896417232)+(((1.76220406051003)*x6504))+((pz*x6507))+((x6508*x6509))+(((-1.0)*x6506*x6508))+((x6505*x6506))+(((-1.0)*x6505*x6509))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x6511=IKcos(j2);
IkReal x6512=IKsin(j2);
IkReal x6513=((1.0)*cj1);
IkReal x6514=(gconst10*r20);
IkReal x6515=(cj1*sj0);
IkReal x6516=(gconst11*sj1);
IkReal x6517=(r01*sj0);
IkReal x6518=((1.0)*sj1);
IkReal x6519=(cj0*r11);
IkReal x6520=(gconst10*r21);
IkReal x6521=(r00*sj0);
IkReal x6522=(gconst10*sj1);
IkReal x6523=(cj0*py);
IkReal x6524=((1.0)*x6511);
IkReal x6525=(cj0*gconst11*r10);
IkReal x6526=(cj0*gconst10*r10);
evalcond[0]=((((-0.56747117)*x6512))+(((-1.08e-6)*x6511))+((pz*sj1))+(((-1.0)*x6513*x6523))+((px*x6515)));
evalcond[1]=((0.73)+(((-1.08e-6)*x6512))+((px*sj0*sj1))+(((-1.0)*x6518*x6523))+(((0.56747117)*x6511))+(((-1.0)*pz*x6513)));
evalcond[2]=((((-1.0)*gconst11*x6513*x6519))+((gconst11*r01*x6515))+x6512+((sj1*x6514))+((r21*x6516))+((gconst10*r00*x6515))+(((-1.0)*x6513*x6526)));
evalcond[3]=(((r20*x6516))+(((-1.0)*x6518*x6520))+(((-1.0)*x6524))+((cj1*gconst10*x6519))+((gconst11*r00*x6515))+(((-1.0)*x6513*x6525))+(((-1.0)*gconst10*x6513*x6517)));
evalcond[4]=((((-1.0)*gconst10*x6517*x6518))+(((-1.0)*cj0*r10*x6516))+((cj1*x6520))+(((-1.0)*gconst11*r20*x6513))+((x6516*x6521))+((x6519*x6522))+(((-1.0)*x6512)));
evalcond[5]=(((x6521*x6522))+(((-1.0)*gconst11*r21*x6513))+(((-1.0)*x6518*x6526))+(((-1.0)*x6524))+(((-1.0)*x6513*x6514))+(((-1.0)*x6516*x6519))+((x6516*x6517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6527=((3.35381986224151e-6)*cj1);
IkReal x6528=(px*sj0);
IkReal x6529=((1.76221132708977)*sj1);
IkReal x6530=((1.76221132708977)*cj1);
IkReal x6531=((3.35381986224151e-6)*sj1);
IkReal x6532=(cj0*py);
IkReal x6533=(sj1*x6532);
if( IKabs(((2.4482884994363e-6)+((pz*x6529))+((x6528*x6531))+((x6528*x6530))+(((-1.0)*pz*x6527))+(((-1.0)*x6531*x6532))+(((-1.0)*x6530*x6532)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.28641426877553)+((x6527*x6528))+(((-1.0)*x6528*x6529))+((pz*x6531))+((pz*x6530))+((x6529*x6532))+(((-1.0)*x6527*x6532)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.4482884994363e-6)+((pz*x6529))+((x6528*x6531))+((x6528*x6530))+(((-1.0)*pz*x6527))+(((-1.0)*x6531*x6532))+(((-1.0)*x6530*x6532))))+IKsqr(((-1.28641426877553)+((x6527*x6528))+(((-1.0)*x6528*x6529))+((pz*x6531))+((pz*x6530))+((x6529*x6532))+(((-1.0)*x6527*x6532))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((2.4482884994363e-6)+((pz*x6529))+((x6528*x6531))+((x6528*x6530))+(((-1.0)*pz*x6527))+(((-1.0)*x6531*x6532))+(((-1.0)*x6530*x6532))), ((-1.28641426877553)+((x6527*x6528))+(((-1.0)*x6528*x6529))+((pz*x6531))+((pz*x6530))+((x6529*x6532))+(((-1.0)*x6527*x6532))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x6534=IKcos(j2);
IkReal x6535=IKsin(j2);
IkReal x6536=(cj1*sj0);
IkReal x6537=(gconst11*sj1);
IkReal x6538=(r01*sj0);
IkReal x6539=((1.0)*gconst10);
IkReal x6540=(cj1*r20);
IkReal x6541=(cj1*gconst11);
IkReal x6542=((1.0)*cj1);
IkReal x6543=(r00*sj0);
IkReal x6544=(gconst10*sj1);
IkReal x6545=(cj0*r10);
IkReal x6546=(cj1*gconst10);
IkReal x6547=(cj0*py);
IkReal x6548=(cj0*r11);
IkReal x6549=((1.0)*x6548);
IkReal x6550=((1.0)*gconst11*x6545);
evalcond[0]=((((-1.0)*x6542*x6547))+((px*x6536))+(((-0.56746883)*x6535))+(((-1.08e-6)*x6534))+((pz*sj1)));
evalcond[1]=((0.73)+(((-1.0)*pz*x6542))+(((0.56746883)*x6534))+((px*sj0*sj1))+(((-1.0)*sj1*x6547))+(((-1.08e-6)*x6535)));
evalcond[2]=(((gconst11*r00*x6536))+(((-1.0)*x6541*x6545))+x6534+(((-1.0)*r01*x6536*x6539))+((x6546*x6548))+((r20*x6537))+(((-1.0)*r21*sj1*x6539)));
evalcond[3]=((((-1.0)*x6537*x6545))+((x6544*x6548))+((x6537*x6543))+x6535+(((-1.0)*sj1*x6538*x6539))+(((-1.0)*gconst11*x6540))+((r21*x6546)));
evalcond[4]=(((r20*x6544))+((r21*x6537))+(((-1.0)*x6541*x6549))+((gconst10*r00*x6536))+(((-1.0)*x6535))+((gconst11*r01*x6536))+(((-1.0)*cj1*x6539*x6545)));
evalcond[5]=((((-1.0)*r21*x6541))+(((-1.0)*sj1*x6539*x6545))+((x6543*x6544))+x6534+(((-1.0)*x6537*x6549))+(((-1.0)*x6539*x6540))+((x6537*x6538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6551=(cj1*pz);
IkReal x6552=(cj0*py);
IkReal x6553=((1.76220406051003)*sj1);
IkReal x6554=((3.35379220296043e-6)*sj1);
IkReal x6555=(px*sj0);
IkReal x6556=((3.35379220296043e-6)*cj1);
IkReal x6557=((1.76220406051003)*x6555);
if( IKabs(((2.44826830816111e-6)+(((-1.0)*x6552*x6554))+(((-1.76220406051003)*cj1*x6552))+(((-3.35379220296043e-6)*x6551))+((cj1*x6557))+((x6554*x6555))+((pz*x6553)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.28640896417232)+(((-1.0)*x6552*x6556))+(((-1.0)*x6553*x6555))+((x6552*x6553))+(((1.76220406051003)*x6551))+((pz*x6554))+((x6555*x6556)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.44826830816111e-6)+(((-1.0)*x6552*x6554))+(((-1.76220406051003)*cj1*x6552))+(((-3.35379220296043e-6)*x6551))+((cj1*x6557))+((x6554*x6555))+((pz*x6553))))+IKsqr(((-1.28640896417232)+(((-1.0)*x6552*x6556))+(((-1.0)*x6553*x6555))+((x6552*x6553))+(((1.76220406051003)*x6551))+((pz*x6554))+((x6555*x6556))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((2.44826830816111e-6)+(((-1.0)*x6552*x6554))+(((-1.76220406051003)*cj1*x6552))+(((-3.35379220296043e-6)*x6551))+((cj1*x6557))+((x6554*x6555))+((pz*x6553))), ((-1.28640896417232)+(((-1.0)*x6552*x6556))+(((-1.0)*x6553*x6555))+((x6552*x6553))+(((1.76220406051003)*x6551))+((pz*x6554))+((x6555*x6556))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x6558=IKcos(j2);
IkReal x6559=IKsin(j2);
IkReal x6560=((1.0)*cj1);
IkReal x6561=(gconst10*r20);
IkReal x6562=(cj1*sj0);
IkReal x6563=(gconst11*sj1);
IkReal x6564=(r01*sj0);
IkReal x6565=((1.0)*sj1);
IkReal x6566=(cj0*r11);
IkReal x6567=(gconst10*r21);
IkReal x6568=(r00*sj0);
IkReal x6569=(gconst10*sj1);
IkReal x6570=(cj0*py);
IkReal x6571=(cj0*gconst11*r10);
IkReal x6572=(cj0*gconst10*r10);
evalcond[0]=((((-1.08e-6)*x6558))+(((-1.0)*x6560*x6570))+((pz*sj1))+(((-0.56747117)*x6559))+((px*x6562)));
evalcond[1]=((0.73)+(((-1.0)*x6565*x6570))+(((-1.0)*pz*x6560))+((px*sj0*sj1))+(((-1.08e-6)*x6559))+(((0.56747117)*x6558)));
evalcond[2]=(((gconst11*r01*x6562))+x6559+((r21*x6563))+((sj1*x6561))+((gconst10*r00*x6562))+(((-1.0)*gconst11*x6560*x6566))+(((-1.0)*x6560*x6572)));
evalcond[3]=((((-1.0)*x6565*x6567))+((cj1*gconst10*x6566))+(((-1.0)*gconst10*x6560*x6564))+((r20*x6563))+x6558+(((-1.0)*x6560*x6571))+((gconst11*r00*x6562)));
evalcond[4]=(((x6563*x6568))+(((-1.0)*gconst10*x6564*x6565))+x6559+(((-1.0)*cj0*r10*x6563))+((x6566*x6569))+((cj1*x6567))+(((-1.0)*gconst11*r20*x6560)));
evalcond[5]=((((-1.0)*x6565*x6572))+((x6568*x6569))+((x6563*x6564))+(((-1.0)*gconst11*r21*x6560))+(((-1.0)*x6563*x6566))+(((-1.0)*x6558))+(((-1.0)*x6560*x6561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6573=(cj1*r22);
IkReal x6574=((1.17e-6)*sj4);
IkReal x6575=(cj3*sj0);
IkReal x6576=((1.0)*sj4);
IkReal x6577=(cj1*px);
IkReal x6578=(r02*sj1);
IkReal x6579=((1.17e-6)*cj4);
IkReal x6580=(cj3*sj1);
IkReal x6581=(cj0*r12);
IkReal x6582=(cj3*sj4);
IkReal x6583=((1.0)*cj4);
IkReal x6584=(cj0*cj1*py);
CheckValue<IkReal> x6585=IKPowWithIntegerCheck(IKsign((((cj4*x6574))+(((-1.0)*cj4*x6574*(cj3*cj3)))+(((-0.56747)*cj4))+(((-1.08e-6)*x6582)))),-1);
if(!x6585.valid){
continue;
}
CheckValue<IkReal> x6586 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*x6577*x6583))+(((-1.0)*x6575*x6578*x6579))+(((1.08e-6)*sj1*x6581))+(((1.08e-6)*x6573))+((cj3*x6573*x6579))+(((-1.0)*pz*sj1*x6583))+(((-1.08e-6)*sj0*x6578))+((cj4*x6584))+((x6579*x6580*x6581)))),IkReal((((sj1*x6574*x6581))+(((-0.56747)*x6573))+((x6573*x6574))+(((-1.0)*x6575*x6576*x6577))+((x6582*x6584))+(((0.56747)*sj0*x6578))+(((-1.0)*sj0*x6574*x6578))+(((-0.56747)*sj1*x6581))+(((-1.0)*pz*x6576*x6580)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6586.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6585.value)))+(x6586.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x6587=IKcos(j2);
IkReal x6588=IKsin(j2);
IkReal x6589=(cj1*sj0);
IkReal x6590=(cj3*cj4);
IkReal x6591=(gconst11*sj1);
IkReal x6592=(r01*sj0);
IkReal x6593=((1.0)*cj1);
IkReal x6594=(gconst10*r20);
IkReal x6595=(cj3*sj4);
IkReal x6596=(cj0*r11);
IkReal x6597=((1.0)*gconst10);
IkReal x6598=(cj0*r10);
IkReal x6599=(r00*sj0);
IkReal x6600=(gconst10*sj1);
IkReal x6601=(cj1*gconst10);
IkReal x6602=(sj0*sj1);
IkReal x6603=(cj0*py);
IkReal x6604=((1.0)*sj1);
IkReal x6605=(cj0*r12);
IkReal x6606=((1.0)*x6588);
IkReal x6607=((1.17e-6)*x6588);
IkReal x6608=((1.0)*x6587);
IkReal x6609=(sj4*x6587);
IkReal x6610=((1.0)*gconst11*x6598);
evalcond[0]=(((r02*x6589))+(((-1.0)*x6595*x6608))+(((-1.0)*x6593*x6605))+((r22*sj1))+(((-1.0)*cj4*x6606)));
evalcond[1]=((((-1.0)*x6595*x6606))+(((-1.0)*x6604*x6605))+((cj4*x6587))+((r02*x6602))+(((-1.0)*r22*x6593)));
evalcond[2]=((((-1.0)*x6593*x6603))+(((-1.17e-6)*x6587*x6590))+(((-0.56747)*x6588))+((px*x6589))+((sj4*x6607))+((pz*sj1))+(((-1.08e-6)*x6587)));
evalcond[3]=((0.73)+(((-1.17e-6)*x6609))+((px*x6602))+(((-1.0)*pz*x6593))+(((-1.0)*x6603*x6604))+(((0.56747)*x6587))+(((-1.08e-6)*x6588))+(((-1.0)*x6590*x6607)));
evalcond[4]=((((-1.0)*r21*sj1*x6597))+(((-1.0)*r01*x6589*x6597))+(((-1.0)*sj3*x6608))+((gconst11*r00*x6589))+((r20*x6591))+((x6596*x6601))+(((-1.0)*gconst11*x6593*x6598)));
evalcond[5]=((((-1.0)*gconst11*r20*x6593))+(((-1.0)*sj3*x6606))+((x6591*x6599))+((r21*x6601))+(((-1.0)*sj1*x6592*x6597))+(((-1.0)*x6591*x6598))+((x6596*x6600)));
evalcond[6]=(((gconst11*r01*x6589))+((sj1*x6594))+(((-1.0)*gconst10*x6593*x6598))+((r21*x6591))+((gconst10*r00*x6589))+((x6587*x6590))+(((-1.0)*sj4*x6606))+(((-1.0)*gconst11*x6593*x6596)));
evalcond[7]=((((-1.0)*sj1*x6597*x6598))+((x6588*x6590))+x6609+((x6599*x6600))+((x6591*x6592))+(((-1.0)*x6593*x6594))+(((-1.0)*x6591*x6596))+(((-1.0)*gconst11*r21*x6593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6611=(r22*sj1);
IkReal x6612=((1.17e-6)*sj4);
IkReal x6613=(pz*sj1);
IkReal x6614=(cj0*cj1);
IkReal x6615=((1.17e-6)*cj3);
IkReal x6616=(cj3*sj4);
IkReal x6617=(cj1*px*sj0);
IkReal x6618=((1.0)*x6616);
IkReal x6619=(cj1*r02*sj0);
CheckValue<IkReal> x6620 = IKatan2WithCheck(IkReal(((((-1.0)*x6613*x6618))+(((1.08e-6)*x6619))+(((1.08e-6)*x6611))+((py*x6614*x6616))+((cj4*x6615*x6619))+((cj4*x6611*x6615))+(((-1.0)*x6617*x6618))+(((-1.0)*cj4*r12*x6614*x6615))+(((-1.08e-6)*r12*x6614)))),IkReal(((((-1.0)*cj4*py*x6614))+((x6612*x6619))+(((-0.56747)*x6611))+(((-0.56747)*x6619))+((x6611*x6612))+(((-1.0)*r12*x6612*x6614))+((cj4*x6613))+((cj4*x6617))+(((0.56747)*r12*x6614)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6620.valid){
continue;
}
CheckValue<IkReal> x6621=IKPowWithIntegerCheck(IKsign(((((-0.56747)*x6616))+x6615+(((1.08e-6)*cj4)))),-1);
if(!x6621.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x6620.value)+(((1.5707963267949)*(x6621.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x6622=IKcos(j2);
IkReal x6623=IKsin(j2);
IkReal x6624=(cj1*sj0);
IkReal x6625=(cj3*cj4);
IkReal x6626=(gconst11*sj1);
IkReal x6627=(r01*sj0);
IkReal x6628=((1.0)*cj1);
IkReal x6629=(gconst10*r20);
IkReal x6630=(cj3*sj4);
IkReal x6631=(cj0*r11);
IkReal x6632=((1.0)*gconst10);
IkReal x6633=(cj0*r10);
IkReal x6634=(r00*sj0);
IkReal x6635=(gconst10*sj1);
IkReal x6636=(cj1*gconst10);
IkReal x6637=(sj0*sj1);
IkReal x6638=(cj0*py);
IkReal x6639=((1.0)*sj1);
IkReal x6640=(cj0*r12);
IkReal x6641=((1.0)*x6623);
IkReal x6642=((1.17e-6)*x6623);
IkReal x6643=((1.0)*x6622);
IkReal x6644=(sj4*x6622);
IkReal x6645=((1.0)*gconst11*x6633);
evalcond[0]=(((r02*x6624))+(((-1.0)*cj4*x6641))+((r22*sj1))+(((-1.0)*x6630*x6643))+(((-1.0)*x6628*x6640)));
evalcond[1]=((((-1.0)*x6639*x6640))+(((-1.0)*r22*x6628))+(((-1.0)*x6630*x6641))+((cj4*x6622))+((r02*x6637)));
evalcond[2]=((((-1.0)*x6628*x6638))+(((-0.56747)*x6623))+(((-1.17e-6)*x6622*x6625))+((pz*sj1))+((sj4*x6642))+((px*x6624))+(((-1.08e-6)*x6622)));
evalcond[3]=((0.73)+(((-1.0)*x6638*x6639))+(((-1.17e-6)*x6644))+(((-1.0)*x6625*x6642))+(((-1.0)*pz*x6628))+(((0.56747)*x6622))+(((-1.08e-6)*x6623))+((px*x6637)));
evalcond[4]=(((gconst11*r00*x6624))+(((-1.0)*sj3*x6643))+(((-1.0)*r21*sj1*x6632))+(((-1.0)*r01*x6624*x6632))+((x6631*x6636))+((r20*x6626))+(((-1.0)*gconst11*x6628*x6633)));
evalcond[5]=((((-1.0)*gconst11*r20*x6628))+((x6626*x6634))+((r21*x6636))+(((-1.0)*sj3*x6641))+(((-1.0)*x6626*x6633))+(((-1.0)*sj1*x6627*x6632))+((x6631*x6635)));
evalcond[6]=((((-1.0)*sj4*x6641))+((gconst11*r01*x6624))+(((-1.0)*gconst10*x6628*x6633))+((sj1*x6629))+((gconst10*r00*x6624))+((x6622*x6625))+((r21*x6626))+(((-1.0)*gconst11*x6628*x6631)));
evalcond[7]=(((x6626*x6627))+x6644+(((-1.0)*x6628*x6629))+(((-1.0)*x6626*x6631))+(((-1.0)*sj1*x6632*x6633))+(((-1.0)*gconst11*r21*x6628))+((x6634*x6635))+((x6623*x6625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6646=cj3*cj3;
IkReal x6647=cj4*cj4;
IkReal x6648=(cj0*r12);
IkReal x6649=(cj1*cj4);
IkReal x6650=(r22*sj1);
IkReal x6651=(cj3*sj4);
IkReal x6652=(r02*sj0);
IkReal x6653=((1.0)*sj1);
IkReal x6654=((1.0)*cj1*x6651);
CheckValue<IkReal> x6655=IKPowWithIntegerCheck(IKsign((x6646+x6647+(((-1.0)*x6646*x6647)))),-1);
if(!x6655.valid){
continue;
}
CheckValue<IkReal> x6656 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x6654))+(((-1.0)*x6648*x6651*x6653))+((sj1*x6651*x6652))+((cj4*x6650))+(((-1.0)*x6648*x6649))+((x6649*x6652)))),IkReal(((((-1.0)*cj4*x6652*x6653))+(((-1.0)*x6648*x6654))+((r22*x6649))+((cj4*sj1*x6648))+((cj1*x6651*x6652))+((x6650*x6651)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6656.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6655.value)))+(x6656.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x6657=IKcos(j2);
IkReal x6658=IKsin(j2);
IkReal x6659=(cj1*sj0);
IkReal x6660=(cj3*cj4);
IkReal x6661=(gconst11*sj1);
IkReal x6662=(r01*sj0);
IkReal x6663=((1.0)*cj1);
IkReal x6664=(gconst10*r20);
IkReal x6665=(cj3*sj4);
IkReal x6666=(cj0*r11);
IkReal x6667=((1.0)*gconst10);
IkReal x6668=(cj0*r10);
IkReal x6669=(r00*sj0);
IkReal x6670=(gconst10*sj1);
IkReal x6671=(cj1*gconst10);
IkReal x6672=(sj0*sj1);
IkReal x6673=(cj0*py);
IkReal x6674=((1.0)*sj1);
IkReal x6675=(cj0*r12);
IkReal x6676=((1.0)*x6658);
IkReal x6677=((1.17e-6)*x6658);
IkReal x6678=((1.0)*x6657);
IkReal x6679=(sj4*x6657);
IkReal x6680=((1.0)*gconst11*x6668);
evalcond[0]=(((r22*sj1))+((r02*x6659))+(((-1.0)*x6665*x6678))+(((-1.0)*x6663*x6675))+(((-1.0)*cj4*x6676)));
evalcond[1]=(((r02*x6672))+((cj4*x6657))+(((-1.0)*x6665*x6676))+(((-1.0)*x6674*x6675))+(((-1.0)*r22*x6663)));
evalcond[2]=((((-1.17e-6)*x6657*x6660))+((sj4*x6677))+(((-0.56747)*x6658))+((px*x6659))+(((-1.08e-6)*x6657))+(((-1.0)*x6663*x6673))+((pz*sj1)));
evalcond[3]=((0.73)+(((-1.0)*x6673*x6674))+(((0.56747)*x6657))+(((-1.0)*pz*x6663))+(((-1.0)*x6660*x6677))+(((-1.08e-6)*x6658))+(((-1.17e-6)*x6679))+((px*x6672)));
evalcond[4]=((((-1.0)*r01*x6659*x6667))+((r20*x6661))+(((-1.0)*gconst11*x6663*x6668))+((x6666*x6671))+(((-1.0)*sj3*x6678))+(((-1.0)*r21*sj1*x6667))+((gconst11*r00*x6659)));
evalcond[5]=(((x6666*x6670))+(((-1.0)*x6661*x6668))+(((-1.0)*sj3*x6676))+(((-1.0)*gconst11*r20*x6663))+((r21*x6671))+((x6661*x6669))+(((-1.0)*sj1*x6662*x6667)));
evalcond[6]=(((gconst11*r01*x6659))+(((-1.0)*gconst11*x6663*x6666))+((gconst10*r00*x6659))+(((-1.0)*sj4*x6676))+((sj1*x6664))+((x6657*x6660))+((r21*x6661))+(((-1.0)*gconst10*x6663*x6668)));
evalcond[7]=(x6679+(((-1.0)*sj1*x6667*x6668))+((x6669*x6670))+(((-1.0)*x6661*x6666))+((x6658*x6660))+(((-1.0)*x6663*x6664))+(((-1.0)*gconst11*r21*x6663))+((x6661*x6662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6681=((100000000.0)*sj3*sj4);
IkReal x6682=((117.0)*cj4*sj3);
CheckValue<IkReal> x6683=IKPowWithIntegerCheck(IKsign(rxp2_2),-1);
if(!x6683.valid){
continue;
}
CheckValue<IkReal> x6684 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6682))+((px*x6681)))),IkReal((((r12*x6682))+(((-1.0)*py*x6681)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6684.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6683.value)))+(x6684.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6685=IKcos(j0);
IkReal x6686=IKsin(j0);
IkReal x6687=(cj4*sj3);
IkReal x6688=((1.0)*x6685);
IkReal x6689=((1.0)*x6686);
evalcond[0]=((((-1.0)*r02*x6688))+(((-1.0)*sj3*sj4))+(((-1.0)*r12*x6689)));
evalcond[1]=((((-1.17e-6)*x6687))+(((-1.0)*px*x6688))+(((-1.0)*py*x6689)));
evalcond[2]=((((-1.0)*gconst11*r00*x6688))+cj3+((gconst10*r11*x6686))+((gconst10*r01*x6685))+(((-1.0)*gconst11*r10*x6689)));
evalcond[3]=((((-1.0)*gconst10*r00*x6688))+x6687+(((-1.0)*gconst11*r01*x6688))+(((-1.0)*gconst10*r10*x6689))+(((-1.0)*gconst11*r11*x6689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x6690=cj3*cj3;
IkReal x6691=cj4*cj4;
IkReal x6692=sj4*sj4;
IkReal x6693=(cj3*r22);
IkReal x6694=(cj4*r22);
IkReal x6695=((4.53976)*sj4);
IkReal x6696=(r02*sj0);
IkReal x6697=((16.0)*pz);
IkReal x6698=((8.0)*pz);
IkReal x6699=((1.872e-5)*sj4);
IkReal x6700=((4.32e-6)*sj4);
IkReal x6701=((9.07952)*sj4);
IkReal x6702=(px*sj0);
IkReal x6703=(cj0*py);
IkReal x6704=((4.68e-6)*sj4);
IkReal x6705=((9.36e-6)*sj4);
IkReal x6706=(cj0*cj3*r12);
IkReal x6707=((1.872e-5)*x6691);
IkReal x6708=(cj0*cj4*r12);
IkReal x6709=(cj4*x6704);
IkReal x6710=((4.0)*x6691);
IkReal x6711=((9.36e-6)*x6691);
IkReal x6712=(x6690*x6692);
IkReal x6713=(cj3*x6692*x6696);
IkReal x6714=(((x6702*x6710))+(((2.26988)*sj4*x6693))+(((2.26988)*x6708))+((x6696*x6709))+(((4.0)*x6702*x6712))+((x6700*x6706))+((x6690*x6704*x6708)));
IkReal x6715=((((2.26988)*cj4*x6696))+(((4.68e-6)*x6691*x6693))+((x6690*x6696*x6709))+((x6703*x6710))+((cj3*x6696*x6700))+(((4.68e-6)*x6692*x6693))+((x6704*x6708))+(((4.32e-6)*x6694))+(((4.0)*x6703*x6712)));
IkReal x6716=((((4.53976)*x6694))+(((-1.0)*cj3*x6696*x6711))+((x6690*x6694*x6705))+(((8.64e-6)*x6708))+(((-1.0)*x6695*x6706))+(((-1.0)*x6694*x6705))+(((-9.36e-6)*x6713))+(((-8.64e-6)*cj4*x6696))+(((8.64e-6)*sj4*x6693))+(((-1.0)*x6691*x6698))+((x6706*x6711))+((cj3*x6695*x6696))+(((9.36e-6)*x6692*x6706))+(((-1.0)*x6698*x6712)));
IkReal x6717=((((-1.0)*x6715))+x6714);
IkReal x6718=((((-1.0)*x6714))+x6715);
op[0]=x6717;
op[1]=x6716;
op[2]=x6717;
op[3]=((((-1.0)*x6694*x6699))+(((-1.0)*x6697*x6712))+(((9.07952)*x6694))+(((1.728e-5)*x6708))+(((-1.728e-5)*cj4*x6696))+((x6706*x6707))+((cj3*x6696*x6701))+(((-1.0)*cj3*x6696*x6707))+(((1.872e-5)*x6692*x6706))+((x6690*x6694*x6699))+(((-1.0)*x6701*x6706))+(((-1.0)*x6691*x6697))+(((-1.872e-5)*x6713))+(((1.728e-5)*sj4*x6693)));
op[4]=x6718;
op[5]=x6716;
op[6]=x6718;
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

j1evalpoly[0]=((((-2.92)*(cj3*cj3)*(sj4*sj4)))+(((4.0)*pz*(cj4*cj4)))+(((-2.92)*(cj4*cj4)))+(((htj1*htj1)*(((((4.0)*pz*(cj4*cj4)))+(((-4.68e-6)*cj0*cj3*r12*(cj4*cj4)))+(((-2.26988)*cj3*r02*sj0*sj4))+(((4.68e-6)*cj3*r02*sj0*(cj4*cj4)))+(((-4.32e-6)*cj3*r22*sj4))+(((4.32e-6)*cj4*r02*sj0))+(((-8.76)*(cj3*cj3)*(sj4*sj4)))+(((-8.76)*(cj4*cj4)))+(((-4.68e-6)*cj0*cj3*r12*(sj4*sj4)))+(((4.68e-6)*cj3*r02*sj0*(sj4*sj4)))+(((-4.32e-6)*cj0*cj4*r12))+(((-2.26988)*cj4*r22))+(((4.0)*pz*(cj3*cj3)*(sj4*sj4)))+(((-4.68e-6)*cj4*r22*sj4*(cj3*cj3)))+(((4.68e-6)*cj4*r22*sj4))+(((2.26988)*cj0*cj3*r12*sj4))))))+(((-4.68e-6)*cj0*cj3*r12*(cj4*cj4)))+(((-2.26988)*cj3*r02*sj0*sj4))+(((4.68e-6)*cj3*r02*sj0*(cj4*cj4)))+(((-4.32e-6)*cj3*r22*sj4))+(((4.32e-6)*cj4*r02*sj0))+(((-4.68e-6)*cj0*cj3*r12*(sj4*sj4)))+(((4.68e-6)*cj3*r02*sj0*(sj4*sj4)))+(((-4.32e-6)*cj0*cj4*r12))+(((-2.26988)*cj4*r22))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-2.92)*(cj3*cj3)*(sj4*sj4)))+(((-2.92)*(cj4*cj4)))+(((-4.68e-6)*cj3*r02*sj0*(sj4*sj4)))+(((-4.68e-6)*cj4*r22*sj4))+(((-4.0)*pz*(cj4*cj4)))+(((-4.68e-6)*cj3*r02*sj0*(cj4*cj4)))+(((-4.0)*pz*(cj3*cj3)*(sj4*sj4)))+(((4.32e-6)*cj0*cj4*r12))+(((-2.26988)*cj0*cj3*r12*sj4))+(((2.26988)*cj4*r22))+(((-4.32e-6)*cj4*r02*sj0))+(((4.68e-6)*cj0*cj3*r12*(sj4*sj4)))+(((4.32e-6)*cj3*r22*sj4))+(((4.68e-6)*cj4*r22*sj4*(cj3*cj3)))+(((4.68e-6)*cj0*cj3*r12*(cj4*cj4)))+(((2.26988)*cj3*r02*sj0*sj4))))))+(((htj1*htj1*htj1*htj1*htj1)*(((((-8.0)*px*sj0*(cj3*cj3)*(sj4*sj4)))+(((-4.53976)*cj0*cj4*r12))+(((9.36e-6)*cj0*cj4*r12*sj4))+(((4.53976)*cj4*r02*sj0))+(((-9.36e-6)*cj4*r02*sj0*sj4))+(((9.36e-6)*cj3*r22*(sj4*sj4)))+(((-8.0)*px*sj0*(cj4*cj4)))+(((9.36e-6)*cj3*r22*(cj4*cj4)))+(((8.0)*cj0*py*(cj4*cj4)))+(((-4.53976)*cj3*r22*sj4))+(((8.0)*cj0*py*(cj3*cj3)*(sj4*sj4)))+(((8.64e-6)*cj3*r02*sj0*sj4))+(((9.36e-6)*cj4*r02*sj0*sj4*(cj3*cj3)))+(((8.64e-6)*cj4*r22))+(((-9.36e-6)*cj0*cj4*r12*sj4*(cj3*cj3)))+(((-8.64e-6)*cj0*cj3*r12*sj4))))))+(((htj1*htj1*htj1)*(((((-16.0)*px*sj0*(cj4*cj4)))+(((-1.872e-5)*cj0*cj4*r12*sj4*(cj3*cj3)))+(((-9.07952)*cj0*cj4*r12))+(((1.872e-5)*cj4*r02*sj0*sj4*(cj3*cj3)))+(((1.872e-5)*cj3*r22*(sj4*sj4)))+(((-1.728e-5)*cj0*cj3*r12*sj4))+(((-9.07952)*cj3*r22*sj4))+(((-16.0)*px*sj0*(cj3*cj3)*(sj4*sj4)))+(((9.07952)*cj4*r02*sj0))+(((16.0)*cj0*py*(cj3*cj3)*(sj4*sj4)))+(((1.872e-5)*cj0*cj4*r12*sj4))+(((1.872e-5)*cj3*r22*(cj4*cj4)))+(((1.728e-5)*cj4*r22))+(((1.728e-5)*cj3*r02*sj0*sj4))+(((16.0)*cj0*py*(cj4*cj4)))+(((-1.872e-5)*cj4*r02*sj0*sj4))))))+((htj1*(((((-8.0)*px*sj0*(cj3*cj3)*(sj4*sj4)))+(((-4.53976)*cj0*cj4*r12))+(((9.36e-6)*cj0*cj4*r12*sj4))+(((4.53976)*cj4*r02*sj0))+(((-9.36e-6)*cj4*r02*sj0*sj4))+(((9.36e-6)*cj3*r22*(sj4*sj4)))+(((-8.0)*px*sj0*(cj4*cj4)))+(((9.36e-6)*cj3*r22*(cj4*cj4)))+(((8.0)*cj0*py*(cj4*cj4)))+(((-4.53976)*cj3*r22*sj4))+(((8.0)*cj0*py*(cj3*cj3)*(sj4*sj4)))+(((8.64e-6)*cj3*r02*sj0*sj4))+(((9.36e-6)*cj4*r02*sj0*sj4*(cj3*cj3)))+(((8.64e-6)*cj4*r22))+(((-9.36e-6)*cj0*cj4*r12*sj4*(cj3*cj3)))+(((-8.64e-6)*cj0*cj3*r12*sj4))))))+(((4.0)*pz*(cj3*cj3)*(sj4*sj4)))+(((-4.68e-6)*cj4*r22*sj4*(cj3*cj3)))+(((4.68e-6)*cj4*r22*sj4))+(((htj1*htj1*htj1*htj1)*(((((-4.68e-6)*cj3*r02*sj0*(sj4*sj4)))+(((-4.68e-6)*cj4*r22*sj4))+(((-4.0)*pz*(cj4*cj4)))+(((-4.68e-6)*cj3*r02*sj0*(cj4*cj4)))+(((-4.0)*pz*(cj3*cj3)*(sj4*sj4)))+(((4.32e-6)*cj0*cj4*r12))+(((-2.26988)*cj0*cj3*r12*sj4))+(((-8.76)*(cj3*cj3)*(sj4*sj4)))+(((2.26988)*cj4*r22))+(((-8.76)*(cj4*cj4)))+(((-4.32e-6)*cj4*r02*sj0))+(((4.68e-6)*cj0*cj3*r12*(sj4*sj4)))+(((4.32e-6)*cj3*r22*sj4))+(((4.68e-6)*cj4*r22*sj4*(cj3*cj3)))+(((4.68e-6)*cj0*cj3*r12*(cj4*cj4)))+(((2.26988)*cj3*r02*sj0*sj4))))))+(((2.26988)*cj0*cj3*r12*sj4)));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[2];
IkReal x6719=((-1.0)*r21);
CheckValue<IkReal> x6722 = IKatan2WithCheck(IkReal(x6719),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6722.valid){
continue;
}
IkReal x6720=((1.0)*(x6722.value));
IkReal x6721=x6147;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x6720)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x6720)));
IkReal gconst10=(x6719*x6721);
IkReal gconst11=((1.0)*r20*x6721);
IkReal x6723=cj3*cj3;
IkReal x6724=cj4*cj4;
IkReal x6725=((((-1.0)*x6723*x6724))+x6723+x6724);
j2eval[0]=x6725;
j2eval[1]=IKsign(x6725);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x6726=((-1.0)*r21);
CheckValue<IkReal> x6729 = IKatan2WithCheck(IkReal(x6726),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6729.valid){
continue;
}
IkReal x6727=((1.0)*(x6729.value));
IkReal x6728=x6147;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x6727)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x6727)));
IkReal gconst10=(x6726*x6728);
IkReal gconst11=((1.0)*r20*x6728);
IkReal x6730=(cj3*sj4);
j2eval[0]=(cj4+(((-525435.185185185)*x6730))+(((1.08333333333333)*cj3)));
j2eval[1]=IKsign(((((1.17e-6)*cj3))+(((1.08e-6)*cj4))+(((-0.56747)*x6730))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x6731=((-1.0)*r21);
CheckValue<IkReal> x6734 = IKatan2WithCheck(IkReal(x6731),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6734.valid){
continue;
}
IkReal x6732=((1.0)*(x6734.value));
IkReal x6733=x6147;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x6732)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x6732)));
IkReal gconst10=(x6731*x6733);
IkReal gconst11=((1.0)*r20*x6733);
IkReal x6735=cj3*cj3;
IkReal x6736=(cj4*sj4);
IkReal x6737=(cj3*sj4);
j2eval[0]=((((-1.0)*x6737))+(((1.08333333333333)*x6736))+(((-525435.185185185)*cj4))+(((-1.08333333333333)*x6735*x6736)));
j2eval[1]=IKsign(((((-1.17e-6)*x6735*x6736))+(((-1.08e-6)*x6737))+(((-0.56747)*cj4))+(((1.17e-6)*x6736))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6738=((3.35381986224151e-6)*cj1);
IkReal x6739=(px*sj0);
IkReal x6740=((1.76221132708977)*sj1);
IkReal x6741=((1.76221132708977)*cj1);
IkReal x6742=((3.35381986224151e-6)*sj1);
IkReal x6743=(cj0*py);
IkReal x6744=(sj1*x6743);
if( IKabs(((2.4482884994363e-6)+(((-1.0)*x6742*x6743))+(((-1.0)*pz*x6738))+((x6739*x6742))+((x6739*x6741))+((pz*x6740))+(((-1.0)*x6741*x6743)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.28641426877553)+((x6738*x6739))+(((-1.0)*x6738*x6743))+((pz*x6742))+((pz*x6741))+(((-1.0)*x6739*x6740))+((x6740*x6743)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.4482884994363e-6)+(((-1.0)*x6742*x6743))+(((-1.0)*pz*x6738))+((x6739*x6742))+((x6739*x6741))+((pz*x6740))+(((-1.0)*x6741*x6743))))+IKsqr(((-1.28641426877553)+((x6738*x6739))+(((-1.0)*x6738*x6743))+((pz*x6742))+((pz*x6741))+(((-1.0)*x6739*x6740))+((x6740*x6743))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((2.4482884994363e-6)+(((-1.0)*x6742*x6743))+(((-1.0)*pz*x6738))+((x6739*x6742))+((x6739*x6741))+((pz*x6740))+(((-1.0)*x6741*x6743))), ((-1.28641426877553)+((x6738*x6739))+(((-1.0)*x6738*x6743))+((pz*x6742))+((pz*x6741))+(((-1.0)*x6739*x6740))+((x6740*x6743))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x6745=IKcos(j2);
IkReal x6746=IKsin(j2);
IkReal x6747=(gconst10*sj1);
IkReal x6748=(cj1*sj0);
IkReal x6749=(gconst11*sj1);
IkReal x6750=(r01*sj0);
IkReal x6751=((1.0)*r21);
IkReal x6752=(r00*sj0);
IkReal x6753=((1.0)*gconst10);
IkReal x6754=((1.0)*cj1);
IkReal x6755=(cj1*gconst11);
IkReal x6756=(cj0*r10);
IkReal x6757=(cj1*gconst10);
IkReal x6758=(cj0*py);
IkReal x6759=(cj0*r11);
IkReal x6760=((1.0)*x6746);
IkReal x6761=((1.0)*x6759);
IkReal x6762=((1.0)*gconst11*x6756);
evalcond[0]=((((-1.08e-6)*x6745))+(((-0.56746883)*x6746))+((pz*sj1))+((px*x6748))+(((-1.0)*x6754*x6758)));
evalcond[1]=((0.73)+(((-1.08e-6)*x6746))+(((-1.0)*sj1*x6758))+(((0.56746883)*x6745))+((px*sj0*sj1))+(((-1.0)*pz*x6754)));
evalcond[2]=(((gconst11*r01*x6748))+(((-1.0)*gconst11*x6754*x6759))+((r21*x6749))+((gconst10*r00*x6748))+(((-1.0)*cj1*x6753*x6756))+(((-1.0)*x6760))+((r20*x6747)));
evalcond[3]=(x6745+(((-1.0)*x6749*x6761))+(((-1.0)*x6747*x6756))+(((-1.0)*x6751*x6755))+((x6749*x6750))+(((-1.0)*cj1*r20*x6753))+((x6747*x6752)));
evalcond[4]=((((-1.0)*x6745))+(((-1.0)*gconst11*x6754*x6756))+(((-1.0)*r01*x6748*x6753))+((x6757*x6759))+((r20*x6749))+(((-1.0)*x6747*x6751))+((gconst11*r00*x6748)));
evalcond[5]=((((-1.0)*gconst11*r20*x6754))+(((-1.0)*x6747*x6750))+(((-1.0)*x6749*x6756))+(((-1.0)*x6760))+((r21*x6757))+((x6749*x6752))+((x6747*x6759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6763=(cj1*pz);
IkReal x6764=(cj0*py);
IkReal x6765=((1.76220406051003)*sj1);
IkReal x6766=((3.35379220296043e-6)*sj1);
IkReal x6767=(px*sj0);
IkReal x6768=((3.35379220296043e-6)*cj1);
IkReal x6769=((1.76220406051003)*x6767);
if( IKabs(((2.44826830816111e-6)+(((-1.76220406051003)*cj1*x6764))+((x6766*x6767))+((pz*x6765))+((cj1*x6769))+(((-1.0)*x6764*x6766))+(((-3.35379220296043e-6)*x6763)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.28640896417232)+((x6767*x6768))+(((1.76220406051003)*x6763))+(((-1.0)*x6765*x6767))+((pz*x6766))+(((-1.0)*x6764*x6768))+((x6764*x6765)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.44826830816111e-6)+(((-1.76220406051003)*cj1*x6764))+((x6766*x6767))+((pz*x6765))+((cj1*x6769))+(((-1.0)*x6764*x6766))+(((-3.35379220296043e-6)*x6763))))+IKsqr(((-1.28640896417232)+((x6767*x6768))+(((1.76220406051003)*x6763))+(((-1.0)*x6765*x6767))+((pz*x6766))+(((-1.0)*x6764*x6768))+((x6764*x6765))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((2.44826830816111e-6)+(((-1.76220406051003)*cj1*x6764))+((x6766*x6767))+((pz*x6765))+((cj1*x6769))+(((-1.0)*x6764*x6766))+(((-3.35379220296043e-6)*x6763))), ((-1.28640896417232)+((x6767*x6768))+(((1.76220406051003)*x6763))+(((-1.0)*x6765*x6767))+((pz*x6766))+(((-1.0)*x6764*x6768))+((x6764*x6765))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x6770=IKcos(j2);
IkReal x6771=IKsin(j2);
IkReal x6772=((1.0)*cj1);
IkReal x6773=(gconst10*r20);
IkReal x6774=(cj1*sj0);
IkReal x6775=(gconst11*sj1);
IkReal x6776=(r01*sj0);
IkReal x6777=((1.0)*sj1);
IkReal x6778=(cj0*r11);
IkReal x6779=(gconst10*r21);
IkReal x6780=(r00*sj0);
IkReal x6781=(gconst10*sj1);
IkReal x6782=(cj0*py);
IkReal x6783=((1.0)*x6770);
IkReal x6784=(cj0*gconst11*r10);
IkReal x6785=(cj0*gconst10*r10);
evalcond[0]=((((-1.0)*x6772*x6782))+(((-0.56747117)*x6771))+((px*x6774))+((pz*sj1))+(((-1.08e-6)*x6770)));
evalcond[1]=((0.73)+(((-1.0)*pz*x6772))+((px*sj0*sj1))+(((0.56747117)*x6770))+(((-1.08e-6)*x6771))+(((-1.0)*x6777*x6782)));
evalcond[2]=((((-1.0)*x6772*x6785))+(((-1.0)*gconst11*x6772*x6778))+((sj1*x6773))+x6771+((gconst11*r01*x6774))+((gconst10*r00*x6774))+((r21*x6775)));
evalcond[3]=((((-1.0)*x6772*x6784))+(((-1.0)*x6783))+(((-1.0)*x6777*x6779))+((cj1*gconst10*x6778))+((gconst11*r00*x6774))+(((-1.0)*gconst10*x6772*x6776))+((r20*x6775)));
evalcond[4]=((((-1.0)*gconst10*x6776*x6777))+(((-1.0)*cj0*r10*x6775))+(((-1.0)*x6771))+((x6775*x6780))+((x6778*x6781))+((cj1*x6779))+(((-1.0)*gconst11*r20*x6772)));
evalcond[5]=((((-1.0)*x6783))+(((-1.0)*x6775*x6778))+((x6775*x6776))+(((-1.0)*gconst11*r21*x6772))+(((-1.0)*x6772*x6773))+((x6780*x6781))+(((-1.0)*x6777*x6785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6786=((3.35381986224151e-6)*cj1);
IkReal x6787=(px*sj0);
IkReal x6788=((1.76221132708977)*sj1);
IkReal x6789=((1.76221132708977)*cj1);
IkReal x6790=((3.35381986224151e-6)*sj1);
IkReal x6791=(cj0*py);
IkReal x6792=(sj1*x6791);
if( IKabs(((2.4482884994363e-6)+(((-1.0)*pz*x6786))+(((-1.0)*x6789*x6791))+((pz*x6788))+((x6787*x6790))+(((-1.0)*x6790*x6791))+((x6787*x6789)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.28641426877553)+(((-1.0)*x6787*x6788))+((pz*x6789))+((x6788*x6791))+((pz*x6790))+(((-1.0)*x6786*x6791))+((x6786*x6787)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.4482884994363e-6)+(((-1.0)*pz*x6786))+(((-1.0)*x6789*x6791))+((pz*x6788))+((x6787*x6790))+(((-1.0)*x6790*x6791))+((x6787*x6789))))+IKsqr(((-1.28641426877553)+(((-1.0)*x6787*x6788))+((pz*x6789))+((x6788*x6791))+((pz*x6790))+(((-1.0)*x6786*x6791))+((x6786*x6787))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((2.4482884994363e-6)+(((-1.0)*pz*x6786))+(((-1.0)*x6789*x6791))+((pz*x6788))+((x6787*x6790))+(((-1.0)*x6790*x6791))+((x6787*x6789))), ((-1.28641426877553)+(((-1.0)*x6787*x6788))+((pz*x6789))+((x6788*x6791))+((pz*x6790))+(((-1.0)*x6786*x6791))+((x6786*x6787))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x6793=IKcos(j2);
IkReal x6794=IKsin(j2);
IkReal x6795=(cj1*sj0);
IkReal x6796=(gconst11*sj1);
IkReal x6797=(r01*sj0);
IkReal x6798=((1.0)*gconst10);
IkReal x6799=(cj1*r20);
IkReal x6800=(cj1*gconst11);
IkReal x6801=((1.0)*cj1);
IkReal x6802=(r00*sj0);
IkReal x6803=(gconst10*sj1);
IkReal x6804=(cj0*r10);
IkReal x6805=(cj1*gconst10);
IkReal x6806=(cj0*py);
IkReal x6807=(cj0*r11);
IkReal x6808=((1.0)*x6807);
IkReal x6809=((1.0)*gconst11*x6804);
evalcond[0]=((((-1.08e-6)*x6793))+(((-0.56746883)*x6794))+((px*x6795))+((pz*sj1))+(((-1.0)*x6801*x6806)));
evalcond[1]=((0.73)+(((-1.08e-6)*x6794))+((px*sj0*sj1))+(((-1.0)*pz*x6801))+(((0.56746883)*x6793))+(((-1.0)*sj1*x6806)));
evalcond[2]=(((x6805*x6807))+(((-1.0)*x6800*x6804))+(((-1.0)*r01*x6795*x6798))+x6793+((r20*x6796))+(((-1.0)*r21*sj1*x6798))+((gconst11*r00*x6795)));
evalcond[3]=(((x6796*x6802))+(((-1.0)*x6796*x6804))+((r21*x6805))+x6794+(((-1.0)*gconst11*x6799))+((x6803*x6807))+(((-1.0)*sj1*x6797*x6798)));
evalcond[4]=(((r21*x6796))+((gconst11*r01*x6795))+(((-1.0)*cj1*x6798*x6804))+((r20*x6803))+(((-1.0)*x6794))+(((-1.0)*x6800*x6808))+((gconst10*r00*x6795)));
evalcond[5]=((((-1.0)*x6796*x6808))+((x6796*x6797))+(((-1.0)*sj1*x6798*x6804))+x6793+(((-1.0)*x6798*x6799))+(((-1.0)*r21*x6800))+((x6802*x6803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6810=(cj1*pz);
IkReal x6811=(cj0*py);
IkReal x6812=((1.76220406051003)*sj1);
IkReal x6813=((3.35379220296043e-6)*sj1);
IkReal x6814=(px*sj0);
IkReal x6815=((3.35379220296043e-6)*cj1);
IkReal x6816=((1.76220406051003)*x6814);
if( IKabs(((2.44826830816111e-6)+((pz*x6812))+((cj1*x6816))+(((-1.76220406051003)*cj1*x6811))+(((-1.0)*x6811*x6813))+(((-3.35379220296043e-6)*x6810))+((x6813*x6814)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.28640896417232)+((pz*x6813))+((x6811*x6812))+((x6814*x6815))+(((-1.0)*x6811*x6815))+(((-1.0)*x6812*x6814))+(((1.76220406051003)*x6810)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.44826830816111e-6)+((pz*x6812))+((cj1*x6816))+(((-1.76220406051003)*cj1*x6811))+(((-1.0)*x6811*x6813))+(((-3.35379220296043e-6)*x6810))+((x6813*x6814))))+IKsqr(((-1.28640896417232)+((pz*x6813))+((x6811*x6812))+((x6814*x6815))+(((-1.0)*x6811*x6815))+(((-1.0)*x6812*x6814))+(((1.76220406051003)*x6810))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((2.44826830816111e-6)+((pz*x6812))+((cj1*x6816))+(((-1.76220406051003)*cj1*x6811))+(((-1.0)*x6811*x6813))+(((-3.35379220296043e-6)*x6810))+((x6813*x6814))), ((-1.28640896417232)+((pz*x6813))+((x6811*x6812))+((x6814*x6815))+(((-1.0)*x6811*x6815))+(((-1.0)*x6812*x6814))+(((1.76220406051003)*x6810))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x6817=IKcos(j2);
IkReal x6818=IKsin(j2);
IkReal x6819=((1.0)*cj1);
IkReal x6820=(gconst10*r20);
IkReal x6821=(cj1*sj0);
IkReal x6822=(gconst11*sj1);
IkReal x6823=(r01*sj0);
IkReal x6824=((1.0)*sj1);
IkReal x6825=(cj0*r11);
IkReal x6826=(gconst10*r21);
IkReal x6827=(r00*sj0);
IkReal x6828=(gconst10*sj1);
IkReal x6829=(cj0*py);
IkReal x6830=(cj0*gconst11*r10);
IkReal x6831=(cj0*gconst10*r10);
evalcond[0]=(((px*x6821))+(((-0.56747117)*x6818))+((pz*sj1))+(((-1.0)*x6819*x6829))+(((-1.08e-6)*x6817)));
evalcond[1]=((0.73)+((px*sj0*sj1))+(((0.56747117)*x6817))+(((-1.0)*x6824*x6829))+(((-1.0)*pz*x6819))+(((-1.08e-6)*x6818)));
evalcond[2]=(((sj1*x6820))+((r21*x6822))+((gconst11*r01*x6821))+(((-1.0)*x6819*x6831))+x6818+(((-1.0)*gconst11*x6819*x6825))+((gconst10*r00*x6821)));
evalcond[3]=(((cj1*gconst10*x6825))+((gconst11*r00*x6821))+(((-1.0)*gconst10*x6819*x6823))+(((-1.0)*x6824*x6826))+((r20*x6822))+(((-1.0)*x6819*x6830))+x6817);
evalcond[4]=(((x6825*x6828))+((cj1*x6826))+(((-1.0)*gconst11*r20*x6819))+(((-1.0)*cj0*r10*x6822))+(((-1.0)*gconst10*x6823*x6824))+x6818+((x6822*x6827)));
evalcond[5]=((((-1.0)*x6817))+(((-1.0)*x6824*x6831))+(((-1.0)*gconst11*r21*x6819))+(((-1.0)*x6822*x6825))+((x6827*x6828))+(((-1.0)*x6819*x6820))+((x6822*x6823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6832=(cj1*r22);
IkReal x6833=((1.17e-6)*sj4);
IkReal x6834=(cj3*sj0);
IkReal x6835=((1.0)*sj4);
IkReal x6836=(cj1*px);
IkReal x6837=(r02*sj1);
IkReal x6838=((1.17e-6)*cj4);
IkReal x6839=(cj3*sj1);
IkReal x6840=(cj0*r12);
IkReal x6841=(cj3*sj4);
IkReal x6842=((1.0)*cj4);
IkReal x6843=(cj0*cj1*py);
CheckValue<IkReal> x6844=IKPowWithIntegerCheck(IKsign((((cj4*x6833))+(((-1.08e-6)*x6841))+(((-1.0)*cj4*x6833*(cj3*cj3)))+(((-0.56747)*cj4)))),-1);
if(!x6844.valid){
continue;
}
CheckValue<IkReal> x6845 = IKatan2WithCheck(IkReal(((((1.08e-6)*x6832))+((x6838*x6839*x6840))+(((-1.0)*sj0*x6836*x6842))+(((-1.0)*x6834*x6837*x6838))+((cj3*x6832*x6838))+((cj4*x6843))+(((-1.0)*pz*sj1*x6842))+(((-1.08e-6)*sj0*x6837))+(((1.08e-6)*sj1*x6840)))),IkReal(((((-0.56747)*sj1*x6840))+((sj1*x6833*x6840))+(((0.56747)*sj0*x6837))+((x6832*x6833))+(((-0.56747)*x6832))+(((-1.0)*pz*x6835*x6839))+(((-1.0)*sj0*x6833*x6837))+((x6841*x6843))+(((-1.0)*x6834*x6835*x6836)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6845.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6844.value)))+(x6845.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x6846=IKcos(j2);
IkReal x6847=IKsin(j2);
IkReal x6848=(cj1*sj0);
IkReal x6849=(cj3*cj4);
IkReal x6850=(gconst11*sj1);
IkReal x6851=(r01*sj0);
IkReal x6852=((1.0)*cj1);
IkReal x6853=(gconst10*r20);
IkReal x6854=(cj3*sj4);
IkReal x6855=(cj0*r11);
IkReal x6856=((1.0)*gconst10);
IkReal x6857=(cj0*r10);
IkReal x6858=(r00*sj0);
IkReal x6859=(gconst10*sj1);
IkReal x6860=(cj1*gconst10);
IkReal x6861=(sj0*sj1);
IkReal x6862=(cj0*py);
IkReal x6863=((1.0)*sj1);
IkReal x6864=(cj0*r12);
IkReal x6865=((1.0)*x6847);
IkReal x6866=((1.17e-6)*x6847);
IkReal x6867=((1.0)*x6846);
IkReal x6868=(sj4*x6846);
IkReal x6869=((1.0)*gconst11*x6857);
evalcond[0]=(((r22*sj1))+(((-1.0)*x6854*x6867))+(((-1.0)*cj4*x6865))+(((-1.0)*x6852*x6864))+((r02*x6848)));
evalcond[1]=(((r02*x6861))+(((-1.0)*x6863*x6864))+(((-1.0)*x6854*x6865))+(((-1.0)*r22*x6852))+((cj4*x6846)));
evalcond[2]=(((sj4*x6866))+(((-1.08e-6)*x6846))+(((-0.56747)*x6847))+((px*x6848))+(((-1.0)*x6852*x6862))+((pz*sj1))+(((-1.17e-6)*x6846*x6849)));
evalcond[3]=((0.73)+(((0.56747)*x6846))+(((-1.08e-6)*x6847))+(((-1.0)*pz*x6852))+(((-1.0)*x6862*x6863))+((px*x6861))+(((-1.0)*x6849*x6866))+(((-1.17e-6)*x6868)));
evalcond[4]=(((x6855*x6860))+(((-1.0)*r21*sj1*x6856))+(((-1.0)*r01*x6848*x6856))+(((-1.0)*sj3*x6867))+((r20*x6850))+(((-1.0)*gconst11*x6852*x6857))+((gconst11*r00*x6848)));
evalcond[5]=((((-1.0)*gconst11*r20*x6852))+(((-1.0)*sj1*x6851*x6856))+((r21*x6860))+(((-1.0)*sj3*x6865))+((x6855*x6859))+((x6850*x6858))+(((-1.0)*x6850*x6857)));
evalcond[6]=(((gconst10*r00*x6848))+((r21*x6850))+(((-1.0)*gconst10*x6852*x6857))+((x6846*x6849))+((gconst11*r01*x6848))+(((-1.0)*sj4*x6865))+(((-1.0)*gconst11*x6852*x6855))+((sj1*x6853)));
evalcond[7]=(((x6847*x6849))+(((-1.0)*gconst11*r21*x6852))+(((-1.0)*sj1*x6856*x6857))+(((-1.0)*x6852*x6853))+x6868+((x6858*x6859))+((x6850*x6851))+(((-1.0)*x6850*x6855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6870=(r22*sj1);
IkReal x6871=((1.17e-6)*sj4);
IkReal x6872=(pz*sj1);
IkReal x6873=(cj0*cj1);
IkReal x6874=((1.17e-6)*cj3);
IkReal x6875=(cj3*sj4);
IkReal x6876=(cj1*px*sj0);
IkReal x6877=((1.0)*x6875);
IkReal x6878=(cj1*r02*sj0);
CheckValue<IkReal> x6879 = IKatan2WithCheck(IkReal(((((-1.0)*x6876*x6877))+((cj4*x6870*x6874))+(((-1.0)*cj4*r12*x6873*x6874))+(((1.08e-6)*x6878))+(((1.08e-6)*x6870))+((py*x6873*x6875))+(((-1.08e-6)*r12*x6873))+(((-1.0)*x6872*x6877))+((cj4*x6874*x6878)))),IkReal((((x6870*x6871))+(((0.56747)*r12*x6873))+(((-0.56747)*x6870))+(((-0.56747)*x6878))+(((-1.0)*cj4*py*x6873))+((x6871*x6878))+((cj4*x6876))+((cj4*x6872))+(((-1.0)*r12*x6871*x6873)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6879.valid){
continue;
}
CheckValue<IkReal> x6880=IKPowWithIntegerCheck(IKsign(((((1.08e-6)*cj4))+(((-0.56747)*x6875))+x6874)),-1);
if(!x6880.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x6879.value)+(((1.5707963267949)*(x6880.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x6881=IKcos(j2);
IkReal x6882=IKsin(j2);
IkReal x6883=(cj1*sj0);
IkReal x6884=(cj3*cj4);
IkReal x6885=(gconst11*sj1);
IkReal x6886=(r01*sj0);
IkReal x6887=((1.0)*cj1);
IkReal x6888=(gconst10*r20);
IkReal x6889=(cj3*sj4);
IkReal x6890=(cj0*r11);
IkReal x6891=((1.0)*gconst10);
IkReal x6892=(cj0*r10);
IkReal x6893=(r00*sj0);
IkReal x6894=(gconst10*sj1);
IkReal x6895=(cj1*gconst10);
IkReal x6896=(sj0*sj1);
IkReal x6897=(cj0*py);
IkReal x6898=((1.0)*sj1);
IkReal x6899=(cj0*r12);
IkReal x6900=((1.0)*x6882);
IkReal x6901=((1.17e-6)*x6882);
IkReal x6902=((1.0)*x6881);
IkReal x6903=(sj4*x6881);
IkReal x6904=((1.0)*gconst11*x6892);
evalcond[0]=(((r22*sj1))+((r02*x6883))+(((-1.0)*x6889*x6902))+(((-1.0)*cj4*x6900))+(((-1.0)*x6887*x6899)));
evalcond[1]=(((r02*x6896))+(((-1.0)*x6889*x6900))+((cj4*x6881))+(((-1.0)*x6898*x6899))+(((-1.0)*r22*x6887)));
evalcond[2]=((((-0.56747)*x6882))+((px*x6883))+((sj4*x6901))+((pz*sj1))+(((-1.08e-6)*x6881))+(((-1.17e-6)*x6881*x6884))+(((-1.0)*x6887*x6897)));
evalcond[3]=((0.73)+(((-1.0)*x6897*x6898))+((px*x6896))+(((0.56747)*x6881))+(((-1.0)*x6884*x6901))+(((-1.08e-6)*x6882))+(((-1.0)*pz*x6887))+(((-1.17e-6)*x6903)));
evalcond[4]=((((-1.0)*r21*sj1*x6891))+((r20*x6885))+(((-1.0)*gconst11*x6887*x6892))+(((-1.0)*r01*x6883*x6891))+((gconst11*r00*x6883))+(((-1.0)*sj3*x6902))+((x6890*x6895)));
evalcond[5]=((((-1.0)*x6885*x6892))+(((-1.0)*sj1*x6886*x6891))+(((-1.0)*gconst11*r20*x6887))+(((-1.0)*sj3*x6900))+((x6890*x6894))+((r21*x6895))+((x6885*x6893)));
evalcond[6]=(((gconst11*r01*x6883))+(((-1.0)*gconst11*x6887*x6890))+((gconst10*r00*x6883))+((sj1*x6888))+((r21*x6885))+(((-1.0)*sj4*x6900))+(((-1.0)*gconst10*x6887*x6892))+((x6881*x6884)));
evalcond[7]=((((-1.0)*sj1*x6891*x6892))+(((-1.0)*x6887*x6888))+((x6893*x6894))+(((-1.0)*x6885*x6890))+(((-1.0)*gconst11*r21*x6887))+x6903+((x6882*x6884))+((x6885*x6886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6905=cj3*cj3;
IkReal x6906=cj4*cj4;
IkReal x6907=(cj0*r12);
IkReal x6908=(cj1*cj4);
IkReal x6909=(r22*sj1);
IkReal x6910=(cj3*sj4);
IkReal x6911=(r02*sj0);
IkReal x6912=((1.0)*sj1);
IkReal x6913=((1.0)*cj1*x6910);
CheckValue<IkReal> x6914 = IKatan2WithCheck(IkReal((((cj4*x6909))+(((-1.0)*x6907*x6908))+(((-1.0)*r22*x6913))+(((-1.0)*x6907*x6910*x6912))+((x6908*x6911))+((sj1*x6910*x6911)))),IkReal((((x6909*x6910))+((r22*x6908))+(((-1.0)*x6907*x6913))+((cj4*sj1*x6907))+((cj1*x6910*x6911))+(((-1.0)*cj4*x6911*x6912)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6914.valid){
continue;
}
CheckValue<IkReal> x6915=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6905*x6906))+x6906+x6905)),-1);
if(!x6915.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x6914.value)+(((1.5707963267949)*(x6915.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x6916=IKcos(j2);
IkReal x6917=IKsin(j2);
IkReal x6918=(cj1*sj0);
IkReal x6919=(cj3*cj4);
IkReal x6920=(gconst11*sj1);
IkReal x6921=(r01*sj0);
IkReal x6922=((1.0)*cj1);
IkReal x6923=(gconst10*r20);
IkReal x6924=(cj3*sj4);
IkReal x6925=(cj0*r11);
IkReal x6926=((1.0)*gconst10);
IkReal x6927=(cj0*r10);
IkReal x6928=(r00*sj0);
IkReal x6929=(gconst10*sj1);
IkReal x6930=(cj1*gconst10);
IkReal x6931=(sj0*sj1);
IkReal x6932=(cj0*py);
IkReal x6933=((1.0)*sj1);
IkReal x6934=(cj0*r12);
IkReal x6935=((1.0)*x6917);
IkReal x6936=((1.17e-6)*x6917);
IkReal x6937=((1.0)*x6916);
IkReal x6938=(sj4*x6916);
IkReal x6939=((1.0)*gconst11*x6927);
evalcond[0]=(((r22*sj1))+(((-1.0)*x6924*x6937))+(((-1.0)*cj4*x6935))+((r02*x6918))+(((-1.0)*x6922*x6934)));
evalcond[1]=(((cj4*x6916))+(((-1.0)*r22*x6922))+(((-1.0)*x6924*x6935))+((r02*x6931))+(((-1.0)*x6933*x6934)));
evalcond[2]=((((-1.08e-6)*x6916))+(((-1.17e-6)*x6916*x6919))+((px*x6918))+(((-1.0)*x6922*x6932))+((sj4*x6936))+((pz*sj1))+(((-0.56747)*x6917)));
evalcond[3]=((0.73)+((px*x6931))+(((-1.0)*x6932*x6933))+(((-1.17e-6)*x6938))+(((-1.08e-6)*x6917))+(((-1.0)*x6919*x6936))+(((0.56747)*x6916))+(((-1.0)*pz*x6922)));
evalcond[4]=(((r20*x6920))+(((-1.0)*r21*sj1*x6926))+(((-1.0)*sj3*x6937))+(((-1.0)*r01*x6918*x6926))+(((-1.0)*gconst11*x6922*x6927))+((x6925*x6930))+((gconst11*r00*x6918)));
evalcond[5]=((((-1.0)*gconst11*r20*x6922))+(((-1.0)*x6920*x6927))+(((-1.0)*sj1*x6921*x6926))+(((-1.0)*sj3*x6935))+((x6925*x6929))+((r21*x6930))+((x6920*x6928)));
evalcond[6]=(((gconst10*r00*x6918))+((x6916*x6919))+((sj1*x6923))+((gconst11*r01*x6918))+(((-1.0)*gconst11*x6922*x6925))+(((-1.0)*sj4*x6935))+((r21*x6920))+(((-1.0)*gconst10*x6922*x6927)));
evalcond[7]=((((-1.0)*sj1*x6926*x6927))+(((-1.0)*x6920*x6925))+((x6928*x6929))+x6938+((x6917*x6919))+(((-1.0)*gconst11*r21*x6922))+(((-1.0)*x6922*x6923))+((x6920*x6921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6940=((1.0)*sj3);
IkReal x6941=(cj5*sj4);
IkReal x6942=(sj4*sj5);
CheckValue<IkReal> x6943 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x6940*x6942))+(((-1.0)*r01*x6940*x6941))+(((-1.0)*cj4*r02*x6940)))),IkReal((((r10*sj3*x6942))+((r11*sj3*x6941))+((cj4*r12*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6943.valid){
continue;
}
CheckValue<IkReal> x6944=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x6944.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x6943.value)+(((1.5707963267949)*(x6944.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6945=IKcos(j0);
IkReal x6946=IKsin(j0);
IkReal x6947=(cj4*sj3);
IkReal x6948=((1.0)*x6945);
IkReal x6949=((1.0)*x6946);
evalcond[0]=((((-1.0)*r12*x6949))+(((-1.0)*r02*x6948))+(((-1.0)*sj3*sj4)));
evalcond[1]=((((-1.0)*py*x6949))+(((-1.0)*px*x6948))+(((-1.17e-6)*x6947)));
evalcond[2]=(cj3+(((-1.0)*cj5*r10*x6949))+((r01*sj5*x6945))+(((-1.0)*cj5*r00*x6948))+((r11*sj5*x6946)));
evalcond[3]=((((-1.0)*cj5*r11*x6949))+(((-1.0)*r10*sj5*x6949))+x6947+(((-1.0)*cj5*r01*x6948))+(((-1.0)*r00*sj5*x6948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x6950=cj3*cj3;
IkReal x6951=cj4*cj4;
IkReal x6952=sj4*sj4;
IkReal x6953=(cj3*r22);
IkReal x6954=(cj4*r22);
IkReal x6955=((4.53976)*sj4);
IkReal x6956=(r02*sj0);
IkReal x6957=((16.0)*pz);
IkReal x6958=((8.0)*pz);
IkReal x6959=((1.872e-5)*sj4);
IkReal x6960=((4.32e-6)*sj4);
IkReal x6961=((9.07952)*sj4);
IkReal x6962=(px*sj0);
IkReal x6963=(cj0*py);
IkReal x6964=((4.68e-6)*sj4);
IkReal x6965=((9.36e-6)*sj4);
IkReal x6966=(cj0*cj3*r12);
IkReal x6967=((1.872e-5)*x6951);
IkReal x6968=(cj0*cj4*r12);
IkReal x6969=(cj4*x6964);
IkReal x6970=((4.0)*x6951);
IkReal x6971=((9.36e-6)*x6951);
IkReal x6972=(x6950*x6952);
IkReal x6973=(cj3*x6952*x6956);
IkReal x6974=(((x6962*x6970))+(((2.26988)*sj4*x6953))+(((4.0)*x6962*x6972))+(((2.26988)*x6968))+((x6956*x6969))+((x6950*x6964*x6968))+((x6960*x6966)));
IkReal x6975=(((x6963*x6970))+((cj3*x6956*x6960))+((x6964*x6968))+((x6950*x6956*x6969))+(((4.32e-6)*x6954))+(((4.0)*x6963*x6972))+(((4.68e-6)*x6951*x6953))+(((4.68e-6)*x6952*x6953))+(((2.26988)*cj4*x6956)));
IkReal x6976=((((-1.0)*x6951*x6958))+(((-1.0)*x6954*x6965))+((x6950*x6954*x6965))+(((4.53976)*x6954))+(((9.36e-6)*x6952*x6966))+(((8.64e-6)*sj4*x6953))+(((-1.0)*x6958*x6972))+((cj3*x6955*x6956))+(((-8.64e-6)*cj4*x6956))+(((-1.0)*cj3*x6956*x6971))+((x6966*x6971))+(((-9.36e-6)*x6973))+(((8.64e-6)*x6968))+(((-1.0)*x6955*x6966)));
IkReal x6977=((((-1.0)*x6975))+x6974);
IkReal x6978=((((-1.0)*x6974))+x6975);
op[0]=x6977;
op[1]=x6976;
op[2]=x6977;
op[3]=((((1.728e-5)*sj4*x6953))+(((-1.0)*x6951*x6957))+((cj3*x6956*x6961))+((x6950*x6954*x6959))+(((-1.0)*x6961*x6966))+(((-1.0)*cj3*x6956*x6967))+((x6966*x6967))+(((1.728e-5)*x6968))+(((-1.0)*x6957*x6972))+(((-1.728e-5)*cj4*x6956))+(((9.07952)*x6954))+(((-1.0)*x6954*x6959))+(((1.872e-5)*x6952*x6966))+(((-1.872e-5)*x6973)));
op[4]=x6978;
op[5]=x6976;
op[6]=x6978;
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

j1evalpoly[0]=((((-2.92)*(cj3*cj3)*(sj4*sj4)))+(((4.0)*pz*(cj4*cj4)))+(((-2.92)*(cj4*cj4)))+(((htj1*htj1)*(((((4.0)*pz*(cj4*cj4)))+(((-4.68e-6)*cj0*cj3*r12*(cj4*cj4)))+(((-2.26988)*cj3*r02*sj0*sj4))+(((4.68e-6)*cj3*r02*sj0*(cj4*cj4)))+(((-4.32e-6)*cj3*r22*sj4))+(((4.32e-6)*cj4*r02*sj0))+(((-8.76)*(cj3*cj3)*(sj4*sj4)))+(((-8.76)*(cj4*cj4)))+(((-4.68e-6)*cj0*cj3*r12*(sj4*sj4)))+(((4.68e-6)*cj3*r02*sj0*(sj4*sj4)))+(((-4.32e-6)*cj0*cj4*r12))+(((-2.26988)*cj4*r22))+(((4.0)*pz*(cj3*cj3)*(sj4*sj4)))+(((-4.68e-6)*cj4*r22*sj4*(cj3*cj3)))+(((4.68e-6)*cj4*r22*sj4))+(((2.26988)*cj0*cj3*r12*sj4))))))+(((-4.68e-6)*cj0*cj3*r12*(cj4*cj4)))+(((-2.26988)*cj3*r02*sj0*sj4))+(((4.68e-6)*cj3*r02*sj0*(cj4*cj4)))+(((-4.32e-6)*cj3*r22*sj4))+(((4.32e-6)*cj4*r02*sj0))+(((-4.68e-6)*cj0*cj3*r12*(sj4*sj4)))+(((4.68e-6)*cj3*r02*sj0*(sj4*sj4)))+(((-4.32e-6)*cj0*cj4*r12))+(((-2.26988)*cj4*r22))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-2.92)*(cj3*cj3)*(sj4*sj4)))+(((-2.92)*(cj4*cj4)))+(((-4.68e-6)*cj3*r02*sj0*(sj4*sj4)))+(((-4.68e-6)*cj4*r22*sj4))+(((-4.0)*pz*(cj4*cj4)))+(((-4.68e-6)*cj3*r02*sj0*(cj4*cj4)))+(((-4.0)*pz*(cj3*cj3)*(sj4*sj4)))+(((4.32e-6)*cj0*cj4*r12))+(((-2.26988)*cj0*cj3*r12*sj4))+(((2.26988)*cj4*r22))+(((-4.32e-6)*cj4*r02*sj0))+(((4.68e-6)*cj0*cj3*r12*(sj4*sj4)))+(((4.32e-6)*cj3*r22*sj4))+(((4.68e-6)*cj4*r22*sj4*(cj3*cj3)))+(((4.68e-6)*cj0*cj3*r12*(cj4*cj4)))+(((2.26988)*cj3*r02*sj0*sj4))))))+(((htj1*htj1*htj1*htj1*htj1)*(((((-8.0)*px*sj0*(cj3*cj3)*(sj4*sj4)))+(((-4.53976)*cj0*cj4*r12))+(((9.36e-6)*cj0*cj4*r12*sj4))+(((4.53976)*cj4*r02*sj0))+(((-9.36e-6)*cj4*r02*sj0*sj4))+(((9.36e-6)*cj3*r22*(sj4*sj4)))+(((-8.0)*px*sj0*(cj4*cj4)))+(((9.36e-6)*cj3*r22*(cj4*cj4)))+(((8.0)*cj0*py*(cj4*cj4)))+(((-4.53976)*cj3*r22*sj4))+(((8.0)*cj0*py*(cj3*cj3)*(sj4*sj4)))+(((8.64e-6)*cj3*r02*sj0*sj4))+(((9.36e-6)*cj4*r02*sj0*sj4*(cj3*cj3)))+(((8.64e-6)*cj4*r22))+(((-9.36e-6)*cj0*cj4*r12*sj4*(cj3*cj3)))+(((-8.64e-6)*cj0*cj3*r12*sj4))))))+(((htj1*htj1*htj1)*(((((-16.0)*px*sj0*(cj4*cj4)))+(((-1.872e-5)*cj0*cj4*r12*sj4*(cj3*cj3)))+(((-9.07952)*cj0*cj4*r12))+(((1.872e-5)*cj4*r02*sj0*sj4*(cj3*cj3)))+(((1.872e-5)*cj3*r22*(sj4*sj4)))+(((-1.728e-5)*cj0*cj3*r12*sj4))+(((-9.07952)*cj3*r22*sj4))+(((-16.0)*px*sj0*(cj3*cj3)*(sj4*sj4)))+(((9.07952)*cj4*r02*sj0))+(((16.0)*cj0*py*(cj3*cj3)*(sj4*sj4)))+(((1.872e-5)*cj0*cj4*r12*sj4))+(((1.872e-5)*cj3*r22*(cj4*cj4)))+(((1.728e-5)*cj4*r22))+(((1.728e-5)*cj3*r02*sj0*sj4))+(((16.0)*cj0*py*(cj4*cj4)))+(((-1.872e-5)*cj4*r02*sj0*sj4))))))+((htj1*(((((-8.0)*px*sj0*(cj3*cj3)*(sj4*sj4)))+(((-4.53976)*cj0*cj4*r12))+(((9.36e-6)*cj0*cj4*r12*sj4))+(((4.53976)*cj4*r02*sj0))+(((-9.36e-6)*cj4*r02*sj0*sj4))+(((9.36e-6)*cj3*r22*(sj4*sj4)))+(((-8.0)*px*sj0*(cj4*cj4)))+(((9.36e-6)*cj3*r22*(cj4*cj4)))+(((8.0)*cj0*py*(cj4*cj4)))+(((-4.53976)*cj3*r22*sj4))+(((8.0)*cj0*py*(cj3*cj3)*(sj4*sj4)))+(((8.64e-6)*cj3*r02*sj0*sj4))+(((9.36e-6)*cj4*r02*sj0*sj4*(cj3*cj3)))+(((8.64e-6)*cj4*r22))+(((-9.36e-6)*cj0*cj4*r12*sj4*(cj3*cj3)))+(((-8.64e-6)*cj0*cj3*r12*sj4))))))+(((4.0)*pz*(cj3*cj3)*(sj4*sj4)))+(((-4.68e-6)*cj4*r22*sj4*(cj3*cj3)))+(((4.68e-6)*cj4*r22*sj4))+(((htj1*htj1*htj1*htj1)*(((((-4.68e-6)*cj3*r02*sj0*(sj4*sj4)))+(((-4.68e-6)*cj4*r22*sj4))+(((-4.0)*pz*(cj4*cj4)))+(((-4.68e-6)*cj3*r02*sj0*(cj4*cj4)))+(((-4.0)*pz*(cj3*cj3)*(sj4*sj4)))+(((4.32e-6)*cj0*cj4*r12))+(((-2.26988)*cj0*cj3*r12*sj4))+(((-8.76)*(cj3*cj3)*(sj4*sj4)))+(((2.26988)*cj4*r22))+(((-8.76)*(cj4*cj4)))+(((-4.32e-6)*cj4*r02*sj0))+(((4.68e-6)*cj0*cj3*r12*(sj4*sj4)))+(((4.32e-6)*cj3*r22*sj4))+(((4.68e-6)*cj4*r22*sj4*(cj3*cj3)))+(((4.68e-6)*cj0*cj3*r12*(cj4*cj4)))+(((2.26988)*cj3*r02*sj0*sj4))))))+(((2.26988)*cj0*cj3*r12*sj4)));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[2];
IkReal x6979=cj3*cj3;
IkReal x6980=cj4*cj4;
IkReal x6981=(x6980+x6979+(((-1.0)*x6979*x6980)));
j2eval[0]=x6981;
j2eval[1]=IKsign(x6981);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x6982=(cj3*sj4);
j2eval[0]=((((-525435.185185185)*x6982))+cj4+(((1.08333333333333)*cj3)));
j2eval[1]=IKsign(((((1.17e-6)*cj3))+(((1.08e-6)*cj4))+(((-0.56747)*x6982))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x6983=cj3*cj3;
IkReal x6984=(cj4*sj4);
IkReal x6985=(cj3*sj4);
j2eval[0]=((((-1.0)*x6985))+(((-1.08333333333333)*x6983*x6984))+(((-525435.185185185)*cj4))+(((1.08333333333333)*x6984)));
j2eval[1]=IKsign(((((-1.08e-6)*x6985))+(((1.17e-6)*x6984))+(((-0.56747)*cj4))+(((-1.17e-6)*x6983*x6984))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6986=((3.35381986224151e-6)*cj1);
IkReal x6987=(px*sj0);
IkReal x6988=((1.76221132708977)*sj1);
IkReal x6989=((1.76221132708977)*cj1);
IkReal x6990=((3.35381986224151e-6)*sj1);
IkReal x6991=(cj0*py);
IkReal x6992=(sj1*x6991);
if( IKabs(((2.4482884994363e-6)+((x6987*x6990))+((pz*x6988))+((x6987*x6989))+(((-1.0)*x6990*x6991))+(((-1.0)*x6989*x6991))+(((-1.0)*pz*x6986)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.28641426877553)+(((-1.0)*x6987*x6988))+((pz*x6989))+(((-1.0)*x6986*x6991))+((x6986*x6987))+((x6988*x6991))+((pz*x6990)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.4482884994363e-6)+((x6987*x6990))+((pz*x6988))+((x6987*x6989))+(((-1.0)*x6990*x6991))+(((-1.0)*x6989*x6991))+(((-1.0)*pz*x6986))))+IKsqr(((-1.28641426877553)+(((-1.0)*x6987*x6988))+((pz*x6989))+(((-1.0)*x6986*x6991))+((x6986*x6987))+((x6988*x6991))+((pz*x6990))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((2.4482884994363e-6)+((x6987*x6990))+((pz*x6988))+((x6987*x6989))+(((-1.0)*x6990*x6991))+(((-1.0)*x6989*x6991))+(((-1.0)*pz*x6986))), ((-1.28641426877553)+(((-1.0)*x6987*x6988))+((pz*x6989))+(((-1.0)*x6986*x6991))+((x6986*x6987))+((x6988*x6991))+((pz*x6990))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x6993=IKcos(j2);
IkReal x6994=IKsin(j2);
IkReal x6995=(cj0*r11);
IkReal x6996=(cj1*sj0);
IkReal x6997=(cj5*r01);
IkReal x6998=(cj5*r00);
IkReal x6999=(cj5*sj1);
IkReal x7000=(sj0*sj1);
IkReal x7001=(r00*sj5);
IkReal x7002=(sj1*sj5);
IkReal x7003=((1.0)*cj1);
IkReal x7004=(cj1*sj5);
IkReal x7005=(cj0*py);
IkReal x7006=((1.0)*x6994);
IkReal x7007=(cj5*x7003);
IkReal x7008=((1.0)*cj0*r10);
IkReal x7009=((1.0)*r01*sj5);
evalcond[0]=((((-0.56746883)*x6994))+((px*x6996))+(((-1.0)*x7003*x7005))+(((-1.08e-6)*x6993))+((pz*sj1)));
evalcond[1]=((0.73)+((px*x7000))+(((-1.0)*sj1*x7005))+(((-1.0)*pz*x7003))+(((0.56746883)*x6993))+(((-1.08e-6)*x6994)));
evalcond[2]=(((r21*x6999))+((x6996*x7001))+((r20*x7002))+(((-1.0)*x7006))+(((-1.0)*x6995*x7007))+(((-1.0)*cj0*r10*sj5*x7003))+((x6996*x6997)));
evalcond[3]=(((x7000*x7001))+(((-1.0)*r21*x7007))+(((-1.0)*r20*sj5*x7003))+(((-1.0)*x7002*x7008))+x6993+((x6997*x7000))+(((-1.0)*x6995*x6999)));
evalcond[4]=(((r20*x6999))+(((-1.0)*x6993))+((x6995*x7004))+(((-1.0)*x6996*x7009))+(((-1.0)*cj0*r10*x7007))+(((-1.0)*r21*x7002))+((x6996*x6998)));
evalcond[5]=((((-1.0)*r20*x7007))+((x6995*x7002))+((x6998*x7000))+(((-1.0)*x6999*x7008))+(((-1.0)*x7006))+((r21*x7004))+(((-1.0)*x7000*x7009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x7010=(cj1*pz);
IkReal x7011=(cj0*py);
IkReal x7012=((1.76220406051003)*sj1);
IkReal x7013=((3.35379220296043e-6)*sj1);
IkReal x7014=(px*sj0);
IkReal x7015=((3.35379220296043e-6)*cj1);
IkReal x7016=((1.76220406051003)*x7014);
if( IKabs(((2.44826830816111e-6)+(((-1.0)*x7011*x7013))+((x7013*x7014))+(((-3.35379220296043e-6)*x7010))+((pz*x7012))+((cj1*x7016))+(((-1.76220406051003)*cj1*x7011)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.28640896417232)+(((-1.0)*x7011*x7015))+(((1.76220406051003)*x7010))+(((-1.0)*x7012*x7014))+((x7014*x7015))+((x7011*x7012))+((pz*x7013)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.44826830816111e-6)+(((-1.0)*x7011*x7013))+((x7013*x7014))+(((-3.35379220296043e-6)*x7010))+((pz*x7012))+((cj1*x7016))+(((-1.76220406051003)*cj1*x7011))))+IKsqr(((-1.28640896417232)+(((-1.0)*x7011*x7015))+(((1.76220406051003)*x7010))+(((-1.0)*x7012*x7014))+((x7014*x7015))+((x7011*x7012))+((pz*x7013))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((2.44826830816111e-6)+(((-1.0)*x7011*x7013))+((x7013*x7014))+(((-3.35379220296043e-6)*x7010))+((pz*x7012))+((cj1*x7016))+(((-1.76220406051003)*cj1*x7011))), ((-1.28640896417232)+(((-1.0)*x7011*x7015))+(((1.76220406051003)*x7010))+(((-1.0)*x7012*x7014))+((x7014*x7015))+((x7011*x7012))+((pz*x7013))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x7017=IKcos(j2);
IkReal x7018=IKsin(j2);
IkReal x7019=(cj0*r11);
IkReal x7020=(cj1*sj0);
IkReal x7021=(cj5*r01);
IkReal x7022=(cj5*r00);
IkReal x7023=(cj5*sj1);
IkReal x7024=((1.0)*sj5);
IkReal x7025=(r00*sj5);
IkReal x7026=(cj0*r10);
IkReal x7027=(sj1*sj5);
IkReal x7028=((1.0)*cj1);
IkReal x7029=(cj1*sj5);
IkReal x7030=(sj0*sj1);
IkReal x7031=(cj0*py);
IkReal x7032=((1.0)*x7017);
IkReal x7033=(cj5*x7028);
evalcond[0]=(((px*x7020))+(((-0.56747117)*x7018))+(((-1.08e-6)*x7017))+(((-1.0)*x7028*x7031))+((pz*sj1)));
evalcond[1]=((0.73)+(((-1.0)*pz*x7028))+((px*x7030))+(((-1.08e-6)*x7018))+(((0.56747117)*x7017))+(((-1.0)*sj1*x7031)));
evalcond[2]=(x7018+((x7020*x7021))+((x7020*x7025))+(((-1.0)*x7019*x7033))+((r20*x7027))+(((-1.0)*cj1*x7024*x7026))+((r21*x7023)));
evalcond[3]=(((x7020*x7022))+((x7019*x7029))+((r20*x7023))+(((-1.0)*x7026*x7033))+(((-1.0)*r01*x7020*x7024))+(((-1.0)*r21*sj1*x7024))+(((-1.0)*x7032)));
evalcond[4]=((((-1.0)*r01*x7024*x7030))+((x7019*x7027))+((x7022*x7030))+(((-1.0)*x7023*x7026))+(((-1.0)*r20*x7033))+((r21*x7029))+(((-1.0)*x7018)));
evalcond[5]=((((-1.0)*sj1*x7024*x7026))+(((-1.0)*x7019*x7023))+((x7025*x7030))+(((-1.0)*r21*x7033))+(((-1.0)*cj1*r20*x7024))+((x7021*x7030))+(((-1.0)*x7032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x7034=((3.35381986224151e-6)*cj1);
IkReal x7035=(px*sj0);
IkReal x7036=((1.76221132708977)*sj1);
IkReal x7037=((1.76221132708977)*cj1);
IkReal x7038=((3.35381986224151e-6)*sj1);
IkReal x7039=(cj0*py);
IkReal x7040=(sj1*x7039);
if( IKabs(((2.4482884994363e-6)+(((-1.0)*pz*x7034))+((x7035*x7037))+((x7035*x7038))+((pz*x7036))+(((-1.0)*x7037*x7039))+(((-1.0)*x7038*x7039)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.28641426877553)+(((-1.0)*x7034*x7039))+((pz*x7038))+((pz*x7037))+(((-1.0)*x7035*x7036))+((x7034*x7035))+((x7036*x7039)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.4482884994363e-6)+(((-1.0)*pz*x7034))+((x7035*x7037))+((x7035*x7038))+((pz*x7036))+(((-1.0)*x7037*x7039))+(((-1.0)*x7038*x7039))))+IKsqr(((-1.28641426877553)+(((-1.0)*x7034*x7039))+((pz*x7038))+((pz*x7037))+(((-1.0)*x7035*x7036))+((x7034*x7035))+((x7036*x7039))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((2.4482884994363e-6)+(((-1.0)*pz*x7034))+((x7035*x7037))+((x7035*x7038))+((pz*x7036))+(((-1.0)*x7037*x7039))+(((-1.0)*x7038*x7039))), ((-1.28641426877553)+(((-1.0)*x7034*x7039))+((pz*x7038))+((pz*x7037))+(((-1.0)*x7035*x7036))+((x7034*x7035))+((x7036*x7039))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x7041=IKcos(j2);
IkReal x7042=IKsin(j2);
IkReal x7043=(cj0*r11);
IkReal x7044=(cj0*r10);
IkReal x7045=(cj1*sj0);
IkReal x7046=(cj5*r00);
IkReal x7047=(cj5*sj1);
IkReal x7048=((1.0)*sj5);
IkReal x7049=(r00*sj5);
IkReal x7050=(sj1*sj5);
IkReal x7051=((1.0)*cj1);
IkReal x7052=(cj1*sj5);
IkReal x7053=(sj0*sj1);
IkReal x7054=(cj0*py);
IkReal x7055=(cj5*x7051);
evalcond[0]=(((px*x7045))+(((-0.56746883)*x7042))+((pz*sj1))+(((-1.0)*x7051*x7054))+(((-1.08e-6)*x7041)));
evalcond[1]=((0.73)+(((0.56746883)*x7041))+((px*x7053))+(((-1.0)*pz*x7051))+(((-1.0)*sj1*x7054))+(((-1.08e-6)*x7042)));
evalcond[2]=(x7041+(((-1.0)*x7044*x7055))+((x7045*x7046))+(((-1.0)*r21*sj1*x7048))+((r20*x7047))+(((-1.0)*r01*x7045*x7048))+((x7043*x7052)));
evalcond[3]=(x7042+(((-1.0)*x7044*x7047))+(((-1.0)*r01*x7048*x7053))+((x7046*x7053))+(((-1.0)*r20*x7055))+((r21*x7052))+((x7043*x7050)));
evalcond[4]=(((r20*x7050))+((cj5*r01*x7045))+(((-1.0)*cj1*x7044*x7048))+(((-1.0)*x7042))+((x7045*x7049))+(((-1.0)*x7043*x7055))+((r21*x7047)));
evalcond[5]=(x7041+(((-1.0)*x7043*x7047))+(((-1.0)*sj1*x7044*x7048))+(((-1.0)*r21*x7055))+(((-1.0)*cj1*r20*x7048))+((r01*sj0*x7047))+((x7049*x7053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x7056=(cj1*pz);
IkReal x7057=(cj0*py);
IkReal x7058=((1.76220406051003)*sj1);
IkReal x7059=((3.35379220296043e-6)*sj1);
IkReal x7060=(px*sj0);
IkReal x7061=((3.35379220296043e-6)*cj1);
IkReal x7062=((1.76220406051003)*x7060);
if( IKabs(((2.44826830816111e-6)+((pz*x7058))+((x7059*x7060))+(((-1.76220406051003)*cj1*x7057))+(((-3.35379220296043e-6)*x7056))+((cj1*x7062))+(((-1.0)*x7057*x7059)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.28640896417232)+((pz*x7059))+(((-1.0)*x7058*x7060))+((x7060*x7061))+(((1.76220406051003)*x7056))+(((-1.0)*x7057*x7061))+((x7057*x7058)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.44826830816111e-6)+((pz*x7058))+((x7059*x7060))+(((-1.76220406051003)*cj1*x7057))+(((-3.35379220296043e-6)*x7056))+((cj1*x7062))+(((-1.0)*x7057*x7059))))+IKsqr(((-1.28640896417232)+((pz*x7059))+(((-1.0)*x7058*x7060))+((x7060*x7061))+(((1.76220406051003)*x7056))+(((-1.0)*x7057*x7061))+((x7057*x7058))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((2.44826830816111e-6)+((pz*x7058))+((x7059*x7060))+(((-1.76220406051003)*cj1*x7057))+(((-3.35379220296043e-6)*x7056))+((cj1*x7062))+(((-1.0)*x7057*x7059))), ((-1.28640896417232)+((pz*x7059))+(((-1.0)*x7058*x7060))+((x7060*x7061))+(((1.76220406051003)*x7056))+(((-1.0)*x7057*x7061))+((x7057*x7058))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x7063=IKcos(j2);
IkReal x7064=IKsin(j2);
IkReal x7065=(cj0*r11);
IkReal x7066=(cj1*sj0);
IkReal x7067=(cj5*r01);
IkReal x7068=(cj5*r00);
IkReal x7069=(cj5*sj1);
IkReal x7070=((1.0)*sj5);
IkReal x7071=(r00*sj5);
IkReal x7072=(cj0*r10);
IkReal x7073=(sj1*sj5);
IkReal x7074=((1.0)*cj1);
IkReal x7075=(cj1*sj5);
IkReal x7076=(sj0*sj1);
IkReal x7077=(cj0*py);
IkReal x7078=(cj5*x7074);
evalcond[0]=((((-0.56747117)*x7064))+(((-1.0)*x7074*x7077))+((pz*sj1))+((px*x7066))+(((-1.08e-6)*x7063)));
evalcond[1]=((0.73)+(((0.56747117)*x7063))+(((-1.0)*sj1*x7077))+((px*x7076))+(((-1.08e-6)*x7064))+(((-1.0)*pz*x7074)));
evalcond[2]=(x7064+(((-1.0)*x7065*x7078))+((r21*x7069))+(((-1.0)*cj1*x7070*x7072))+((x7066*x7071))+((r20*x7073))+((x7066*x7067)));
evalcond[3]=(x7063+(((-1.0)*r01*x7066*x7070))+(((-1.0)*x7072*x7078))+((x7065*x7075))+((r20*x7069))+(((-1.0)*r21*sj1*x7070))+((x7066*x7068)));
evalcond[4]=(x7064+(((-1.0)*r20*x7078))+((x7068*x7076))+(((-1.0)*r01*x7070*x7076))+((r21*x7075))+(((-1.0)*x7069*x7072))+((x7065*x7073)));
evalcond[5]=((((-1.0)*r21*x7078))+((x7067*x7076))+(((-1.0)*x7065*x7069))+(((-1.0)*cj1*r20*x7070))+((x7071*x7076))+(((-1.0)*x7063))+(((-1.0)*sj1*x7070*x7072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x7079=(cj1*r22);
IkReal x7080=((1.17e-6)*sj4);
IkReal x7081=(cj3*sj0);
IkReal x7082=((1.0)*sj4);
IkReal x7083=(cj1*px);
IkReal x7084=(r02*sj1);
IkReal x7085=((1.17e-6)*cj4);
IkReal x7086=(cj3*sj1);
IkReal x7087=(cj0*r12);
IkReal x7088=(cj3*sj4);
IkReal x7089=((1.0)*cj4);
IkReal x7090=(cj0*cj1*py);
CheckValue<IkReal> x7091=IKPowWithIntegerCheck(IKsign(((((-1.08e-6)*x7088))+((cj4*x7080))+(((-0.56747)*cj4))+(((-1.0)*cj4*x7080*(cj3*cj3))))),-1);
if(!x7091.valid){
continue;
}
CheckValue<IkReal> x7092 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*x7083*x7089))+(((-1.0)*pz*sj1*x7089))+((x7085*x7086*x7087))+((cj4*x7090))+(((-1.08e-6)*sj0*x7084))+(((1.08e-6)*x7079))+(((1.08e-6)*sj1*x7087))+((cj3*x7079*x7085))+(((-1.0)*x7081*x7084*x7085)))),IkReal(((((-0.56747)*x7079))+(((-1.0)*pz*x7082*x7086))+(((-0.56747)*sj1*x7087))+((sj1*x7080*x7087))+((x7088*x7090))+((x7079*x7080))+(((-1.0)*x7081*x7082*x7083))+(((-1.0)*sj0*x7080*x7084))+(((0.56747)*sj0*x7084)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7092.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7091.value)))+(x7092.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x7093=IKcos(j2);
IkReal x7094=IKsin(j2);
IkReal x7095=(cj0*r11);
IkReal x7096=((1.0)*sj5);
IkReal x7097=(r21*sj1);
IkReal x7098=(cj1*sj0);
IkReal x7099=(cj3*cj4);
IkReal x7100=(cj1*sj5);
IkReal x7101=(cj5*sj1);
IkReal x7102=(cj3*sj4);
IkReal x7103=((1.0)*cj1);
IkReal x7104=(r00*sj5);
IkReal x7105=(cj0*r10);
IkReal x7106=(sj0*sj1);
IkReal x7107=(cj0*py);
IkReal x7108=(sj1*sj5);
IkReal x7109=((1.0)*sj1);
IkReal x7110=(cj0*r12);
IkReal x7111=(cj5*x7103);
IkReal x7112=((1.0)*x7094);
IkReal x7113=((1.17e-6)*x7094);
IkReal x7114=((1.0)*x7093);
IkReal x7115=(sj4*x7093);
evalcond[0]=((((-1.0)*x7103*x7110))+(((-1.0)*x7102*x7114))+((r22*sj1))+((r02*x7098))+(((-1.0)*cj4*x7112)));
evalcond[1]=((((-1.0)*x7102*x7112))+((r02*x7106))+((cj4*x7093))+(((-1.0)*x7109*x7110))+(((-1.0)*r22*x7103)));
evalcond[2]=((((-1.17e-6)*x7093*x7099))+((px*x7098))+(((-1.0)*x7103*x7107))+(((-1.08e-6)*x7093))+((sj4*x7113))+((pz*sj1))+(((-0.56747)*x7094)));
evalcond[3]=((0.73)+(((-1.08e-6)*x7094))+(((-1.0)*pz*x7103))+(((-1.0)*x7099*x7113))+(((0.56747)*x7093))+(((-1.17e-6)*x7115))+((px*x7106))+(((-1.0)*x7107*x7109)));
evalcond[4]=(((x7095*x7100))+((cj5*r00*x7098))+(((-1.0)*x7096*x7097))+(((-1.0)*sj3*x7114))+(((-1.0)*r01*x7096*x7098))+((r20*x7101))+(((-1.0)*x7105*x7111)));
evalcond[5]=(((x7095*x7108))+((r21*x7100))+((r00*sj0*x7101))+(((-1.0)*r20*x7111))+(((-1.0)*sj3*x7112))+(((-1.0)*x7101*x7105))+(((-1.0)*r01*x7096*x7106)));
evalcond[6]=((((-1.0)*sj4*x7112))+((cj5*r01*x7098))+((cj5*x7097))+((x7093*x7099))+(((-1.0)*cj1*x7096*x7105))+(((-1.0)*x7095*x7111))+((x7098*x7104))+((r20*x7108)));
evalcond[7]=(x7115+((r01*sj0*x7101))+(((-1.0)*r21*x7111))+(((-1.0)*cj1*r20*x7096))+(((-1.0)*x7095*x7101))+((x7094*x7099))+((x7104*x7106))+(((-1.0)*sj1*x7096*x7105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x7116=(r22*sj1);
IkReal x7117=((1.17e-6)*sj4);
IkReal x7118=(pz*sj1);
IkReal x7119=(cj0*cj1);
IkReal x7120=((1.17e-6)*cj3);
IkReal x7121=(cj3*sj4);
IkReal x7122=(cj1*px*sj0);
IkReal x7123=((1.0)*x7121);
IkReal x7124=(cj1*r02*sj0);
CheckValue<IkReal> x7125 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*r12*x7119*x7120))+(((-1.0)*x7118*x7123))+(((-1.0)*x7122*x7123))+((cj4*x7120*x7124))+(((1.08e-6)*x7116))+((cj4*x7116*x7120))+(((-1.08e-6)*r12*x7119))+((py*x7119*x7121))+(((1.08e-6)*x7124)))),IkReal((((x7116*x7117))+(((-1.0)*r12*x7117*x7119))+(((-1.0)*cj4*py*x7119))+((x7117*x7124))+(((-0.56747)*x7116))+(((0.56747)*r12*x7119))+((cj4*x7122))+((cj4*x7118))+(((-0.56747)*x7124)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7125.valid){
continue;
}
CheckValue<IkReal> x7126=IKPowWithIntegerCheck(IKsign((x7120+(((1.08e-6)*cj4))+(((-0.56747)*x7121)))),-1);
if(!x7126.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x7125.value)+(((1.5707963267949)*(x7126.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x7127=IKcos(j2);
IkReal x7128=IKsin(j2);
IkReal x7129=(cj0*r11);
IkReal x7130=((1.0)*sj5);
IkReal x7131=(r21*sj1);
IkReal x7132=(cj1*sj0);
IkReal x7133=(cj3*cj4);
IkReal x7134=(cj1*sj5);
IkReal x7135=(cj5*sj1);
IkReal x7136=(cj3*sj4);
IkReal x7137=((1.0)*cj1);
IkReal x7138=(r00*sj5);
IkReal x7139=(cj0*r10);
IkReal x7140=(sj0*sj1);
IkReal x7141=(cj0*py);
IkReal x7142=(sj1*sj5);
IkReal x7143=((1.0)*sj1);
IkReal x7144=(cj0*r12);
IkReal x7145=(cj5*x7137);
IkReal x7146=((1.0)*x7128);
IkReal x7147=((1.17e-6)*x7128);
IkReal x7148=((1.0)*x7127);
IkReal x7149=(sj4*x7127);
evalcond[0]=(((r22*sj1))+(((-1.0)*cj4*x7146))+(((-1.0)*x7136*x7148))+(((-1.0)*x7137*x7144))+((r02*x7132)));
evalcond[1]=((((-1.0)*r22*x7137))+(((-1.0)*x7136*x7146))+((r02*x7140))+((cj4*x7127))+(((-1.0)*x7143*x7144)));
evalcond[2]=((((-1.08e-6)*x7127))+(((-1.0)*x7137*x7141))+(((-1.17e-6)*x7127*x7133))+((sj4*x7147))+((pz*sj1))+((px*x7132))+(((-0.56747)*x7128)));
evalcond[3]=((0.73)+(((-1.17e-6)*x7149))+(((-1.0)*pz*x7137))+(((-1.08e-6)*x7128))+(((-1.0)*x7141*x7143))+(((0.56747)*x7127))+((px*x7140))+(((-1.0)*x7133*x7147)));
evalcond[4]=((((-1.0)*x7130*x7131))+(((-1.0)*r01*x7130*x7132))+((cj5*r00*x7132))+(((-1.0)*x7139*x7145))+((r20*x7135))+(((-1.0)*sj3*x7148))+((x7129*x7134)));
evalcond[5]=(((r21*x7134))+(((-1.0)*r20*x7145))+((x7129*x7142))+(((-1.0)*r01*x7130*x7140))+(((-1.0)*sj3*x7146))+(((-1.0)*x7135*x7139))+((r00*sj0*x7135)));
evalcond[6]=(((r20*x7142))+((x7127*x7133))+((cj5*r01*x7132))+((cj5*x7131))+(((-1.0)*x7129*x7145))+((x7132*x7138))+(((-1.0)*sj4*x7146))+(((-1.0)*cj1*x7130*x7139)));
evalcond[7]=(x7149+((x7138*x7140))+((r01*sj0*x7135))+(((-1.0)*x7129*x7135))+(((-1.0)*sj1*x7130*x7139))+(((-1.0)*cj1*r20*x7130))+(((-1.0)*r21*x7145))+((x7128*x7133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x7150=cj3*cj3;
IkReal x7151=cj4*cj4;
IkReal x7152=(cj0*r12);
IkReal x7153=(cj1*cj4);
IkReal x7154=(r22*sj1);
IkReal x7155=(cj3*sj4);
IkReal x7156=(r02*sj0);
IkReal x7157=((1.0)*sj1);
IkReal x7158=((1.0)*cj1*x7155);
CheckValue<IkReal> x7159=IKPowWithIntegerCheck(IKsign((x7151+x7150+(((-1.0)*x7150*x7151)))),-1);
if(!x7159.valid){
continue;
}
CheckValue<IkReal> x7160 = IKatan2WithCheck(IkReal((((sj1*x7155*x7156))+(((-1.0)*x7152*x7153))+(((-1.0)*r22*x7158))+((cj4*x7154))+((x7153*x7156))+(((-1.0)*x7152*x7155*x7157)))),IkReal(((((-1.0)*x7152*x7158))+((r22*x7153))+(((-1.0)*cj4*x7156*x7157))+((cj1*x7155*x7156))+((x7154*x7155))+((cj4*sj1*x7152)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7160.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7159.value)))+(x7160.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x7161=IKcos(j2);
IkReal x7162=IKsin(j2);
IkReal x7163=(cj0*r11);
IkReal x7164=((1.0)*sj5);
IkReal x7165=(r21*sj1);
IkReal x7166=(cj1*sj0);
IkReal x7167=(cj3*cj4);
IkReal x7168=(cj1*sj5);
IkReal x7169=(cj5*sj1);
IkReal x7170=(cj3*sj4);
IkReal x7171=((1.0)*cj1);
IkReal x7172=(r00*sj5);
IkReal x7173=(cj0*r10);
IkReal x7174=(sj0*sj1);
IkReal x7175=(cj0*py);
IkReal x7176=(sj1*sj5);
IkReal x7177=((1.0)*sj1);
IkReal x7178=(cj0*r12);
IkReal x7179=(cj5*x7171);
IkReal x7180=((1.0)*x7162);
IkReal x7181=((1.17e-6)*x7162);
IkReal x7182=((1.0)*x7161);
IkReal x7183=(sj4*x7161);
evalcond[0]=((((-1.0)*x7170*x7182))+(((-1.0)*x7171*x7178))+((r22*sj1))+(((-1.0)*cj4*x7180))+((r02*x7166)));
evalcond[1]=((((-1.0)*x7177*x7178))+(((-1.0)*x7170*x7180))+((cj4*x7161))+((r02*x7174))+(((-1.0)*r22*x7171)));
evalcond[2]=((((-1.0)*x7171*x7175))+((px*x7166))+(((-1.08e-6)*x7161))+((pz*sj1))+((sj4*x7181))+(((-0.56747)*x7162))+(((-1.17e-6)*x7161*x7167)));
evalcond[3]=((0.73)+(((-1.17e-6)*x7183))+(((-1.08e-6)*x7162))+(((-1.0)*pz*x7171))+(((0.56747)*x7161))+(((-1.0)*x7167*x7181))+((px*x7174))+(((-1.0)*x7175*x7177)));
evalcond[4]=((((-1.0)*x7164*x7165))+((cj5*r00*x7166))+((r20*x7169))+(((-1.0)*x7173*x7179))+(((-1.0)*sj3*x7182))+((x7163*x7168))+(((-1.0)*r01*x7164*x7166)));
evalcond[5]=((((-1.0)*r01*x7164*x7174))+((r00*sj0*x7169))+(((-1.0)*r20*x7179))+(((-1.0)*sj3*x7180))+(((-1.0)*x7169*x7173))+((r21*x7168))+((x7163*x7176)));
evalcond[6]=(((x7166*x7172))+((cj5*x7165))+((cj5*r01*x7166))+(((-1.0)*cj1*x7164*x7173))+((x7161*x7167))+(((-1.0)*sj4*x7180))+(((-1.0)*x7163*x7179))+((r20*x7176)));
evalcond[7]=(x7183+((x7162*x7167))+(((-1.0)*r21*x7179))+(((-1.0)*x7163*x7169))+((x7172*x7174))+(((-1.0)*sj1*x7164*x7173))+(((-1.0)*cj1*r20*x7164))+((r01*sj0*x7169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7184=((1.0)*cj5);
IkReal x7185=(sj3*sj4);
IkReal x7186=(sj5*x7185);
CheckValue<IkReal> x7187 = IKatan2WithCheck(IkReal((((r01*x7186))+(((-1.0)*cj3*r02))+(((-1.0)*r00*x7184*x7185)))),IkReal((((cj5*r10*x7185))+((cj3*r12))+(((-1.0)*r11*x7186)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7187.valid){
continue;
}
CheckValue<IkReal> x7188=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7184))+(((-1.0)*r20*sj5)))),-1);
if(!x7188.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x7187.value)+(((1.5707963267949)*(x7188.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7189=IKcos(j0);
IkReal x7190=IKsin(j0);
IkReal x7191=(cj4*sj3);
IkReal x7192=((1.0)*x7189);
IkReal x7193=((1.0)*x7190);
evalcond[0]=((((-1.0)*r12*x7193))+(((-1.0)*sj3*sj4))+(((-1.0)*r02*x7192)));
evalcond[1]=((((-1.0)*px*x7192))+(((-1.0)*py*x7193))+(((-1.17e-6)*x7191)));
evalcond[2]=((((-1.0)*cj5*r00*x7192))+cj3+((r01*sj5*x7189))+((r11*sj5*x7190))+(((-1.0)*cj5*r10*x7193)));
evalcond[3]=(x7191+(((-1.0)*cj5*r01*x7192))+(((-1.0)*cj5*r11*x7193))+(((-1.0)*r10*sj5*x7193))+(((-1.0)*r00*sj5*x7192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x7194=cj3*cj3;
IkReal x7195=cj4*cj4;
IkReal x7196=sj4*sj4;
IkReal x7197=(cj3*r22);
IkReal x7198=(cj4*r22);
IkReal x7199=((4.53976)*sj4);
IkReal x7200=(r02*sj0);
IkReal x7201=((16.0)*pz);
IkReal x7202=((8.0)*pz);
IkReal x7203=((1.872e-5)*sj4);
IkReal x7204=((4.32e-6)*sj4);
IkReal x7205=((9.07952)*sj4);
IkReal x7206=(px*sj0);
IkReal x7207=(cj0*py);
IkReal x7208=((4.68e-6)*sj4);
IkReal x7209=((9.36e-6)*sj4);
IkReal x7210=(cj0*cj3*r12);
IkReal x7211=((1.872e-5)*x7195);
IkReal x7212=(cj0*cj4*r12);
IkReal x7213=(cj4*x7208);
IkReal x7214=((4.0)*x7195);
IkReal x7215=((9.36e-6)*x7195);
IkReal x7216=(x7194*x7196);
IkReal x7217=(cj3*x7196*x7200);
IkReal x7218=((((2.26988)*sj4*x7197))+((x7204*x7210))+((x7206*x7214))+(((4.0)*x7206*x7216))+((x7194*x7208*x7212))+((x7200*x7213))+(((2.26988)*x7212)));
IkReal x7219=(((x7194*x7200*x7213))+(((4.68e-6)*x7196*x7197))+((x7208*x7212))+(((4.68e-6)*x7195*x7197))+(((4.0)*x7207*x7216))+((x7207*x7214))+(((4.32e-6)*x7198))+(((2.26988)*cj4*x7200))+((cj3*x7200*x7204)));
IkReal x7220=((((-1.0)*x7202*x7216))+(((4.53976)*x7198))+((x7194*x7198*x7209))+(((-1.0)*x7195*x7202))+((x7210*x7215))+(((9.36e-6)*x7196*x7210))+(((-9.36e-6)*x7217))+(((-1.0)*x7199*x7210))+(((-1.0)*x7198*x7209))+(((-8.64e-6)*cj4*x7200))+(((8.64e-6)*sj4*x7197))+(((8.64e-6)*x7212))+(((-1.0)*cj3*x7200*x7215))+((cj3*x7199*x7200)));
IkReal x7221=(x7218+(((-1.0)*x7219)));
IkReal x7222=(x7219+(((-1.0)*x7218)));
op[0]=x7221;
op[1]=x7220;
op[2]=x7221;
op[3]=((((-1.872e-5)*x7217))+(((9.07952)*x7198))+(((1.728e-5)*sj4*x7197))+((x7194*x7198*x7203))+(((-1.0)*x7195*x7201))+(((-1.0)*x7205*x7210))+(((-1.728e-5)*cj4*x7200))+((x7210*x7211))+(((-1.0)*x7198*x7203))+(((-1.0)*x7201*x7216))+(((1.872e-5)*x7196*x7210))+(((-1.0)*cj3*x7200*x7211))+(((1.728e-5)*x7212))+((cj3*x7200*x7205)));
op[4]=x7222;
op[5]=x7220;
op[6]=x7222;
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

j1evalpoly[0]=((((-2.92)*(cj3*cj3)*(sj4*sj4)))+(((4.0)*pz*(cj4*cj4)))+(((-2.92)*(cj4*cj4)))+(((htj1*htj1)*(((((4.0)*pz*(cj4*cj4)))+(((-4.68e-6)*cj0*cj3*r12*(cj4*cj4)))+(((-2.26988)*cj3*r02*sj0*sj4))+(((4.68e-6)*cj3*r02*sj0*(cj4*cj4)))+(((-4.32e-6)*cj3*r22*sj4))+(((4.32e-6)*cj4*r02*sj0))+(((-8.76)*(cj3*cj3)*(sj4*sj4)))+(((-8.76)*(cj4*cj4)))+(((-4.68e-6)*cj0*cj3*r12*(sj4*sj4)))+(((4.68e-6)*cj3*r02*sj0*(sj4*sj4)))+(((-4.32e-6)*cj0*cj4*r12))+(((-2.26988)*cj4*r22))+(((4.0)*pz*(cj3*cj3)*(sj4*sj4)))+(((-4.68e-6)*cj4*r22*sj4*(cj3*cj3)))+(((4.68e-6)*cj4*r22*sj4))+(((2.26988)*cj0*cj3*r12*sj4))))))+(((-4.68e-6)*cj0*cj3*r12*(cj4*cj4)))+(((-2.26988)*cj3*r02*sj0*sj4))+(((4.68e-6)*cj3*r02*sj0*(cj4*cj4)))+(((-4.32e-6)*cj3*r22*sj4))+(((4.32e-6)*cj4*r02*sj0))+(((-4.68e-6)*cj0*cj3*r12*(sj4*sj4)))+(((4.68e-6)*cj3*r02*sj0*(sj4*sj4)))+(((-4.32e-6)*cj0*cj4*r12))+(((-2.26988)*cj4*r22))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-2.92)*(cj3*cj3)*(sj4*sj4)))+(((-2.92)*(cj4*cj4)))+(((-4.68e-6)*cj3*r02*sj0*(sj4*sj4)))+(((-4.68e-6)*cj4*r22*sj4))+(((-4.0)*pz*(cj4*cj4)))+(((-4.68e-6)*cj3*r02*sj0*(cj4*cj4)))+(((-4.0)*pz*(cj3*cj3)*(sj4*sj4)))+(((4.32e-6)*cj0*cj4*r12))+(((-2.26988)*cj0*cj3*r12*sj4))+(((2.26988)*cj4*r22))+(((-4.32e-6)*cj4*r02*sj0))+(((4.68e-6)*cj0*cj3*r12*(sj4*sj4)))+(((4.32e-6)*cj3*r22*sj4))+(((4.68e-6)*cj4*r22*sj4*(cj3*cj3)))+(((4.68e-6)*cj0*cj3*r12*(cj4*cj4)))+(((2.26988)*cj3*r02*sj0*sj4))))))+(((htj1*htj1*htj1*htj1*htj1)*(((((-8.0)*px*sj0*(cj3*cj3)*(sj4*sj4)))+(((-4.53976)*cj0*cj4*r12))+(((9.36e-6)*cj0*cj4*r12*sj4))+(((4.53976)*cj4*r02*sj0))+(((-9.36e-6)*cj4*r02*sj0*sj4))+(((9.36e-6)*cj3*r22*(sj4*sj4)))+(((-8.0)*px*sj0*(cj4*cj4)))+(((9.36e-6)*cj3*r22*(cj4*cj4)))+(((8.0)*cj0*py*(cj4*cj4)))+(((-4.53976)*cj3*r22*sj4))+(((8.0)*cj0*py*(cj3*cj3)*(sj4*sj4)))+(((8.64e-6)*cj3*r02*sj0*sj4))+(((9.36e-6)*cj4*r02*sj0*sj4*(cj3*cj3)))+(((8.64e-6)*cj4*r22))+(((-9.36e-6)*cj0*cj4*r12*sj4*(cj3*cj3)))+(((-8.64e-6)*cj0*cj3*r12*sj4))))))+(((htj1*htj1*htj1)*(((((-16.0)*px*sj0*(cj4*cj4)))+(((-1.872e-5)*cj0*cj4*r12*sj4*(cj3*cj3)))+(((-9.07952)*cj0*cj4*r12))+(((1.872e-5)*cj4*r02*sj0*sj4*(cj3*cj3)))+(((1.872e-5)*cj3*r22*(sj4*sj4)))+(((-1.728e-5)*cj0*cj3*r12*sj4))+(((-9.07952)*cj3*r22*sj4))+(((-16.0)*px*sj0*(cj3*cj3)*(sj4*sj4)))+(((9.07952)*cj4*r02*sj0))+(((16.0)*cj0*py*(cj3*cj3)*(sj4*sj4)))+(((1.872e-5)*cj0*cj4*r12*sj4))+(((1.872e-5)*cj3*r22*(cj4*cj4)))+(((1.728e-5)*cj4*r22))+(((1.728e-5)*cj3*r02*sj0*sj4))+(((16.0)*cj0*py*(cj4*cj4)))+(((-1.872e-5)*cj4*r02*sj0*sj4))))))+((htj1*(((((-8.0)*px*sj0*(cj3*cj3)*(sj4*sj4)))+(((-4.53976)*cj0*cj4*r12))+(((9.36e-6)*cj0*cj4*r12*sj4))+(((4.53976)*cj4*r02*sj0))+(((-9.36e-6)*cj4*r02*sj0*sj4))+(((9.36e-6)*cj3*r22*(sj4*sj4)))+(((-8.0)*px*sj0*(cj4*cj4)))+(((9.36e-6)*cj3*r22*(cj4*cj4)))+(((8.0)*cj0*py*(cj4*cj4)))+(((-4.53976)*cj3*r22*sj4))+(((8.0)*cj0*py*(cj3*cj3)*(sj4*sj4)))+(((8.64e-6)*cj3*r02*sj0*sj4))+(((9.36e-6)*cj4*r02*sj0*sj4*(cj3*cj3)))+(((8.64e-6)*cj4*r22))+(((-9.36e-6)*cj0*cj4*r12*sj4*(cj3*cj3)))+(((-8.64e-6)*cj0*cj3*r12*sj4))))))+(((4.0)*pz*(cj3*cj3)*(sj4*sj4)))+(((-4.68e-6)*cj4*r22*sj4*(cj3*cj3)))+(((4.68e-6)*cj4*r22*sj4))+(((htj1*htj1*htj1*htj1)*(((((-4.68e-6)*cj3*r02*sj0*(sj4*sj4)))+(((-4.68e-6)*cj4*r22*sj4))+(((-4.0)*pz*(cj4*cj4)))+(((-4.68e-6)*cj3*r02*sj0*(cj4*cj4)))+(((-4.0)*pz*(cj3*cj3)*(sj4*sj4)))+(((4.32e-6)*cj0*cj4*r12))+(((-2.26988)*cj0*cj3*r12*sj4))+(((-8.76)*(cj3*cj3)*(sj4*sj4)))+(((2.26988)*cj4*r22))+(((-8.76)*(cj4*cj4)))+(((-4.32e-6)*cj4*r02*sj0))+(((4.68e-6)*cj0*cj3*r12*(sj4*sj4)))+(((4.32e-6)*cj3*r22*sj4))+(((4.68e-6)*cj4*r22*sj4*(cj3*cj3)))+(((4.68e-6)*cj0*cj3*r12*(cj4*cj4)))+(((2.26988)*cj3*r02*sj0*sj4))))))+(((2.26988)*cj0*cj3*r12*sj4)));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[2];
IkReal x7223=cj3*cj3;
IkReal x7224=cj4*cj4;
IkReal x7225=(x7223+x7224+(((-1.0)*x7223*x7224)));
j2eval[0]=x7225;
j2eval[1]=IKsign(x7225);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x7226=(cj3*sj4);
j2eval[0]=(cj4+(((-525435.185185185)*x7226))+(((1.08333333333333)*cj3)));
j2eval[1]=IKsign(((((1.17e-6)*cj3))+(((1.08e-6)*cj4))+(((-0.56747)*x7226))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x7227=cj3*cj3;
IkReal x7228=(cj4*sj4);
IkReal x7229=(cj3*sj4);
j2eval[0]=((((-525435.185185185)*cj4))+(((-1.08333333333333)*x7227*x7228))+(((1.08333333333333)*x7228))+(((-1.0)*x7229)));
j2eval[1]=IKsign(((((1.17e-6)*x7228))+(((-1.08e-6)*x7229))+(((-1.17e-6)*x7227*x7228))+(((-0.56747)*cj4))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x7230=((3.35381986224151e-6)*cj1);
IkReal x7231=(px*sj0);
IkReal x7232=((1.76221132708977)*sj1);
IkReal x7233=((1.76221132708977)*cj1);
IkReal x7234=((3.35381986224151e-6)*sj1);
IkReal x7235=(cj0*py);
IkReal x7236=(sj1*x7235);
if( IKabs(((2.4482884994363e-6)+((x7231*x7233))+((x7231*x7234))+(((-1.0)*x7234*x7235))+(((-1.0)*x7233*x7235))+(((-1.0)*pz*x7230))+((pz*x7232)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.28641426877553)+(((-1.0)*x7231*x7232))+((x7232*x7235))+((x7230*x7231))+(((-1.0)*x7230*x7235))+((pz*x7233))+((pz*x7234)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.4482884994363e-6)+((x7231*x7233))+((x7231*x7234))+(((-1.0)*x7234*x7235))+(((-1.0)*x7233*x7235))+(((-1.0)*pz*x7230))+((pz*x7232))))+IKsqr(((-1.28641426877553)+(((-1.0)*x7231*x7232))+((x7232*x7235))+((x7230*x7231))+(((-1.0)*x7230*x7235))+((pz*x7233))+((pz*x7234))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((2.4482884994363e-6)+((x7231*x7233))+((x7231*x7234))+(((-1.0)*x7234*x7235))+(((-1.0)*x7233*x7235))+(((-1.0)*pz*x7230))+((pz*x7232))), ((-1.28641426877553)+(((-1.0)*x7231*x7232))+((x7232*x7235))+((x7230*x7231))+(((-1.0)*x7230*x7235))+((pz*x7233))+((pz*x7234))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x7237=IKcos(j2);
IkReal x7238=IKsin(j2);
IkReal x7239=(cj0*r11);
IkReal x7240=(cj1*sj0);
IkReal x7241=(cj5*r01);
IkReal x7242=(cj5*r00);
IkReal x7243=(cj5*sj1);
IkReal x7244=(sj0*sj1);
IkReal x7245=(r00*sj5);
IkReal x7246=(sj1*sj5);
IkReal x7247=((1.0)*cj1);
IkReal x7248=(cj1*sj5);
IkReal x7249=(cj0*py);
IkReal x7250=((1.0)*x7238);
IkReal x7251=(cj5*x7247);
IkReal x7252=((1.0)*cj0*r10);
IkReal x7253=((1.0)*r01*sj5);
evalcond[0]=((((-1.0)*x7247*x7249))+(((-1.08e-6)*x7237))+(((-0.56746883)*x7238))+((pz*sj1))+((px*x7240)));
evalcond[1]=((0.73)+(((-1.0)*sj1*x7249))+(((-1.08e-6)*x7238))+(((-1.0)*pz*x7247))+(((0.56746883)*x7237))+((px*x7244)));
evalcond[2]=(((x7240*x7245))+((x7240*x7241))+(((-1.0)*x7250))+((r20*x7246))+(((-1.0)*x7239*x7251))+(((-1.0)*cj0*r10*sj5*x7247))+((r21*x7243)));
evalcond[3]=((((-1.0)*r21*x7251))+(((-1.0)*r20*sj5*x7247))+x7237+((x7244*x7245))+(((-1.0)*x7246*x7252))+((x7241*x7244))+(((-1.0)*x7239*x7243)));
evalcond[4]=(((x7240*x7242))+(((-1.0)*r21*x7246))+((r20*x7243))+(((-1.0)*cj0*r10*x7251))+((x7239*x7248))+(((-1.0)*x7240*x7253))+(((-1.0)*x7237)));
evalcond[5]=((((-1.0)*x7244*x7253))+(((-1.0)*x7243*x7252))+(((-1.0)*x7250))+((x7242*x7244))+((x7239*x7246))+((r21*x7248))+(((-1.0)*r20*x7251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x7254=(cj1*pz);
IkReal x7255=(cj0*py);
IkReal x7256=((1.76220406051003)*sj1);
IkReal x7257=((3.35379220296043e-6)*sj1);
IkReal x7258=(px*sj0);
IkReal x7259=((3.35379220296043e-6)*cj1);
IkReal x7260=((1.76220406051003)*x7258);
if( IKabs(((2.44826830816111e-6)+((x7257*x7258))+(((-3.35379220296043e-6)*x7254))+((pz*x7256))+((cj1*x7260))+(((-1.0)*x7255*x7257))+(((-1.76220406051003)*cj1*x7255)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.28640896417232)+((pz*x7257))+(((1.76220406051003)*x7254))+(((-1.0)*x7255*x7259))+(((-1.0)*x7256*x7258))+((x7258*x7259))+((x7255*x7256)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.44826830816111e-6)+((x7257*x7258))+(((-3.35379220296043e-6)*x7254))+((pz*x7256))+((cj1*x7260))+(((-1.0)*x7255*x7257))+(((-1.76220406051003)*cj1*x7255))))+IKsqr(((-1.28640896417232)+((pz*x7257))+(((1.76220406051003)*x7254))+(((-1.0)*x7255*x7259))+(((-1.0)*x7256*x7258))+((x7258*x7259))+((x7255*x7256))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((2.44826830816111e-6)+((x7257*x7258))+(((-3.35379220296043e-6)*x7254))+((pz*x7256))+((cj1*x7260))+(((-1.0)*x7255*x7257))+(((-1.76220406051003)*cj1*x7255))), ((-1.28640896417232)+((pz*x7257))+(((1.76220406051003)*x7254))+(((-1.0)*x7255*x7259))+(((-1.0)*x7256*x7258))+((x7258*x7259))+((x7255*x7256))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x7261=IKcos(j2);
IkReal x7262=IKsin(j2);
IkReal x7263=(cj0*r11);
IkReal x7264=(cj1*sj0);
IkReal x7265=(cj5*r01);
IkReal x7266=(cj5*r00);
IkReal x7267=(cj5*sj1);
IkReal x7268=((1.0)*sj5);
IkReal x7269=(r00*sj5);
IkReal x7270=(cj0*r10);
IkReal x7271=(sj1*sj5);
IkReal x7272=((1.0)*cj1);
IkReal x7273=(cj1*sj5);
IkReal x7274=(sj0*sj1);
IkReal x7275=(cj0*py);
IkReal x7276=((1.0)*x7261);
IkReal x7277=(cj5*x7272);
evalcond[0]=((((-1.0)*x7272*x7275))+(((-0.56747117)*x7262))+((px*x7264))+(((-1.08e-6)*x7261))+((pz*sj1)));
evalcond[1]=((0.73)+((px*x7274))+(((-1.0)*pz*x7272))+(((0.56747117)*x7261))+(((-1.08e-6)*x7262))+(((-1.0)*sj1*x7275)));
evalcond[2]=(x7262+((r20*x7271))+((x7264*x7269))+((x7264*x7265))+((r21*x7267))+(((-1.0)*cj1*x7268*x7270))+(((-1.0)*x7263*x7277)));
evalcond[3]=(((x7263*x7273))+(((-1.0)*r01*x7264*x7268))+((x7264*x7266))+(((-1.0)*r21*sj1*x7268))+(((-1.0)*x7270*x7277))+(((-1.0)*x7276))+((r20*x7267)));
evalcond[4]=((((-1.0)*r01*x7268*x7274))+(((-1.0)*r20*x7277))+((x7263*x7271))+(((-1.0)*x7262))+(((-1.0)*x7267*x7270))+((r21*x7273))+((x7266*x7274)));
evalcond[5]=(((x7265*x7274))+(((-1.0)*r21*x7277))+(((-1.0)*x7263*x7267))+((x7269*x7274))+(((-1.0)*sj1*x7268*x7270))+(((-1.0)*cj1*r20*x7268))+(((-1.0)*x7276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x7278=((3.35381986224151e-6)*cj1);
IkReal x7279=(px*sj0);
IkReal x7280=((1.76221132708977)*sj1);
IkReal x7281=((1.76221132708977)*cj1);
IkReal x7282=((3.35381986224151e-6)*sj1);
IkReal x7283=(cj0*py);
IkReal x7284=(sj1*x7283);
if( IKabs(((2.4482884994363e-6)+(((-1.0)*x7282*x7283))+(((-1.0)*pz*x7278))+((pz*x7280))+((x7279*x7282))+((x7279*x7281))+(((-1.0)*x7281*x7283)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.28641426877553)+((x7280*x7283))+((pz*x7281))+((pz*x7282))+(((-1.0)*x7278*x7283))+((x7278*x7279))+(((-1.0)*x7279*x7280)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.4482884994363e-6)+(((-1.0)*x7282*x7283))+(((-1.0)*pz*x7278))+((pz*x7280))+((x7279*x7282))+((x7279*x7281))+(((-1.0)*x7281*x7283))))+IKsqr(((-1.28641426877553)+((x7280*x7283))+((pz*x7281))+((pz*x7282))+(((-1.0)*x7278*x7283))+((x7278*x7279))+(((-1.0)*x7279*x7280))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((2.4482884994363e-6)+(((-1.0)*x7282*x7283))+(((-1.0)*pz*x7278))+((pz*x7280))+((x7279*x7282))+((x7279*x7281))+(((-1.0)*x7281*x7283))), ((-1.28641426877553)+((x7280*x7283))+((pz*x7281))+((pz*x7282))+(((-1.0)*x7278*x7283))+((x7278*x7279))+(((-1.0)*x7279*x7280))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x7285=IKcos(j2);
IkReal x7286=IKsin(j2);
IkReal x7287=(cj0*r11);
IkReal x7288=(cj0*r10);
IkReal x7289=(cj1*sj0);
IkReal x7290=(cj5*r00);
IkReal x7291=(cj5*sj1);
IkReal x7292=((1.0)*sj5);
IkReal x7293=(r00*sj5);
IkReal x7294=(sj1*sj5);
IkReal x7295=((1.0)*cj1);
IkReal x7296=(cj1*sj5);
IkReal x7297=(sj0*sj1);
IkReal x7298=(cj0*py);
IkReal x7299=(cj5*x7295);
evalcond[0]=((((-0.56746883)*x7286))+(((-1.0)*x7295*x7298))+((px*x7289))+((pz*sj1))+(((-1.08e-6)*x7285)));
evalcond[1]=((0.73)+(((-1.0)*pz*x7295))+(((0.56746883)*x7285))+(((-1.0)*sj1*x7298))+((px*x7297))+(((-1.08e-6)*x7286)));
evalcond[2]=((((-1.0)*r01*x7289*x7292))+x7285+(((-1.0)*x7288*x7299))+(((-1.0)*r21*sj1*x7292))+((r20*x7291))+((x7289*x7290))+((x7287*x7296)));
evalcond[3]=((((-1.0)*x7288*x7291))+x7286+(((-1.0)*r01*x7292*x7297))+(((-1.0)*r20*x7299))+((r21*x7296))+((x7290*x7297))+((x7287*x7294)));
evalcond[4]=(((r21*x7291))+(((-1.0)*x7286))+((cj5*r01*x7289))+((r20*x7294))+((x7289*x7293))+(((-1.0)*x7287*x7299))+(((-1.0)*cj1*x7288*x7292)));
evalcond[5]=(((r01*sj0*x7291))+x7285+(((-1.0)*r21*x7299))+((x7293*x7297))+(((-1.0)*x7287*x7291))+(((-1.0)*sj1*x7288*x7292))+(((-1.0)*cj1*r20*x7292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x7300=(cj1*pz);
IkReal x7301=(cj0*py);
IkReal x7302=((1.76220406051003)*sj1);
IkReal x7303=((3.35379220296043e-6)*sj1);
IkReal x7304=(px*sj0);
IkReal x7305=((3.35379220296043e-6)*cj1);
IkReal x7306=((1.76220406051003)*x7304);
if( IKabs(((2.44826830816111e-6)+((x7303*x7304))+((cj1*x7306))+((pz*x7302))+(((-1.0)*x7301*x7303))+(((-1.76220406051003)*cj1*x7301))+(((-3.35379220296043e-6)*x7300)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.28640896417232)+((x7301*x7302))+((pz*x7303))+((x7304*x7305))+(((-1.0)*x7301*x7305))+(((-1.0)*x7302*x7304))+(((1.76220406051003)*x7300)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.44826830816111e-6)+((x7303*x7304))+((cj1*x7306))+((pz*x7302))+(((-1.0)*x7301*x7303))+(((-1.76220406051003)*cj1*x7301))+(((-3.35379220296043e-6)*x7300))))+IKsqr(((-1.28640896417232)+((x7301*x7302))+((pz*x7303))+((x7304*x7305))+(((-1.0)*x7301*x7305))+(((-1.0)*x7302*x7304))+(((1.76220406051003)*x7300))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((2.44826830816111e-6)+((x7303*x7304))+((cj1*x7306))+((pz*x7302))+(((-1.0)*x7301*x7303))+(((-1.76220406051003)*cj1*x7301))+(((-3.35379220296043e-6)*x7300))), ((-1.28640896417232)+((x7301*x7302))+((pz*x7303))+((x7304*x7305))+(((-1.0)*x7301*x7305))+(((-1.0)*x7302*x7304))+(((1.76220406051003)*x7300))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x7307=IKcos(j2);
IkReal x7308=IKsin(j2);
IkReal x7309=(cj0*r11);
IkReal x7310=(cj1*sj0);
IkReal x7311=(cj5*r01);
IkReal x7312=(cj5*r00);
IkReal x7313=(cj5*sj1);
IkReal x7314=((1.0)*sj5);
IkReal x7315=(r00*sj5);
IkReal x7316=(cj0*r10);
IkReal x7317=(sj1*sj5);
IkReal x7318=((1.0)*cj1);
IkReal x7319=(cj1*sj5);
IkReal x7320=(sj0*sj1);
IkReal x7321=(cj0*py);
IkReal x7322=(cj5*x7318);
evalcond[0]=((((-1.0)*x7318*x7321))+(((-0.56747117)*x7308))+((pz*sj1))+((px*x7310))+(((-1.08e-6)*x7307)));
evalcond[1]=((0.73)+(((0.56747117)*x7307))+(((-1.0)*sj1*x7321))+((px*x7320))+(((-1.08e-6)*x7308))+(((-1.0)*pz*x7318)));
evalcond[2]=(x7308+((x7310*x7315))+((x7310*x7311))+((r21*x7313))+(((-1.0)*x7309*x7322))+((r20*x7317))+(((-1.0)*cj1*x7314*x7316)));
evalcond[3]=(x7307+((x7309*x7319))+(((-1.0)*x7316*x7322))+((x7310*x7312))+(((-1.0)*r21*sj1*x7314))+((r20*x7313))+(((-1.0)*r01*x7310*x7314)));
evalcond[4]=(x7308+((x7309*x7317))+((r21*x7319))+(((-1.0)*r20*x7322))+(((-1.0)*r01*x7314*x7320))+(((-1.0)*x7313*x7316))+((x7312*x7320)));
evalcond[5]=((((-1.0)*x7307))+(((-1.0)*r21*x7322))+(((-1.0)*cj1*r20*x7314))+(((-1.0)*sj1*x7314*x7316))+((x7311*x7320))+(((-1.0)*x7309*x7313))+((x7315*x7320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x7323=(cj1*r22);
IkReal x7324=((1.17e-6)*sj4);
IkReal x7325=(cj3*sj0);
IkReal x7326=((1.0)*sj4);
IkReal x7327=(cj1*px);
IkReal x7328=(r02*sj1);
IkReal x7329=((1.17e-6)*cj4);
IkReal x7330=(cj3*sj1);
IkReal x7331=(cj0*r12);
IkReal x7332=(cj3*sj4);
IkReal x7333=((1.0)*cj4);
IkReal x7334=(cj0*cj1*py);
CheckValue<IkReal> x7335=IKPowWithIntegerCheck(IKsign((((cj4*x7324))+(((-0.56747)*cj4))+(((-1.0)*cj4*x7324*(cj3*cj3)))+(((-1.08e-6)*x7332)))),-1);
if(!x7335.valid){
continue;
}
CheckValue<IkReal> x7336 = IKatan2WithCheck(IkReal(((((1.08e-6)*x7323))+((cj3*x7323*x7329))+(((-1.0)*sj0*x7327*x7333))+(((-1.0)*pz*sj1*x7333))+(((1.08e-6)*sj1*x7331))+(((-1.08e-6)*sj0*x7328))+(((-1.0)*x7325*x7328*x7329))+((x7329*x7330*x7331))+((cj4*x7334)))),IkReal((((sj1*x7324*x7331))+(((-1.0)*x7325*x7326*x7327))+((x7332*x7334))+((x7323*x7324))+(((-1.0)*pz*x7326*x7330))+(((-1.0)*sj0*x7324*x7328))+(((0.56747)*sj0*x7328))+(((-0.56747)*sj1*x7331))+(((-0.56747)*x7323)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7336.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7335.value)))+(x7336.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x7337=IKcos(j2);
IkReal x7338=IKsin(j2);
IkReal x7339=(cj0*r11);
IkReal x7340=((1.0)*sj5);
IkReal x7341=(r21*sj1);
IkReal x7342=(cj1*sj0);
IkReal x7343=(cj3*cj4);
IkReal x7344=(cj1*sj5);
IkReal x7345=(cj5*sj1);
IkReal x7346=(cj3*sj4);
IkReal x7347=((1.0)*cj1);
IkReal x7348=(r00*sj5);
IkReal x7349=(cj0*r10);
IkReal x7350=(sj0*sj1);
IkReal x7351=(cj0*py);
IkReal x7352=(sj1*sj5);
IkReal x7353=((1.0)*sj1);
IkReal x7354=(cj0*r12);
IkReal x7355=(cj5*x7347);
IkReal x7356=((1.0)*x7338);
IkReal x7357=((1.17e-6)*x7338);
IkReal x7358=((1.0)*x7337);
IkReal x7359=(sj4*x7337);
evalcond[0]=(((r22*sj1))+(((-1.0)*cj4*x7356))+(((-1.0)*x7347*x7354))+(((-1.0)*x7346*x7358))+((r02*x7342)));
evalcond[1]=((((-1.0)*r22*x7347))+(((-1.0)*x7353*x7354))+(((-1.0)*x7346*x7356))+((r02*x7350))+((cj4*x7337)));
evalcond[2]=((((-1.17e-6)*x7337*x7343))+(((-0.56747)*x7338))+((pz*sj1))+(((-1.0)*x7347*x7351))+((sj4*x7357))+((px*x7342))+(((-1.08e-6)*x7337)));
evalcond[3]=((0.73)+((px*x7350))+(((0.56747)*x7337))+(((-1.17e-6)*x7359))+(((-1.0)*x7351*x7353))+(((-1.0)*pz*x7347))+(((-1.0)*x7343*x7357))+(((-1.08e-6)*x7338)));
evalcond[4]=((((-1.0)*r01*x7340*x7342))+((x7339*x7344))+(((-1.0)*x7340*x7341))+((cj5*r00*x7342))+((r20*x7345))+(((-1.0)*x7349*x7355))+(((-1.0)*sj3*x7358)));
evalcond[5]=((((-1.0)*r01*x7340*x7350))+((x7339*x7352))+(((-1.0)*x7345*x7349))+((r00*sj0*x7345))+((r21*x7344))+(((-1.0)*r20*x7355))+(((-1.0)*sj3*x7356)));
evalcond[6]=(((x7342*x7348))+((cj5*x7341))+(((-1.0)*sj4*x7356))+((r20*x7352))+((x7337*x7343))+((cj5*r01*x7342))+(((-1.0)*cj1*x7340*x7349))+(((-1.0)*x7339*x7355)));
evalcond[7]=(((x7348*x7350))+x7359+(((-1.0)*x7339*x7345))+(((-1.0)*sj1*x7340*x7349))+(((-1.0)*r21*x7355))+((x7338*x7343))+(((-1.0)*cj1*r20*x7340))+((r01*sj0*x7345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x7360=(r22*sj1);
IkReal x7361=((1.17e-6)*sj4);
IkReal x7362=(pz*sj1);
IkReal x7363=(cj0*cj1);
IkReal x7364=((1.17e-6)*cj3);
IkReal x7365=(cj3*sj4);
IkReal x7366=(cj1*px*sj0);
IkReal x7367=((1.0)*x7365);
IkReal x7368=(cj1*r02*sj0);
CheckValue<IkReal> x7369 = IKatan2WithCheck(IkReal((((py*x7363*x7365))+((cj4*x7364*x7368))+(((-1.0)*cj4*r12*x7363*x7364))+(((-1.0)*x7366*x7367))+((cj4*x7360*x7364))+(((-1.08e-6)*r12*x7363))+(((1.08e-6)*x7360))+(((1.08e-6)*x7368))+(((-1.0)*x7362*x7367)))),IkReal(((((0.56747)*r12*x7363))+((cj4*x7362))+((cj4*x7366))+(((-1.0)*r12*x7361*x7363))+(((-1.0)*cj4*py*x7363))+((x7360*x7361))+(((-0.56747)*x7368))+(((-0.56747)*x7360))+((x7361*x7368)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7369.valid){
continue;
}
CheckValue<IkReal> x7370=IKPowWithIntegerCheck(IKsign((x7364+(((1.08e-6)*cj4))+(((-0.56747)*x7365)))),-1);
if(!x7370.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x7369.value)+(((1.5707963267949)*(x7370.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x7371=IKcos(j2);
IkReal x7372=IKsin(j2);
IkReal x7373=(cj0*r11);
IkReal x7374=((1.0)*sj5);
IkReal x7375=(r21*sj1);
IkReal x7376=(cj1*sj0);
IkReal x7377=(cj3*cj4);
IkReal x7378=(cj1*sj5);
IkReal x7379=(cj5*sj1);
IkReal x7380=(cj3*sj4);
IkReal x7381=((1.0)*cj1);
IkReal x7382=(r00*sj5);
IkReal x7383=(cj0*r10);
IkReal x7384=(sj0*sj1);
IkReal x7385=(cj0*py);
IkReal x7386=(sj1*sj5);
IkReal x7387=((1.0)*sj1);
IkReal x7388=(cj0*r12);
IkReal x7389=(cj5*x7381);
IkReal x7390=((1.0)*x7372);
IkReal x7391=((1.17e-6)*x7372);
IkReal x7392=((1.0)*x7371);
IkReal x7393=(sj4*x7371);
evalcond[0]=(((r02*x7376))+(((-1.0)*x7381*x7388))+((r22*sj1))+(((-1.0)*x7380*x7392))+(((-1.0)*cj4*x7390)));
evalcond[1]=((((-1.0)*r22*x7381))+(((-1.0)*x7380*x7390))+((cj4*x7371))+((r02*x7384))+(((-1.0)*x7387*x7388)));
evalcond[2]=(((sj4*x7391))+(((-1.08e-6)*x7371))+(((-1.0)*x7381*x7385))+(((-1.17e-6)*x7371*x7377))+(((-0.56747)*x7372))+((pz*sj1))+((px*x7376)));
evalcond[3]=((0.73)+(((-1.08e-6)*x7372))+(((-1.0)*x7377*x7391))+(((-1.0)*x7385*x7387))+(((-1.17e-6)*x7393))+((px*x7384))+(((0.56747)*x7371))+(((-1.0)*pz*x7381)));
evalcond[4]=((((-1.0)*x7374*x7375))+(((-1.0)*sj3*x7392))+((cj5*r00*x7376))+((x7373*x7378))+((r20*x7379))+(((-1.0)*x7383*x7389))+(((-1.0)*r01*x7374*x7376)));
evalcond[5]=((((-1.0)*sj3*x7390))+(((-1.0)*x7379*x7383))+(((-1.0)*r01*x7374*x7384))+((x7373*x7386))+((r00*sj0*x7379))+(((-1.0)*r20*x7389))+((r21*x7378)));
evalcond[6]=((((-1.0)*sj4*x7390))+((cj5*x7375))+((r20*x7386))+((cj5*r01*x7376))+((x7376*x7382))+(((-1.0)*cj1*x7374*x7383))+((x7371*x7377))+(((-1.0)*x7373*x7389)));
evalcond[7]=(x7393+(((-1.0)*r21*x7389))+((x7372*x7377))+(((-1.0)*cj1*r20*x7374))+((r01*sj0*x7379))+(((-1.0)*x7373*x7379))+(((-1.0)*sj1*x7374*x7383))+((x7382*x7384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x7394=cj3*cj3;
IkReal x7395=cj4*cj4;
IkReal x7396=(cj0*r12);
IkReal x7397=(cj1*cj4);
IkReal x7398=(r22*sj1);
IkReal x7399=(cj3*sj4);
IkReal x7400=(r02*sj0);
IkReal x7401=((1.0)*sj1);
IkReal x7402=((1.0)*cj1*x7399);
CheckValue<IkReal> x7403=IKPowWithIntegerCheck(IKsign((x7395+x7394+(((-1.0)*x7394*x7395)))),-1);
if(!x7403.valid){
continue;
}
CheckValue<IkReal> x7404 = IKatan2WithCheck(IkReal((((x7397*x7400))+((cj4*x7398))+(((-1.0)*x7396*x7399*x7401))+(((-1.0)*x7396*x7397))+(((-1.0)*r22*x7402))+((sj1*x7399*x7400)))),IkReal(((((-1.0)*cj4*x7400*x7401))+(((-1.0)*x7396*x7402))+((x7398*x7399))+((r22*x7397))+((cj1*x7399*x7400))+((cj4*sj1*x7396)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7404.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7403.value)))+(x7404.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x7405=IKcos(j2);
IkReal x7406=IKsin(j2);
IkReal x7407=(cj0*r11);
IkReal x7408=((1.0)*sj5);
IkReal x7409=(r21*sj1);
IkReal x7410=(cj1*sj0);
IkReal x7411=(cj3*cj4);
IkReal x7412=(cj1*sj5);
IkReal x7413=(cj5*sj1);
IkReal x7414=(cj3*sj4);
IkReal x7415=((1.0)*cj1);
IkReal x7416=(r00*sj5);
IkReal x7417=(cj0*r10);
IkReal x7418=(sj0*sj1);
IkReal x7419=(cj0*py);
IkReal x7420=(sj1*sj5);
IkReal x7421=((1.0)*sj1);
IkReal x7422=(cj0*r12);
IkReal x7423=(cj5*x7415);
IkReal x7424=((1.0)*x7406);
IkReal x7425=((1.17e-6)*x7406);
IkReal x7426=((1.0)*x7405);
IkReal x7427=(sj4*x7405);
evalcond[0]=((((-1.0)*cj4*x7424))+(((-1.0)*x7415*x7422))+(((-1.0)*x7414*x7426))+((r22*sj1))+((r02*x7410)));
evalcond[1]=((((-1.0)*x7421*x7422))+(((-1.0)*x7414*x7424))+((r02*x7418))+(((-1.0)*r22*x7415))+((cj4*x7405)));
evalcond[2]=((((-1.0)*x7415*x7419))+(((-0.56747)*x7406))+((sj4*x7425))+(((-1.17e-6)*x7405*x7411))+((pz*sj1))+((px*x7410))+(((-1.08e-6)*x7405)));
evalcond[3]=((0.73)+(((-1.17e-6)*x7427))+(((-1.0)*x7411*x7425))+(((-1.0)*pz*x7415))+(((-1.0)*x7419*x7421))+((px*x7418))+(((0.56747)*x7405))+(((-1.08e-6)*x7406)));
evalcond[4]=(((cj5*r00*x7410))+((r20*x7413))+(((-1.0)*x7408*x7409))+((x7407*x7412))+(((-1.0)*sj3*x7426))+(((-1.0)*r01*x7408*x7410))+(((-1.0)*x7417*x7423)));
evalcond[5]=(((r00*sj0*x7413))+((r21*x7412))+(((-1.0)*x7413*x7417))+(((-1.0)*sj3*x7424))+(((-1.0)*r01*x7408*x7418))+(((-1.0)*r20*x7423))+((x7407*x7420)));
evalcond[6]=((((-1.0)*x7407*x7423))+((x7410*x7416))+((cj5*r01*x7410))+(((-1.0)*cj1*x7408*x7417))+((r20*x7420))+((x7405*x7411))+(((-1.0)*sj4*x7424))+((cj5*x7409)));
evalcond[7]=(((x7406*x7411))+(((-1.0)*sj1*x7408*x7417))+(((-1.0)*r21*x7423))+(((-1.0)*x7407*x7413))+((x7416*x7418))+x7427+((r01*sj0*x7413))+(((-1.0)*cj1*r20*x7408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7428=((100000000.0)*sj3*sj4);
IkReal x7429=((117.0)*cj4*sj3);
CheckValue<IkReal> x7430=IKPowWithIntegerCheck(IKsign(rxp2_2),-1);
if(!x7430.valid){
continue;
}
CheckValue<IkReal> x7431 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x7429))+((px*x7428)))),IkReal((((r12*x7429))+(((-1.0)*py*x7428)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7431.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7430.value)))+(x7431.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7432=IKcos(j0);
IkReal x7433=IKsin(j0);
IkReal x7434=(cj4*sj3);
IkReal x7435=((1.0)*x7432);
IkReal x7436=((1.0)*x7433);
evalcond[0]=((((-1.0)*r02*x7435))+(((-1.0)*r12*x7436))+(((-1.0)*sj3*sj4)));
evalcond[1]=((((-1.17e-6)*x7434))+(((-1.0)*px*x7435))+(((-1.0)*py*x7436)));
evalcond[2]=(((r01*sj5*x7432))+cj3+(((-1.0)*cj5*r00*x7435))+((r11*sj5*x7433))+(((-1.0)*cj5*r10*x7436)));
evalcond[3]=((((-1.0)*r00*sj5*x7435))+(((-1.0)*cj5*r11*x7436))+(((-1.0)*cj5*r01*x7435))+(((-1.0)*r10*sj5*x7436))+x7434);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x7437=cj3*cj3;
IkReal x7438=cj4*cj4;
IkReal x7439=sj4*sj4;
IkReal x7440=(cj3*r22);
IkReal x7441=(cj4*r22);
IkReal x7442=((4.53976)*sj4);
IkReal x7443=(r02*sj0);
IkReal x7444=((16.0)*pz);
IkReal x7445=((8.0)*pz);
IkReal x7446=((1.872e-5)*sj4);
IkReal x7447=((4.32e-6)*sj4);
IkReal x7448=((9.07952)*sj4);
IkReal x7449=(px*sj0);
IkReal x7450=(cj0*py);
IkReal x7451=((4.68e-6)*sj4);
IkReal x7452=((9.36e-6)*sj4);
IkReal x7453=(cj0*cj3*r12);
IkReal x7454=((1.872e-5)*x7438);
IkReal x7455=(cj0*cj4*r12);
IkReal x7456=(cj4*x7451);
IkReal x7457=((4.0)*x7438);
IkReal x7458=((9.36e-6)*x7438);
IkReal x7459=(x7437*x7439);
IkReal x7460=(cj3*x7439*x7443);
IkReal x7461=((((4.0)*x7449*x7459))+(((2.26988)*x7455))+((x7449*x7457))+(((2.26988)*sj4*x7440))+((x7443*x7456))+((x7447*x7453))+((x7437*x7451*x7455)));
IkReal x7462=(((cj3*x7443*x7447))+((x7437*x7443*x7456))+(((2.26988)*cj4*x7443))+(((4.0)*x7450*x7459))+(((4.32e-6)*x7441))+((x7450*x7457))+(((4.68e-6)*x7439*x7440))+(((4.68e-6)*x7438*x7440))+((x7451*x7455)));
IkReal x7463=(((cj3*x7442*x7443))+(((-1.0)*x7442*x7453))+(((9.36e-6)*x7439*x7453))+(((8.64e-6)*x7455))+(((-1.0)*x7438*x7445))+((x7437*x7441*x7452))+(((-1.0)*x7445*x7459))+(((-8.64e-6)*cj4*x7443))+(((-1.0)*cj3*x7443*x7458))+(((-9.36e-6)*x7460))+((x7453*x7458))+(((4.53976)*x7441))+(((-1.0)*x7441*x7452))+(((8.64e-6)*sj4*x7440)));
IkReal x7464=((((-1.0)*x7462))+x7461);
IkReal x7465=((((-1.0)*x7461))+x7462);
op[0]=x7464;
op[1]=x7463;
op[2]=x7464;
op[3]=(((cj3*x7443*x7448))+(((1.872e-5)*x7439*x7453))+(((1.728e-5)*x7455))+(((1.728e-5)*sj4*x7440))+(((-1.0)*x7438*x7444))+((x7437*x7441*x7446))+(((-1.728e-5)*cj4*x7443))+(((-1.0)*x7444*x7459))+(((9.07952)*x7441))+(((-1.0)*cj3*x7443*x7454))+(((-1.0)*x7441*x7446))+(((-1.872e-5)*x7460))+((x7453*x7454))+(((-1.0)*x7448*x7453)));
op[4]=x7465;
op[5]=x7463;
op[6]=x7465;
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

j1evalpoly[0]=((((-2.92)*(cj3*cj3)*(sj4*sj4)))+(((4.0)*pz*(cj4*cj4)))+(((-2.92)*(cj4*cj4)))+(((htj1*htj1)*(((((4.0)*pz*(cj4*cj4)))+(((-4.68e-6)*cj0*cj3*r12*(cj4*cj4)))+(((-2.26988)*cj3*r02*sj0*sj4))+(((4.68e-6)*cj3*r02*sj0*(cj4*cj4)))+(((-4.32e-6)*cj3*r22*sj4))+(((4.32e-6)*cj4*r02*sj0))+(((-8.76)*(cj3*cj3)*(sj4*sj4)))+(((-8.76)*(cj4*cj4)))+(((-4.68e-6)*cj0*cj3*r12*(sj4*sj4)))+(((4.68e-6)*cj3*r02*sj0*(sj4*sj4)))+(((-4.32e-6)*cj0*cj4*r12))+(((-2.26988)*cj4*r22))+(((4.0)*pz*(cj3*cj3)*(sj4*sj4)))+(((-4.68e-6)*cj4*r22*sj4*(cj3*cj3)))+(((4.68e-6)*cj4*r22*sj4))+(((2.26988)*cj0*cj3*r12*sj4))))))+(((-4.68e-6)*cj0*cj3*r12*(cj4*cj4)))+(((-2.26988)*cj3*r02*sj0*sj4))+(((4.68e-6)*cj3*r02*sj0*(cj4*cj4)))+(((-4.32e-6)*cj3*r22*sj4))+(((4.32e-6)*cj4*r02*sj0))+(((-4.68e-6)*cj0*cj3*r12*(sj4*sj4)))+(((4.68e-6)*cj3*r02*sj0*(sj4*sj4)))+(((-4.32e-6)*cj0*cj4*r12))+(((-2.26988)*cj4*r22))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-2.92)*(cj3*cj3)*(sj4*sj4)))+(((-2.92)*(cj4*cj4)))+(((-4.68e-6)*cj3*r02*sj0*(sj4*sj4)))+(((-4.68e-6)*cj4*r22*sj4))+(((-4.0)*pz*(cj4*cj4)))+(((-4.68e-6)*cj3*r02*sj0*(cj4*cj4)))+(((-4.0)*pz*(cj3*cj3)*(sj4*sj4)))+(((4.32e-6)*cj0*cj4*r12))+(((-2.26988)*cj0*cj3*r12*sj4))+(((2.26988)*cj4*r22))+(((-4.32e-6)*cj4*r02*sj0))+(((4.68e-6)*cj0*cj3*r12*(sj4*sj4)))+(((4.32e-6)*cj3*r22*sj4))+(((4.68e-6)*cj4*r22*sj4*(cj3*cj3)))+(((4.68e-6)*cj0*cj3*r12*(cj4*cj4)))+(((2.26988)*cj3*r02*sj0*sj4))))))+(((htj1*htj1*htj1*htj1*htj1)*(((((-8.0)*px*sj0*(cj3*cj3)*(sj4*sj4)))+(((-4.53976)*cj0*cj4*r12))+(((9.36e-6)*cj0*cj4*r12*sj4))+(((4.53976)*cj4*r02*sj0))+(((-9.36e-6)*cj4*r02*sj0*sj4))+(((9.36e-6)*cj3*r22*(sj4*sj4)))+(((-8.0)*px*sj0*(cj4*cj4)))+(((9.36e-6)*cj3*r22*(cj4*cj4)))+(((8.0)*cj0*py*(cj4*cj4)))+(((-4.53976)*cj3*r22*sj4))+(((8.0)*cj0*py*(cj3*cj3)*(sj4*sj4)))+(((8.64e-6)*cj3*r02*sj0*sj4))+(((9.36e-6)*cj4*r02*sj0*sj4*(cj3*cj3)))+(((8.64e-6)*cj4*r22))+(((-9.36e-6)*cj0*cj4*r12*sj4*(cj3*cj3)))+(((-8.64e-6)*cj0*cj3*r12*sj4))))))+(((htj1*htj1*htj1)*(((((-16.0)*px*sj0*(cj4*cj4)))+(((-1.872e-5)*cj0*cj4*r12*sj4*(cj3*cj3)))+(((-9.07952)*cj0*cj4*r12))+(((1.872e-5)*cj4*r02*sj0*sj4*(cj3*cj3)))+(((1.872e-5)*cj3*r22*(sj4*sj4)))+(((-1.728e-5)*cj0*cj3*r12*sj4))+(((-9.07952)*cj3*r22*sj4))+(((-16.0)*px*sj0*(cj3*cj3)*(sj4*sj4)))+(((9.07952)*cj4*r02*sj0))+(((16.0)*cj0*py*(cj3*cj3)*(sj4*sj4)))+(((1.872e-5)*cj0*cj4*r12*sj4))+(((1.872e-5)*cj3*r22*(cj4*cj4)))+(((1.728e-5)*cj4*r22))+(((1.728e-5)*cj3*r02*sj0*sj4))+(((16.0)*cj0*py*(cj4*cj4)))+(((-1.872e-5)*cj4*r02*sj0*sj4))))))+((htj1*(((((-8.0)*px*sj0*(cj3*cj3)*(sj4*sj4)))+(((-4.53976)*cj0*cj4*r12))+(((9.36e-6)*cj0*cj4*r12*sj4))+(((4.53976)*cj4*r02*sj0))+(((-9.36e-6)*cj4*r02*sj0*sj4))+(((9.36e-6)*cj3*r22*(sj4*sj4)))+(((-8.0)*px*sj0*(cj4*cj4)))+(((9.36e-6)*cj3*r22*(cj4*cj4)))+(((8.0)*cj0*py*(cj4*cj4)))+(((-4.53976)*cj3*r22*sj4))+(((8.0)*cj0*py*(cj3*cj3)*(sj4*sj4)))+(((8.64e-6)*cj3*r02*sj0*sj4))+(((9.36e-6)*cj4*r02*sj0*sj4*(cj3*cj3)))+(((8.64e-6)*cj4*r22))+(((-9.36e-6)*cj0*cj4*r12*sj4*(cj3*cj3)))+(((-8.64e-6)*cj0*cj3*r12*sj4))))))+(((4.0)*pz*(cj3*cj3)*(sj4*sj4)))+(((-4.68e-6)*cj4*r22*sj4*(cj3*cj3)))+(((4.68e-6)*cj4*r22*sj4))+(((htj1*htj1*htj1*htj1)*(((((-4.68e-6)*cj3*r02*sj0*(sj4*sj4)))+(((-4.68e-6)*cj4*r22*sj4))+(((-4.0)*pz*(cj4*cj4)))+(((-4.68e-6)*cj3*r02*sj0*(cj4*cj4)))+(((-4.0)*pz*(cj3*cj3)*(sj4*sj4)))+(((4.32e-6)*cj0*cj4*r12))+(((-2.26988)*cj0*cj3*r12*sj4))+(((-8.76)*(cj3*cj3)*(sj4*sj4)))+(((2.26988)*cj4*r22))+(((-8.76)*(cj4*cj4)))+(((-4.32e-6)*cj4*r02*sj0))+(((4.68e-6)*cj0*cj3*r12*(sj4*sj4)))+(((4.32e-6)*cj3*r22*sj4))+(((4.68e-6)*cj4*r22*sj4*(cj3*cj3)))+(((4.68e-6)*cj0*cj3*r12*(cj4*cj4)))+(((2.26988)*cj3*r02*sj0*sj4))))))+(((2.26988)*cj0*cj3*r12*sj4)));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[2];
IkReal x7466=cj3*cj3;
IkReal x7467=cj4*cj4;
IkReal x7468=((((-1.0)*x7466*x7467))+x7467+x7466);
j2eval[0]=x7468;
j2eval[1]=IKsign(x7468);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x7469=(cj3*sj4);
j2eval[0]=(cj4+(((-525435.185185185)*x7469))+(((1.08333333333333)*cj3)));
j2eval[1]=IKsign(((((1.17e-6)*cj3))+(((1.08e-6)*cj4))+(((-0.56747)*x7469))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x7470=cj3*cj3;
IkReal x7471=(cj4*sj4);
IkReal x7472=(cj3*sj4);
j2eval[0]=((((1.08333333333333)*x7471))+(((-525435.185185185)*cj4))+(((-1.08333333333333)*x7470*x7471))+(((-1.0)*x7472)));
j2eval[1]=IKsign(((((-1.08e-6)*x7472))+(((-1.17e-6)*x7470*x7471))+(((-0.56747)*cj4))+(((1.17e-6)*x7471))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x7473=((3.35381986224151e-6)*cj1);
IkReal x7474=(px*sj0);
IkReal x7475=((1.76221132708977)*sj1);
IkReal x7476=((1.76221132708977)*cj1);
IkReal x7477=((3.35381986224151e-6)*sj1);
IkReal x7478=(cj0*py);
IkReal x7479=(sj1*x7478);
if( IKabs(((2.4482884994363e-6)+((x7474*x7476))+((x7474*x7477))+(((-1.0)*x7477*x7478))+((pz*x7475))+(((-1.0)*pz*x7473))+(((-1.0)*x7476*x7478)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.28641426877553)+((pz*x7477))+((pz*x7476))+(((-1.0)*x7474*x7475))+(((-1.0)*x7473*x7478))+((x7473*x7474))+((x7475*x7478)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.4482884994363e-6)+((x7474*x7476))+((x7474*x7477))+(((-1.0)*x7477*x7478))+((pz*x7475))+(((-1.0)*pz*x7473))+(((-1.0)*x7476*x7478))))+IKsqr(((-1.28641426877553)+((pz*x7477))+((pz*x7476))+(((-1.0)*x7474*x7475))+(((-1.0)*x7473*x7478))+((x7473*x7474))+((x7475*x7478))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((2.4482884994363e-6)+((x7474*x7476))+((x7474*x7477))+(((-1.0)*x7477*x7478))+((pz*x7475))+(((-1.0)*pz*x7473))+(((-1.0)*x7476*x7478))), ((-1.28641426877553)+((pz*x7477))+((pz*x7476))+(((-1.0)*x7474*x7475))+(((-1.0)*x7473*x7478))+((x7473*x7474))+((x7475*x7478))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x7480=IKcos(j2);
IkReal x7481=IKsin(j2);
IkReal x7482=(cj0*r11);
IkReal x7483=(cj1*sj0);
IkReal x7484=(cj5*r01);
IkReal x7485=(cj5*r00);
IkReal x7486=(cj5*sj1);
IkReal x7487=(sj0*sj1);
IkReal x7488=(r00*sj5);
IkReal x7489=(sj1*sj5);
IkReal x7490=((1.0)*cj1);
IkReal x7491=(cj1*sj5);
IkReal x7492=(cj0*py);
IkReal x7493=((1.0)*x7481);
IkReal x7494=(cj5*x7490);
IkReal x7495=((1.0)*cj0*r10);
IkReal x7496=((1.0)*r01*sj5);
evalcond[0]=((((-0.56746883)*x7481))+(((-1.08e-6)*x7480))+((px*x7483))+((pz*sj1))+(((-1.0)*x7490*x7492)));
evalcond[1]=((0.73)+(((0.56746883)*x7480))+(((-1.0)*pz*x7490))+(((-1.0)*sj1*x7492))+(((-1.08e-6)*x7481))+((px*x7487)));
evalcond[2]=((((-1.0)*x7482*x7494))+(((-1.0)*cj0*r10*sj5*x7490))+((r20*x7489))+(((-1.0)*x7493))+((x7483*x7484))+((x7483*x7488))+((r21*x7486)));
evalcond[3]=(((x7487*x7488))+((x7484*x7487))+(((-1.0)*x7489*x7495))+(((-1.0)*r21*x7494))+x7480+(((-1.0)*r20*sj5*x7490))+(((-1.0)*x7482*x7486)));
evalcond[4]=((((-1.0)*x7483*x7496))+(((-1.0)*x7480))+(((-1.0)*cj0*r10*x7494))+((r20*x7486))+(((-1.0)*r21*x7489))+((x7482*x7491))+((x7483*x7485)));
evalcond[5]=((((-1.0)*x7486*x7495))+(((-1.0)*x7487*x7496))+(((-1.0)*r20*x7494))+(((-1.0)*x7493))+((x7482*x7489))+((x7485*x7487))+((r21*x7491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x7497=(cj1*pz);
IkReal x7498=(cj0*py);
IkReal x7499=((1.76220406051003)*sj1);
IkReal x7500=((3.35379220296043e-6)*sj1);
IkReal x7501=(px*sj0);
IkReal x7502=((3.35379220296043e-6)*cj1);
IkReal x7503=((1.76220406051003)*x7501);
if( IKabs(((2.44826830816111e-6)+(((-3.35379220296043e-6)*x7497))+(((-1.0)*x7498*x7500))+(((-1.76220406051003)*cj1*x7498))+((pz*x7499))+((x7500*x7501))+((cj1*x7503)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.28640896417232)+(((-1.0)*x7499*x7501))+(((-1.0)*x7498*x7502))+((x7501*x7502))+((pz*x7500))+(((1.76220406051003)*x7497))+((x7498*x7499)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.44826830816111e-6)+(((-3.35379220296043e-6)*x7497))+(((-1.0)*x7498*x7500))+(((-1.76220406051003)*cj1*x7498))+((pz*x7499))+((x7500*x7501))+((cj1*x7503))))+IKsqr(((-1.28640896417232)+(((-1.0)*x7499*x7501))+(((-1.0)*x7498*x7502))+((x7501*x7502))+((pz*x7500))+(((1.76220406051003)*x7497))+((x7498*x7499))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((2.44826830816111e-6)+(((-3.35379220296043e-6)*x7497))+(((-1.0)*x7498*x7500))+(((-1.76220406051003)*cj1*x7498))+((pz*x7499))+((x7500*x7501))+((cj1*x7503))), ((-1.28640896417232)+(((-1.0)*x7499*x7501))+(((-1.0)*x7498*x7502))+((x7501*x7502))+((pz*x7500))+(((1.76220406051003)*x7497))+((x7498*x7499))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x7504=IKcos(j2);
IkReal x7505=IKsin(j2);
IkReal x7506=(cj0*r11);
IkReal x7507=(cj1*sj0);
IkReal x7508=(cj5*r01);
IkReal x7509=(cj5*r00);
IkReal x7510=(cj5*sj1);
IkReal x7511=((1.0)*sj5);
IkReal x7512=(r00*sj5);
IkReal x7513=(cj0*r10);
IkReal x7514=(sj1*sj5);
IkReal x7515=((1.0)*cj1);
IkReal x7516=(cj1*sj5);
IkReal x7517=(sj0*sj1);
IkReal x7518=(cj0*py);
IkReal x7519=((1.0)*x7504);
IkReal x7520=(cj5*x7515);
evalcond[0]=((((-1.0)*x7515*x7518))+(((-1.08e-6)*x7504))+(((-0.56747117)*x7505))+((px*x7507))+((pz*sj1)));
evalcond[1]=((0.73)+(((-1.08e-6)*x7505))+(((-1.0)*sj1*x7518))+(((-1.0)*pz*x7515))+((px*x7517))+(((0.56747117)*x7504)));
evalcond[2]=((((-1.0)*cj1*x7511*x7513))+((r21*x7510))+((r20*x7514))+((x7507*x7512))+(((-1.0)*x7506*x7520))+x7505+((x7507*x7508)));
evalcond[3]=(((x7506*x7516))+((r20*x7510))+(((-1.0)*r21*sj1*x7511))+(((-1.0)*r01*x7507*x7511))+(((-1.0)*x7513*x7520))+(((-1.0)*x7519))+((x7507*x7509)));
evalcond[4]=(((x7509*x7517))+((r21*x7516))+((x7506*x7514))+(((-1.0)*x7510*x7513))+(((-1.0)*r20*x7520))+(((-1.0)*x7505))+(((-1.0)*r01*x7511*x7517)));
evalcond[5]=((((-1.0)*cj1*r20*x7511))+(((-1.0)*r21*x7520))+(((-1.0)*x7506*x7510))+(((-1.0)*sj1*x7511*x7513))+((x7512*x7517))+(((-1.0)*x7519))+((x7508*x7517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x7521=((3.35381986224151e-6)*cj1);
IkReal x7522=(px*sj0);
IkReal x7523=((1.76221132708977)*sj1);
IkReal x7524=((1.76221132708977)*cj1);
IkReal x7525=((3.35381986224151e-6)*sj1);
IkReal x7526=(cj0*py);
IkReal x7527=(sj1*x7526);
if( IKabs(((2.4482884994363e-6)+((pz*x7523))+(((-1.0)*pz*x7521))+(((-1.0)*x7525*x7526))+(((-1.0)*x7524*x7526))+((x7522*x7524))+((x7522*x7525)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.28641426877553)+((x7521*x7522))+(((-1.0)*x7522*x7523))+((pz*x7525))+((pz*x7524))+(((-1.0)*x7521*x7526))+((x7523*x7526)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.4482884994363e-6)+((pz*x7523))+(((-1.0)*pz*x7521))+(((-1.0)*x7525*x7526))+(((-1.0)*x7524*x7526))+((x7522*x7524))+((x7522*x7525))))+IKsqr(((-1.28641426877553)+((x7521*x7522))+(((-1.0)*x7522*x7523))+((pz*x7525))+((pz*x7524))+(((-1.0)*x7521*x7526))+((x7523*x7526))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((2.4482884994363e-6)+((pz*x7523))+(((-1.0)*pz*x7521))+(((-1.0)*x7525*x7526))+(((-1.0)*x7524*x7526))+((x7522*x7524))+((x7522*x7525))), ((-1.28641426877553)+((x7521*x7522))+(((-1.0)*x7522*x7523))+((pz*x7525))+((pz*x7524))+(((-1.0)*x7521*x7526))+((x7523*x7526))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x7528=IKcos(j2);
IkReal x7529=IKsin(j2);
IkReal x7530=(cj0*r11);
IkReal x7531=(cj0*r10);
IkReal x7532=(cj1*sj0);
IkReal x7533=(cj5*r00);
IkReal x7534=(cj5*sj1);
IkReal x7535=((1.0)*sj5);
IkReal x7536=(r00*sj5);
IkReal x7537=(sj1*sj5);
IkReal x7538=((1.0)*cj1);
IkReal x7539=(cj1*sj5);
IkReal x7540=(sj0*sj1);
IkReal x7541=(cj0*py);
IkReal x7542=(cj5*x7538);
evalcond[0]=((((-1.08e-6)*x7528))+((px*x7532))+(((-1.0)*x7538*x7541))+(((-0.56746883)*x7529))+((pz*sj1)));
evalcond[1]=((0.73)+(((-1.0)*sj1*x7541))+(((-1.08e-6)*x7529))+((px*x7540))+(((0.56746883)*x7528))+(((-1.0)*pz*x7538)));
evalcond[2]=((((-1.0)*r01*x7532*x7535))+((x7530*x7539))+((r20*x7534))+(((-1.0)*x7531*x7542))+x7528+((x7532*x7533))+(((-1.0)*r21*sj1*x7535)));
evalcond[3]=((((-1.0)*x7531*x7534))+((x7533*x7540))+((x7530*x7537))+(((-1.0)*r01*x7535*x7540))+((r21*x7539))+x7529+(((-1.0)*r20*x7542)));
evalcond[4]=(((cj5*r01*x7532))+((r21*x7534))+((r20*x7537))+(((-1.0)*cj1*x7531*x7535))+((x7532*x7536))+(((-1.0)*x7530*x7542))+(((-1.0)*x7529)));
evalcond[5]=((((-1.0)*sj1*x7531*x7535))+(((-1.0)*x7530*x7534))+(((-1.0)*cj1*r20*x7535))+((r01*sj0*x7534))+x7528+(((-1.0)*r21*x7542))+((x7536*x7540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x7543=(cj1*pz);
IkReal x7544=(cj0*py);
IkReal x7545=((1.76220406051003)*sj1);
IkReal x7546=((3.35379220296043e-6)*sj1);
IkReal x7547=(px*sj0);
IkReal x7548=((3.35379220296043e-6)*cj1);
IkReal x7549=((1.76220406051003)*x7547);
if( IKabs(((2.44826830816111e-6)+((x7546*x7547))+((pz*x7545))+(((-1.0)*x7544*x7546))+(((-1.76220406051003)*cj1*x7544))+((cj1*x7549))+(((-3.35379220296043e-6)*x7543)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.28640896417232)+((pz*x7546))+((x7547*x7548))+(((-1.0)*x7544*x7548))+((x7544*x7545))+(((1.76220406051003)*x7543))+(((-1.0)*x7545*x7547)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.44826830816111e-6)+((x7546*x7547))+((pz*x7545))+(((-1.0)*x7544*x7546))+(((-1.76220406051003)*cj1*x7544))+((cj1*x7549))+(((-3.35379220296043e-6)*x7543))))+IKsqr(((-1.28640896417232)+((pz*x7546))+((x7547*x7548))+(((-1.0)*x7544*x7548))+((x7544*x7545))+(((1.76220406051003)*x7543))+(((-1.0)*x7545*x7547))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((2.44826830816111e-6)+((x7546*x7547))+((pz*x7545))+(((-1.0)*x7544*x7546))+(((-1.76220406051003)*cj1*x7544))+((cj1*x7549))+(((-3.35379220296043e-6)*x7543))), ((-1.28640896417232)+((pz*x7546))+((x7547*x7548))+(((-1.0)*x7544*x7548))+((x7544*x7545))+(((1.76220406051003)*x7543))+(((-1.0)*x7545*x7547))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x7550=IKcos(j2);
IkReal x7551=IKsin(j2);
IkReal x7552=(cj0*r11);
IkReal x7553=(cj1*sj0);
IkReal x7554=(cj5*r01);
IkReal x7555=(cj5*r00);
IkReal x7556=(cj5*sj1);
IkReal x7557=((1.0)*sj5);
IkReal x7558=(r00*sj5);
IkReal x7559=(cj0*r10);
IkReal x7560=(sj1*sj5);
IkReal x7561=((1.0)*cj1);
IkReal x7562=(cj1*sj5);
IkReal x7563=(sj0*sj1);
IkReal x7564=(cj0*py);
IkReal x7565=(cj5*x7561);
evalcond[0]=((((-1.08e-6)*x7550))+((pz*sj1))+(((-1.0)*x7561*x7564))+((px*x7553))+(((-0.56747117)*x7551)));
evalcond[1]=((0.73)+(((0.56747117)*x7550))+(((-1.08e-6)*x7551))+(((-1.0)*pz*x7561))+(((-1.0)*sj1*x7564))+((px*x7563)));
evalcond[2]=(((r21*x7556))+(((-1.0)*cj1*x7557*x7559))+(((-1.0)*x7552*x7565))+((x7553*x7554))+((x7553*x7558))+x7551+((r20*x7560)));
evalcond[3]=((((-1.0)*x7559*x7565))+(((-1.0)*r01*x7553*x7557))+((x7552*x7562))+((x7553*x7555))+x7550+(((-1.0)*r21*sj1*x7557))+((r20*x7556)));
evalcond[4]=((((-1.0)*r20*x7565))+(((-1.0)*x7556*x7559))+((r21*x7562))+((x7552*x7560))+x7551+(((-1.0)*r01*x7557*x7563))+((x7555*x7563)));
evalcond[5]=((((-1.0)*r21*x7565))+(((-1.0)*cj1*r20*x7557))+(((-1.0)*x7550))+((x7554*x7563))+(((-1.0)*sj1*x7557*x7559))+((x7558*x7563))+(((-1.0)*x7552*x7556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x7566=(cj1*r22);
IkReal x7567=((1.17e-6)*sj4);
IkReal x7568=(cj3*sj0);
IkReal x7569=((1.0)*sj4);
IkReal x7570=(cj1*px);
IkReal x7571=(r02*sj1);
IkReal x7572=((1.17e-6)*cj4);
IkReal x7573=(cj3*sj1);
IkReal x7574=(cj0*r12);
IkReal x7575=(cj3*sj4);
IkReal x7576=((1.0)*cj4);
IkReal x7577=(cj0*cj1*py);
CheckValue<IkReal> x7578=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*x7567*(cj3*cj3)))+(((-0.56747)*cj4))+(((-1.08e-6)*x7575))+((cj4*x7567)))),-1);
if(!x7578.valid){
continue;
}
CheckValue<IkReal> x7579 = IKatan2WithCheck(IkReal(((((-1.0)*pz*sj1*x7576))+(((-1.0)*sj0*x7570*x7576))+((cj3*x7566*x7572))+((cj4*x7577))+((x7572*x7573*x7574))+(((1.08e-6)*sj1*x7574))+(((-1.0)*x7568*x7571*x7572))+(((1.08e-6)*x7566))+(((-1.08e-6)*sj0*x7571)))),IkReal((((x7566*x7567))+(((-1.0)*pz*x7569*x7573))+(((-0.56747)*sj1*x7574))+(((0.56747)*sj0*x7571))+(((-1.0)*x7568*x7569*x7570))+(((-0.56747)*x7566))+((sj1*x7567*x7574))+(((-1.0)*sj0*x7567*x7571))+((x7575*x7577)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7579.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7578.value)))+(x7579.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x7580=IKcos(j2);
IkReal x7581=IKsin(j2);
IkReal x7582=(cj0*r11);
IkReal x7583=((1.0)*sj5);
IkReal x7584=(r21*sj1);
IkReal x7585=(cj1*sj0);
IkReal x7586=(cj3*cj4);
IkReal x7587=(cj1*sj5);
IkReal x7588=(cj5*sj1);
IkReal x7589=(cj3*sj4);
IkReal x7590=((1.0)*cj1);
IkReal x7591=(r00*sj5);
IkReal x7592=(cj0*r10);
IkReal x7593=(sj0*sj1);
IkReal x7594=(cj0*py);
IkReal x7595=(sj1*sj5);
IkReal x7596=((1.0)*sj1);
IkReal x7597=(cj0*r12);
IkReal x7598=(cj5*x7590);
IkReal x7599=((1.0)*x7581);
IkReal x7600=((1.17e-6)*x7581);
IkReal x7601=((1.0)*x7580);
IkReal x7602=(sj4*x7580);
evalcond[0]=((((-1.0)*x7589*x7601))+((r02*x7585))+(((-1.0)*x7590*x7597))+((r22*sj1))+(((-1.0)*cj4*x7599)));
evalcond[1]=((((-1.0)*x7589*x7599))+(((-1.0)*x7596*x7597))+(((-1.0)*r22*x7590))+((r02*x7593))+((cj4*x7580)));
evalcond[2]=(((sj4*x7600))+(((-1.0)*x7590*x7594))+(((-1.17e-6)*x7580*x7586))+((px*x7585))+((pz*sj1))+(((-0.56747)*x7581))+(((-1.08e-6)*x7580)));
evalcond[3]=((0.73)+((px*x7593))+(((0.56747)*x7580))+(((-1.0)*x7586*x7600))+(((-1.0)*pz*x7590))+(((-1.0)*x7594*x7596))+(((-1.17e-6)*x7602))+(((-1.08e-6)*x7581)));
evalcond[4]=((((-1.0)*x7592*x7598))+((cj5*r00*x7585))+((x7582*x7587))+(((-1.0)*r01*x7583*x7585))+(((-1.0)*sj3*x7601))+(((-1.0)*x7583*x7584))+((r20*x7588)));
evalcond[5]=((((-1.0)*r01*x7583*x7593))+((r00*sj0*x7588))+(((-1.0)*sj3*x7599))+(((-1.0)*r20*x7598))+((r21*x7587))+((x7582*x7595))+(((-1.0)*x7588*x7592)));
evalcond[6]=((((-1.0)*cj1*x7583*x7592))+((cj5*r01*x7585))+(((-1.0)*sj4*x7599))+((x7585*x7591))+((r20*x7595))+(((-1.0)*x7582*x7598))+((cj5*x7584))+((x7580*x7586)));
evalcond[7]=((((-1.0)*sj1*x7583*x7592))+(((-1.0)*cj1*r20*x7583))+(((-1.0)*x7582*x7588))+((x7581*x7586))+((x7591*x7593))+(((-1.0)*r21*x7598))+x7602+((r01*sj0*x7588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x7603=(r22*sj1);
IkReal x7604=((1.17e-6)*sj4);
IkReal x7605=(pz*sj1);
IkReal x7606=(cj0*cj1);
IkReal x7607=((1.17e-6)*cj3);
IkReal x7608=(cj3*sj4);
IkReal x7609=(cj1*px*sj0);
IkReal x7610=((1.0)*x7608);
IkReal x7611=(cj1*r02*sj0);
CheckValue<IkReal> x7612=IKPowWithIntegerCheck(IKsign(((((1.08e-6)*cj4))+(((-0.56747)*x7608))+x7607)),-1);
if(!x7612.valid){
continue;
}
CheckValue<IkReal> x7613 = IKatan2WithCheck(IkReal((((py*x7606*x7608))+(((1.08e-6)*x7603))+(((-1.0)*x7605*x7610))+(((1.08e-6)*x7611))+((cj4*x7603*x7607))+(((-1.0)*cj4*r12*x7606*x7607))+(((-1.0)*x7609*x7610))+((cj4*x7607*x7611))+(((-1.08e-6)*r12*x7606)))),IkReal(((((-1.0)*cj4*py*x7606))+(((0.56747)*r12*x7606))+((x7604*x7611))+(((-1.0)*r12*x7604*x7606))+((cj4*x7609))+((cj4*x7605))+((x7603*x7604))+(((-0.56747)*x7603))+(((-0.56747)*x7611)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7613.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7612.value)))+(x7613.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x7614=IKcos(j2);
IkReal x7615=IKsin(j2);
IkReal x7616=(cj0*r11);
IkReal x7617=((1.0)*sj5);
IkReal x7618=(r21*sj1);
IkReal x7619=(cj1*sj0);
IkReal x7620=(cj3*cj4);
IkReal x7621=(cj1*sj5);
IkReal x7622=(cj5*sj1);
IkReal x7623=(cj3*sj4);
IkReal x7624=((1.0)*cj1);
IkReal x7625=(r00*sj5);
IkReal x7626=(cj0*r10);
IkReal x7627=(sj0*sj1);
IkReal x7628=(cj0*py);
IkReal x7629=(sj1*sj5);
IkReal x7630=((1.0)*sj1);
IkReal x7631=(cj0*r12);
IkReal x7632=(cj5*x7624);
IkReal x7633=((1.0)*x7615);
IkReal x7634=((1.17e-6)*x7615);
IkReal x7635=((1.0)*x7614);
IkReal x7636=(sj4*x7614);
evalcond[0]=(((r22*sj1))+((r02*x7619))+(((-1.0)*x7624*x7631))+(((-1.0)*x7623*x7635))+(((-1.0)*cj4*x7633)));
evalcond[1]=(((r02*x7627))+(((-1.0)*x7630*x7631))+((cj4*x7614))+(((-1.0)*x7623*x7633))+(((-1.0)*r22*x7624)));
evalcond[2]=(((sj4*x7634))+((px*x7619))+(((-1.08e-6)*x7614))+(((-1.0)*x7624*x7628))+((pz*sj1))+(((-1.17e-6)*x7614*x7620))+(((-0.56747)*x7615)));
evalcond[3]=((0.73)+(((-1.0)*pz*x7624))+(((-1.08e-6)*x7615))+(((-1.0)*x7628*x7630))+(((0.56747)*x7614))+(((-1.0)*x7620*x7634))+(((-1.17e-6)*x7636))+((px*x7627)));
evalcond[4]=((((-1.0)*x7617*x7618))+((r20*x7622))+(((-1.0)*r01*x7617*x7619))+((x7616*x7621))+(((-1.0)*x7626*x7632))+(((-1.0)*sj3*x7635))+((cj5*r00*x7619)));
evalcond[5]=(((r21*x7621))+(((-1.0)*x7622*x7626))+((x7616*x7629))+(((-1.0)*sj3*x7633))+(((-1.0)*r01*x7617*x7627))+((r00*sj0*x7622))+(((-1.0)*r20*x7632)));
evalcond[6]=((((-1.0)*cj1*x7617*x7626))+(((-1.0)*sj4*x7633))+((r20*x7629))+((cj5*x7618))+((cj5*r01*x7619))+(((-1.0)*x7616*x7632))+((x7614*x7620))+((x7619*x7625)));
evalcond[7]=(((x7625*x7627))+((x7615*x7620))+(((-1.0)*x7616*x7622))+(((-1.0)*cj1*r20*x7617))+(((-1.0)*r21*x7632))+x7636+(((-1.0)*sj1*x7617*x7626))+((r01*sj0*x7622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x7637=cj3*cj3;
IkReal x7638=cj4*cj4;
IkReal x7639=(cj0*r12);
IkReal x7640=(cj1*cj4);
IkReal x7641=(r22*sj1);
IkReal x7642=(cj3*sj4);
IkReal x7643=(r02*sj0);
IkReal x7644=((1.0)*sj1);
IkReal x7645=((1.0)*cj1*x7642);
CheckValue<IkReal> x7646 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x7645))+(((-1.0)*x7639*x7640))+((x7640*x7643))+((sj1*x7642*x7643))+(((-1.0)*x7639*x7642*x7644))+((cj4*x7641)))),IkReal((((r22*x7640))+((cj1*x7642*x7643))+(((-1.0)*cj4*x7643*x7644))+((cj4*sj1*x7639))+(((-1.0)*x7639*x7645))+((x7641*x7642)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7646.valid){
continue;
}
CheckValue<IkReal> x7647=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7637*x7638))+x7638+x7637)),-1);
if(!x7647.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x7646.value)+(((1.5707963267949)*(x7647.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x7648=IKcos(j2);
IkReal x7649=IKsin(j2);
IkReal x7650=(cj0*r11);
IkReal x7651=((1.0)*sj5);
IkReal x7652=(r21*sj1);
IkReal x7653=(cj1*sj0);
IkReal x7654=(cj3*cj4);
IkReal x7655=(cj1*sj5);
IkReal x7656=(cj5*sj1);
IkReal x7657=(cj3*sj4);
IkReal x7658=((1.0)*cj1);
IkReal x7659=(r00*sj5);
IkReal x7660=(cj0*r10);
IkReal x7661=(sj0*sj1);
IkReal x7662=(cj0*py);
IkReal x7663=(sj1*sj5);
IkReal x7664=((1.0)*sj1);
IkReal x7665=(cj0*r12);
IkReal x7666=(cj5*x7658);
IkReal x7667=((1.0)*x7649);
IkReal x7668=((1.17e-6)*x7649);
IkReal x7669=((1.0)*x7648);
IkReal x7670=(sj4*x7648);
evalcond[0]=((((-1.0)*cj4*x7667))+((r22*sj1))+((r02*x7653))+(((-1.0)*x7657*x7669))+(((-1.0)*x7658*x7665)));
evalcond[1]=((((-1.0)*r22*x7658))+(((-1.0)*x7657*x7667))+((r02*x7661))+(((-1.0)*x7664*x7665))+((cj4*x7648)));
evalcond[2]=(((sj4*x7668))+((px*x7653))+(((-0.56747)*x7649))+(((-1.08e-6)*x7648))+(((-1.17e-6)*x7648*x7654))+((pz*sj1))+(((-1.0)*x7658*x7662)));
evalcond[3]=((0.73)+((px*x7661))+(((-1.0)*pz*x7658))+(((-1.17e-6)*x7670))+(((-1.08e-6)*x7649))+(((-1.0)*x7662*x7664))+(((0.56747)*x7648))+(((-1.0)*x7654*x7668)));
evalcond[4]=((((-1.0)*x7651*x7652))+(((-1.0)*r01*x7651*x7653))+((x7650*x7655))+(((-1.0)*x7660*x7666))+(((-1.0)*sj3*x7669))+((r20*x7656))+((cj5*r00*x7653)));
evalcond[5]=((((-1.0)*x7656*x7660))+((r00*sj0*x7656))+((r21*x7655))+((x7650*x7663))+(((-1.0)*r01*x7651*x7661))+(((-1.0)*sj3*x7667))+(((-1.0)*r20*x7666)));
evalcond[6]=(((cj5*x7652))+(((-1.0)*x7650*x7666))+((r20*x7663))+((x7648*x7654))+(((-1.0)*sj4*x7667))+(((-1.0)*cj1*x7651*x7660))+((x7653*x7659))+((cj5*r01*x7653)));
evalcond[7]=((((-1.0)*cj1*r20*x7651))+((x7659*x7661))+((x7649*x7654))+(((-1.0)*r21*x7666))+((r01*sj0*x7656))+(((-1.0)*x7650*x7656))+(((-1.0)*sj1*x7651*x7660))+x7670);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - elfin15 (10efe3f1f72029b71770cc755029729b)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004b"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
