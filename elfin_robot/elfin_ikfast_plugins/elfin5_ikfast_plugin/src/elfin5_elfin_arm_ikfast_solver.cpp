/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004b generated on 2022-05-11 16:36:01.922609
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004b);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.03) // 5D IK has some crazy degenerate cases, but can rely on jacobian refinment to make better, just need good starting point
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

template <typename T> struct ComplexLess
{
    bool operator()(const complex<T>& lhs, const complex<T>& rhs) const
    {
        if (real(lhs) < real(rhs)) {
            return true;
        }
        if (real(lhs) > real(rhs)) {
            return false;
        }
        return imag(lhs) < imag(rhs);
    }
};

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76,x77;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[1]);
x3=IKsin(j[2]);
x4=IKcos(j[2]);
x5=IKsin(j[0]);
x6=IKsin(j[3]);
x7=IKcos(j[3]);
x8=IKsin(j[5]);
x9=IKcos(j[5]);
x10=IKsin(j[4]);
x11=IKcos(j[4]);
x12=((0.196101910578938)*x2);
x13=((0.98058352049547)*x1);
x14=((0.98058352049547)*x0);
x15=((0.0823682087820348)*x3);
x16=((0.411843996961093)*x4);
x17=((0.0292209735166883)*x4);
x18=((0.411843996961093)*x3);
x19=((1.0)*x7);
x20=((0.980581119472069)*x4);
x21=((0.980581119472069)*x3);
x22=((1.0)*x6);
x23=((0.196113916219385)*x4);
x24=((0.196113916219385)*x3);
x25=((0.0823682087820348)*x4);
x26=((-0.980581119472069)*x4);
x27=(x1*x5);
x28=(x2*x5);
x29=((-0.980581119472069)*x3);
x30=((-0.196113916219385)*x4);
x31=((-0.0292209735166883)*x4);
x32=(x0*x1);
x33=((-0.196113916219385)*x3);
x34=(x0*x2);
x35=(x5*x6);
x36=(x0*x6);
x37=((-0.146106586801338)*x4);
x38=((-0.0292209735166883)*x3);
x39=((-0.146106586801338)*x3);
x40=(x10*x7);
x41=(x0*x19);
x42=((((-1.0)*x12))+x13);
x43=((((-1.0)*x13))+x12);
x44=((((-0.196101910578938)*x1))+(((-0.98058352049547)*x2)));
x45=(x3*x42);
x46=(x4*x44);
x47=(x3*x44);
x48=(x0*(((((-1.0)*x12))+x13)));
x49=(x5*(((((-1.0)*x13))+x12)));
x50=((((0.196101910578938)*x32))+((x14*x2)));
x51=((-1.0)*x50);
x52=((((0.196101910578938)*x27))+(((0.98058352049547)*x28)));
x53=((-1.0)*x52);
x54=(x4*x48);
x55=(x3*x48);
x56=((-0.196113916219385)*x49);
x57=(x4*x49);
x58=(x20*x48);
x59=(x20*x49);
x60=(x4*x51);
x61=(x3*x50);
x62=(x21*x50);
x63=(x21*x53);
x64=(x58+x62);
x65=(x59+x63);
x66=(((x20*x44))+((x21*x42))+((x30*x43))+((x33*x44)));
x67=(((x29*x42))+((x26*x44))+((x23*x43))+((x24*x44)));
IkReal x78=((1.0)*x44);
x68=((((-1.0)*x20*x43))+(((-1.0)*x24*x42))+(((-1.0)*x21*x78))+(((-1.0)*x23*x78)));
x69=((((-1.0)*x24*x48))+(((-1.0)*x23*x51))+x64);
x70=((((-1.0)*x24*x49))+(((-1.0)*x23*x52))+x65);
x71=((1.0)*x70);
x72=(((x26*x52))+((x29*x49))+((x33*x53))+((x30*x49)));
x73=(x6*x69);
x74=(((x69*x7))+x35);
x75=(((x11*x66*x7))+((x10*x68)));
x76=(((x10*x72))+((x11*((x36+((x7*x70)))))));
IkReal x79=((1.0)*x48);
x77=((((-1.0)*x11*x74))+((x10*(((((-1.0)*x26*x51))+(((-1.0)*x30*x79))+(((-1.0)*x33*x50))+(((-1.0)*x29*x79)))))));
eerot[0]=(((x77*x8))+((x9*((x73+(((-1.0)*x5*x7)))))));
eerot[1]=(((x77*x9))+((x8*((((x19*x5))+(((-1.0)*x73)))))));
eerot[2]=(((x11*((((x20*x51))+((x23*x48))+((x24*x50))+((x21*x48))))))+((x10*x74)));
eetrans[0]=(((x15*x50))+(((1.817e-5)*x32))+((x16*x51))+((x18*x48))+((x11*(((((0.0292209735166883)*x61))+((x17*x48))+(((0.146106586801338)*x60))+(((0.146106586801338)*x55))))))+(((-0.380002467432022)*x34))+((x10*(((((0.149)*x35))+(((0.149)*x7*((x64+((x30*x51))+((x33*x48))))))))))+((x25*x48)));
eerot[3]=(((x9*((x41+(((-1.0)*x22*x70))))))+((x76*x8)));
eerot[4]=(((x76*x9))+((x8*(((((-1.0)*x41))+((x6*x70)))))));
eerot[5]=(((x10*(((((-1.0)*x0*x22))+(((-1.0)*x19*x70))))))+((x11*x72)));
IkReal x80=((1.0)*x49);
eetrans[1]=((((1.817e-5)*x27))+((x11*((((x38*x53))+((x37*x52))+((x39*x49))+((x31*x49))))))+((x10*(((((-0.149)*x36))+(((-0.149)*x7*((x65+((x30*x52))+((x33*x49))))))))))+(((-0.380002467432022)*x28))+(((-1.0)*x16*x52))+(((-1.0)*x15*x53))+(((-1.0)*x25*x80))+(((-1.0)*x18*x80)));
eerot[6]=(((x75*x8))+((x6*x67*x9)));
eerot[7]=(((x6*x66*x8))+((x75*x9)));
eerot[8]=(((x11*x68))+((x40*x67)));
IkReal x81=((1.0)*x44);
eetrans[2]=((0.22)+(((-1.0)*x15*x42))+((x11*((((x37*x43))+((x38*x42))+((x39*x44))+((x31*x44))))))+((x40*((((x37*x44))+((x17*x43))+((x39*x42))+(((0.0292209735166883)*x47))))))+(((1.817e-5)*x2))+(((-1.0)*x16*x43))+(((0.380002467432022)*x1))+(((-1.0)*x25*x81))+(((-1.0)*x18*x81)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API const int* GetFreeIndices() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r11;
new_r01=((-1.0)*r10);
new_r02=r12;
new_px=((((-0.149)*r12))+py);
new_r10=((-1.0)*r01);
new_r11=r00;
new_r12=((-1.0)*r02);
new_py=((((0.149)*r02))+(((-1.0)*px)));
new_r20=r21;
new_r21=((-1.0)*r20);
new_r22=r22;
new_pz=((-0.22)+pz+(((-0.149)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x82=((1.0)*px);
IkReal x83=((1.0)*pz);
IkReal x84=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x84))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x83)));
rxp0_2=((((-1.0)*r10*x82))+((py*r00)));
rxp1_0=((((-1.0)*r21*x84))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x83)));
rxp1_2=((((-1.0)*r11*x82))+((py*r01)));
rxp2_0=((((-1.0)*r22*x84))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x83))+((px*r22)));
rxp2_2=((((-1.0)*r12*x82))+((py*r02)));
{
IkReal j0eval[1];
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
j2eval[0]=2.46238030477352;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=2.46238030477352;
j2eval[1]=4.72686007271014;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( (((1.00501188017854)+(((-3.13281173785459)*pp)))) < -1-IKFAST_SINCOS_THRESH || (((1.00501188017854)+(((-3.13281173785459)*pp)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x85=IKasin(((1.00501188017854)+(((-3.13281173785459)*pp))));
j2array[0]=((-1.57075286422771)+(((-1.0)*x85)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((1.57083978936208)+x85);
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j0eval[1];
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
j1eval[0]=((IKabs(((0.380002467432022)+(((-1.82822294308839e-6)*sj2))+(((0.419999999548156)*cj2)))))+(IKabs(((1.817e-5)+(((1.82822294308839e-6)*cj2))+(((0.419999999548156)*sj2))))));
j1eval[1]=((49199.932035477)+(((108757.037970669)*cj2))+(((4.72686007271014)*sj2))+(((60102.1832813089)*(cj2*cj2)))+(((60102.1832813089)*(sj2*sj2))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x86=((0.380002467432022)+(((-1.82822294308839e-6)*sj2))+(((0.419999999548156)*cj2)));
IkReal x87=((1.817e-5)+(((1.82822294308839e-6)*cj2))+(((0.419999999548156)*sj2)));
CheckValue<IkReal> x90 = IKatan2WithCheck(IkReal(x86),IkReal(x87),IKFAST_ATAN2_MAGTHRESH);
if(!x90.valid){
continue;
}
IkReal x88=((1.0)*(x90.value));
if((((x87*x87)+(x86*x86))) < -0.00001)
continue;
CheckValue<IkReal> x91=IKPowWithIntegerCheck(IKabs(IKsqrt(((x87*x87)+(x86*x86)))),-1);
if(!x91.valid){
continue;
}
if( ((pz*(x91.value))) < -1-IKFAST_SINCOS_THRESH || ((pz*(x91.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x89=IKasin((pz*(x91.value)));
j1array[0]=(x89+(((-1.0)*x88)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x89))+(((-1.0)*x88)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal j0eval[1];
j0eval[0]=((IKabs(py))+(((0.5)*(IKabs(px)))));
if( IKabs(j0eval[0]) < 0.0000000100000000  )
{
{
IkReal j0eval[1];
j0eval[0]=((IKabs(((880.520750310292)+(((-20913.7296330226)*py*sj1))+((cj1*py))+(((-27517.8866263071)*pp))+((pz*sj1))+(((20913.7296330226)*cj1*pz)))))+(IKabs(((((-41827.4592660453)*px*sj1))+(((2.0)*cj1*px))))));
if( IKabs(j0eval[0]) < 0.0000000100000000  )
{
{
IkReal j0eval[1];
j0eval[0]=((IKabs(((((-84.0334974578257)*px*sj1))+(((-16.8054317247585)*cj1*px)))))+(IKabs(((-15.9663155131109)+(((-8.40271586237926)*pz*sj1))+(((-8.40271586237926)*cj1*py))+(((-42.0167487289129)*py*sj1))+(((3.52937231690034)*sj2))+(((-17.6469881189537)*cj2))+(((42.0167487289129)*cj1*pz))))));
if( IKabs(j0eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x92=((3.52937231690034)*sj2);
IkReal x93=((17.6469881189537)*cj2);
IkReal x94=((8.40271586237926)*cj1*py);
IkReal x95=((42.0167487289129)*py*sj1);
IkReal x96=((42.0167487289129)*cj1*pz);
IkReal x97=((8.40271586237926)*pz*sj1);
IkReal x98=(x93+x97);
IkReal x99=((-15.9663155131109)+x92+x96);
IkReal x100=(x95+x94);
op[0]=((((-1.0)*x100))+x99+(((-1.0)*x98)));
op[1]=((((-84.0334974578257)*px*sj1))+(((-16.8054317247585)*cj1*px)));
op[2]=(x100+x99+(((-1.0)*x98)));
polyroots2(op,zeror,numroots);
IkReal j0array[2], cj0array[2], sj0array[2], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[2]={true,true};
_nj0 = 2;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1540=(pz*sj1);
IkReal x1541=((27517.8866263071)*pp);
IkReal x1542=(cj1*py);
IkReal x1543=((20913.7296330226)*py*sj1);
IkReal x1544=((20913.7296330226)*cj1*pz);
IkReal x1545=((880.520750310292)+x1544+x1540);
op[0]=(x1545+x1542+(((-1.0)*x1541))+(((-1.0)*x1543)));
op[1]=((((-41827.4592660453)*px*sj1))+(((2.0)*cj1*px)));
op[2]=((((-1.0)*x1542))+x1545+x1543+(((-1.0)*x1541)));
polyroots2(op,zeror,numroots);
IkReal j0array[2], cj0array[2], sj0array[2], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[2]={true,true};
_nj0 = 2;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=px;
op[1]=((-2.0)*py);
op[2]=((-1.0)*px);
polyroots2(op,zeror,numroots);
IkReal j0array[2], cj0array[2], sj0array[2], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[2]={true,true};
_nj0 = 2;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
rotationfunction0(solutions);
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1547 = IKatan2WithCheck(IkReal(((-1.0)*px)),IkReal(((-1.0)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x1547.valid){
continue;
}
IkReal x1546=x1547.value;
j0array[0]=((-1.0)*x1546);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1546)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j1eval[2];
j1eval[0]=((-109302.115316786)+(((-4.72686007271014)*sj2))+(((-108757.037970669)*cj2)));
j1eval[1]=IKsign(((-0.320801875208367)+(((-1.38733415248011e-5)*sj2))+(((-0.319202072365932)*cj2))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1548=((4.72686007271014)*sj2);
IkReal x1549=(cj0*py);
IkReal x1550=(px*sj0);
IkReal x1551=((108757.037970669)*cj2);
IkReal x1552=((1.38733415248011e-5)*sj2);
IkReal x1553=((0.319202072365932)*cj2);
IkReal x1554=(cj2*pz);
IkReal x1555=(pz*sj2);
j1eval[0]=((((-4.72686007271014)*x1554))+(((-1.0)*x1548*x1549))+(((98399.864070954)*x1550))+(((-1.0)*x1549*x1551))+((x1550*x1551))+(((-98399.864070954)*x1549))+(((108757.037970669)*x1555))+((x1548*x1550)));
j1eval[1]=IKsign(((((0.288803751169147)*x1550))+(((-1.0)*x1549*x1553))+(((-1.0)*x1549*x1552))+(((0.319202072365932)*x1555))+((x1550*x1552))+((x1550*x1553))+(((-1.38733415248011e-5)*x1554))+(((-0.288803751169147)*x1549))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1556=(pz*sj2);
IkReal x1557=(cj0*py);
IkReal x1558=((3.52921747438659)*sj2);
IkReal x1559=(cj2*pz);
IkReal x1560=((0.0823645950798363)*sj2);
IkReal x1561=(px*sj0);
IkReal x1562=(cj2*x1561);
j1eval[0]=((((-17.6470190851205)*x1562))+(((-3.19381620515871)*pz))+(((15.9663155131109)*x1557))+(((-3.52921747438659)*x1559))+(((-1.0)*x1557*x1558))+(((17.6470190851205)*cj2*x1557))+(((-15.9663155131109)*x1561))+((x1558*x1561))+(((-17.6470190851205)*x1556)));
j1eval[1]=IKsign((((x1560*x1561))+(((-0.411844719647015)*x1556))+(((0.372620594139742)*x1557))+(((-0.411844719647015)*x1562))+(((-1.0)*x1557*x1560))+(((-0.372620594139742)*x1561))+(((-0.0745370270906975)*pz))+(((-0.0823645950798363)*x1559))+(((0.411844719647015)*cj2*x1557))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1563=cj2*cj2;
IkReal x1564=pz*pz;
IkReal x1565=(cj0*py);
IkReal x1566=((0.411844719647015)*cj2);
IkReal x1567=(cj2*sj2);
IkReal x1568=(px*sj0);
IkReal x1569=((0.0823645950798363)*sj2);
IkReal x1570=(pz*x1565);
IkReal x1571=(pz*x1568);
CheckValue<IkReal> x1572 = IKatan2WithCheck(IkReal(((0.141596895776537)+(((0.196101910578938)*x1571))+(((-0.0345954005938813)*x1567))+(((0.313002384412606)*cj2))+(((0.172974327950121)*x1563))+(((-0.196101910578938)*x1570))+(((-0.98058352049547)*x1564))+(((-0.0313008038086484)*sj2)))),IkReal(((0.0345878771350415)+(((-0.172974327950121)*x1567))+(((-0.0345954005938813)*x1563))+(((0.98058352049547)*x1570))+(((-0.156499152739972)*sj2))+(((-8.16443894405656e-6)*cj2))+(((-0.196101910578938)*x1564))+(((-0.98058352049547)*x1571)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1572.valid){
continue;
}
CheckValue<IkReal> x1573=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1565*x1569))+(((-1.0)*x1566*x1568))+(((0.372620594139742)*x1565))+((x1568*x1569))+(((-0.372620594139742)*x1568))+(((-0.0745370270906975)*pz))+(((-0.0823645950798363)*cj2*pz))+(((-0.411844719647015)*pz*sj2))+((x1565*x1566)))),-1);
if(!x1573.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1572.value)+(((1.5707963267949)*(x1573.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1574=IKcos(j1);
IkReal x1575=IKsin(j1);
IkReal x1576=(px*sj0);
IkReal x1577=(cj0*py);
IkReal x1578=(pz*x1574);
IkReal x1579=((0.98058352049547)*x1575);
IkReal x1580=((0.196101910578938)*x1574);
IkReal x1581=((0.98058352049547)*x1574);
IkReal x1582=((3.634e-5)*x1574);
IkReal x1583=((1.82822294308839e-6)*x1575);
IkReal x1584=(sj2*x1574);
IkReal x1585=(pz*x1575);
IkReal x1586=((0.419999999548156)*x1575);
IkReal x1587=(cj2*x1574);
IkReal x1588=(x1575*x1577);
evalcond[0]=((0.031998124066276)+(((-0.760004934864043)*x1575*x1576))+((x1576*x1582))+(((-1.0)*x1577*x1582))+(((-1.0)*pp))+(((0.760004934864043)*x1578))+(((0.760004934864043)*x1588))+(((3.634e-5)*x1585)));
evalcond[1]=(((sj2*x1586))+(((0.419999999548156)*x1587))+(((-1.82822294308839e-6)*x1584))+(((1.817e-5)*x1575))+(((-1.0)*pz))+((cj2*x1583))+(((0.380002467432022)*x1574)));
evalcond[2]=((-0.372620594139742)+(((-1.0)*x1576*x1579))+(((-0.411843996961093)*cj2))+(((0.98058352049547)*x1578))+(((-0.196101910578938)*x1585))+((x1577*x1579))+((x1577*x1580))+(((-1.0)*x1576*x1580))+(((0.0823682087820348)*sj2)));
evalcond[3]=((-0.0745370270906975)+(((0.196101910578938)*x1578))+(((0.196101910578938)*x1588))+((x1576*x1581))+(((-1.0)*x1577*x1581))+(((-0.0823682087820348)*cj2))+(((-0.196101910578938)*x1575*x1576))+((pz*x1579))+(((-0.411843996961093)*sj2)));
evalcond[4]=((((-1.817e-5)*x1574))+(((-1.82822294308839e-6)*x1587))+(((-0.419999999548156)*x1584))+x1576+((cj2*x1586))+(((-1.0)*sj2*x1583))+(((0.380002467432022)*x1575))+(((-1.0)*x1577)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1589=pz*pz;
IkReal x1590=(cj0*py);
IkReal x1591=((0.760004934864043)*pz);
IkReal x1592=(px*sj0);
IkReal x1593=((0.319202072365932)*cj2);
IkReal x1594=((3.634e-5)*pz);
IkReal x1595=(cj2*pp);
IkReal x1596=((1.38733415248011e-5)*sj2);
IkReal x1597=(pp*sj2);
CheckValue<IkReal> x1598 = IKatan2WithCheck(IkReal(((0.0121593660983808)+(((0.0134392120933778)*cj2))+((x1592*x1594))+(((-5.84997045537545e-8)*sj2))+(((-0.419999999548156)*x1595))+(((-0.380002467432022)*pp))+(((0.760004934864043)*x1589))+(((-1.0)*x1590*x1594))+(((1.82822294308839e-6)*x1597)))),IkReal(((-5.81405914284235e-7)+(((0.419999999548156)*x1597))+(((-3.634e-5)*x1589))+(((-0.0134392120933778)*sj2))+((x1591*x1592))+(((-1.0)*x1590*x1591))+(((1.82822294308839e-6)*x1595))+(((1.817e-5)*pp))+(((-5.84997045537545e-8)*cj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1598.valid){
continue;
}
CheckValue<IkReal> x1599=IKPowWithIntegerCheck(IKsign((((x1592*x1596))+((x1592*x1593))+(((0.319202072365932)*pz*sj2))+(((-0.288803751169147)*x1590))+(((-1.0)*x1590*x1593))+(((-1.0)*x1590*x1596))+(((-1.38733415248011e-5)*cj2*pz))+(((0.288803751169147)*x1592)))),-1);
if(!x1599.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1598.value)+(((1.5707963267949)*(x1599.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1600=IKcos(j1);
IkReal x1601=IKsin(j1);
IkReal x1602=(px*sj0);
IkReal x1603=(cj0*py);
IkReal x1604=(pz*x1600);
IkReal x1605=((0.98058352049547)*x1601);
IkReal x1606=((0.196101910578938)*x1600);
IkReal x1607=((0.98058352049547)*x1600);
IkReal x1608=((3.634e-5)*x1600);
IkReal x1609=((1.82822294308839e-6)*x1601);
IkReal x1610=(sj2*x1600);
IkReal x1611=(pz*x1601);
IkReal x1612=((0.419999999548156)*x1601);
IkReal x1613=(cj2*x1600);
IkReal x1614=(x1601*x1603);
evalcond[0]=((0.031998124066276)+(((0.760004934864043)*x1614))+(((0.760004934864043)*x1604))+(((-1.0)*pp))+(((3.634e-5)*x1611))+(((-1.0)*x1603*x1608))+((x1602*x1608))+(((-0.760004934864043)*x1601*x1602)));
evalcond[1]=(((sj2*x1612))+(((0.419999999548156)*x1613))+(((0.380002467432022)*x1600))+(((-1.0)*pz))+((cj2*x1609))+(((1.817e-5)*x1601))+(((-1.82822294308839e-6)*x1610)));
evalcond[2]=((-0.372620594139742)+(((-0.411843996961093)*cj2))+(((-0.196101910578938)*x1611))+((x1603*x1605))+((x1603*x1606))+(((-1.0)*x1602*x1606))+(((-1.0)*x1602*x1605))+(((0.0823682087820348)*sj2))+(((0.98058352049547)*x1604)));
evalcond[3]=((-0.0745370270906975)+(((-0.196101910578938)*x1601*x1602))+(((0.196101910578938)*x1614))+(((0.196101910578938)*x1604))+(((-0.0823682087820348)*cj2))+(((-1.0)*x1603*x1607))+((x1602*x1607))+((pz*x1605))+(((-0.411843996961093)*sj2)));
evalcond[4]=((((-1.0)*x1603))+x1602+(((0.380002467432022)*x1601))+(((-0.419999999548156)*x1610))+((cj2*x1612))+(((-1.0)*sj2*x1609))+(((-1.82822294308839e-6)*x1613))+(((-1.817e-5)*x1600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1615=(px*sj0);
IkReal x1616=((0.419999999548156)*sj2);
IkReal x1617=(cj0*py);
IkReal x1618=((1.82822294308839e-6)*sj2);
IkReal x1619=(cj2*pz);
IkReal x1620=((1.82822294308839e-6)*cj2);
IkReal x1621=((0.419999999548156)*cj2);
CheckValue<IkReal> x1622=IKPowWithIntegerCheck(IKsign(((-0.320801875208367)+(((-1.38733415248011e-5)*sj2))+(((-0.319202072365932)*cj2)))),-1);
if(!x1622.valid){
continue;
}
CheckValue<IkReal> x1623 = IKatan2WithCheck(IkReal((((x1617*x1618))+(((0.380002467432022)*x1615))+(((-1.0)*x1617*x1621))+(((-1.0)*pz*x1616))+((x1615*x1621))+(((-0.380002467432022)*x1617))+(((-1.817e-5)*pz))+(((-1.82822294308839e-6)*x1619))+(((-1.0)*x1615*x1618)))),IkReal((((pz*x1618))+((x1617*x1620))+(((-0.419999999548156)*x1619))+(((-0.380002467432022)*pz))+(((1.817e-5)*x1617))+((x1616*x1617))+(((-1.0)*x1615*x1620))+(((-1.0)*x1615*x1616))+(((-1.817e-5)*x1615)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1623.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1622.value)))+(x1623.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1624=IKcos(j1);
IkReal x1625=IKsin(j1);
IkReal x1626=(px*sj0);
IkReal x1627=(cj0*py);
IkReal x1628=(pz*x1624);
IkReal x1629=((0.98058352049547)*x1625);
IkReal x1630=((0.196101910578938)*x1624);
IkReal x1631=((0.98058352049547)*x1624);
IkReal x1632=((3.634e-5)*x1624);
IkReal x1633=((1.82822294308839e-6)*x1625);
IkReal x1634=(sj2*x1624);
IkReal x1635=(pz*x1625);
IkReal x1636=((0.419999999548156)*x1625);
IkReal x1637=(cj2*x1624);
IkReal x1638=(x1625*x1627);
evalcond[0]=((0.031998124066276)+(((0.760004934864043)*x1628))+(((-0.760004934864043)*x1625*x1626))+(((3.634e-5)*x1635))+(((-1.0)*pp))+(((-1.0)*x1627*x1632))+(((0.760004934864043)*x1638))+((x1626*x1632)));
evalcond[1]=(((cj2*x1633))+((sj2*x1636))+(((0.380002467432022)*x1624))+(((-1.82822294308839e-6)*x1634))+(((-1.0)*pz))+(((1.817e-5)*x1625))+(((0.419999999548156)*x1637)));
evalcond[2]=((-0.372620594139742)+((x1627*x1630))+(((-0.411843996961093)*cj2))+((x1627*x1629))+(((-0.196101910578938)*x1635))+(((0.98058352049547)*x1628))+(((-1.0)*x1626*x1630))+(((-1.0)*x1626*x1629))+(((0.0823682087820348)*sj2)));
evalcond[3]=((-0.0745370270906975)+((pz*x1629))+(((0.196101910578938)*x1628))+(((-0.196101910578938)*x1625*x1626))+(((-0.0823682087820348)*cj2))+(((0.196101910578938)*x1638))+(((-1.0)*x1627*x1631))+(((-0.411843996961093)*sj2))+((x1626*x1631)));
evalcond[4]=((((-1.0)*x1627))+(((-1.817e-5)*x1624))+(((-1.0)*sj2*x1633))+x1626+((cj2*x1636))+(((0.380002467432022)*x1625))+(((-0.419999999548156)*x1634))+(((-1.82822294308839e-6)*x1637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( (((1.00501188017854)+(((-3.13281173785459)*pp)))) < -1-IKFAST_SINCOS_THRESH || (((1.00501188017854)+(((-3.13281173785459)*pp)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1639=IKasin(((1.00501188017854)+(((-3.13281173785459)*pp))));
j2array[0]=((-1.57075286422771)+(((-1.0)*x1639)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((1.57083978936208)+x1639);
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j0eval[1];
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
j1eval[0]=((IKabs(((0.380002467432022)+(((-1.82822294308839e-6)*sj2))+(((0.419999999548156)*cj2)))))+(IKabs(((1.817e-5)+(((1.82822294308839e-6)*cj2))+(((0.419999999548156)*sj2))))));
j1eval[1]=((49199.932035477)+(((108757.037970669)*cj2))+(((4.72686007271014)*sj2))+(((60102.1832813089)*(cj2*cj2)))+(((60102.1832813089)*(sj2*sj2))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x1640=((0.380002467432022)+(((-1.82822294308839e-6)*sj2))+(((0.419999999548156)*cj2)));
IkReal x1641=((1.817e-5)+(((1.82822294308839e-6)*cj2))+(((0.419999999548156)*sj2)));
CheckValue<IkReal> x1644 = IKatan2WithCheck(IkReal(x1640),IkReal(x1641),IKFAST_ATAN2_MAGTHRESH);
if(!x1644.valid){
continue;
}
IkReal x1642=((1.0)*(x1644.value));
if((((x1641*x1641)+(x1640*x1640))) < -0.00001)
continue;
CheckValue<IkReal> x1645=IKPowWithIntegerCheck(IKabs(IKsqrt(((x1641*x1641)+(x1640*x1640)))),-1);
if(!x1645.valid){
continue;
}
if( ((pz*(x1645.value))) < -1-IKFAST_SINCOS_THRESH || ((pz*(x1645.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1643=IKasin((pz*(x1645.value)));
j1array[0]=(x1643+(((-1.0)*x1642)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x1643))+(((-1.0)*x1642)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal j0eval[1];
j0eval[0]=((IKabs(py))+(((0.5)*(IKabs(px)))));
if( IKabs(j0eval[0]) < 0.0000000100000000  )
{
{
IkReal j0eval[1];
j0eval[0]=((IKabs(((880.520750310292)+(((-20913.7296330226)*py*sj1))+((cj1*py))+(((-27517.8866263071)*pp))+((pz*sj1))+(((20913.7296330226)*cj1*pz)))))+(IKabs(((((-41827.4592660453)*px*sj1))+(((2.0)*cj1*px))))));
if( IKabs(j0eval[0]) < 0.0000000100000000  )
{
{
IkReal j0eval[1];
j0eval[0]=((IKabs(((((-84.0334974578257)*px*sj1))+(((-16.8054317247585)*cj1*px)))))+(IKabs(((-15.9663155131109)+(((-8.40271586237926)*pz*sj1))+(((-8.40271586237926)*cj1*py))+(((-42.0167487289129)*py*sj1))+(((3.52937231690034)*sj2))+(((-17.6469881189537)*cj2))+(((42.0167487289129)*cj1*pz))))));
if( IKabs(j0eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1646=((3.52937231690034)*sj2);
IkReal x1647=((17.6469881189537)*cj2);
IkReal x1648=((8.40271586237926)*cj1*py);
IkReal x1649=((42.0167487289129)*py*sj1);
IkReal x1650=((42.0167487289129)*cj1*pz);
IkReal x1651=((8.40271586237926)*pz*sj1);
IkReal x1652=(x1651+x1647);
IkReal x1653=((-15.9663155131109)+x1650+x1646);
IkReal x1654=(x1649+x1648);
op[0]=(x1653+(((-1.0)*x1654))+(((-1.0)*x1652)));
op[1]=((((-84.0334974578257)*px*sj1))+(((-16.8054317247585)*cj1*px)));
op[2]=(x1653+x1654+(((-1.0)*x1652)));
polyroots2(op,zeror,numroots);
IkReal j0array[2], cj0array[2], sj0array[2], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[2]={true,true};
_nj0 = 2;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1655=(pz*sj1);
IkReal x1656=((27517.8866263071)*pp);
IkReal x1657=(cj1*py);
IkReal x1658=((20913.7296330226)*py*sj1);
IkReal x1659=((20913.7296330226)*cj1*pz);
IkReal x1660=((880.520750310292)+x1659+x1655);
op[0]=(x1660+x1657+(((-1.0)*x1656))+(((-1.0)*x1658)));
op[1]=((((-41827.4592660453)*px*sj1))+(((2.0)*cj1*px)));
op[2]=(x1660+x1658+(((-1.0)*x1657))+(((-1.0)*x1656)));
polyroots2(op,zeror,numroots);
IkReal j0array[2], cj0array[2], sj0array[2], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[2]={true,true};
_nj0 = 2;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=px;
op[1]=((-2.0)*py);
op[2]=((-1.0)*px);
polyroots2(op,zeror,numroots);
IkReal j0array[2], cj0array[2], sj0array[2], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[2]={true,true};
_nj0 = 2;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
rotationfunction0(solutions);
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1662 = IKatan2WithCheck(IkReal(((-1.0)*px)),IkReal(((-1.0)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x1662.valid){
continue;
}
IkReal x1661=x1662.value;
j0array[0]=((-1.0)*x1661);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1661)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j1eval[2];
j1eval[0]=((-109302.115316786)+(((-4.72686007271014)*sj2))+(((-108757.037970669)*cj2)));
j1eval[1]=IKsign(((-0.320801875208367)+(((-1.38733415248011e-5)*sj2))+(((-0.319202072365932)*cj2))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1663=((4.72686007271014)*sj2);
IkReal x1664=(cj0*py);
IkReal x1665=(px*sj0);
IkReal x1666=((108757.037970669)*cj2);
IkReal x1667=((1.38733415248011e-5)*sj2);
IkReal x1668=((0.319202072365932)*cj2);
IkReal x1669=(cj2*pz);
IkReal x1670=(pz*sj2);
j1eval[0]=((((-98399.864070954)*x1664))+(((-4.72686007271014)*x1669))+(((98399.864070954)*x1665))+(((108757.037970669)*x1670))+(((-1.0)*x1663*x1664))+((x1665*x1666))+((x1663*x1665))+(((-1.0)*x1664*x1666)));
j1eval[1]=IKsign(((((0.319202072365932)*x1670))+(((-1.38733415248011e-5)*x1669))+(((-0.288803751169147)*x1664))+(((0.288803751169147)*x1665))+((x1665*x1667))+((x1665*x1668))+(((-1.0)*x1664*x1667))+(((-1.0)*x1664*x1668))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1671=(pz*sj2);
IkReal x1672=(cj0*py);
IkReal x1673=((3.52921747438659)*sj2);
IkReal x1674=(cj2*pz);
IkReal x1675=((0.0823645950798363)*sj2);
IkReal x1676=(px*sj0);
IkReal x1677=(cj2*x1676);
j1eval[0]=((((-1.0)*x1672*x1673))+(((15.9663155131109)*x1672))+(((-17.6470190851205)*x1671))+(((-17.6470190851205)*x1677))+(((-3.19381620515871)*pz))+(((17.6470190851205)*cj2*x1672))+((x1673*x1676))+(((-15.9663155131109)*x1676))+(((-3.52921747438659)*x1674)));
j1eval[1]=IKsign(((((-1.0)*x1672*x1675))+(((-0.0823645950798363)*x1674))+((x1675*x1676))+(((-0.411844719647015)*x1677))+(((-0.411844719647015)*x1671))+(((-0.372620594139742)*x1676))+(((0.372620594139742)*x1672))+(((0.411844719647015)*cj2*x1672))+(((-0.0745370270906975)*pz))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1678=cj2*cj2;
IkReal x1679=pz*pz;
IkReal x1680=(cj0*py);
IkReal x1681=((0.411844719647015)*cj2);
IkReal x1682=(cj2*sj2);
IkReal x1683=(px*sj0);
IkReal x1684=((0.0823645950798363)*sj2);
IkReal x1685=(pz*x1680);
IkReal x1686=(pz*x1683);
CheckValue<IkReal> x1687 = IKatan2WithCheck(IkReal(((0.141596895776537)+(((-0.196101910578938)*x1685))+(((-0.0345954005938813)*x1682))+(((-0.98058352049547)*x1679))+(((0.313002384412606)*cj2))+(((0.172974327950121)*x1678))+(((0.196101910578938)*x1686))+(((-0.0313008038086484)*sj2)))),IkReal(((0.0345878771350415)+(((0.98058352049547)*x1685))+(((-0.98058352049547)*x1686))+(((-0.156499152739972)*sj2))+(((-0.172974327950121)*x1682))+(((-8.16443894405656e-6)*cj2))+(((-0.196101910578938)*x1679))+(((-0.0345954005938813)*x1678)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1687.valid){
continue;
}
CheckValue<IkReal> x1688=IKPowWithIntegerCheck(IKsign((((x1680*x1681))+(((-1.0)*x1681*x1683))+(((0.372620594139742)*x1680))+(((-1.0)*x1680*x1684))+(((-0.0745370270906975)*pz))+(((-0.0823645950798363)*cj2*pz))+(((-0.411844719647015)*pz*sj2))+(((-0.372620594139742)*x1683))+((x1683*x1684)))),-1);
if(!x1688.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1687.value)+(((1.5707963267949)*(x1688.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1689=IKcos(j1);
IkReal x1690=IKsin(j1);
IkReal x1691=(px*sj0);
IkReal x1692=(cj0*py);
IkReal x1693=(pz*x1689);
IkReal x1694=((0.98058352049547)*x1690);
IkReal x1695=((0.196101910578938)*x1689);
IkReal x1696=((0.98058352049547)*x1689);
IkReal x1697=((3.634e-5)*x1689);
IkReal x1698=((1.82822294308839e-6)*x1690);
IkReal x1699=(sj2*x1689);
IkReal x1700=(pz*x1690);
IkReal x1701=((0.419999999548156)*x1690);
IkReal x1702=(cj2*x1689);
IkReal x1703=(x1690*x1692);
evalcond[0]=((0.031998124066276)+(((-1.0)*x1692*x1697))+(((0.760004934864043)*x1693))+((x1691*x1697))+(((-0.760004934864043)*x1690*x1691))+(((0.760004934864043)*x1703))+(((-1.0)*pp))+(((3.634e-5)*x1700)));
evalcond[1]=((((-1.82822294308839e-6)*x1699))+(((1.817e-5)*x1690))+(((-1.0)*pz))+((sj2*x1701))+(((0.419999999548156)*x1702))+(((0.380002467432022)*x1689))+((cj2*x1698)));
evalcond[2]=((-0.372620594139742)+(((0.98058352049547)*x1693))+(((-0.411843996961093)*cj2))+((x1692*x1694))+((x1692*x1695))+(((-1.0)*x1691*x1695))+(((-1.0)*x1691*x1694))+(((-0.196101910578938)*x1700))+(((0.0823682087820348)*sj2)));
evalcond[3]=((-0.0745370270906975)+(((0.196101910578938)*x1703))+(((-1.0)*x1692*x1696))+((x1691*x1696))+(((-0.0823682087820348)*cj2))+(((0.196101910578938)*x1693))+((pz*x1694))+(((-0.196101910578938)*x1690*x1691))+(((-0.411843996961093)*sj2)));
evalcond[4]=((((-1.0)*sj2*x1698))+x1691+(((-1.0)*x1692))+(((-1.817e-5)*x1689))+(((-1.82822294308839e-6)*x1702))+(((-0.419999999548156)*x1699))+(((0.380002467432022)*x1690))+((cj2*x1701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1704=pz*pz;
IkReal x1705=(cj0*py);
IkReal x1706=((0.760004934864043)*pz);
IkReal x1707=(px*sj0);
IkReal x1708=((0.319202072365932)*cj2);
IkReal x1709=((3.634e-5)*pz);
IkReal x1710=(cj2*pp);
IkReal x1711=((1.38733415248011e-5)*sj2);
IkReal x1712=(pp*sj2);
CheckValue<IkReal> x1713=IKPowWithIntegerCheck(IKsign(((((0.288803751169147)*x1707))+(((-0.288803751169147)*x1705))+(((0.319202072365932)*pz*sj2))+(((-1.0)*x1705*x1708))+(((-1.0)*x1705*x1711))+(((-1.38733415248011e-5)*cj2*pz))+((x1707*x1711))+((x1707*x1708)))),-1);
if(!x1713.valid){
continue;
}
CheckValue<IkReal> x1714 = IKatan2WithCheck(IkReal(((0.0121593660983808)+(((0.0134392120933778)*cj2))+(((-5.84997045537545e-8)*sj2))+(((-0.419999999548156)*x1710))+(((0.760004934864043)*x1704))+(((-1.0)*x1705*x1709))+(((-0.380002467432022)*pp))+(((1.82822294308839e-6)*x1712))+((x1707*x1709)))),IkReal(((-5.81405914284235e-7)+(((-3.634e-5)*x1704))+(((-0.0134392120933778)*sj2))+((x1706*x1707))+(((-1.0)*x1705*x1706))+(((0.419999999548156)*x1712))+(((1.82822294308839e-6)*x1710))+(((1.817e-5)*pp))+(((-5.84997045537545e-8)*cj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1714.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1713.value)))+(x1714.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1715=IKcos(j1);
IkReal x1716=IKsin(j1);
IkReal x1717=(px*sj0);
IkReal x1718=(cj0*py);
IkReal x1719=(pz*x1715);
IkReal x1720=((0.98058352049547)*x1716);
IkReal x1721=((0.196101910578938)*x1715);
IkReal x1722=((0.98058352049547)*x1715);
IkReal x1723=((3.634e-5)*x1715);
IkReal x1724=((1.82822294308839e-6)*x1716);
IkReal x1725=(sj2*x1715);
IkReal x1726=(pz*x1716);
IkReal x1727=((0.419999999548156)*x1716);
IkReal x1728=(cj2*x1715);
IkReal x1729=(x1716*x1718);
evalcond[0]=((0.031998124066276)+(((-0.760004934864043)*x1716*x1717))+(((0.760004934864043)*x1729))+(((3.634e-5)*x1726))+((x1717*x1723))+(((-1.0)*pp))+(((0.760004934864043)*x1719))+(((-1.0)*x1718*x1723)));
evalcond[1]=(((cj2*x1724))+(((0.380002467432022)*x1715))+(((-1.0)*pz))+(((-1.82822294308839e-6)*x1725))+(((1.817e-5)*x1716))+((sj2*x1727))+(((0.419999999548156)*x1728)));
evalcond[2]=((-0.372620594139742)+(((-0.196101910578938)*x1726))+(((-0.411843996961093)*cj2))+(((0.98058352049547)*x1719))+((x1718*x1720))+((x1718*x1721))+(((-1.0)*x1717*x1721))+(((-1.0)*x1717*x1720))+(((0.0823682087820348)*sj2)));
evalcond[3]=((-0.0745370270906975)+(((0.196101910578938)*x1719))+((pz*x1720))+((x1717*x1722))+(((-0.196101910578938)*x1716*x1717))+(((-0.0823682087820348)*cj2))+(((0.196101910578938)*x1729))+(((-1.0)*x1718*x1722))+(((-0.411843996961093)*sj2)));
evalcond[4]=((((-1.817e-5)*x1715))+((cj2*x1727))+x1717+(((-1.0)*x1718))+(((0.380002467432022)*x1716))+(((-1.82822294308839e-6)*x1728))+(((-0.419999999548156)*x1725))+(((-1.0)*sj2*x1724)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1730=(px*sj0);
IkReal x1731=((0.419999999548156)*sj2);
IkReal x1732=(cj0*py);
IkReal x1733=((1.82822294308839e-6)*sj2);
IkReal x1734=(cj2*pz);
IkReal x1735=((1.82822294308839e-6)*cj2);
IkReal x1736=((0.419999999548156)*cj2);
CheckValue<IkReal> x1737 = IKatan2WithCheck(IkReal((((x1730*x1736))+(((-0.380002467432022)*x1732))+(((-1.0)*pz*x1731))+(((-1.0)*x1730*x1733))+(((-1.82822294308839e-6)*x1734))+((x1732*x1733))+(((-1.817e-5)*pz))+(((-1.0)*x1732*x1736))+(((0.380002467432022)*x1730)))),IkReal((((x1731*x1732))+(((1.817e-5)*x1732))+((pz*x1733))+(((-1.817e-5)*x1730))+(((-1.0)*x1730*x1731))+(((-1.0)*x1730*x1735))+(((-0.380002467432022)*pz))+((x1732*x1735))+(((-0.419999999548156)*x1734)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1737.valid){
continue;
}
CheckValue<IkReal> x1738=IKPowWithIntegerCheck(IKsign(((-0.320801875208367)+(((-1.38733415248011e-5)*sj2))+(((-0.319202072365932)*cj2)))),-1);
if(!x1738.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1737.value)+(((1.5707963267949)*(x1738.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1739=IKcos(j1);
IkReal x1740=IKsin(j1);
IkReal x1741=(px*sj0);
IkReal x1742=(cj0*py);
IkReal x1743=(pz*x1739);
IkReal x1744=((0.98058352049547)*x1740);
IkReal x1745=((0.196101910578938)*x1739);
IkReal x1746=((0.98058352049547)*x1739);
IkReal x1747=((3.634e-5)*x1739);
IkReal x1748=((1.82822294308839e-6)*x1740);
IkReal x1749=(sj2*x1739);
IkReal x1750=(pz*x1740);
IkReal x1751=((0.419999999548156)*x1740);
IkReal x1752=(cj2*x1739);
IkReal x1753=(x1740*x1742);
evalcond[0]=((0.031998124066276)+(((-0.760004934864043)*x1740*x1741))+(((0.760004934864043)*x1743))+(((0.760004934864043)*x1753))+(((-1.0)*pp))+(((3.634e-5)*x1750))+(((-1.0)*x1742*x1747))+((x1741*x1747)));
evalcond[1]=((((-1.82822294308839e-6)*x1749))+(((1.817e-5)*x1740))+((cj2*x1748))+(((-1.0)*pz))+((sj2*x1751))+(((0.419999999548156)*x1752))+(((0.380002467432022)*x1739)));
evalcond[2]=((-0.372620594139742)+(((-1.0)*x1741*x1744))+(((-1.0)*x1741*x1745))+(((-0.411843996961093)*cj2))+(((0.98058352049547)*x1743))+((x1742*x1744))+((x1742*x1745))+(((-0.196101910578938)*x1750))+(((0.0823682087820348)*sj2)));
evalcond[3]=((-0.0745370270906975)+((pz*x1744))+(((-0.196101910578938)*x1740*x1741))+(((0.196101910578938)*x1743))+(((0.196101910578938)*x1753))+(((-0.0823682087820348)*cj2))+(((-1.0)*x1742*x1746))+((x1741*x1746))+(((-0.411843996961093)*sj2)));
evalcond[4]=((((-0.419999999548156)*x1749))+(((0.380002467432022)*x1740))+x1741+((cj2*x1751))+(((-1.817e-5)*x1739))+(((-1.0)*sj2*x1748))+(((-1.0)*x1742))+(((-1.82822294308839e-6)*x1752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1755 = IKatan2WithCheck(IkReal(((-1.0)*px)),IkReal(((-1.0)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x1755.valid){
continue;
}
IkReal x1754=x1755.value;
j0array[0]=((-1.0)*x1754);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1754)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j2eval[1];
j2eval[0]=2.46238030477352;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=2.46238030477352;
j2eval[1]=4.72686007271014;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=((((px*px)*(sj0*sj0)))+(pz*pz)+(((-2.0)*cj0*px*py*sj0))+(((cj0*cj0)*(py*py))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x1756=(px*sj0);
IkReal x1757=(cj0*py);
IkReal x1758=((((0.760004934864043)*pz))+(((3.634e-5)*x1756))+(((-3.634e-5)*x1757)));
IkReal x1759=((((3.634e-5)*pz))+(((-0.760004934864043)*x1756))+(((0.760004934864043)*x1757)));
CheckValue<IkReal> x1762 = IKatan2WithCheck(IkReal(x1758),IkReal(x1759),IKFAST_ATAN2_MAGTHRESH);
if(!x1762.valid){
continue;
}
IkReal x1760=((1.0)*(x1762.value));
if((((x1759*x1759)+(x1758*x1758))) < -0.00001)
continue;
CheckValue<IkReal> x1763=IKPowWithIntegerCheck(IKabs(IKsqrt(((x1759*x1759)+(x1758*x1758)))),-1);
if(!x1763.valid){
continue;
}
if( (((x1763.value)*(((0.031998124066276)+(((-1.0)*pp)))))) < -1-IKFAST_SINCOS_THRESH || (((x1763.value)*(((0.031998124066276)+(((-1.0)*pp)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1761=IKasin(((x1763.value)*(((0.031998124066276)+(((-1.0)*pp))))));
j1array[0]=((((-1.0)*x1761))+(((-1.0)*x1760)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x1760))+x1761);
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal j2eval[2];
j2eval[0]=((((51497.5559477132)*sj1))+(((-2.46238030477352)*cj1)));
j2eval[1]=IKsign(((((0.134064870224098)*sj1))+(((-6.41037598632865e-6)*cj1))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=((((-51497.5559477132)*cj1))+(((-2.46238030477352)*sj1)));
j2eval[1]=IKsign(((((-6.41037598632865e-6)*sj1))+(((-0.134064870224098)*cj1))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
j2eval[0]=2.46241295815585;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.57084414227386)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
sj1=1.0;
cj1=-4.782e-5;
j1=1.57084414;
j2eval[0]=-2.46238030477352;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
sj1=1.0;
cj1=-4.782e-5;
j1=1.57084414;
j2eval[0]=2.46237899800106;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
sj1=1.0;
cj1=-4.782e-5;
j1=1.57084414;
j2eval[0]=2.46241295815508;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1764=(px*sj0);
IkReal x1765=(cj0*py);
if( IKabs(((-3.93218054704047e-5)+(((2.38095237942892)*pz))+(((-0.000103488527837034)*x1764))+(((0.000103488527837034)*x1765)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.904728095257772)+(((2.38084794915094)*x1765))+(((-2.38084794915094)*x1764))+(((-8.25757415898669e-5)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.93218054704047e-5)+(((2.38095237942892)*pz))+(((-0.000103488527837034)*x1764))+(((0.000103488527837034)*x1765))))+IKsqr(((-0.904728095257772)+(((2.38084794915094)*x1765))+(((-2.38084794915094)*x1764))+(((-8.25757415898669e-5)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-3.93218054704047e-5)+(((2.38095237942892)*pz))+(((-0.000103488527837034)*x1764))+(((0.000103488527837034)*x1765))), ((-0.904728095257772)+(((2.38084794915094)*x1765))+(((-2.38084794915094)*x1764))+(((-8.25757415898669e-5)*pz))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x1766=IKsin(j2);
IkReal x1767=IKcos(j2);
IkReal x1768=(cj0*py);
IkReal x1769=(px*sj0);
evalcond[0]=((-1.71799259926955e-9)+(((0.419999999635582)*x1766))+(((-1.0)*pz))+(((-1.82561770353044e-5)*x1767)));
evalcond[1]=((0.380002468300911)+(((-1.0)*x1768))+(((0.419999999635582)*x1767))+x1769+(((1.82561770353044e-5)*x1766)));
evalcond[2]=((0.320801875208367)+(((1.38733415248011e-5)*x1766))+(((-1.0)*pp))+(((0.319202072365932)*x1767)));
evalcond[3]=((-0.372620594139742)+(((-0.196148802082888)*pz))+(((-0.411843996961093)*x1767))+(((0.980574142902106)*x1768))+(((0.0823682087820348)*x1766))+(((-0.980574142902106)*x1769)));
evalcond[4]=((-0.0745370270906975)+(((-0.196148802082888)*x1769))+(((-0.0823682087820348)*x1767))+(((0.980574142902106)*pz))+(((-0.411843996961093)*x1766))+(((0.196148802082888)*x1768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1770=(cj0*py);
IkReal x1771=(px*sj0);
if( IKabs(((-3.93235995089568e-5)+(((2.38095237942775)*pz))+(((-0.000103493248960463)*x1771))+(((0.000103493248960463)*x1770)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.904769368750561)+(((2.38095656290039)*x1770))+(((-8.26026222350891e-5)*pz))+(((-2.38095656290039)*x1771)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.93235995089568e-5)+(((2.38095237942775)*pz))+(((-0.000103493248960463)*x1771))+(((0.000103493248960463)*x1770))))+IKsqr(((-0.904769368750561)+(((2.38095656290039)*x1770))+(((-8.26026222350891e-5)*pz))+(((-2.38095656290039)*x1771))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-3.93235995089568e-5)+(((2.38095237942775)*pz))+(((-0.000103493248960463)*x1771))+(((0.000103493248960463)*x1770))), ((-0.904769368750561)+(((2.38095656290039)*x1770))+(((-8.26026222350891e-5)*pz))+(((-2.38095656290039)*x1771))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x1772=IKsin(j2);
IkReal x1773=IKcos(j2);
IkReal x1774=(cj0*py);
IkReal x1775=(px*sj0);
evalcond[0]=((-1.71799259926955e-9)+(((0.419999999635582)*x1772))+(((-1.0)*pz))+(((-1.82561770353044e-5)*x1773)));
evalcond[1]=((0.380002468300911)+(((1.82561770353044e-5)*x1772))+(((-1.0)*x1774))+x1775+(((0.419999999635582)*x1773)));
evalcond[2]=((0.320801875208367)+(((1.38733415248011e-5)*x1772))+(((-1.0)*pp))+(((0.319202072365932)*x1773)));
evalcond[3]=((-0.372620594139742)+(((-0.196148802082888)*pz))+(((0.980574142902106)*x1774))+(((-0.411843996961093)*x1773))+(((-0.980574142902106)*x1775))+(((0.0823682087820348)*x1772)));
evalcond[4]=((-0.0745370270906975)+(((0.980574142902106)*pz))+(((-0.411843996961093)*x1772))+(((-0.196148802082888)*x1775))+(((-0.0823682087820348)*x1773))+(((0.196148802082888)*x1774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((-4.36808495550301e-5)+(((0.00013617420404797)*pp))+(((2.38095237852017)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.00501187922929)+(((-0.000103482302782892)*pz))+(((3.13281173489504)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-4.36808495550301e-5)+(((0.00013617420404797)*pp))+(((2.38095237852017)*pz))))+IKsqr(((-1.00501187922929)+(((-0.000103482302782892)*pz))+(((3.13281173489504)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-4.36808495550301e-5)+(((0.00013617420404797)*pp))+(((2.38095237852017)*pz))), ((-1.00501187922929)+(((-0.000103482302782892)*pz))+(((3.13281173489504)*pp))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x1776=IKsin(j2);
IkReal x1777=IKcos(j2);
IkReal x1778=(cj0*py);
IkReal x1779=(px*sj0);
evalcond[0]=((-1.71799259926955e-9)+(((0.419999999635582)*x1776))+(((-1.0)*pz))+(((-1.82561770353044e-5)*x1777)));
evalcond[1]=((0.380002468300911)+(((1.82561770353044e-5)*x1776))+(((-1.0)*x1778))+x1779+(((0.419999999635582)*x1777)));
evalcond[2]=((0.320801875208367)+(((1.38733415248011e-5)*x1776))+(((-1.0)*pp))+(((0.319202072365932)*x1777)));
evalcond[3]=((-0.372620594139742)+(((-0.196148802082888)*pz))+(((0.980574142902106)*x1778))+(((-0.411843996961093)*x1777))+(((-0.980574142902106)*x1779))+(((0.0823682087820348)*x1776)));
evalcond[4]=((-0.0745370270906975)+(((0.980574142902106)*pz))+(((-0.411843996961093)*x1776))+(((-0.196148802082888)*x1779))+(((-0.0823682087820348)*x1777))+(((0.196148802082888)*x1778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-4.71243679586365)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
sj1=-1.0;
cj1=4.782e-5;
j1=4.7124368;
j2eval[0]=2.46238030477352;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
sj1=-1.0;
cj1=4.782e-5;
j1=4.7124368;
j2eval[0]=-2.46237899800106;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
sj1=-1.0;
cj1=4.782e-5;
j1=4.7124368;
j2eval[0]=-2.46241295815508;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1780=(px*sj0);
IkReal x1781=(cj0*py);
if( IKabs(((-3.93218054704047e-5)+(((0.000103488527837034)*x1780))+(((-0.000103488527837034)*x1781))+(((-2.38095237942892)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.904728095257772)+(((8.25757415898669e-5)*pz))+(((-2.38084794915094)*x1781))+(((2.38084794915094)*x1780)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.93218054704047e-5)+(((0.000103488527837034)*x1780))+(((-0.000103488527837034)*x1781))+(((-2.38095237942892)*pz))))+IKsqr(((-0.904728095257772)+(((8.25757415898669e-5)*pz))+(((-2.38084794915094)*x1781))+(((2.38084794915094)*x1780))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-3.93218054704047e-5)+(((0.000103488527837034)*x1780))+(((-0.000103488527837034)*x1781))+(((-2.38095237942892)*pz))), ((-0.904728095257772)+(((8.25757415898669e-5)*pz))+(((-2.38084794915094)*x1781))+(((2.38084794915094)*x1780))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x1782=IKsin(j2);
IkReal x1783=IKcos(j2);
IkReal x1784=(cj0*py);
IkReal x1785=(px*sj0);
evalcond[0]=((1.71799259926955e-9)+(((-1.0)*pz))+(((-0.419999999635582)*x1782))+(((1.82561770353044e-5)*x1783)));
evalcond[1]=((-0.380002468300911)+x1785+(((-1.82561770353044e-5)*x1782))+(((-0.419999999635582)*x1783))+(((-1.0)*x1784)));
evalcond[2]=((0.320801875208367)+(((0.319202072365932)*x1783))+(((-1.0)*pp))+(((1.38733415248011e-5)*x1782)));
evalcond[3]=((-0.372620594139742)+(((0.196148802082888)*pz))+(((0.0823682087820348)*x1782))+(((0.980574142902106)*x1785))+(((-0.411843996961093)*x1783))+(((-0.980574142902106)*x1784)));
evalcond[4]=((-0.0745370270906975)+(((-0.196148802082888)*x1784))+(((-0.0823682087820348)*x1783))+(((0.196148802082888)*x1785))+(((-0.411843996961093)*x1782))+(((-0.980574142902106)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1786=(cj0*py);
IkReal x1787=(px*sj0);
if( IKabs(((-3.93235995089568e-5)+(((0.000103493248960463)*x1787))+(((-2.38095237942775)*pz))+(((-0.000103493248960463)*x1786)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.904769368750561)+(((-2.38095656290039)*x1786))+(((8.26026222350891e-5)*pz))+(((2.38095656290039)*x1787)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.93235995089568e-5)+(((0.000103493248960463)*x1787))+(((-2.38095237942775)*pz))+(((-0.000103493248960463)*x1786))))+IKsqr(((-0.904769368750561)+(((-2.38095656290039)*x1786))+(((8.26026222350891e-5)*pz))+(((2.38095656290039)*x1787))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-3.93235995089568e-5)+(((0.000103493248960463)*x1787))+(((-2.38095237942775)*pz))+(((-0.000103493248960463)*x1786))), ((-0.904769368750561)+(((-2.38095656290039)*x1786))+(((8.26026222350891e-5)*pz))+(((2.38095656290039)*x1787))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x1788=IKsin(j2);
IkReal x1789=IKcos(j2);
IkReal x1790=(cj0*py);
IkReal x1791=(px*sj0);
evalcond[0]=((1.71799259926955e-9)+(((-1.0)*pz))+(((-0.419999999635582)*x1788))+(((1.82561770353044e-5)*x1789)));
evalcond[1]=((-0.380002468300911)+x1791+(((-1.82561770353044e-5)*x1788))+(((-0.419999999635582)*x1789))+(((-1.0)*x1790)));
evalcond[2]=((0.320801875208367)+(((0.319202072365932)*x1789))+(((-1.0)*pp))+(((1.38733415248011e-5)*x1788)));
evalcond[3]=((-0.372620594139742)+(((0.196148802082888)*pz))+(((0.0823682087820348)*x1788))+(((0.980574142902106)*x1791))+(((-0.980574142902106)*x1790))+(((-0.411843996961093)*x1789)));
evalcond[4]=((-0.0745370270906975)+(((-0.196148802082888)*x1790))+(((-0.0823682087820348)*x1789))+(((0.196148802082888)*x1791))+(((-0.411843996961093)*x1788))+(((-0.980574142902106)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((-4.36808495550301e-5)+(((0.00013617420404797)*pp))+(((-2.38095237852017)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.00501187922929)+(((0.000103482302782892)*pz))+(((3.13281173489504)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-4.36808495550301e-5)+(((0.00013617420404797)*pp))+(((-2.38095237852017)*pz))))+IKsqr(((-1.00501187922929)+(((0.000103482302782892)*pz))+(((3.13281173489504)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-4.36808495550301e-5)+(((0.00013617420404797)*pp))+(((-2.38095237852017)*pz))), ((-1.00501187922929)+(((0.000103482302782892)*pz))+(((3.13281173489504)*pp))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x1792=IKsin(j2);
IkReal x1793=IKcos(j2);
IkReal x1794=(cj0*py);
IkReal x1795=(px*sj0);
evalcond[0]=((1.71799259926955e-9)+(((-1.0)*pz))+(((1.82561770353044e-5)*x1793))+(((-0.419999999635582)*x1792)));
evalcond[1]=((-0.380002468300911)+x1795+(((-1.82561770353044e-5)*x1792))+(((-0.419999999635582)*x1793))+(((-1.0)*x1794)));
evalcond[2]=((0.320801875208367)+(((0.319202072365932)*x1793))+(((-1.0)*pp))+(((1.38733415248011e-5)*x1792)));
evalcond[3]=((-0.372620594139742)+(((0.196148802082888)*pz))+(((0.0823682087820348)*x1792))+(((0.980574142902106)*x1795))+(((-0.411843996961093)*x1793))+(((-0.980574142902106)*x1794)));
evalcond[4]=((-0.0745370270906975)+(((-0.196148802082888)*x1794))+(((-0.0823682087820348)*x1793))+(((0.196148802082888)*x1795))+(((-0.411843996961093)*x1792))+(((-0.980574142902106)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-4.78154789597595e-5)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
sj1=4.782e-5;
cj1=1.0;
j1=4.782e-5;
j2eval[0]=-2.46238030477352;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
sj1=4.782e-5;
cj1=1.0;
j1=4.782e-5;
j2eval[0]=2.46241295815508;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
sj1=4.782e-5;
cj1=1.0;
j1=4.782e-5;
j2eval[0]=-2.46237899800106;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1796=(cj0*py);
IkReal x1797=(px*sj0);
if( IKabs(((-3.13846960033285e-5)+(((-2.38095656290039)*x1796))+(((8.26026222350891e-5)*pz))+(((2.38095656290039)*x1797)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.904767781089667)+(((2.38095237942775)*pz))+(((0.000103493248960463)*x1796))+(((-0.000103493248960463)*x1797)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.13846960033285e-5)+(((-2.38095656290039)*x1796))+(((8.26026222350891e-5)*pz))+(((2.38095656290039)*x1797))))+IKsqr(((-0.904767781089667)+(((2.38095237942775)*pz))+(((0.000103493248960463)*x1796))+(((-0.000103493248960463)*x1797))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-3.13846960033285e-5)+(((-2.38095656290039)*x1796))+(((8.26026222350891e-5)*pz))+(((2.38095656290039)*x1797))), ((-0.904767781089667)+(((2.38095237942775)*pz))+(((0.000103493248960463)*x1796))+(((-0.000103493248960463)*x1797))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x1798=IKcos(j2);
IkReal x1799=IKsin(j2);
IkReal x1800=(cj0*py);
IkReal x1801=(px*sj0);
evalcond[0]=((0.380002468300911)+(((-1.0)*pz))+(((1.82561770353044e-5)*x1799))+(((0.419999999635582)*x1798)));
evalcond[1]=((1.71799259926955e-9)+(((1.82561770353044e-5)*x1798))+x1801+(((-0.419999999635582)*x1799))+(((-1.0)*x1800)));
evalcond[2]=((0.320801875208367)+(((0.319202072365932)*x1798))+(((-1.0)*pp))+(((1.38733415248011e-5)*x1799)));
evalcond[3]=((-0.372620594139742)+(((0.980574142902106)*pz))+(((0.0823682087820348)*x1799))+(((-0.411843996961093)*x1798))+(((0.196148802082888)*x1800))+(((-0.196148802082888)*x1801)));
evalcond[4]=((-0.0745370270906975)+(((0.980574142902106)*x1801))+(((-0.980574142902106)*x1800))+(((0.196148802082888)*pz))+(((-0.0823682087820348)*x1798))+(((-0.411843996961093)*x1799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1802=(px*sj0);
IkReal x1803=(cj0*py);
if( IKabs(((-3.13852380008103e-5)+(((8.25757415898669e-5)*pz))+(((-2.38084794915094)*x1803))+(((2.38084794915094)*x1802)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.904767781089644)+(((-0.000103488527837034)*x1802))+(((2.38095237942892)*pz))+(((0.000103488527837034)*x1803)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.13852380008103e-5)+(((8.25757415898669e-5)*pz))+(((-2.38084794915094)*x1803))+(((2.38084794915094)*x1802))))+IKsqr(((-0.904767781089644)+(((-0.000103488527837034)*x1802))+(((2.38095237942892)*pz))+(((0.000103488527837034)*x1803))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-3.13852380008103e-5)+(((8.25757415898669e-5)*pz))+(((-2.38084794915094)*x1803))+(((2.38084794915094)*x1802))), ((-0.904767781089644)+(((-0.000103488527837034)*x1802))+(((2.38095237942892)*pz))+(((0.000103488527837034)*x1803))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x1804=IKcos(j2);
IkReal x1805=IKsin(j2);
IkReal x1806=(cj0*py);
IkReal x1807=(px*sj0);
evalcond[0]=((0.380002468300911)+(((1.82561770353044e-5)*x1805))+(((0.419999999635582)*x1804))+(((-1.0)*pz)));
evalcond[1]=((1.71799259926955e-9)+(((1.82561770353044e-5)*x1804))+(((-0.419999999635582)*x1805))+x1807+(((-1.0)*x1806)));
evalcond[2]=((0.320801875208367)+(((1.38733415248011e-5)*x1805))+(((0.319202072365932)*x1804))+(((-1.0)*pp)));
evalcond[3]=((-0.372620594139742)+(((0.980574142902106)*pz))+(((-0.411843996961093)*x1804))+(((0.0823682087820348)*x1805))+(((0.196148802082888)*x1806))+(((-0.196148802082888)*x1807)));
evalcond[4]=((-0.0745370270906975)+(((0.980574142902106)*x1807))+(((-0.980574142902106)*x1806))+(((0.196148802082888)*pz))+(((-0.0823682087820348)*x1804))+(((-0.411843996961093)*x1805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((22172973.7793473)+(((526642420.420948)*pz))+(((-692946053.71894)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-964.699375082814)+(((30120.3472466308)*pp))+(((-22889.2315948746)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((22172973.7793473)+(((526642420.420948)*pz))+(((-692946053.71894)*pp))))+IKsqr(((-964.699375082814)+(((30120.3472466308)*pp))+(((-22889.2315948746)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((22172973.7793473)+(((526642420.420948)*pz))+(((-692946053.71894)*pp))), ((-964.699375082814)+(((30120.3472466308)*pp))+(((-22889.2315948746)*pz))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x1808=IKcos(j2);
IkReal x1809=IKsin(j2);
IkReal x1810=(cj0*py);
IkReal x1811=(px*sj0);
evalcond[0]=((0.380002468300911)+(((1.82561770353044e-5)*x1809))+(((0.419999999635582)*x1808))+(((-1.0)*pz)));
evalcond[1]=((1.71799259926955e-9)+(((1.82561770353044e-5)*x1808))+(((-0.419999999635582)*x1809))+x1811+(((-1.0)*x1810)));
evalcond[2]=((0.320801875208367)+(((1.38733415248011e-5)*x1809))+(((0.319202072365932)*x1808))+(((-1.0)*pp)));
evalcond[3]=((-0.372620594139742)+(((0.980574142902106)*pz))+(((-0.196148802082888)*x1811))+(((0.196148802082888)*x1810))+(((-0.411843996961093)*x1808))+(((0.0823682087820348)*x1809)));
evalcond[4]=((-0.0745370270906975)+(((0.196148802082888)*pz))+(((-0.980574142902106)*x1810))+(((0.980574142902106)*x1811))+(((-0.0823682087820348)*x1808))+(((-0.411843996961093)*x1809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14164046906875)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
sj1=-4.782e-5;
cj1=-1.0;
j1=3.14164048423487;
j2eval[0]=2.46238030477352;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
sj1=-4.782e-5;
cj1=-1.0;
j1=3.14164048423487;
j2eval[0]=-2.46241295815508;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
sj1=-4.782e-5;
cj1=-1.0;
j1=3.14164048423487;
j2eval[0]=2.46237899800106;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1812=(cj0*py);
IkReal x1813=(px*sj0);
if( IKabs(((-3.13846960033285e-5)+(((-2.38095656290039)*x1813))+(((2.38095656290039)*x1812))+(((-8.26026222350891e-5)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.904767781089667)+(((0.000103493248960463)*x1813))+(((-0.000103493248960463)*x1812))+(((-2.38095237942775)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.13846960033285e-5)+(((-2.38095656290039)*x1813))+(((2.38095656290039)*x1812))+(((-8.26026222350891e-5)*pz))))+IKsqr(((-0.904767781089667)+(((0.000103493248960463)*x1813))+(((-0.000103493248960463)*x1812))+(((-2.38095237942775)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-3.13846960033285e-5)+(((-2.38095656290039)*x1813))+(((2.38095656290039)*x1812))+(((-8.26026222350891e-5)*pz))), ((-0.904767781089667)+(((0.000103493248960463)*x1813))+(((-0.000103493248960463)*x1812))+(((-2.38095237942775)*pz))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x1814=IKsin(j2);
IkReal x1815=IKcos(j2);
IkReal x1816=(cj0*py);
IkReal x1817=(px*sj0);
evalcond[0]=((-0.380002468300911)+(((-1.0)*pz))+(((-1.82561770353044e-5)*x1814))+(((-0.419999999635582)*x1815)));
evalcond[1]=((-1.71799259926955e-9)+(((0.419999999635582)*x1814))+(((-1.82561770353044e-5)*x1815))+x1817+(((-1.0)*x1816)));
evalcond[2]=((0.320801875208367)+(((-1.0)*pp))+(((0.319202072365932)*x1815))+(((1.38733415248011e-5)*x1814)));
evalcond[3]=((-0.372620594139742)+(((-0.196148802082888)*x1816))+(((0.196148802082888)*x1817))+(((-0.411843996961093)*x1815))+(((0.0823682087820348)*x1814))+(((-0.980574142902106)*pz)));
evalcond[4]=((-0.0745370270906975)+(((-0.0823682087820348)*x1815))+(((-0.196148802082888)*pz))+(((-0.980574142902106)*x1817))+(((0.980574142902106)*x1816))+(((-0.411843996961093)*x1814)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1818=(px*sj0);
IkReal x1819=(cj0*py);
if( IKabs(((-3.13852380008103e-5)+(((2.38084794915094)*x1819))+(((-2.38084794915094)*x1818))+(((-8.25757415898669e-5)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.904767781089644)+(((0.000103488527837034)*x1818))+(((-0.000103488527837034)*x1819))+(((-2.38095237942892)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.13852380008103e-5)+(((2.38084794915094)*x1819))+(((-2.38084794915094)*x1818))+(((-8.25757415898669e-5)*pz))))+IKsqr(((-0.904767781089644)+(((0.000103488527837034)*x1818))+(((-0.000103488527837034)*x1819))+(((-2.38095237942892)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-3.13852380008103e-5)+(((2.38084794915094)*x1819))+(((-2.38084794915094)*x1818))+(((-8.25757415898669e-5)*pz))), ((-0.904767781089644)+(((0.000103488527837034)*x1818))+(((-0.000103488527837034)*x1819))+(((-2.38095237942892)*pz))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x1820=IKsin(j2);
IkReal x1821=IKcos(j2);
IkReal x1822=(cj0*py);
IkReal x1823=(px*sj0);
evalcond[0]=((-0.380002468300911)+(((-1.82561770353044e-5)*x1820))+(((-1.0)*pz))+(((-0.419999999635582)*x1821)));
evalcond[1]=((-1.71799259926955e-9)+(((0.419999999635582)*x1820))+(((-1.82561770353044e-5)*x1821))+(((-1.0)*x1822))+x1823);
evalcond[2]=((0.320801875208367)+(((-1.0)*pp))+(((0.319202072365932)*x1821))+(((1.38733415248011e-5)*x1820)));
evalcond[3]=((-0.372620594139742)+(((0.196148802082888)*x1823))+(((0.0823682087820348)*x1820))+(((-0.411843996961093)*x1821))+(((-0.980574142902106)*pz))+(((-0.196148802082888)*x1822)));
evalcond[4]=((-0.0745370270906975)+(((0.980574142902106)*x1822))+(((-0.196148802082888)*pz))+(((-0.980574142902106)*x1823))+(((-0.411843996961093)*x1820))+(((-0.0823682087820348)*x1821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((22172973.7793473)+(((-526642420.420948)*pz))+(((-692946053.71894)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-964.699375082814)+(((22889.2315948746)*pz))+(((30120.3472466308)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((22172973.7793473)+(((-526642420.420948)*pz))+(((-692946053.71894)*pp))))+IKsqr(((-964.699375082814)+(((22889.2315948746)*pz))+(((30120.3472466308)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((22172973.7793473)+(((-526642420.420948)*pz))+(((-692946053.71894)*pp))), ((-964.699375082814)+(((22889.2315948746)*pz))+(((30120.3472466308)*pp))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x1824=IKsin(j2);
IkReal x1825=IKcos(j2);
IkReal x1826=(cj0*py);
IkReal x1827=(px*sj0);
evalcond[0]=((-0.380002468300911)+(((-1.82561770353044e-5)*x1824))+(((-1.0)*pz))+(((-0.419999999635582)*x1825)));
evalcond[1]=((-1.71799259926955e-9)+(((0.419999999635582)*x1824))+(((-1.82561770353044e-5)*x1825))+(((-1.0)*x1826))+x1827);
evalcond[2]=((0.320801875208367)+(((-1.0)*pp))+(((0.319202072365932)*x1825))+(((1.38733415248011e-5)*x1824)));
evalcond[3]=((-0.372620594139742)+(((0.196148802082888)*x1827))+(((0.0823682087820348)*x1824))+(((-0.411843996961093)*x1825))+(((-0.980574142902106)*pz))+(((-0.196148802082888)*x1826)));
evalcond[4]=((-0.0745370270906975)+(((0.980574142902106)*x1826))+(((-0.196148802082888)*pz))+(((-0.980574142902106)*x1827))+(((-0.411843996961093)*x1824))+(((-0.0823682087820348)*x1825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1828=(px*sj0);
IkReal x1829=((11.9022919931947)*sj1);
IkReal x1830=((0.000103453028867832)*cj1);
IkReal x1831=(pz*sj1);
IkReal x1832=(cj1*pz);
IkReal x1833=(cj0*py);
IkReal x1834=((0.000517304165745511)*sj1);
IkReal x1835=((2.38027883535563)*cj1);
if( IKabs(((-0.50114657299897)+(((-11.9022919931947)*x1832))+(((-1.0)*x1833*x1835))+(((15.6607677108488)*pp))+((x1828*x1829))+(((2.38027883535563)*x1831))+((x1828*x1835))+(((-1.0)*x1829*x1833)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.00499010001115)+(((0.000517304165745511)*x1832))+(((-1.0)*x1828*x1834))+(((-1.0)*x1828*x1830))+(((3.13213108364428)*pp))+(((-0.000103453028867832)*x1831))+((x1830*x1833))+((x1833*x1834)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.50114657299897)+(((-11.9022919931947)*x1832))+(((-1.0)*x1833*x1835))+(((15.6607677108488)*pp))+((x1828*x1829))+(((2.38027883535563)*x1831))+((x1828*x1835))+(((-1.0)*x1829*x1833))))+IKsqr(((-1.00499010001115)+(((0.000517304165745511)*x1832))+(((-1.0)*x1828*x1834))+(((-1.0)*x1828*x1830))+(((3.13213108364428)*pp))+(((-0.000103453028867832)*x1831))+((x1830*x1833))+((x1833*x1834))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-0.50114657299897)+(((-11.9022919931947)*x1832))+(((-1.0)*x1833*x1835))+(((15.6607677108488)*pp))+((x1828*x1829))+(((2.38027883535563)*x1831))+((x1828*x1835))+(((-1.0)*x1829*x1833))), ((-1.00499010001115)+(((0.000517304165745511)*x1832))+(((-1.0)*x1828*x1834))+(((-1.0)*x1828*x1830))+(((3.13213108364428)*pp))+(((-0.000103453028867832)*x1831))+((x1830*x1833))+((x1833*x1834))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x1836=IKcos(j2);
IkReal x1837=IKsin(j2);
IkReal x1838=(px*sj0);
IkReal x1839=((0.98058352049547)*cj1);
IkReal x1840=((0.196101910578938)*cj1);
IkReal x1841=(pz*sj1);
IkReal x1842=(cj0*cj1*py);
IkReal x1843=(cj0*py*sj1);
IkReal x1844=((1.82822294308839e-6)*x1836);
IkReal x1845=((0.419999999548156)*x1837);
IkReal x1846=((0.419999999548156)*x1836);
IkReal x1847=((1.82822294308839e-6)*x1837);
evalcond[0]=((0.320801875208367)+(((1.38733415248011e-5)*x1837))+(((0.319202072365932)*x1836))+(((-1.0)*pp)));
evalcond[1]=((((1.817e-5)*sj1))+((sj1*x1844))+((sj1*x1845))+(((-1.0)*cj1*x1847))+(((-1.0)*pz))+((cj1*x1846))+(((0.380002467432022)*cj1)));
evalcond[2]=((-0.372620594139742)+(((0.0823682087820348)*x1837))+((cj0*py*x1840))+(((0.98058352049547)*x1843))+((pz*x1839))+(((-0.98058352049547)*sj1*x1838))+(((-1.0)*x1838*x1840))+(((-0.411843996961093)*x1836))+(((-0.196101910578938)*x1841)));
evalcond[3]=((-0.0745370270906975)+(((-0.196101910578938)*sj1*x1838))+((x1838*x1839))+(((-1.0)*cj0*py*x1839))+(((0.98058352049547)*x1841))+(((0.196101910578938)*x1843))+((pz*x1840))+(((-0.0823682087820348)*x1836))+(((-0.411843996961093)*x1837)));
evalcond[4]=((((-1.817e-5)*cj1))+(((-1.0)*sj1*x1847))+((sj1*x1846))+(((-1.0)*cj1*x1844))+(((-1.0)*cj1*x1845))+x1838+(((0.380002467432022)*sj1))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1848=(px*sj0);
IkReal x1849=(pp*sj1);
IkReal x1850=(cj0*py);
IkReal x1851=(cj1*pp);
CheckValue<IkReal> x1852=IKPowWithIntegerCheck(IKsign(((((-6.41037598632865e-6)*sj1))+(((-0.134064870224098)*cj1)))),-1);
if(!x1852.valid){
continue;
}
CheckValue<IkReal> x1853 = IKatan2WithCheck(IkReal(((((-0.419999999548156)*x1849))+(((0.0134392123340928)*sj1))+(((-0.319202072365932)*x1848))+(((0.319202072365932)*x1850))+(((1.82822294308839e-6)*x1851))+(((5.21340430644727e-6)*cj1)))),IkReal(((((-0.419999999548156)*x1851))+(((1.38733415248011e-5)*x1848))+(((0.134736787190483)*cj1))+(((-1.82822294308839e-6)*x1849))+(((5.85840135939327e-6)*sj1))+(((-1.38733415248011e-5)*x1850)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1853.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1852.value)))+(x1853.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x1854=IKcos(j2);
IkReal x1855=IKsin(j2);
IkReal x1856=(px*sj0);
IkReal x1857=((0.98058352049547)*cj1);
IkReal x1858=((0.196101910578938)*cj1);
IkReal x1859=(pz*sj1);
IkReal x1860=(cj0*cj1*py);
IkReal x1861=(cj0*py*sj1);
IkReal x1862=((1.82822294308839e-6)*x1854);
IkReal x1863=((0.419999999548156)*x1855);
IkReal x1864=((0.419999999548156)*x1854);
IkReal x1865=((1.82822294308839e-6)*x1855);
evalcond[0]=((0.320801875208367)+(((-1.0)*pp))+(((0.319202072365932)*x1854))+(((1.38733415248011e-5)*x1855)));
evalcond[1]=(((cj1*x1864))+(((1.817e-5)*sj1))+(((-1.0)*pz))+(((-1.0)*cj1*x1865))+((sj1*x1862))+((sj1*x1863))+(((0.380002467432022)*cj1)));
evalcond[2]=((-0.372620594139742)+(((-0.98058352049547)*sj1*x1856))+((pz*x1857))+(((0.0823682087820348)*x1855))+(((-1.0)*x1856*x1858))+(((0.98058352049547)*x1861))+(((-0.196101910578938)*x1859))+(((-0.411843996961093)*x1854))+((cj0*py*x1858)));
evalcond[3]=((-0.0745370270906975)+((pz*x1858))+(((-1.0)*cj0*py*x1857))+((x1856*x1857))+(((0.196101910578938)*x1861))+(((-0.411843996961093)*x1855))+(((-0.196101910578938)*sj1*x1856))+(((-0.0823682087820348)*x1854))+(((0.98058352049547)*x1859)));
evalcond[4]=((((-1.817e-5)*cj1))+(((-1.0)*cj1*x1863))+(((-1.0)*cj1*x1862))+x1856+(((-1.0)*sj1*x1865))+((sj1*x1864))+(((0.380002467432022)*sj1))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1866=(pp*sj1);
IkReal x1867=(cj1*pp);
CheckValue<IkReal> x1868=IKPowWithIntegerCheck(IKsign(((((0.134064870224098)*sj1))+(((-6.41037598632865e-6)*cj1)))),-1);
if(!x1868.valid){
continue;
}
CheckValue<IkReal> x1869 = IKatan2WithCheck(IkReal(((((0.319202072365932)*pz))+(((-1.82822294308839e-6)*x1866))+(((-0.419999999548156)*x1867))+(((0.0134392123340928)*cj1))+(((-5.21340430644727e-6)*sj1)))),IkReal(((((-1.82822294308839e-6)*x1867))+(((-0.134736787190483)*sj1))+(((0.419999999548156)*x1866))+(((5.85840135939327e-6)*cj1))+(((-1.38733415248011e-5)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1869.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1868.value)))+(x1869.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x1870=IKcos(j2);
IkReal x1871=IKsin(j2);
IkReal x1872=(px*sj0);
IkReal x1873=((0.98058352049547)*cj1);
IkReal x1874=((0.196101910578938)*cj1);
IkReal x1875=(pz*sj1);
IkReal x1876=(cj0*cj1*py);
IkReal x1877=(cj0*py*sj1);
IkReal x1878=((1.82822294308839e-6)*x1870);
IkReal x1879=((0.419999999548156)*x1871);
IkReal x1880=((0.419999999548156)*x1870);
IkReal x1881=((1.82822294308839e-6)*x1871);
evalcond[0]=((0.320801875208367)+(((-1.0)*pp))+(((1.38733415248011e-5)*x1871))+(((0.319202072365932)*x1870)));
evalcond[1]=((((1.817e-5)*sj1))+(((-1.0)*cj1*x1881))+((cj1*x1880))+((sj1*x1879))+((sj1*x1878))+(((-1.0)*pz))+(((0.380002467432022)*cj1)));
evalcond[2]=((-0.372620594139742)+(((-0.196101910578938)*x1875))+(((-1.0)*x1872*x1874))+((cj0*py*x1874))+(((-0.411843996961093)*x1870))+(((0.0823682087820348)*x1871))+(((-0.98058352049547)*sj1*x1872))+(((0.98058352049547)*x1877))+((pz*x1873)));
evalcond[3]=((-0.0745370270906975)+(((-1.0)*cj0*py*x1873))+(((-0.411843996961093)*x1871))+(((0.98058352049547)*x1875))+(((0.196101910578938)*x1877))+((pz*x1874))+((x1872*x1873))+(((-0.0823682087820348)*x1870))+(((-0.196101910578938)*sj1*x1872)));
evalcond[4]=((((-1.817e-5)*cj1))+(((-1.0)*cj1*x1879))+(((-1.0)*cj1*x1878))+x1872+((sj1*x1880))+(((0.380002467432022)*sj1))+(((-1.0)*cj0*py))+(((-1.0)*sj1*x1881)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( (((1.00501188017854)+(((-3.13281173785459)*pp)))) < -1-IKFAST_SINCOS_THRESH || (((1.00501188017854)+(((-3.13281173785459)*pp)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1882=IKasin(((1.00501188017854)+(((-3.13281173785459)*pp))));
j2array[0]=((-1.57075286422771)+(((-1.0)*x1882)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((1.57083978936208)+x1882);
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j1eval[2];
j1eval[0]=((-109302.115316786)+(((-4.72686007271014)*sj2))+(((-108757.037970669)*cj2)));
j1eval[1]=IKsign(((-0.320801875208367)+(((-1.38733415248011e-5)*sj2))+(((-0.319202072365932)*cj2))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1883=((4.72686007271014)*sj2);
IkReal x1884=(cj0*py);
IkReal x1885=(px*sj0);
IkReal x1886=((108757.037970669)*cj2);
IkReal x1887=((1.38733415248011e-5)*sj2);
IkReal x1888=((0.319202072365932)*cj2);
IkReal x1889=(cj2*pz);
IkReal x1890=(pz*sj2);
j1eval[0]=(((x1883*x1885))+(((-1.0)*x1883*x1884))+(((108757.037970669)*x1890))+(((98399.864070954)*x1885))+(((-4.72686007271014)*x1889))+(((-1.0)*x1884*x1886))+((x1885*x1886))+(((-98399.864070954)*x1884)));
j1eval[1]=IKsign(((((0.288803751169147)*x1885))+(((0.319202072365932)*x1890))+(((-1.38733415248011e-5)*x1889))+(((-1.0)*x1884*x1887))+(((-1.0)*x1884*x1888))+(((-0.288803751169147)*x1884))+((x1885*x1887))+((x1885*x1888))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1891=(pz*sj2);
IkReal x1892=(cj0*py);
IkReal x1893=((3.52921747438659)*sj2);
IkReal x1894=(cj2*pz);
IkReal x1895=((0.0823645950798363)*sj2);
IkReal x1896=(px*sj0);
IkReal x1897=(cj2*x1896);
j1eval[0]=((((-1.0)*x1892*x1893))+(((-3.19381620515871)*pz))+(((15.9663155131109)*x1892))+(((-15.9663155131109)*x1896))+((x1893*x1896))+(((-17.6470190851205)*x1897))+(((-17.6470190851205)*x1891))+(((-3.52921747438659)*x1894))+(((17.6470190851205)*cj2*x1892)));
j1eval[1]=IKsign(((((-1.0)*x1892*x1895))+(((0.411844719647015)*cj2*x1892))+(((0.372620594139742)*x1892))+(((-0.0745370270906975)*pz))+(((-0.411844719647015)*x1891))+(((-0.411844719647015)*x1897))+((x1895*x1896))+(((-0.372620594139742)*x1896))+(((-0.0823645950798363)*x1894))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1898=cj2*cj2;
IkReal x1899=pz*pz;
IkReal x1900=(cj0*py);
IkReal x1901=((0.411844719647015)*cj2);
IkReal x1902=(cj2*sj2);
IkReal x1903=(px*sj0);
IkReal x1904=((0.0823645950798363)*sj2);
IkReal x1905=(pz*x1900);
IkReal x1906=(pz*x1903);
CheckValue<IkReal> x1907 = IKatan2WithCheck(IkReal(((0.141596895776537)+(((-0.196101910578938)*x1905))+(((0.172974327950121)*x1898))+(((-0.98058352049547)*x1899))+(((0.313002384412606)*cj2))+(((0.196101910578938)*x1906))+(((-0.0345954005938813)*x1902))+(((-0.0313008038086484)*sj2)))),IkReal(((0.0345878771350415)+(((-0.172974327950121)*x1902))+(((-0.156499152739972)*sj2))+(((-0.0345954005938813)*x1898))+(((-0.98058352049547)*x1906))+(((-8.16443894405656e-6)*cj2))+(((-0.196101910578938)*x1899))+(((0.98058352049547)*x1905)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1907.valid){
continue;
}
CheckValue<IkReal> x1908=IKPowWithIntegerCheck(IKsign((((x1903*x1904))+(((-1.0)*x1901*x1903))+(((-1.0)*x1900*x1904))+(((-0.372620594139742)*x1903))+((x1900*x1901))+(((-0.0745370270906975)*pz))+(((0.372620594139742)*x1900))+(((-0.0823645950798363)*cj2*pz))+(((-0.411844719647015)*pz*sj2)))),-1);
if(!x1908.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1907.value)+(((1.5707963267949)*(x1908.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1909=IKcos(j1);
IkReal x1910=IKsin(j1);
IkReal x1911=(px*sj0);
IkReal x1912=(cj0*py);
IkReal x1913=(pz*x1909);
IkReal x1914=((0.98058352049547)*x1910);
IkReal x1915=((0.196101910578938)*x1909);
IkReal x1916=((0.98058352049547)*x1909);
IkReal x1917=((3.634e-5)*x1909);
IkReal x1918=((1.82822294308839e-6)*x1910);
IkReal x1919=(sj2*x1909);
IkReal x1920=(pz*x1910);
IkReal x1921=((0.419999999548156)*x1910);
IkReal x1922=(cj2*x1909);
IkReal x1923=(x1910*x1912);
evalcond[0]=((0.031998124066276)+(((0.760004934864043)*x1913))+(((3.634e-5)*x1920))+((x1911*x1917))+(((-1.0)*pp))+(((0.760004934864043)*x1923))+(((-1.0)*x1912*x1917))+(((-0.760004934864043)*x1910*x1911)));
evalcond[1]=((((1.817e-5)*x1910))+(((0.419999999548156)*x1922))+((cj2*x1918))+(((-1.82822294308839e-6)*x1919))+((sj2*x1921))+(((-1.0)*pz))+(((0.380002467432022)*x1909)));
evalcond[2]=((-0.372620594139742)+(((0.98058352049547)*x1913))+(((-1.0)*x1911*x1914))+(((-1.0)*x1911*x1915))+((x1912*x1914))+((x1912*x1915))+(((-0.411843996961093)*cj2))+(((-0.196101910578938)*x1920))+(((0.0823682087820348)*sj2)));
evalcond[3]=((-0.0745370270906975)+((pz*x1914))+(((-0.196101910578938)*x1910*x1911))+(((0.196101910578938)*x1923))+((x1911*x1916))+(((0.196101910578938)*x1913))+(((-0.0823682087820348)*cj2))+(((-1.0)*x1912*x1916))+(((-0.411843996961093)*sj2)));
evalcond[4]=((((-0.419999999548156)*x1919))+(((-1.0)*x1912))+((cj2*x1921))+x1911+(((-1.817e-5)*x1909))+(((-1.82822294308839e-6)*x1922))+(((-1.0)*sj2*x1918))+(((0.380002467432022)*x1910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1924=pz*pz;
IkReal x1925=(cj0*py);
IkReal x1926=((0.760004934864043)*pz);
IkReal x1927=(px*sj0);
IkReal x1928=((0.319202072365932)*cj2);
IkReal x1929=((3.634e-5)*pz);
IkReal x1930=(cj2*pp);
IkReal x1931=((1.38733415248011e-5)*sj2);
IkReal x1932=(pp*sj2);
CheckValue<IkReal> x1933 = IKatan2WithCheck(IkReal(((0.0121593660983808)+((x1927*x1929))+(((0.0134392120933778)*cj2))+(((-5.84997045537545e-8)*sj2))+(((-0.419999999548156)*x1930))+(((0.760004934864043)*x1924))+(((-0.380002467432022)*pp))+(((-1.0)*x1925*x1929))+(((1.82822294308839e-6)*x1932)))),IkReal(((-5.81405914284235e-7)+(((-3.634e-5)*x1924))+(((-0.0134392120933778)*sj2))+(((0.419999999548156)*x1932))+(((-1.0)*x1925*x1926))+(((1.817e-5)*pp))+((x1926*x1927))+(((-5.84997045537545e-8)*cj2))+(((1.82822294308839e-6)*x1930)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1933.valid){
continue;
}
CheckValue<IkReal> x1934=IKPowWithIntegerCheck(IKsign((((x1927*x1928))+(((-0.288803751169147)*x1925))+(((0.288803751169147)*x1927))+(((0.319202072365932)*pz*sj2))+(((-1.0)*x1925*x1931))+(((-1.0)*x1925*x1928))+((x1927*x1931))+(((-1.38733415248011e-5)*cj2*pz)))),-1);
if(!x1934.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1933.value)+(((1.5707963267949)*(x1934.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1935=IKcos(j1);
IkReal x1936=IKsin(j1);
IkReal x1937=(px*sj0);
IkReal x1938=(cj0*py);
IkReal x1939=(pz*x1935);
IkReal x1940=((0.98058352049547)*x1936);
IkReal x1941=((0.196101910578938)*x1935);
IkReal x1942=((0.98058352049547)*x1935);
IkReal x1943=((3.634e-5)*x1935);
IkReal x1944=((1.82822294308839e-6)*x1936);
IkReal x1945=(sj2*x1935);
IkReal x1946=(pz*x1936);
IkReal x1947=((0.419999999548156)*x1936);
IkReal x1948=(cj2*x1935);
IkReal x1949=(x1936*x1938);
evalcond[0]=((0.031998124066276)+(((0.760004934864043)*x1939))+(((0.760004934864043)*x1949))+((x1937*x1943))+(((-1.0)*pp))+(((-1.0)*x1938*x1943))+(((3.634e-5)*x1946))+(((-0.760004934864043)*x1936*x1937)));
evalcond[1]=(((sj2*x1947))+((cj2*x1944))+(((-1.82822294308839e-6)*x1945))+(((0.419999999548156)*x1948))+(((-1.0)*pz))+(((0.380002467432022)*x1935))+(((1.817e-5)*x1936)));
evalcond[2]=((-0.372620594139742)+(((-0.411843996961093)*cj2))+((x1938*x1940))+((x1938*x1941))+(((-1.0)*x1937*x1941))+(((-1.0)*x1937*x1940))+(((0.0823682087820348)*sj2))+(((0.98058352049547)*x1939))+(((-0.196101910578938)*x1946)));
evalcond[3]=((-0.0745370270906975)+((x1937*x1942))+((pz*x1940))+(((0.196101910578938)*x1939))+(((-0.0823682087820348)*cj2))+(((-1.0)*x1938*x1942))+(((-0.196101910578938)*x1936*x1937))+(((0.196101910578938)*x1949))+(((-0.411843996961093)*sj2)));
evalcond[4]=((((-0.419999999548156)*x1945))+(((-1.0)*sj2*x1944))+((cj2*x1947))+(((-1.82822294308839e-6)*x1948))+(((-1.0)*x1938))+x1937+(((-1.817e-5)*x1935))+(((0.380002467432022)*x1936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1950=(px*sj0);
IkReal x1951=((0.419999999548156)*sj2);
IkReal x1952=(cj0*py);
IkReal x1953=((1.82822294308839e-6)*sj2);
IkReal x1954=(cj2*pz);
IkReal x1955=((1.82822294308839e-6)*cj2);
IkReal x1956=((0.419999999548156)*cj2);
CheckValue<IkReal> x1957 = IKatan2WithCheck(IkReal(((((-0.380002467432022)*x1952))+((x1952*x1953))+(((-1.0)*x1952*x1956))+(((-1.0)*x1950*x1953))+(((-1.82822294308839e-6)*x1954))+((x1950*x1956))+(((-1.0)*pz*x1951))+(((-1.817e-5)*pz))+(((0.380002467432022)*x1950)))),IkReal(((((-0.419999999548156)*x1954))+((x1952*x1955))+(((-1.0)*x1950*x1955))+(((-1.0)*x1950*x1951))+((pz*x1953))+((x1951*x1952))+(((-0.380002467432022)*pz))+(((-1.817e-5)*x1950))+(((1.817e-5)*x1952)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1957.valid){
continue;
}
CheckValue<IkReal> x1958=IKPowWithIntegerCheck(IKsign(((-0.320801875208367)+(((-1.38733415248011e-5)*sj2))+(((-0.319202072365932)*cj2)))),-1);
if(!x1958.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1957.value)+(((1.5707963267949)*(x1958.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1959=IKcos(j1);
IkReal x1960=IKsin(j1);
IkReal x1961=(px*sj0);
IkReal x1962=(cj0*py);
IkReal x1963=(pz*x1959);
IkReal x1964=((0.98058352049547)*x1960);
IkReal x1965=((0.196101910578938)*x1959);
IkReal x1966=((0.98058352049547)*x1959);
IkReal x1967=((3.634e-5)*x1959);
IkReal x1968=((1.82822294308839e-6)*x1960);
IkReal x1969=(sj2*x1959);
IkReal x1970=(pz*x1960);
IkReal x1971=((0.419999999548156)*x1960);
IkReal x1972=(cj2*x1959);
IkReal x1973=(x1960*x1962);
evalcond[0]=((0.031998124066276)+(((0.760004934864043)*x1963))+(((3.634e-5)*x1970))+(((-0.760004934864043)*x1960*x1961))+(((-1.0)*pp))+((x1961*x1967))+(((-1.0)*x1962*x1967))+(((0.760004934864043)*x1973)));
evalcond[1]=(((sj2*x1971))+(((-1.82822294308839e-6)*x1969))+((cj2*x1968))+(((-1.0)*pz))+(((1.817e-5)*x1960))+(((0.419999999548156)*x1972))+(((0.380002467432022)*x1959)));
evalcond[2]=((-0.372620594139742)+(((-0.411843996961093)*cj2))+(((-0.196101910578938)*x1970))+(((0.98058352049547)*x1963))+(((-1.0)*x1961*x1965))+(((-1.0)*x1961*x1964))+((x1962*x1964))+((x1962*x1965))+(((0.0823682087820348)*sj2)));
evalcond[3]=((-0.0745370270906975)+(((-0.196101910578938)*x1960*x1961))+((pz*x1964))+(((-0.0823682087820348)*cj2))+((x1961*x1966))+(((0.196101910578938)*x1973))+(((0.196101910578938)*x1963))+(((-1.0)*x1962*x1966))+(((-0.411843996961093)*sj2)));
evalcond[4]=((((-0.419999999548156)*x1969))+(((-1.0)*sj2*x1968))+((cj2*x1971))+(((-1.82822294308839e-6)*x1972))+(((-1.0)*x1962))+x1961+(((-1.817e-5)*x1959))+(((0.380002467432022)*x1960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( (((1.00501188017854)+(((-3.13281173785459)*pp)))) < -1-IKFAST_SINCOS_THRESH || (((1.00501188017854)+(((-3.13281173785459)*pp)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1974=IKasin(((1.00501188017854)+(((-3.13281173785459)*pp))));
j2array[0]=((-1.57075286422771)+(((-1.0)*x1974)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((1.57083978936208)+x1974);
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j1eval[2];
j1eval[0]=((-109302.115316786)+(((-4.72686007271014)*sj2))+(((-108757.037970669)*cj2)));
j1eval[1]=IKsign(((-0.320801875208367)+(((-1.38733415248011e-5)*sj2))+(((-0.319202072365932)*cj2))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1975=((4.72686007271014)*sj2);
IkReal x1976=(cj0*py);
IkReal x1977=(px*sj0);
IkReal x1978=((108757.037970669)*cj2);
IkReal x1979=((1.38733415248011e-5)*sj2);
IkReal x1980=((0.319202072365932)*cj2);
IkReal x1981=(cj2*pz);
IkReal x1982=(pz*sj2);
j1eval[0]=((((-1.0)*x1976*x1978))+(((-1.0)*x1975*x1976))+(((98399.864070954)*x1977))+(((-4.72686007271014)*x1981))+((x1975*x1977))+(((-98399.864070954)*x1976))+((x1977*x1978))+(((108757.037970669)*x1982)));
j1eval[1]=IKsign(((((-1.0)*x1976*x1980))+(((-1.0)*x1976*x1979))+(((-0.288803751169147)*x1976))+(((-1.38733415248011e-5)*x1981))+(((0.319202072365932)*x1982))+(((0.288803751169147)*x1977))+((x1977*x1979))+((x1977*x1980))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1983=(pz*sj2);
IkReal x1984=(cj0*py);
IkReal x1985=((3.52921747438659)*sj2);
IkReal x1986=(cj2*pz);
IkReal x1987=((0.0823645950798363)*sj2);
IkReal x1988=(px*sj0);
IkReal x1989=(cj2*x1988);
j1eval[0]=((((17.6470190851205)*cj2*x1984))+(((-3.19381620515871)*pz))+(((-17.6470190851205)*x1983))+(((-17.6470190851205)*x1989))+(((-1.0)*x1984*x1985))+(((-3.52921747438659)*x1986))+(((-15.9663155131109)*x1988))+(((15.9663155131109)*x1984))+((x1985*x1988)));
j1eval[1]=IKsign((((x1987*x1988))+(((-1.0)*x1984*x1987))+(((0.411844719647015)*cj2*x1984))+(((-0.0823645950798363)*x1986))+(((-0.0745370270906975)*pz))+(((-0.411844719647015)*x1989))+(((-0.411844719647015)*x1983))+(((0.372620594139742)*x1984))+(((-0.372620594139742)*x1988))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1990=cj2*cj2;
IkReal x1991=pz*pz;
IkReal x1992=(cj0*py);
IkReal x1993=((0.411844719647015)*cj2);
IkReal x1994=(cj2*sj2);
IkReal x1995=(px*sj0);
IkReal x1996=((0.0823645950798363)*sj2);
IkReal x1997=(pz*x1992);
IkReal x1998=(pz*x1995);
CheckValue<IkReal> x1999=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1993*x1995))+(((0.372620594139742)*x1992))+((x1995*x1996))+(((-0.0745370270906975)*pz))+(((-1.0)*x1992*x1996))+(((-0.0823645950798363)*cj2*pz))+(((-0.411844719647015)*pz*sj2))+(((-0.372620594139742)*x1995))+((x1992*x1993)))),-1);
if(!x1999.valid){
continue;
}
CheckValue<IkReal> x2000 = IKatan2WithCheck(IkReal(((0.141596895776537)+(((-0.98058352049547)*x1991))+(((-0.0345954005938813)*x1994))+(((0.313002384412606)*cj2))+(((-0.196101910578938)*x1997))+(((0.196101910578938)*x1998))+(((0.172974327950121)*x1990))+(((-0.0313008038086484)*sj2)))),IkReal(((0.0345878771350415)+(((-0.98058352049547)*x1998))+(((-0.0345954005938813)*x1990))+(((0.98058352049547)*x1997))+(((-0.156499152739972)*sj2))+(((-8.16443894405656e-6)*cj2))+(((-0.196101910578938)*x1991))+(((-0.172974327950121)*x1994)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2000.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1999.value)))+(x2000.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2001=IKcos(j1);
IkReal x2002=IKsin(j1);
IkReal x2003=(px*sj0);
IkReal x2004=(cj0*py);
IkReal x2005=(pz*x2001);
IkReal x2006=((0.98058352049547)*x2002);
IkReal x2007=((0.196101910578938)*x2001);
IkReal x2008=((0.98058352049547)*x2001);
IkReal x2009=((3.634e-5)*x2001);
IkReal x2010=((1.82822294308839e-6)*x2002);
IkReal x2011=(sj2*x2001);
IkReal x2012=(pz*x2002);
IkReal x2013=((0.419999999548156)*x2002);
IkReal x2014=(cj2*x2001);
IkReal x2015=(x2002*x2004);
evalcond[0]=((0.031998124066276)+(((-0.760004934864043)*x2002*x2003))+(((-1.0)*x2004*x2009))+(((0.760004934864043)*x2015))+(((-1.0)*pp))+(((0.760004934864043)*x2005))+(((3.634e-5)*x2012))+((x2003*x2009)));
evalcond[1]=((((0.380002467432022)*x2001))+(((1.817e-5)*x2002))+(((-1.82822294308839e-6)*x2011))+(((-1.0)*pz))+((cj2*x2010))+((sj2*x2013))+(((0.419999999548156)*x2014)));
evalcond[2]=((-0.372620594139742)+(((0.98058352049547)*x2005))+(((-0.411843996961093)*cj2))+(((-1.0)*x2003*x2007))+(((-1.0)*x2003*x2006))+((x2004*x2006))+((x2004*x2007))+(((-0.196101910578938)*x2012))+(((0.0823682087820348)*sj2)));
evalcond[3]=((-0.0745370270906975)+(((-1.0)*x2004*x2008))+(((-0.196101910578938)*x2002*x2003))+(((0.196101910578938)*x2005))+(((-0.0823682087820348)*cj2))+((pz*x2006))+(((0.196101910578938)*x2015))+((x2003*x2008))+(((-0.411843996961093)*sj2)));
evalcond[4]=((((0.380002467432022)*x2002))+x2003+(((-1.817e-5)*x2001))+(((-0.419999999548156)*x2011))+(((-1.82822294308839e-6)*x2014))+((cj2*x2013))+(((-1.0)*x2004))+(((-1.0)*sj2*x2010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2016=pz*pz;
IkReal x2017=(cj0*py);
IkReal x2018=((0.760004934864043)*pz);
IkReal x2019=(px*sj0);
IkReal x2020=((0.319202072365932)*cj2);
IkReal x2021=((3.634e-5)*pz);
IkReal x2022=(cj2*pp);
IkReal x2023=((1.38733415248011e-5)*sj2);
IkReal x2024=(pp*sj2);
CheckValue<IkReal> x2025 = IKatan2WithCheck(IkReal(((0.0121593660983808)+((x2019*x2021))+(((0.0134392120933778)*cj2))+(((0.760004934864043)*x2016))+(((-5.84997045537545e-8)*sj2))+(((-1.0)*x2017*x2021))+(((-0.419999999548156)*x2022))+(((-0.380002467432022)*pp))+(((1.82822294308839e-6)*x2024)))),IkReal(((-5.81405914284235e-7)+(((-3.634e-5)*x2016))+(((-0.0134392120933778)*sj2))+(((0.419999999548156)*x2024))+(((1.817e-5)*pp))+(((-1.0)*x2017*x2018))+((x2018*x2019))+(((-5.84997045537545e-8)*cj2))+(((1.82822294308839e-6)*x2022)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2025.valid){
continue;
}
CheckValue<IkReal> x2026=IKPowWithIntegerCheck(IKsign(((((0.288803751169147)*x2019))+((x2019*x2020))+((x2019*x2023))+(((0.319202072365932)*pz*sj2))+(((-0.288803751169147)*x2017))+(((-1.0)*x2017*x2023))+(((-1.0)*x2017*x2020))+(((-1.38733415248011e-5)*cj2*pz)))),-1);
if(!x2026.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2025.value)+(((1.5707963267949)*(x2026.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2027=IKcos(j1);
IkReal x2028=IKsin(j1);
IkReal x2029=(px*sj0);
IkReal x2030=(cj0*py);
IkReal x2031=(pz*x2027);
IkReal x2032=((0.98058352049547)*x2028);
IkReal x2033=((0.196101910578938)*x2027);
IkReal x2034=((0.98058352049547)*x2027);
IkReal x2035=((3.634e-5)*x2027);
IkReal x2036=((1.82822294308839e-6)*x2028);
IkReal x2037=(sj2*x2027);
IkReal x2038=(pz*x2028);
IkReal x2039=((0.419999999548156)*x2028);
IkReal x2040=(cj2*x2027);
IkReal x2041=(x2028*x2030);
evalcond[0]=((0.031998124066276)+(((-0.760004934864043)*x2028*x2029))+(((-1.0)*pp))+(((-1.0)*x2030*x2035))+(((0.760004934864043)*x2031))+(((0.760004934864043)*x2041))+((x2029*x2035))+(((3.634e-5)*x2038)));
evalcond[1]=(((sj2*x2039))+(((0.419999999548156)*x2040))+(((1.817e-5)*x2028))+(((-1.0)*pz))+(((-1.82822294308839e-6)*x2037))+((cj2*x2036))+(((0.380002467432022)*x2027)));
evalcond[2]=((-0.372620594139742)+(((-0.411843996961093)*cj2))+((x2030*x2032))+((x2030*x2033))+(((-0.196101910578938)*x2038))+(((-1.0)*x2029*x2033))+(((-1.0)*x2029*x2032))+(((0.0823682087820348)*sj2))+(((0.98058352049547)*x2031)));
evalcond[3]=((-0.0745370270906975)+(((0.196101910578938)*x2041))+(((-0.196101910578938)*x2028*x2029))+(((0.196101910578938)*x2031))+((pz*x2032))+(((-0.0823682087820348)*cj2))+(((-1.0)*x2030*x2034))+((x2029*x2034))+(((-0.411843996961093)*sj2)));
evalcond[4]=(x2029+(((-1.0)*sj2*x2036))+(((-1.817e-5)*x2027))+(((-1.0)*x2030))+(((-1.82822294308839e-6)*x2040))+((cj2*x2039))+(((-0.419999999548156)*x2037))+(((0.380002467432022)*x2028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2042=(px*sj0);
IkReal x2043=((0.419999999548156)*sj2);
IkReal x2044=(cj0*py);
IkReal x2045=((1.82822294308839e-6)*sj2);
IkReal x2046=(cj2*pz);
IkReal x2047=((1.82822294308839e-6)*cj2);
IkReal x2048=((0.419999999548156)*cj2);
CheckValue<IkReal> x2049 = IKatan2WithCheck(IkReal(((((0.380002467432022)*x2042))+((x2042*x2048))+(((-1.0)*x2044*x2048))+(((-1.82822294308839e-6)*x2046))+((x2044*x2045))+(((-1.0)*pz*x2043))+(((-1.817e-5)*pz))+(((-1.0)*x2042*x2045))+(((-0.380002467432022)*x2044)))),IkReal(((((-1.817e-5)*x2042))+(((-0.419999999548156)*x2046))+((x2043*x2044))+((pz*x2045))+(((-0.380002467432022)*pz))+((x2044*x2047))+(((1.817e-5)*x2044))+(((-1.0)*x2042*x2043))+(((-1.0)*x2042*x2047)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2049.valid){
continue;
}
CheckValue<IkReal> x2050=IKPowWithIntegerCheck(IKsign(((-0.320801875208367)+(((-1.38733415248011e-5)*sj2))+(((-0.319202072365932)*cj2)))),-1);
if(!x2050.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2049.value)+(((1.5707963267949)*(x2050.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2051=IKcos(j1);
IkReal x2052=IKsin(j1);
IkReal x2053=(px*sj0);
IkReal x2054=(cj0*py);
IkReal x2055=(pz*x2051);
IkReal x2056=((0.98058352049547)*x2052);
IkReal x2057=((0.196101910578938)*x2051);
IkReal x2058=((0.98058352049547)*x2051);
IkReal x2059=((3.634e-5)*x2051);
IkReal x2060=((1.82822294308839e-6)*x2052);
IkReal x2061=(sj2*x2051);
IkReal x2062=(pz*x2052);
IkReal x2063=((0.419999999548156)*x2052);
IkReal x2064=(cj2*x2051);
IkReal x2065=(x2052*x2054);
evalcond[0]=((0.031998124066276)+(((-1.0)*x2054*x2059))+((x2053*x2059))+(((3.634e-5)*x2062))+(((0.760004934864043)*x2055))+(((-1.0)*pp))+(((0.760004934864043)*x2065))+(((-0.760004934864043)*x2052*x2053)));
evalcond[1]=((((0.380002467432022)*x2051))+((sj2*x2063))+(((1.817e-5)*x2052))+(((0.419999999548156)*x2064))+(((-1.0)*pz))+((cj2*x2060))+(((-1.82822294308839e-6)*x2061)));
evalcond[2]=((-0.372620594139742)+(((-0.411843996961093)*cj2))+((x2054*x2057))+((x2054*x2056))+(((-0.196101910578938)*x2062))+(((-1.0)*x2053*x2056))+(((-1.0)*x2053*x2057))+(((0.98058352049547)*x2055))+(((0.0823682087820348)*sj2)));
evalcond[3]=((-0.0745370270906975)+(((-1.0)*x2054*x2058))+(((0.196101910578938)*x2065))+((x2053*x2058))+(((0.196101910578938)*x2055))+(((-0.196101910578938)*x2052*x2053))+(((-0.0823682087820348)*cj2))+((pz*x2056))+(((-0.411843996961093)*sj2)));
evalcond[4]=((((0.380002467432022)*x2052))+x2053+(((-1.0)*sj2*x2060))+(((-1.0)*x2054))+(((-1.817e-5)*x2051))+((cj2*x2063))+(((-1.82822294308839e-6)*x2064))+(((-0.419999999548156)*x2061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x101=((1.0)*r00);
IkReal x102=(cj0*r12);
IkReal x103=(cj0*r11);
IkReal x104=((1.0)*cj0);
IkReal x105=((1.0)*sj0);
IkReal x106=(cj0*r10);
IkReal x107=((((1.22433784512814e-5)*sj2))+(((-0.99999999992505)*cj2)));
IkReal x108=(r01*x105);
IkReal x109=((-1.0)*sj1);
IkReal x110=((((-1.22433784512814e-5)*cj2))+(((-0.99999999992505)*sj2)));
IkReal x111=((((0.99999999992505)*sj2))+(((1.22433784512814e-5)*cj2)));
IkReal x112=(cj1*x107);
IkReal x113=(sj1*x107);
IkReal x114=(((sj1*x110))+x112);
IkReal x115=(((cj1*x111))+x113);
IkReal x116=(((x107*x109))+((cj1*x110)));
IkReal x117=(((x109*x111))+x112);
IkReal x118=(sj0*x115);
IkReal x119=(sj0*x114);
IkReal x120=(x105*x115);
new_r00=(((x106*x114))+(((-1.0)*x101*x119))+((r20*x116)));
new_r01=(((x103*x114))+((r21*x116))+(((-1.0)*x108*x114)));
new_r02=((((-1.0)*r02*x105*x114))+((r22*x116))+((x102*x114)));
new_r10=((((-1.0)*r10*x105))+(((-1.0)*cj0*x101)));
new_r11=((((-1.0)*r01*x104))+(((-1.0)*r11*x105)));
new_r12=((((-1.0)*r12*x105))+(((-1.0)*r02*x104)));
new_r20=(((x106*x115))+(((-1.0)*x101*x118))+((r20*(((((-1.0)*sj1*x111))+x112)))));
new_r21=(((x103*x115))+((r21*x117))+(((-1.0)*x108*x115)));
new_r22=(((r22*x117))+((x102*x115))+(((-1.0)*r02*x120)));
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
cj4array[0]=((-1.0)*new_r22);
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j3eval[3];
j3eval[0]=sj4;
j3eval[1]=IKsign(sj4);
j3eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
j5eval[0]=sj4;
j5eval[1]=IKsign(sj4);
j5eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
j3eval[0]=new_r12;
j3eval[1]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j5mul = 1;
j5=0;
j3mul=1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3=IKatan2(((-1.0)*new_r01), ((-1.0)*new_r00));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].fmul = j3mul;
vinfos[3].freeind = 0;
vinfos[3].maxsolutions = 0;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].fmul = j5mul;
vinfos[5].freeind = 0;
vinfos[5].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 5;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j5mul = 1;
j5=0;
j3mul=-1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3=IKatan2(((-1.0)*new_r01), new_r00);
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].fmul = j3mul;
vinfos[3].freeind = 0;
vinfos[3].maxsolutions = 0;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].fmul = j5mul;
vinfos[5].freeind = 0;
vinfos[5].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 5;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x121=new_r22*new_r22;
IkReal x122=((16.0)*new_r10);
IkReal x123=((16.0)*new_r01);
IkReal x124=((16.0)*new_r22);
IkReal x125=((8.0)*new_r11);
IkReal x126=((8.0)*new_r00);
IkReal x127=(x121*x122);
IkReal x128=(x121*x123);
j3eval[0]=((IKabs((((new_r22*x125))+(((-1.0)*x126)))))+(IKabs(((((-1.0)*x128))+x123)))+(IKabs(((((16.0)*new_r00))+(((-32.0)*new_r00*x121))+((new_r11*x124)))))+(IKabs(((((-1.0)*x123))+x128)))+(IKabs((((new_r00*x124))+(((-32.0)*new_r11))+(((16.0)*new_r11*x121)))))+(IKabs((((new_r22*x126))+(((-1.0)*x121*x125)))))+(IKabs(((((-1.0)*x127))+x122)))+(IKabs(((((-1.0)*x122))+x127))));
if( IKabs(j3eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j3, j5]

} else
{
IkReal op[4+1], zeror[4];
int numroots;
IkReal j3evalpoly[1];
IkReal x129=new_r22*new_r22;
IkReal x130=((16.0)*new_r10);
IkReal x131=(new_r11*new_r22);
IkReal x132=(x129*x130);
IkReal x133=((((-8.0)*new_r00))+(((8.0)*x131)));
op[0]=x133;
op[1]=(x130+(((-1.0)*x132)));
op[2]=((((16.0)*x131))+(((16.0)*new_r00))+(((-32.0)*new_r00*x129)));
op[3]=(x132+(((-1.0)*x130)));
op[4]=x133;
polyroots4(op,zeror,numroots);
IkReal j3array[4], cj3array[4], sj3array[4], tempj3array[1];
int numsolutions = 0;
for(int ij3 = 0; ij3 < numroots; ++ij3)
{
IkReal htj3 = zeror[ij3];
tempj3array[0]=((2.0)*(atan(htj3)));
for(int kj3 = 0; kj3 < 1; ++kj3)
{
j3array[numsolutions] = tempj3array[kj3];
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
numsolutions++;
}
}
bool j3valid[4]={true,true,true,true};
_nj3 = 4;
for(int ij3 = 0; ij3 < numsolutions; ++ij3)
    {
if( !j3valid[ij3] )
{
    continue;
}
    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
htj3 = IKtan(j3/2);

IkReal x134=((16.0)*new_r01);
IkReal x135=new_r22*new_r22;
IkReal x136=(new_r00*new_r22);
IkReal x137=((8.0)*x136);
IkReal x138=(new_r11*x135);
IkReal x139=(x134*x135);
IkReal x140=((8.0)*x138);
j3evalpoly[0]=((((-1.0)*x140))+((htj3*((x139+(((-1.0)*x134))))))+x137+(((htj3*htj3)*(((((16.0)*x136))+(((16.0)*x138))+(((-32.0)*new_r11))))))+(((htj3*htj3*htj3*htj3)*(((((-1.0)*x140))+x137))))+(((htj3*htj3*htj3)*((x134+(((-1.0)*x139)))))));
if( IKabs(j3evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < numsolutions; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
{
IkReal j5eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x141=cj3*cj3;
IkReal x142=(cj3*new_r22);
IkReal x143=((-1.0)+(((-1.0)*x141*(new_r22*new_r22)))+x141);
j5eval[0]=x143;
j5eval[1]=((IKabs((((new_r01*x142))+((new_r00*sj3)))))+(IKabs((((new_r01*sj3))+(((-1.0)*new_r00*x142))))));
j5eval[2]=IKsign(x143);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j5eval[0]=new_r22;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j5eval[0]=sj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r10, new_r11);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x144=IKsin(j5);
IkReal x145=IKcos(j5);
IkReal x146=((1.0)*x145);
evalcond[0]=(x144+(((-1.0)*new_r10)));
evalcond[1]=(x145+(((-1.0)*new_r11)));
evalcond[2]=(((new_r22*x144))+new_r01);
evalcond[3]=(((new_r01*new_r22))+x144);
evalcond[4]=((((-1.0)*new_r22*x146))+new_r00);
evalcond[5]=((((-1.0)*x146))+((new_r00*new_r22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x147=IKsin(j5);
IkReal x148=IKcos(j5);
IkReal x149=((1.0)*new_r22);
evalcond[0]=(x147+new_r10);
evalcond[1]=(x148+new_r11);
evalcond[2]=((((-1.0)*new_r01*x149))+x147);
evalcond[3]=(((new_r22*x147))+(((-1.0)*new_r01)));
evalcond[4]=((((-1.0)*x148*x149))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x148))+(((-1.0)*new_r00*x149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x150=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x150.valid){
continue;
}
if((x150.value) < -0.00001)
continue;
IkReal gconst30=((-1.0)*(IKsqrt(x150.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj3)))))+(IKabs((cj3+(((-1.0)*gconst30)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if((((1.0)+(((-1.0)*(gconst30*gconst30))))) < -0.00001)
continue;
IkReal x151=IKsqrt(((1.0)+(((-1.0)*(gconst30*gconst30)))));
if( IKabs(((((-1.0)*new_r00*x151))+((gconst30*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x151))+((gconst30*new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x151))+((gconst30*new_r10))))+IKsqr(((((-1.0)*new_r01*x151))+((gconst30*new_r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*new_r00*x151))+((gconst30*new_r10))), ((((-1.0)*new_r01*x151))+((gconst30*new_r11))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[10];
IkReal x152=IKsin(j5);
IkReal x153=IKcos(j5);
IkReal x154=((1.0)*gconst30);
IkReal x155=(gconst30*new_r22);
IkReal x156=(new_r22*x153);
IkReal x157=(new_r22*x152);
IkReal x158=x151;
IkReal x159=(new_r10*x158);
IkReal x160=(new_r11*x158);
IkReal x161=(x153*x158);
evalcond[0]=(((new_r00*x158))+x152+(((-1.0)*new_r10*x154)));
evalcond[1]=(((new_r01*x158))+x153+(((-1.0)*new_r11*x154)));
evalcond[2]=(x160+x157+((gconst30*new_r01)));
evalcond[3]=(((new_r01*x155))+x152+((new_r22*x160)));
evalcond[4]=(x159+(((-1.0)*x156))+((gconst30*new_r00)));
evalcond[5]=(((x152*x155))+x161+new_r01);
evalcond[6]=((((-1.0)*x154*x156))+((x152*x158))+new_r00);
evalcond[7]=((((-1.0)*x153*x154))+((x157*x158))+new_r11);
evalcond[8]=(((new_r00*x155))+((new_r22*x159))+(((-1.0)*x153)));
evalcond[9]=((((-1.0)*x152*x154))+(((-1.0)*x156*x158))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x162=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x162.valid){
continue;
}
if((x162.value) < -0.00001)
continue;
IkReal gconst30=((-1.0)*(IKsqrt(x162.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj3+(((-1.0)*gconst30)))))+(IKabs(((1.0)+(IKsign(sj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if((((1.0)+(((-1.0)*(gconst30*gconst30))))) < -0.00001)
continue;
IkReal x163=IKsqrt(((1.0)+(((-1.0)*(gconst30*gconst30)))));
if( IKabs((((new_r00*x163))+((gconst30*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*x163))+((gconst30*new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r00*x163))+((gconst30*new_r10))))+IKsqr((((new_r01*x163))+((gconst30*new_r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((new_r00*x163))+((gconst30*new_r10))), (((new_r01*x163))+((gconst30*new_r11))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[10];
IkReal x164=IKsin(j5);
IkReal x165=IKcos(j5);
IkReal x166=((1.0)*gconst30);
IkReal x167=(gconst30*new_r22);
IkReal x168=(new_r22*x165);
IkReal x169=(new_r22*x164);
IkReal x170=x163;
IkReal x171=((1.0)*x170);
evalcond[0]=((((-1.0)*new_r10*x166))+x164+(((-1.0)*new_r00*x171)));
evalcond[1]=((((-1.0)*new_r11*x166))+x165+(((-1.0)*new_r01*x171)));
evalcond[2]=((((-1.0)*new_r11*x171))+x169+((gconst30*new_r01)));
evalcond[3]=((((-1.0)*new_r11*new_r22*x171))+((new_r01*x167))+x164);
evalcond[4]=((((-1.0)*new_r10*x171))+(((-1.0)*x168))+((gconst30*new_r00)));
evalcond[5]=(((x164*x167))+new_r01+(((-1.0)*x165*x171)));
evalcond[6]=(((x168*x170))+new_r10+(((-1.0)*x164*x166)));
evalcond[7]=((((-1.0)*x166*x168))+new_r00+(((-1.0)*x164*x171)));
evalcond[8]=(new_r11+(((-1.0)*x169*x171))+(((-1.0)*x165*x166)));
evalcond[9]=(((new_r00*x167))+(((-1.0)*x165))+(((-1.0)*new_r10*new_r22*x171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x172=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x172.valid){
continue;
}
if((x172.value) < -0.00001)
continue;
IkReal gconst31=IKsqrt(x172.value);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj3+(((-1.0)*gconst31)))))+(IKabs(((-1.0)+(IKsign(sj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if((((1.0)+(((-1.0)*(gconst31*gconst31))))) < -0.00001)
continue;
IkReal x173=IKsqrt(((1.0)+(((-1.0)*(gconst31*gconst31)))));
if( IKabs(((((-1.0)*new_r00*x173))+((gconst31*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x173))+((gconst31*new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x173))+((gconst31*new_r10))))+IKsqr(((((-1.0)*new_r01*x173))+((gconst31*new_r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*new_r00*x173))+((gconst31*new_r10))), ((((-1.0)*new_r01*x173))+((gconst31*new_r11))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[10];
IkReal x174=IKsin(j5);
IkReal x175=IKcos(j5);
IkReal x176=(gconst31*new_r01);
IkReal x177=(gconst31*new_r22);
IkReal x178=((1.0)*gconst31);
IkReal x179=((1.0)*x175);
IkReal x180=x173;
IkReal x181=(new_r11*x180);
IkReal x182=(new_r10*x180);
IkReal x183=(x174*x180);
evalcond[0]=(((new_r00*x180))+(((-1.0)*new_r10*x178))+x174);
evalcond[1]=(((new_r01*x180))+(((-1.0)*new_r11*x178))+x175);
evalcond[2]=(x176+x181+((new_r22*x174)));
evalcond[3]=(x174+((new_r22*x181))+((new_r22*x176)));
evalcond[4]=(x182+(((-1.0)*new_r22*x179))+((gconst31*new_r00)));
evalcond[5]=(((x175*x180))+((x174*x177))+new_r01);
evalcond[6]=((((-1.0)*x177*x179))+x183+new_r00);
evalcond[7]=((((-1.0)*x175*x178))+((new_r22*x183))+new_r11);
evalcond[8]=(((new_r00*x177))+(((-1.0)*x179))+((new_r22*x182)));
evalcond[9]=((((-1.0)*x174*x178))+(((-1.0)*new_r22*x179*x180))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x184=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x184.valid){
continue;
}
if((x184.value) < -0.00001)
continue;
IkReal gconst31=IKsqrt(x184.value);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj3+(((-1.0)*gconst31)))))+(IKabs(((1.0)+(IKsign(sj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if((((1.0)+(((-1.0)*(gconst31*gconst31))))) < -0.00001)
continue;
IkReal x185=IKsqrt(((1.0)+(((-1.0)*(gconst31*gconst31)))));
if( IKabs((((new_r00*x185))+((gconst31*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*x185))+((gconst31*new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r00*x185))+((gconst31*new_r10))))+IKsqr((((new_r01*x185))+((gconst31*new_r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((new_r00*x185))+((gconst31*new_r10))), (((new_r01*x185))+((gconst31*new_r11))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[10];
IkReal x186=IKsin(j5);
IkReal x187=IKcos(j5);
IkReal x188=(gconst31*new_r01);
IkReal x189=((1.0)*gconst31);
IkReal x190=(gconst31*new_r00);
IkReal x191=(new_r22*x187);
IkReal x192=(new_r22*x186);
IkReal x193=x185;
IkReal x194=((1.0)*x193);
evalcond[0]=(x186+(((-1.0)*new_r10*x189))+(((-1.0)*new_r00*x194)));
evalcond[1]=(x187+(((-1.0)*new_r11*x189))+(((-1.0)*new_r01*x194)));
evalcond[2]=(x192+x188+(((-1.0)*new_r11*x194)));
evalcond[3]=(x186+((new_r22*x188))+(((-1.0)*new_r11*new_r22*x194)));
evalcond[4]=((((-1.0)*x191))+x190+(((-1.0)*new_r10*x194)));
evalcond[5]=(((gconst31*x192))+(((-1.0)*x187*x194))+new_r01);
evalcond[6]=((((-1.0)*x186*x189))+((x191*x193))+new_r10);
evalcond[7]=((((-1.0)*x189*x191))+(((-1.0)*x186*x194))+new_r00);
evalcond[8]=((((-1.0)*x192*x194))+(((-1.0)*x187*x189))+new_r11);
evalcond[9]=((((-1.0)*x187))+((new_r22*x190))+(((-1.0)*new_r10*new_r22*x194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x195=(new_r00*sj3);
CheckValue<IkReal> x196=IKPowWithIntegerCheck(sj3,-1);
if(!x196.valid){
continue;
}
if( IKabs(((((-1.0)*x195))+((cj3*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x196.value)*((((cj3*new_r22*x195))+(((-1.0)*new_r01))+(((-1.0)*new_r10*new_r22*(cj3*cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x195))+((cj3*new_r10))))+IKsqr(((x196.value)*((((cj3*new_r22*x195))+(((-1.0)*new_r01))+(((-1.0)*new_r10*new_r22*(cj3*cj3)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*x195))+((cj3*new_r10))), ((x196.value)*((((cj3*new_r22*x195))+(((-1.0)*new_r01))+(((-1.0)*new_r10*new_r22*(cj3*cj3)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[10];
IkReal x197=IKsin(j5);
IkReal x198=IKcos(j5);
IkReal x199=((1.0)*cj3);
IkReal x200=(cj3*new_r00);
IkReal x201=(cj3*new_r22);
IkReal x202=(new_r22*sj3);
IkReal x203=(new_r22*x198);
IkReal x204=(sj3*x197);
evalcond[0]=(((new_r00*sj3))+x197+(((-1.0)*new_r10*x199)));
evalcond[1]=(((new_r01*sj3))+x198+(((-1.0)*new_r11*x199)));
evalcond[2]=(((new_r11*sj3))+((new_r22*x197))+((cj3*new_r01)));
evalcond[3]=(((new_r11*x202))+((new_r01*x201))+x197);
evalcond[4]=(((new_r10*sj3))+x200+(((-1.0)*x203)));
evalcond[5]=(((sj3*x198))+((x197*x201))+new_r01);
evalcond[6]=(x204+(((-1.0)*x199*x203))+new_r00);
evalcond[7]=(((x197*x202))+(((-1.0)*x198*x199))+new_r11);
evalcond[8]=(((new_r10*x202))+(((-1.0)*x198))+((new_r22*x200)));
evalcond[9]=((((-1.0)*x197*x199))+(((-1.0)*x198*x202))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x205=((1.0)*new_r01);
CheckValue<IkReal> x206=IKPowWithIntegerCheck(new_r22,-1);
if(!x206.valid){
continue;
}
if( IKabs(((x206.value)*(((((-1.0)*new_r11*sj3))+(((-1.0)*cj3*x205)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj3*new_r11))+(((-1.0)*sj3*x205)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x206.value)*(((((-1.0)*new_r11*sj3))+(((-1.0)*cj3*x205))))))+IKsqr((((cj3*new_r11))+(((-1.0)*sj3*x205))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x206.value)*(((((-1.0)*new_r11*sj3))+(((-1.0)*cj3*x205))))), (((cj3*new_r11))+(((-1.0)*sj3*x205))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[10];
IkReal x207=IKsin(j5);
IkReal x208=IKcos(j5);
IkReal x209=((1.0)*cj3);
IkReal x210=(cj3*new_r00);
IkReal x211=(cj3*new_r22);
IkReal x212=(new_r22*sj3);
IkReal x213=(new_r22*x208);
IkReal x214=(sj3*x207);
evalcond[0]=(((new_r00*sj3))+x207+(((-1.0)*new_r10*x209)));
evalcond[1]=(((new_r01*sj3))+x208+(((-1.0)*new_r11*x209)));
evalcond[2]=(((new_r11*sj3))+((new_r22*x207))+((cj3*new_r01)));
evalcond[3]=(x207+((new_r01*x211))+((new_r11*x212)));
evalcond[4]=(((new_r10*sj3))+x210+(((-1.0)*x213)));
evalcond[5]=(((sj3*x208))+((x207*x211))+new_r01);
evalcond[6]=(x214+new_r00+(((-1.0)*x209*x213)));
evalcond[7]=(((x207*x212))+(((-1.0)*x208*x209))+new_r11);
evalcond[8]=(((new_r22*x210))+(((-1.0)*x208))+((new_r10*x212)));
evalcond[9]=((((-1.0)*x207*x209))+(((-1.0)*x208*x212))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x215=cj3*cj3;
IkReal x216=(cj3*new_r22);
CheckValue<IkReal> x217=IKPowWithIntegerCheck(IKsign(((-1.0)+(((-1.0)*x215*(new_r22*new_r22)))+x215)),-1);
if(!x217.valid){
continue;
}
CheckValue<IkReal> x218 = IKatan2WithCheck(IkReal((((new_r00*sj3))+((new_r01*x216)))),IkReal((((new_r01*sj3))+(((-1.0)*new_r00*x216)))),IKFAST_ATAN2_MAGTHRESH);
if(!x218.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x217.value)))+(x218.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[10];
IkReal x219=IKsin(j5);
IkReal x220=IKcos(j5);
IkReal x221=((1.0)*cj3);
IkReal x222=(cj3*new_r00);
IkReal x223=(cj3*new_r22);
IkReal x224=(new_r22*sj3);
IkReal x225=(new_r22*x220);
IkReal x226=(sj3*x219);
evalcond[0]=((((-1.0)*new_r10*x221))+((new_r00*sj3))+x219);
evalcond[1]=((((-1.0)*new_r11*x221))+((new_r01*sj3))+x220);
evalcond[2]=(((new_r22*x219))+((new_r11*sj3))+((cj3*new_r01)));
evalcond[3]=(((new_r01*x223))+x219+((new_r11*x224)));
evalcond[4]=(((new_r10*sj3))+x222+(((-1.0)*x225)));
evalcond[5]=(((x219*x223))+((sj3*x220))+new_r01);
evalcond[6]=(x226+(((-1.0)*x221*x225))+new_r00);
evalcond[7]=(((x219*x224))+(((-1.0)*x220*x221))+new_r11);
evalcond[8]=(((new_r22*x222))+((new_r10*x224))+(((-1.0)*x220)));
evalcond[9]=((((-1.0)*x220*x224))+(((-1.0)*x219*x221))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x228=IKPowWithIntegerCheck(sj4,-1);
if(!x228.valid){
continue;
}
IkReal x227=x228.value;
CheckValue<IkReal> x229=IKPowWithIntegerCheck(new_r12,-1);
if(!x229.valid){
continue;
}
if( IKabs((x227*(x229.value)*(((1.0)+(((-1.0)*(cj4*cj4)))+(((-1.0)*(new_r02*new_r02))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x227)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x227*(x229.value)*(((1.0)+(((-1.0)*(cj4*cj4)))+(((-1.0)*(new_r02*new_r02)))))))+IKsqr((new_r02*x227))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x227*(x229.value)*(((1.0)+(((-1.0)*(cj4*cj4)))+(((-1.0)*(new_r02*new_r02)))))), (new_r02*x227));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x230=IKcos(j3);
IkReal x231=IKsin(j3);
IkReal x232=((1.0)*sj4);
IkReal x233=((1.0)*x230);
IkReal x234=(new_r12*x231);
IkReal x235=((1.0)*x231);
evalcond[0]=((((-1.0)*x230*x232))+new_r02);
evalcond[1]=((((-1.0)*x231*x232))+new_r12);
evalcond[2]=((((-1.0)*new_r02*x235))+((new_r12*x230)));
evalcond[3]=(((new_r02*x230))+(((-1.0)*x232))+x234);
evalcond[4]=(((cj4*new_r20))+(((-1.0)*new_r10*x231*x232))+(((-1.0)*new_r00*x230*x232)));
evalcond[5]=(((cj4*new_r21))+(((-1.0)*new_r01*x230*x232))+(((-1.0)*new_r11*x231*x232)));
evalcond[6]=((1.0)+((cj4*new_r22))+(((-1.0)*x232*x234))+(((-1.0)*new_r02*x230*x232)));
evalcond[7]=((((-1.0)*cj4*new_r02*x233))+(((-1.0)*new_r22*x232))+(((-1.0)*cj4*x234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
j5eval[0]=sj4;
j5eval[1]=IKsign(sj4);
j5eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
j5eval[0]=sj3;
j5eval[1]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
j5eval[0]=cj3;
j5eval[1]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x236=IKcos(j5);
IkReal x237=IKsin(j5);
IkReal x238=((1.0)*cj4);
IkReal x239=((1.0)*sj4);
evalcond[0]=(x237+new_r00);
evalcond[1]=(x236+new_r01);
evalcond[2]=(((sj4*x236))+new_r20);
evalcond[3]=(((cj4*x236))+new_r10);
evalcond[4]=(new_r21+(((-1.0)*x237*x239)));
evalcond[5]=(new_r11+(((-1.0)*x237*x238)));
evalcond[6]=((((-1.0)*new_r21*x239))+x237+(((-1.0)*new_r11*x238)));
evalcond[7]=((((-1.0)*new_r20*x239))+(((-1.0)*x236))+(((-1.0)*new_r10*x238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r00, new_r01);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x240=IKcos(j5);
IkReal x241=IKsin(j5);
IkReal x242=((1.0)*sj4);
IkReal x243=((1.0)*x241);
evalcond[0]=(new_r20+((sj4*x240)));
evalcond[1]=(x241+(((-1.0)*new_r00)));
evalcond[2]=(x240+(((-1.0)*new_r01)));
evalcond[3]=((((-1.0)*x241*x242))+new_r21);
evalcond[4]=(((cj4*x240))+(((-1.0)*new_r10)));
evalcond[5]=((((-1.0)*cj4*x243))+(((-1.0)*new_r11)));
evalcond[6]=(((cj4*new_r11))+(((-1.0)*new_r21*x242))+x241);
evalcond[7]=((((-1.0)*x240))+((cj4*new_r10))+(((-1.0)*new_r20*x242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x244=((1.0)*sj3);
if( IKabs(((((-1.0)*new_r00*x244))+((cj3*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x244))+(((-1.0)*cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x244))+((cj3*new_r01))))+IKsqr(((((-1.0)*new_r01*x244))+(((-1.0)*cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*new_r00*x244))+((cj3*new_r01))), ((((-1.0)*new_r01*x244))+(((-1.0)*cj3*new_r00))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x245=IKcos(j5);
IkReal x246=IKsin(j5);
IkReal x247=((1.0)*cj3);
IkReal x248=(sj3*x245);
IkReal x249=((1.0)*x246);
IkReal x250=(x246*x247);
evalcond[0]=(((new_r10*sj3))+x245+((cj3*new_r00)));
evalcond[1]=(((new_r00*sj3))+x246+(((-1.0)*new_r10*x247)));
evalcond[2]=(((new_r01*sj3))+x245+(((-1.0)*new_r11*x247)));
evalcond[3]=(((sj3*x246))+new_r00+((cj3*x245)));
evalcond[4]=(((new_r11*sj3))+((cj3*new_r01))+(((-1.0)*x249)));
evalcond[5]=(x248+new_r01+(((-1.0)*x250)));
evalcond[6]=(x248+new_r10+(((-1.0)*x250)));
evalcond[7]=((((-1.0)*sj3*x249))+(((-1.0)*x245*x247))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x251=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj3*x251))+(((-1.0)*new_r00*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj3*x251))+((cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj3*x251))+(((-1.0)*new_r00*sj3))))+IKsqr(((((-1.0)*sj3*x251))+((cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj3*x251))+(((-1.0)*new_r00*sj3))), ((((-1.0)*sj3*x251))+((cj3*new_r00))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x252=IKsin(j5);
IkReal x253=IKcos(j5);
IkReal x254=((1.0)*cj3);
IkReal x255=(sj3*x252);
IkReal x256=((1.0)*x253);
IkReal x257=(x253*x254);
evalcond[0]=(((new_r11*sj3))+x252+((cj3*new_r01)));
evalcond[1]=((((-1.0)*new_r10*x254))+((new_r00*sj3))+x252);
evalcond[2]=((((-1.0)*new_r11*x254))+((new_r01*sj3))+x253);
evalcond[3]=(((new_r10*sj3))+((cj3*new_r00))+(((-1.0)*x256)));
evalcond[4]=(((cj3*x252))+((sj3*x253))+new_r01);
evalcond[5]=(x255+new_r00+(((-1.0)*x257)));
evalcond[6]=(x255+new_r11+(((-1.0)*x257)));
evalcond[7]=((((-1.0)*x252*x254))+(((-1.0)*sj3*x256))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r10, new_r11);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x258=IKcos(j5);
IkReal x259=IKsin(j5);
IkReal x260=((1.0)*cj4);
IkReal x261=((1.0)*sj4);
evalcond[0]=(((new_r02*x258))+new_r20);
evalcond[1]=(x259+(((-1.0)*new_r10)));
evalcond[2]=(x258+(((-1.0)*new_r11)));
evalcond[3]=(new_r00+((cj4*x258)));
evalcond[4]=(new_r21+(((-1.0)*new_r02*x259)));
evalcond[5]=((((-1.0)*x259*x260))+new_r01);
evalcond[6]=((((-1.0)*new_r01*x260))+(((-1.0)*new_r21*x261))+x259);
evalcond[7]=((((-1.0)*new_r00*x260))+(((-1.0)*new_r20*x261))+(((-1.0)*x258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x262=IKsin(j5);
IkReal x263=IKcos(j5);
IkReal x264=((1.0)*sj4);
IkReal x265=((1.0)*x263);
evalcond[0]=(x262+new_r10);
evalcond[1]=(x263+new_r11);
evalcond[2]=(new_r21+((new_r02*x262)));
evalcond[3]=(new_r20+(((-1.0)*new_r02*x265)));
evalcond[4]=(((cj4*x263))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*cj4*x262))+(((-1.0)*new_r01)));
evalcond[6]=(((cj4*new_r01))+(((-1.0)*new_r21*x264))+x262);
evalcond[7]=(((cj4*new_r00))+(((-1.0)*new_r20*x264))+(((-1.0)*x265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j5eval[0]=1.0;
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j5]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x267=IKPowWithIntegerCheck(sj4,-1);
if(!x267.valid){
continue;
}
IkReal x266=x267.value;
CheckValue<IkReal> x268=IKPowWithIntegerCheck(cj3,-1);
if(!x268.valid){
continue;
}
if( IKabs((x266*(x268.value)*((((new_r10*sj4))+(((-1.0)*cj4*new_r20*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x266)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x266*(x268.value)*((((new_r10*sj4))+(((-1.0)*cj4*new_r20*sj3))))))+IKsqr(((-1.0)*new_r20*x266))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x266*(x268.value)*((((new_r10*sj4))+(((-1.0)*cj4*new_r20*sj3))))), ((-1.0)*new_r20*x266));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x269=IKsin(j5);
IkReal x270=IKcos(j5);
IkReal x271=(cj4*sj3);
IkReal x272=(cj3*new_r00);
IkReal x273=((1.0)*new_r11);
IkReal x274=((1.0)*cj4);
IkReal x275=((1.0)*new_r10);
IkReal x276=(cj3*new_r01);
IkReal x277=((1.0)*sj4);
IkReal x278=((1.0)*x270);
IkReal x279=(cj4*x270);
IkReal x280=((1.0)*x269);
IkReal x281=(x269*x274);
evalcond[0]=(new_r20+((sj4*x270)));
evalcond[1]=((((-1.0)*x269*x277))+new_r21);
evalcond[2]=(((new_r00*sj3))+x269+(((-1.0)*cj3*x275)));
evalcond[3]=(((new_r01*sj3))+x270+(((-1.0)*cj3*x273)));
evalcond[4]=(((new_r10*sj3))+x272+x279);
evalcond[5]=(((sj3*x269))+new_r00+((cj3*x279)));
evalcond[6]=(((new_r11*sj3))+x276+(((-1.0)*x281)));
evalcond[7]=((((-1.0)*cj3*x281))+((sj3*x270))+new_r01);
evalcond[8]=((((-1.0)*cj3*x280))+((x270*x271))+new_r10);
evalcond[9]=((((-1.0)*cj3*x278))+(((-1.0)*x271*x280))+new_r11);
evalcond[10]=((((-1.0)*x274*x276))+(((-1.0)*x271*x273))+(((-1.0)*new_r21*x277))+x269);
evalcond[11]=((((-1.0)*x272*x274))+(((-1.0)*x271*x275))+(((-1.0)*new_r20*x277))+(((-1.0)*x278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x283=IKPowWithIntegerCheck(sj4,-1);
if(!x283.valid){
continue;
}
IkReal x282=x283.value;
CheckValue<IkReal> x284=IKPowWithIntegerCheck(sj3,-1);
if(!x284.valid){
continue;
}
if( IKabs((x282*(x284.value)*((((cj3*cj4*new_r20))+(((-1.0)*new_r00*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x282)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x282*(x284.value)*((((cj3*cj4*new_r20))+(((-1.0)*new_r00*sj4))))))+IKsqr(((-1.0)*new_r20*x282))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x282*(x284.value)*((((cj3*cj4*new_r20))+(((-1.0)*new_r00*sj4))))), ((-1.0)*new_r20*x282));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x285=IKsin(j5);
IkReal x286=IKcos(j5);
IkReal x287=(cj4*sj3);
IkReal x288=(cj3*new_r00);
IkReal x289=((1.0)*new_r11);
IkReal x290=((1.0)*cj4);
IkReal x291=((1.0)*new_r10);
IkReal x292=(cj3*new_r01);
IkReal x293=((1.0)*sj4);
IkReal x294=((1.0)*x286);
IkReal x295=(cj4*x286);
IkReal x296=((1.0)*x285);
IkReal x297=(x285*x290);
evalcond[0]=(new_r20+((sj4*x286)));
evalcond[1]=((((-1.0)*x285*x293))+new_r21);
evalcond[2]=(((new_r00*sj3))+x285+(((-1.0)*cj3*x291)));
evalcond[3]=((((-1.0)*cj3*x289))+((new_r01*sj3))+x286);
evalcond[4]=(((new_r10*sj3))+x295+x288);
evalcond[5]=(((cj3*x295))+((sj3*x285))+new_r00);
evalcond[6]=(((new_r11*sj3))+(((-1.0)*x297))+x292);
evalcond[7]=(((sj3*x286))+(((-1.0)*cj3*x297))+new_r01);
evalcond[8]=(((x286*x287))+(((-1.0)*cj3*x296))+new_r10);
evalcond[9]=((((-1.0)*cj3*x294))+(((-1.0)*x287*x296))+new_r11);
evalcond[10]=((((-1.0)*x287*x289))+(((-1.0)*x290*x292))+(((-1.0)*new_r21*x293))+x285);
evalcond[11]=((((-1.0)*new_r20*x293))+(((-1.0)*x294))+(((-1.0)*x287*x291))+(((-1.0)*x288*x290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x298=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x298.valid){
continue;
}
CheckValue<IkReal> x299 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x299.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x298.value)))+(x299.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x300=IKsin(j5);
IkReal x301=IKcos(j5);
IkReal x302=(cj4*sj3);
IkReal x303=(cj3*new_r00);
IkReal x304=((1.0)*new_r11);
IkReal x305=((1.0)*cj4);
IkReal x306=((1.0)*new_r10);
IkReal x307=(cj3*new_r01);
IkReal x308=((1.0)*sj4);
IkReal x309=((1.0)*x301);
IkReal x310=(cj4*x301);
IkReal x311=((1.0)*x300);
IkReal x312=(x300*x305);
evalcond[0]=(((sj4*x301))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x300*x308)));
evalcond[2]=((((-1.0)*cj3*x306))+((new_r00*sj3))+x300);
evalcond[3]=((((-1.0)*cj3*x304))+((new_r01*sj3))+x301);
evalcond[4]=(((new_r10*sj3))+x303+x310);
evalcond[5]=(((sj3*x300))+((cj3*x310))+new_r00);
evalcond[6]=(((new_r11*sj3))+x307+(((-1.0)*x312)));
evalcond[7]=(((sj3*x301))+new_r01+(((-1.0)*cj3*x312)));
evalcond[8]=(((x301*x302))+new_r10+(((-1.0)*cj3*x311)));
evalcond[9]=((((-1.0)*cj3*x309))+(((-1.0)*x302*x311))+new_r11);
evalcond[10]=((((-1.0)*new_r21*x308))+(((-1.0)*x302*x304))+x300+(((-1.0)*x305*x307)));
evalcond[11]=((((-1.0)*x303*x305))+(((-1.0)*x302*x306))+(((-1.0)*new_r20*x308))+(((-1.0)*x309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x313=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x313.valid){
continue;
}
CheckValue<IkReal> x314 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x314.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x313.value)))+(x314.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=(((sj4*(IKcos(j5))))+new_r20);
evalcond[1]=((((-1.0)*sj4*(IKsin(j5))))+new_r21);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[3];
j3eval[0]=sj4;
j3eval[1]=IKsign(sj4);
j3eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
j3eval[0]=new_r00;
j3eval[1]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj4=0;
cj4=1.0;
j4=0;
IkReal x315=((1.0)*new_r10);
IkReal x316=((((-1.0)*new_r11*x315))+(((-1.0)*new_r00*new_r01)));
j3eval[0]=x316;
j3eval[1]=((IKabs((((cj5*new_r11))+((cj5*new_r00)))))+(IKabs((((cj5*new_r01))+(((-1.0)*cj5*x315))))));
j3eval[2]=IKsign(x316);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj4=0;
cj4=1.0;
j4=0;
IkReal x317=((1.0)*new_r10);
IkReal x318=((((-1.0)*cj5*new_r00))+(((-1.0)*sj5*x317)));
j3eval[0]=x318;
j3eval[1]=IKsign(x318);
j3eval[2]=((IKabs((((new_r00*new_r01))+((cj5*sj5)))))+(IKabs(((cj5*cj5)+(((-1.0)*new_r01*x317))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj4=0;
cj4=1.0;
j4=0;
IkReal x319=((1.0)*new_r00);
IkReal x320=((((-1.0)*sj5*x319))+((cj5*new_r10)));
j3eval[0]=x320;
j3eval[1]=((IKabs(((((-1.0)*(cj5*cj5)))+(new_r00*new_r00))))+(IKabs((((cj5*sj5))+(((-1.0)*new_r10*x319))))));
j3eval[2]=IKsign(x320);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x321=((-1.0)*new_r00);
IkReal x323 = ((new_r10*new_r10)+(new_r00*new_r00));
if(IKabs(x323)==0){
continue;
}
IkReal x322=pow(x323,-0.5);
CheckValue<IkReal> x324 = IKatan2WithCheck(IkReal(new_r10),IkReal(x321),IKFAST_ATAN2_MAGTHRESH);
if(!x324.valid){
continue;
}
IkReal gconst12=((-1.0)*(x324.value));
IkReal gconst13=((-1.0)*new_r10*x322);
IkReal gconst14=(x321*x322);
CheckValue<IkReal> x325 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x325.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j5+(x325.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
IkReal x326=((-1.0)*new_r00);
CheckValue<IkReal> x329 = IKatan2WithCheck(IkReal(new_r10),IkReal(x326),IKFAST_ATAN2_MAGTHRESH);
if(!x329.valid){
continue;
}
IkReal x327=((-1.0)*(x329.value));
IkReal x328=x322;
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst13;
cj5=gconst14;
j5=x327;
IkReal gconst12=x327;
IkReal gconst13=((-1.0)*new_r10*x328);
IkReal gconst14=(x326*x328);
IkReal x330=new_r00*new_r00;
IkReal x331=((1.0)*new_r11);
IkReal x332=((1.0)*new_r00*new_r01);
IkReal x333=((((-1.0)*new_r10*x331))+(((-1.0)*x332)));
IkReal x334=x322;
IkReal x335=(new_r00*x334);
j3eval[0]=x333;
j3eval[1]=((IKabs(((((-1.0)*x330*x334))+(((-1.0)*x331*x335)))))+(IKabs((((new_r10*x335))+(((-1.0)*x332*x334))))));
j3eval[2]=IKsign(x333);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x336=((-1.0)*new_r00);
CheckValue<IkReal> x339 = IKatan2WithCheck(IkReal(new_r10),IkReal(x336),IKFAST_ATAN2_MAGTHRESH);
if(!x339.valid){
continue;
}
IkReal x337=((-1.0)*(x339.value));
IkReal x338=x322;
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst13;
cj5=gconst14;
j5=x337;
IkReal gconst12=x337;
IkReal gconst13=((-1.0)*new_r10*x338);
IkReal gconst14=(x336*x338);
IkReal x340=new_r10*new_r10;
IkReal x341=new_r00*new_r00;
CheckValue<IkReal> x344=IKPowWithIntegerCheck((x340+x341),-1);
if(!x344.valid){
continue;
}
IkReal x342=x344.value;
IkReal x343=(new_r00*x342);
j3eval[0]=((IKabs((((new_r01*x343*(new_r00*new_r00)))+((new_r10*x343))+((new_r01*x340*x343)))))+(IKabs((((x341*x342))+(((-1.0)*new_r01*new_r10))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x345=((-1.0)*new_r00);
CheckValue<IkReal> x348 = IKatan2WithCheck(IkReal(new_r10),IkReal(x345),IKFAST_ATAN2_MAGTHRESH);
if(!x348.valid){
continue;
}
IkReal x346=((-1.0)*(x348.value));
IkReal x347=x322;
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst13;
cj5=gconst14;
j5=x346;
IkReal gconst12=x346;
IkReal gconst13=((-1.0)*new_r10*x347);
IkReal gconst14=(x345*x347);
IkReal x349=new_r00*new_r00;
IkReal x350=new_r10*new_r10;
CheckValue<IkReal> x354=IKPowWithIntegerCheck((x350+x349),-1);
if(!x354.valid){
continue;
}
IkReal x351=x354.value;
IkReal x352=(new_r10*x351);
IkReal x353=((1.0)*x351);
j3eval[0]=((IKabs((((x352*(new_r00*new_r00*new_r00)))+((new_r00*x352*(new_r10*new_r10)))+((new_r00*x352)))))+(IKabs(((((-1.0)*x353*(x350*x350)))+((x349*x351))+(((-1.0)*x349*x350*x353))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
CheckValue<IkReal> x356 = IKatan2WithCheck(IkReal(new_r10),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x356.valid){
continue;
}
IkReal x355=((-1.0)*(x356.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst13;
cj5=gconst14;
j5=x355;
new_r11=0;
new_r00=0;
IkReal gconst12=x355;
IkReal x357 = new_r10*new_r10;
if(IKabs(x357)==0){
continue;
}
IkReal gconst13=((-1.0)*new_r10*(pow(x357,-0.5)));
IkReal gconst14=0;
j3eval[0]=new_r10;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x358=IKPowWithIntegerCheck(gconst13,-1);
if(!x358.valid){
continue;
}
cj3array[0]=(new_r01*(x358.value));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x359=IKsin(j3);
IkReal x360=IKcos(j3);
IkReal x361=((1.0)*gconst13);
evalcond[0]=(new_r01*x359);
evalcond[1]=(new_r10*x359);
evalcond[2]=(gconst13*x359);
evalcond[3]=((((-1.0)*new_r10*x360))+gconst13);
evalcond[4]=((((-1.0)*x360*x361))+new_r10);
evalcond[5]=((((-1.0)*x361))+((new_r01*x360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x362=IKPowWithIntegerCheck(new_r10,-1);
if(!x362.valid){
continue;
}
cj3array[0]=(gconst13*(x362.value));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x363=IKsin(j3);
IkReal x364=IKcos(j3);
IkReal x365=((1.0)*gconst13);
IkReal x366=(x364*x365);
evalcond[0]=(new_r01*x363);
evalcond[1]=(new_r10*x363);
evalcond[2]=(gconst13*x363);
evalcond[3]=((((-1.0)*x366))+new_r01);
evalcond[4]=((((-1.0)*x366))+new_r10);
evalcond[5]=((((-1.0)*x365))+((new_r01*x364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
evalcond[1]=gconst14;
evalcond[2]=gconst13;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
IkReal x367=((-1.0)*new_r00);
CheckValue<IkReal> x369 = IKatan2WithCheck(IkReal(new_r10),IkReal(x367),IKFAST_ATAN2_MAGTHRESH);
if(!x369.valid){
continue;
}
IkReal x368=((-1.0)*(x369.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst13;
cj5=gconst14;
j5=x368;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst12=x368;
IkReal gconst13=((-1.0)*new_r10);
IkReal gconst14=x367;
j3eval[0]=1.0;
j3eval[1]=1.0;
j3eval[2]=((IKabs(((1.0)+(((-1.0)*(new_r10*new_r10))))))+(IKabs((new_r00*new_r10))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x370=((-1.0)*new_r00);
CheckValue<IkReal> x372 = IKatan2WithCheck(IkReal(new_r10),IkReal(x370),IKFAST_ATAN2_MAGTHRESH);
if(!x372.valid){
continue;
}
IkReal x371=((-1.0)*(x372.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst13;
cj5=gconst14;
j5=x371;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst12=x371;
IkReal gconst13=((-1.0)*new_r10);
IkReal gconst14=x370;
j3eval[0]=-1.0;
j3eval[1]=-1.0;
j3eval[2]=((IKabs(((-1.0)+(new_r10*new_r10))))+(IKabs((new_r00*new_r10))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x373=((-1.0)*new_r00);
CheckValue<IkReal> x375 = IKatan2WithCheck(IkReal(new_r10),IkReal(x373),IKFAST_ATAN2_MAGTHRESH);
if(!x375.valid){
continue;
}
IkReal x374=((-1.0)*(x375.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst13;
cj5=gconst14;
j5=x374;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst12=x374;
IkReal gconst13=((-1.0)*new_r10);
IkReal gconst14=x373;
j3eval[0]=1.0;
j3eval[1]=((((0.5)*(IKabs(((1.0)+(((-2.0)*(new_r10*new_r10))))))))+(IKabs((new_r00*new_r10))));
j3eval[2]=1.0;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x376 = IKatan2WithCheck(IkReal((((gconst13*gconst14))+((new_r00*new_r10)))),IkReal(((gconst14*gconst14)+(((-1.0)*(new_r10*new_r10))))),IKFAST_ATAN2_MAGTHRESH);
if(!x376.valid){
continue;
}
CheckValue<IkReal> x377=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*new_r10))+(((-1.0)*gconst14*new_r00)))),-1);
if(!x377.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x376.value)+(((1.5707963267949)*(x377.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x378=IKsin(j3);
IkReal x379=IKcos(j3);
IkReal x380=((1.0)*gconst13);
IkReal x381=(gconst14*x378);
IkReal x382=(gconst14*x379);
IkReal x383=(x379*x380);
evalcond[0]=(gconst14+((new_r00*x379))+((new_r10*x378)));
evalcond[1]=(x382+((gconst13*x378))+new_r00);
evalcond[2]=(x381+(((-1.0)*x383)));
evalcond[3]=((((-1.0)*new_r10*x379))+gconst13+((new_r00*x378)));
evalcond[4]=(x381+(((-1.0)*x383))+new_r10);
evalcond[5]=((((-1.0)*x382))+(((-1.0)*x378*x380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x384=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst14*gconst14)))+(((-1.0)*(gconst13*gconst13))))),-1);
if(!x384.valid){
continue;
}
CheckValue<IkReal> x385 = IKatan2WithCheck(IkReal((gconst13*new_r00)),IkReal((gconst14*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x385.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x384.value)))+(x385.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x386=IKsin(j3);
IkReal x387=IKcos(j3);
IkReal x388=((1.0)*gconst13);
IkReal x389=(gconst14*x386);
IkReal x390=(gconst14*x387);
IkReal x391=(x387*x388);
evalcond[0]=(((new_r00*x387))+gconst14+((new_r10*x386)));
evalcond[1]=(((gconst13*x386))+x390+new_r00);
evalcond[2]=((((-1.0)*x391))+x389);
evalcond[3]=(((new_r00*x386))+gconst13+(((-1.0)*new_r10*x387)));
evalcond[4]=((((-1.0)*x391))+x389+new_r10);
evalcond[5]=((((-1.0)*x390))+(((-1.0)*x386*x388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x392=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*new_r10))+(((-1.0)*gconst14*new_r00)))),-1);
if(!x392.valid){
continue;
}
CheckValue<IkReal> x393 = IKatan2WithCheck(IkReal((gconst13*gconst14)),IkReal(gconst14*gconst14),IKFAST_ATAN2_MAGTHRESH);
if(!x393.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x392.value)))+(x393.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x394=IKsin(j3);
IkReal x395=IKcos(j3);
IkReal x396=((1.0)*gconst13);
IkReal x397=(gconst14*x394);
IkReal x398=(gconst14*x395);
IkReal x399=(x395*x396);
evalcond[0]=(gconst14+((new_r00*x395))+((new_r10*x394)));
evalcond[1]=(x398+((gconst13*x394))+new_r00);
evalcond[2]=((((-1.0)*x399))+x397);
evalcond[3]=((((-1.0)*new_r10*x395))+gconst13+((new_r00*x394)));
evalcond[4]=((((-1.0)*x399))+x397+new_r10);
evalcond[5]=((((-1.0)*x398))+(((-1.0)*x394*x396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
IkReal x400=((-1.0)*new_r00);
CheckValue<IkReal> x402 = IKatan2WithCheck(IkReal(0),IkReal(x400),IKFAST_ATAN2_MAGTHRESH);
if(!x402.valid){
continue;
}
IkReal x401=((-1.0)*(x402.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst13;
cj5=gconst14;
j5=x401;
new_r01=0;
new_r10=0;
IkReal gconst12=x401;
IkReal gconst13=0;
IkReal x403 = new_r00*new_r00;
if(IKabs(x403)==0){
continue;
}
IkReal gconst14=(x400*(pow(x403,-0.5)));
j3eval[0]=new_r11;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x404=IKPowWithIntegerCheck(gconst14,-1);
if(!x404.valid){
continue;
}
cj3array[0]=(new_r11*(x404.value));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x405=IKsin(j3);
IkReal x406=IKcos(j3);
evalcond[0]=(new_r00*x405);
evalcond[1]=(new_r11*x405);
evalcond[2]=(gconst14*x405);
evalcond[3]=(gconst14+((new_r00*x406)));
evalcond[4]=(((gconst14*x406))+new_r00);
evalcond[5]=(gconst14+(((-1.0)*new_r11*x406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x407=IKPowWithIntegerCheck(new_r11,-1);
if(!x407.valid){
continue;
}
cj3array[0]=(gconst14*(x407.value));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x408=IKsin(j3);
IkReal x409=IKcos(j3);
IkReal x410=(gconst14*x409);
evalcond[0]=(new_r00*x408);
evalcond[1]=(new_r11*x408);
evalcond[2]=(gconst14*x408);
evalcond[3]=(gconst14+((new_r00*x409)));
evalcond[4]=(x410+new_r00);
evalcond[5]=(new_r11+(((-1.0)*x410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r00);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
CheckValue<IkReal> x412 = IKatan2WithCheck(IkReal(new_r10),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x412.valid){
continue;
}
IkReal x411=((-1.0)*(x412.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst13;
cj5=gconst14;
j5=x411;
new_r00=0;
IkReal gconst12=x411;
IkReal x413 = new_r10*new_r10;
if(IKabs(x413)==0){
continue;
}
IkReal gconst13=((-1.0)*new_r10*(pow(x413,-0.5)));
IkReal gconst14=0;
j3eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
CheckValue<IkReal> x415 = IKatan2WithCheck(IkReal(new_r10),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x415.valid){
continue;
}
IkReal x414=((-1.0)*(x415.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst13;
cj5=gconst14;
j5=x414;
new_r00=0;
IkReal gconst12=x414;
IkReal x416 = new_r10*new_r10;
if(IKabs(x416)==0){
continue;
}
IkReal gconst13=((-1.0)*new_r10*(pow(x416,-0.5)));
IkReal gconst14=0;
j3eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
CheckValue<IkReal> x418 = IKatan2WithCheck(IkReal(new_r10),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x418.valid){
continue;
}
IkReal x417=((-1.0)*(x418.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst13;
cj5=gconst14;
j5=x417;
new_r00=0;
IkReal gconst12=x417;
IkReal x419 = new_r10*new_r10;
if(IKabs(x419)==0){
continue;
}
IkReal gconst13=((-1.0)*new_r10*(pow(x419,-0.5)));
IkReal gconst14=0;
j3eval[0]=new_r10;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x420=IKPowWithIntegerCheck(gconst13,-1);
if(!x420.valid){
continue;
}
CheckValue<IkReal> x421=IKPowWithIntegerCheck(new_r10,-1);
if(!x421.valid){
continue;
}
if( IKabs((new_r11*(x420.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((gconst13*(x421.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r11*(x420.value)))+IKsqr((gconst13*(x421.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((new_r11*(x420.value)), (gconst13*(x421.value)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x422=IKsin(j3);
IkReal x423=IKcos(j3);
IkReal x424=((1.0)*x423);
IkReal x425=(gconst13*x422);
IkReal x426=(gconst13*x424);
evalcond[0]=(new_r10*x422);
evalcond[1]=x425;
evalcond[2]=(gconst13+(((-1.0)*new_r10*x424)));
evalcond[3]=((((-1.0)*x426))+new_r01);
evalcond[4]=((((-1.0)*x426))+new_r10);
evalcond[5]=((((-1.0)*x425))+new_r11);
evalcond[6]=((((-1.0)*new_r11*x424))+((new_r01*x422)));
evalcond[7]=(((new_r11*x422))+(((-1.0)*gconst13))+((new_r01*x423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x427 = IKatan2WithCheck(IkReal(new_r11),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x427.valid){
continue;
}
CheckValue<IkReal> x428=IKPowWithIntegerCheck(IKsign(gconst13),-1);
if(!x428.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x427.value)+(((1.5707963267949)*(x428.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x429=IKsin(j3);
IkReal x430=IKcos(j3);
IkReal x431=((1.0)*x430);
IkReal x432=(gconst13*x429);
IkReal x433=(gconst13*x431);
evalcond[0]=(new_r10*x429);
evalcond[1]=x432;
evalcond[2]=(gconst13+(((-1.0)*new_r10*x431)));
evalcond[3]=((((-1.0)*x433))+new_r01);
evalcond[4]=((((-1.0)*x433))+new_r10);
evalcond[5]=((((-1.0)*x432))+new_r11);
evalcond[6]=((((-1.0)*new_r11*x431))+((new_r01*x429)));
evalcond[7]=(((new_r01*x430))+((new_r11*x429))+(((-1.0)*gconst13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x434 = IKatan2WithCheck(IkReal(new_r11),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x434.valid){
continue;
}
CheckValue<IkReal> x435=IKPowWithIntegerCheck(IKsign(gconst13),-1);
if(!x435.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x434.value)+(((1.5707963267949)*(x435.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x436=IKsin(j3);
IkReal x437=IKcos(j3);
IkReal x438=((1.0)*x437);
IkReal x439=(gconst13*x436);
IkReal x440=(gconst13*x438);
evalcond[0]=(new_r10*x436);
evalcond[1]=x439;
evalcond[2]=(gconst13+(((-1.0)*new_r10*x438)));
evalcond[3]=((((-1.0)*x440))+new_r01);
evalcond[4]=((((-1.0)*x440))+new_r10);
evalcond[5]=((((-1.0)*x439))+new_r11);
evalcond[6]=(((new_r01*x436))+(((-1.0)*new_r11*x438)));
evalcond[7]=(((new_r01*x437))+((new_r11*x436))+(((-1.0)*gconst13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x441 = IKatan2WithCheck(IkReal((((gconst13*gconst14))+((new_r00*new_r10)))),IkReal(((gconst14*gconst14)+(((-1.0)*(new_r10*new_r10))))),IKFAST_ATAN2_MAGTHRESH);
if(!x441.valid){
continue;
}
CheckValue<IkReal> x442=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*new_r10))+(((-1.0)*gconst14*new_r00)))),-1);
if(!x442.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x441.value)+(((1.5707963267949)*(x442.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x443=IKsin(j3);
IkReal x444=IKcos(j3);
IkReal x445=(gconst14*x443);
IkReal x446=((1.0)*x444);
IkReal x447=(gconst13*x443);
IkReal x448=(gconst13*x446);
evalcond[0]=(((new_r00*x444))+gconst14+((new_r10*x443)));
evalcond[1]=(((gconst14*x444))+x447+new_r00);
evalcond[2]=(((new_r00*x443))+gconst13+(((-1.0)*new_r10*x446)));
evalcond[3]=(((new_r01*x443))+gconst14+(((-1.0)*new_r11*x446)));
evalcond[4]=((((-1.0)*x448))+x445+new_r01);
evalcond[5]=((((-1.0)*x448))+x445+new_r10);
evalcond[6]=(((new_r01*x444))+((new_r11*x443))+(((-1.0)*gconst13)));
evalcond[7]=((((-1.0)*x447))+(((-1.0)*gconst14*x446))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x449=((1.0)*new_r10);
CheckValue<IkReal> x450 = IKatan2WithCheck(IkReal((((gconst13*gconst14))+((new_r00*new_r01)))),IkReal(((((-1.0)*new_r01*x449))+(gconst14*gconst14))),IKFAST_ATAN2_MAGTHRESH);
if(!x450.valid){
continue;
}
CheckValue<IkReal> x451=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*x449))+(((-1.0)*gconst14*new_r00)))),-1);
if(!x451.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x450.value)+(((1.5707963267949)*(x451.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x452=IKsin(j3);
IkReal x453=IKcos(j3);
IkReal x454=(gconst14*x452);
IkReal x455=((1.0)*x453);
IkReal x456=(gconst13*x452);
IkReal x457=(gconst13*x455);
evalcond[0]=(((new_r10*x452))+((new_r00*x453))+gconst14);
evalcond[1]=(x456+((gconst14*x453))+new_r00);
evalcond[2]=((((-1.0)*new_r10*x455))+((new_r00*x452))+gconst13);
evalcond[3]=(((new_r01*x452))+gconst14+(((-1.0)*new_r11*x455)));
evalcond[4]=((((-1.0)*x457))+x454+new_r01);
evalcond[5]=((((-1.0)*x457))+x454+new_r10);
evalcond[6]=(((new_r11*x452))+((new_r01*x453))+(((-1.0)*gconst13)));
evalcond[7]=((((-1.0)*x456))+(((-1.0)*gconst14*x455))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x458=((1.0)*new_r10);
CheckValue<IkReal> x459=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r11*x458))+(((-1.0)*new_r00*new_r01)))),-1);
if(!x459.valid){
continue;
}
CheckValue<IkReal> x460 = IKatan2WithCheck(IkReal((((gconst14*new_r00))+((gconst14*new_r11)))),IkReal((((gconst14*new_r01))+(((-1.0)*gconst14*x458)))),IKFAST_ATAN2_MAGTHRESH);
if(!x460.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x459.value)))+(x460.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x461=IKsin(j3);
IkReal x462=IKcos(j3);
IkReal x463=(gconst14*x461);
IkReal x464=((1.0)*x462);
IkReal x465=(gconst13*x461);
IkReal x466=(gconst13*x464);
evalcond[0]=(((new_r10*x461))+((new_r00*x462))+gconst14);
evalcond[1]=(x465+((gconst14*x462))+new_r00);
evalcond[2]=(((new_r00*x461))+(((-1.0)*new_r10*x464))+gconst13);
evalcond[3]=(((new_r01*x461))+(((-1.0)*new_r11*x464))+gconst14);
evalcond[4]=((((-1.0)*x466))+x463+new_r01);
evalcond[5]=((((-1.0)*x466))+x463+new_r10);
evalcond[6]=(((new_r11*x461))+((new_r01*x462))+(((-1.0)*gconst13)));
evalcond[7]=((((-1.0)*x465))+(((-1.0)*gconst14*x464))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x469 = ((new_r10*new_r10)+(new_r00*new_r00));
if(IKabs(x469)==0){
continue;
}
IkReal x467=pow(x469,-0.5);
IkReal x468=((1.0)*x467);
CheckValue<IkReal> x470 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x470.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x470.value))));
IkReal gconst16=(new_r10*x468);
IkReal gconst17=(new_r00*x468);
CheckValue<IkReal> x471 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x471.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5+(x471.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
CheckValue<IkReal> x475 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x475.valid){
continue;
}
IkReal x472=((1.0)*(x475.value));
IkReal x473=x467;
IkReal x474=((1.0)*x473);
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x472)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x472)));
IkReal gconst16=(new_r10*x474);
IkReal gconst17=(new_r00*x474);
IkReal x476=new_r00*new_r00;
IkReal x477=((1.0)*new_r00);
IkReal x478=((((-1.0)*new_r01*x477))+(((-1.0)*new_r10*new_r11)));
IkReal x479=x467;
IkReal x480=(new_r00*x479);
j3eval[0]=x478;
j3eval[1]=((IKabs((((new_r11*x480))+((x476*x479)))))+(IKabs(((((-1.0)*new_r10*x477*x479))+((new_r01*x480))))));
j3eval[2]=IKsign(x478);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
CheckValue<IkReal> x484 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x484.valid){
continue;
}
IkReal x481=((1.0)*(x484.value));
IkReal x482=x467;
IkReal x483=((1.0)*x482);
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x481)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x481)));
IkReal gconst16=(new_r10*x483);
IkReal gconst17=(new_r00*x483);
IkReal x485=new_r10*new_r10;
IkReal x486=new_r00*new_r00;
IkReal x487=((1.0)*new_r01);
CheckValue<IkReal> x491=IKPowWithIntegerCheck((x485+x486),-1);
if(!x491.valid){
continue;
}
IkReal x488=x491.value;
IkReal x489=(new_r10*x488);
IkReal x490=(new_r01*x488);
j3eval[0]=((IKabs((((x490*(new_r00*new_r00*new_r00)))+((new_r00*x489))+((new_r00*x485*x490)))))+(IKabs(((((-1.0)*x487*x489*(new_r10*new_r10)))+(((-1.0)*x486*x487*x489))+((x486*x488))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
CheckValue<IkReal> x495 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x495.valid){
continue;
}
IkReal x492=((1.0)*(x495.value));
IkReal x493=x467;
IkReal x494=((1.0)*x493);
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x492)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x492)));
IkReal gconst16=(new_r10*x494);
IkReal gconst17=(new_r00*x494);
IkReal x496=new_r00*new_r00;
IkReal x497=new_r10*new_r10;
CheckValue<IkReal> x501=IKPowWithIntegerCheck((x496+x497),-1);
if(!x501.valid){
continue;
}
IkReal x498=x501.value;
IkReal x499=(new_r10*x498);
IkReal x500=((1.0)*x498);
j3eval[0]=((IKabs((((x499*(new_r00*new_r00*new_r00)))+((new_r00*x499*(new_r10*new_r10)))+((new_r00*x499)))))+(IKabs(((((-1.0)*x500*(x497*x497)))+((x496*x498))+(((-1.0)*x496*x497*x500))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
CheckValue<IkReal> x503 = IKatan2WithCheck(IkReal(new_r10),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x503.valid){
continue;
}
IkReal x502=((1.0)*(x503.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x502)));
new_r11=0;
new_r00=0;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x502)));
IkReal x504 = new_r10*new_r10;
if(IKabs(x504)==0){
continue;
}
IkReal gconst16=((1.0)*new_r10*(pow(x504,-0.5)));
IkReal gconst17=0;
j3eval[0]=new_r10;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x505=IKPowWithIntegerCheck(gconst16,-1);
if(!x505.valid){
continue;
}
cj3array[0]=(new_r01*(x505.value));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x506=IKsin(j3);
IkReal x507=IKcos(j3);
IkReal x508=((1.0)*gconst16);
evalcond[0]=(new_r01*x506);
evalcond[1]=(new_r10*x506);
evalcond[2]=(gconst16*x506);
evalcond[3]=((((-1.0)*new_r10*x507))+gconst16);
evalcond[4]=((((-1.0)*x507*x508))+new_r10);
evalcond[5]=((((-1.0)*x508))+((new_r01*x507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x509=IKPowWithIntegerCheck(new_r10,-1);
if(!x509.valid){
continue;
}
cj3array[0]=(gconst16*(x509.value));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x510=IKsin(j3);
IkReal x511=IKcos(j3);
IkReal x512=((1.0)*gconst16);
IkReal x513=(x511*x512);
evalcond[0]=(new_r01*x510);
evalcond[1]=(new_r10*x510);
evalcond[2]=(gconst16*x510);
evalcond[3]=(new_r01+(((-1.0)*x513)));
evalcond[4]=(new_r10+(((-1.0)*x513)));
evalcond[5]=(((new_r01*x511))+(((-1.0)*x512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
evalcond[1]=gconst17;
evalcond[2]=gconst16;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
CheckValue<IkReal> x515 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x515.valid){
continue;
}
IkReal x514=((1.0)*(x515.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x514)));
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x514)));
IkReal gconst16=((1.0)*new_r10);
IkReal gconst17=((1.0)*new_r00);
j3eval[0]=-1.0;
j3eval[1]=((IKabs(((1.0)+(((-1.0)*(new_r10*new_r10))))))+(IKabs(((1.0)*new_r00*new_r10))));
j3eval[2]=-1.0;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
CheckValue<IkReal> x517 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x517.valid){
continue;
}
IkReal x516=((1.0)*(x517.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x516)));
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x516)));
IkReal gconst16=((1.0)*new_r10);
IkReal gconst17=((1.0)*new_r00);
j3eval[0]=-1.0;
j3eval[1]=-1.0;
j3eval[2]=((IKabs(((1.0)+(((-1.0)*(new_r10*new_r10))))))+(IKabs(((1.0)*new_r00*new_r10))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
CheckValue<IkReal> x519 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x519.valid){
continue;
}
IkReal x518=((1.0)*(x519.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x518)));
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x518)));
IkReal gconst16=((1.0)*new_r10);
IkReal gconst17=((1.0)*new_r00);
j3eval[0]=-1.0;
j3eval[1]=((IKabs(((1.0)+(((-2.0)*(new_r10*new_r10))))))+(IKabs(((2.0)*new_r00*new_r10))));
j3eval[2]=-1.0;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x520 = IKatan2WithCheck(IkReal((((new_r00*new_r10))+((gconst16*gconst17)))),IkReal(((gconst17*gconst17)+(((-1.0)*(new_r10*new_r10))))),IKFAST_ATAN2_MAGTHRESH);
if(!x520.valid){
continue;
}
CheckValue<IkReal> x521=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*new_r10))+(((-1.0)*gconst17*new_r00)))),-1);
if(!x521.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x520.value)+(((1.5707963267949)*(x521.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x522=IKsin(j3);
IkReal x523=IKcos(j3);
IkReal x524=(gconst17*x522);
IkReal x525=(gconst16*x522);
IkReal x526=(gconst17*x523);
IkReal x527=((1.0)*x523);
IkReal x528=(gconst16*x527);
evalcond[0]=(gconst17+((new_r10*x522))+((new_r00*x523)));
evalcond[1]=(x526+x525+new_r00);
evalcond[2]=((((-1.0)*x528))+x524);
evalcond[3]=(gconst16+(((-1.0)*new_r10*x527))+((new_r00*x522)));
evalcond[4]=((((-1.0)*x528))+x524+new_r10);
evalcond[5]=((((-1.0)*x525))+(((-1.0)*x526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x529=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst17*gconst17)))+(((-1.0)*(gconst16*gconst16))))),-1);
if(!x529.valid){
continue;
}
CheckValue<IkReal> x530 = IKatan2WithCheck(IkReal((gconst16*new_r00)),IkReal((gconst17*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x530.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x529.value)))+(x530.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x531=IKsin(j3);
IkReal x532=IKcos(j3);
IkReal x533=(gconst17*x531);
IkReal x534=(gconst16*x531);
IkReal x535=(gconst17*x532);
IkReal x536=((1.0)*x532);
IkReal x537=(gconst16*x536);
evalcond[0]=(gconst17+((new_r10*x531))+((new_r00*x532)));
evalcond[1]=(x535+x534+new_r00);
evalcond[2]=((((-1.0)*x537))+x533);
evalcond[3]=(gconst16+(((-1.0)*new_r10*x536))+((new_r00*x531)));
evalcond[4]=((((-1.0)*x537))+x533+new_r10);
evalcond[5]=((((-1.0)*x535))+(((-1.0)*x534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x538 = IKatan2WithCheck(IkReal((gconst16*gconst17)),IkReal(gconst17*gconst17),IKFAST_ATAN2_MAGTHRESH);
if(!x538.valid){
continue;
}
CheckValue<IkReal> x539=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*new_r10))+(((-1.0)*gconst17*new_r00)))),-1);
if(!x539.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x538.value)+(((1.5707963267949)*(x539.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x540=IKsin(j3);
IkReal x541=IKcos(j3);
IkReal x542=(gconst17*x540);
IkReal x543=(gconst16*x540);
IkReal x544=(gconst17*x541);
IkReal x545=((1.0)*x541);
IkReal x546=(gconst16*x545);
evalcond[0]=(((new_r00*x541))+((new_r10*x540))+gconst17);
evalcond[1]=(x544+x543+new_r00);
evalcond[2]=((((-1.0)*x546))+x542);
evalcond[3]=(((new_r00*x540))+gconst16+(((-1.0)*new_r10*x545)));
evalcond[4]=((((-1.0)*x546))+x542+new_r10);
evalcond[5]=((((-1.0)*x543))+(((-1.0)*x544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
CheckValue<IkReal> x548 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x548.valid){
continue;
}
IkReal x547=((1.0)*(x548.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x547)));
new_r01=0;
new_r10=0;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x547)));
IkReal gconst16=0;
IkReal x549 = new_r00*new_r00;
if(IKabs(x549)==0){
continue;
}
IkReal gconst17=((1.0)*new_r00*(pow(x549,-0.5)));
j3eval[0]=new_r11;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x550=IKPowWithIntegerCheck(gconst17,-1);
if(!x550.valid){
continue;
}
cj3array[0]=(new_r11*(x550.value));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x551=IKsin(j3);
IkReal x552=IKcos(j3);
evalcond[0]=(new_r00*x551);
evalcond[1]=(new_r11*x551);
evalcond[2]=(gconst17*x551);
evalcond[3]=(gconst17+((new_r00*x552)));
evalcond[4]=(((gconst17*x552))+new_r00);
evalcond[5]=(gconst17+(((-1.0)*new_r11*x552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x553=IKPowWithIntegerCheck(new_r11,-1);
if(!x553.valid){
continue;
}
cj3array[0]=(gconst17*(x553.value));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x554=IKsin(j3);
IkReal x555=IKcos(j3);
IkReal x556=(gconst17*x555);
evalcond[0]=(new_r00*x554);
evalcond[1]=(new_r11*x554);
evalcond[2]=(gconst17*x554);
evalcond[3]=(gconst17+((new_r00*x555)));
evalcond[4]=(x556+new_r00);
evalcond[5]=((((-1.0)*x556))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r00);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
CheckValue<IkReal> x558 = IKatan2WithCheck(IkReal(new_r10),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x558.valid){
continue;
}
IkReal x557=((1.0)*(x558.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x557)));
new_r00=0;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x557)));
IkReal x559 = new_r10*new_r10;
if(IKabs(x559)==0){
continue;
}
IkReal gconst16=((1.0)*new_r10*(pow(x559,-0.5)));
IkReal gconst17=0;
j3eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
CheckValue<IkReal> x561 = IKatan2WithCheck(IkReal(new_r10),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x561.valid){
continue;
}
IkReal x560=((1.0)*(x561.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x560)));
new_r00=0;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x560)));
IkReal x562 = new_r10*new_r10;
if(IKabs(x562)==0){
continue;
}
IkReal gconst16=((1.0)*new_r10*(pow(x562,-0.5)));
IkReal gconst17=0;
j3eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
CheckValue<IkReal> x564 = IKatan2WithCheck(IkReal(new_r10),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x564.valid){
continue;
}
IkReal x563=((1.0)*(x564.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x563)));
new_r00=0;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x563)));
IkReal x565 = new_r10*new_r10;
if(IKabs(x565)==0){
continue;
}
IkReal gconst16=((1.0)*new_r10*(pow(x565,-0.5)));
IkReal gconst17=0;
j3eval[0]=new_r10;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x566=IKPowWithIntegerCheck(gconst16,-1);
if(!x566.valid){
continue;
}
CheckValue<IkReal> x567=IKPowWithIntegerCheck(new_r10,-1);
if(!x567.valid){
continue;
}
if( IKabs((new_r11*(x566.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((gconst16*(x567.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r11*(x566.value)))+IKsqr((gconst16*(x567.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((new_r11*(x566.value)), (gconst16*(x567.value)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x568=IKsin(j3);
IkReal x569=IKcos(j3);
IkReal x570=((1.0)*gconst16);
IkReal x571=((1.0)*x569);
IkReal x572=(x569*x570);
evalcond[0]=(new_r10*x568);
evalcond[1]=(gconst16*x568);
evalcond[2]=(gconst16+(((-1.0)*new_r10*x571)));
evalcond[3]=((((-1.0)*x572))+new_r01);
evalcond[4]=((((-1.0)*x572))+new_r10);
evalcond[5]=((((-1.0)*x568*x570))+new_r11);
evalcond[6]=((((-1.0)*new_r11*x571))+((new_r01*x568)));
evalcond[7]=(((new_r01*x569))+(((-1.0)*x570))+((new_r11*x568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x573=IKPowWithIntegerCheck(IKsign(gconst16),-1);
if(!x573.valid){
continue;
}
CheckValue<IkReal> x574 = IKatan2WithCheck(IkReal(new_r11),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x574.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x573.value)))+(x574.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x575=IKsin(j3);
IkReal x576=IKcos(j3);
IkReal x577=((1.0)*gconst16);
IkReal x578=((1.0)*x576);
IkReal x579=(x576*x577);
evalcond[0]=(new_r10*x575);
evalcond[1]=(gconst16*x575);
evalcond[2]=(gconst16+(((-1.0)*new_r10*x578)));
evalcond[3]=((((-1.0)*x579))+new_r01);
evalcond[4]=((((-1.0)*x579))+new_r10);
evalcond[5]=((((-1.0)*x575*x577))+new_r11);
evalcond[6]=(((new_r01*x575))+(((-1.0)*new_r11*x578)));
evalcond[7]=(((new_r11*x575))+((new_r01*x576))+(((-1.0)*x577)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x580=IKPowWithIntegerCheck(IKsign(gconst16),-1);
if(!x580.valid){
continue;
}
CheckValue<IkReal> x581 = IKatan2WithCheck(IkReal(new_r11),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x581.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x580.value)))+(x581.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x582=IKsin(j3);
IkReal x583=IKcos(j3);
IkReal x584=((1.0)*gconst16);
IkReal x585=((1.0)*x583);
IkReal x586=(x583*x584);
evalcond[0]=(new_r10*x582);
evalcond[1]=(gconst16*x582);
evalcond[2]=(gconst16+(((-1.0)*new_r10*x585)));
evalcond[3]=(new_r01+(((-1.0)*x586)));
evalcond[4]=(new_r10+(((-1.0)*x586)));
evalcond[5]=((((-1.0)*x582*x584))+new_r11);
evalcond[6]=((((-1.0)*new_r11*x585))+((new_r01*x582)));
evalcond[7]=(((new_r01*x583))+(((-1.0)*x584))+((new_r11*x582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x587 = IKatan2WithCheck(IkReal((((new_r00*new_r10))+((gconst16*gconst17)))),IkReal(((gconst17*gconst17)+(((-1.0)*(new_r10*new_r10))))),IKFAST_ATAN2_MAGTHRESH);
if(!x587.valid){
continue;
}
CheckValue<IkReal> x588=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*new_r10))+(((-1.0)*gconst17*new_r00)))),-1);
if(!x588.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x587.value)+(((1.5707963267949)*(x588.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x589=IKsin(j3);
IkReal x590=IKcos(j3);
IkReal x591=((1.0)*gconst16);
IkReal x592=(gconst17*x589);
IkReal x593=(gconst17*x590);
IkReal x594=((1.0)*x590);
IkReal x595=(x590*x591);
evalcond[0]=(gconst17+((new_r00*x590))+((new_r10*x589)));
evalcond[1]=(((gconst16*x589))+x593+new_r00);
evalcond[2]=((((-1.0)*new_r10*x594))+gconst16+((new_r00*x589)));
evalcond[3]=((((-1.0)*new_r11*x594))+gconst17+((new_r01*x589)));
evalcond[4]=((((-1.0)*x595))+x592+new_r01);
evalcond[5]=((((-1.0)*x595))+x592+new_r10);
evalcond[6]=(((new_r01*x590))+(((-1.0)*x591))+((new_r11*x589)));
evalcond[7]=((((-1.0)*x589*x591))+(((-1.0)*x593))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x596=((1.0)*new_r10);
CheckValue<IkReal> x597 = IKatan2WithCheck(IkReal((((new_r00*new_r01))+((gconst16*gconst17)))),IkReal(((((-1.0)*new_r01*x596))+(gconst17*gconst17))),IKFAST_ATAN2_MAGTHRESH);
if(!x597.valid){
continue;
}
CheckValue<IkReal> x598=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst17*new_r00))+(((-1.0)*gconst16*x596)))),-1);
if(!x598.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x597.value)+(((1.5707963267949)*(x598.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x599=IKsin(j3);
IkReal x600=IKcos(j3);
IkReal x601=((1.0)*gconst16);
IkReal x602=(gconst17*x599);
IkReal x603=(gconst17*x600);
IkReal x604=((1.0)*x600);
IkReal x605=(x600*x601);
evalcond[0]=(((new_r10*x599))+gconst17+((new_r00*x600)));
evalcond[1]=(((gconst16*x599))+x603+new_r00);
evalcond[2]=((((-1.0)*new_r10*x604))+gconst16+((new_r00*x599)));
evalcond[3]=((((-1.0)*new_r11*x604))+gconst17+((new_r01*x599)));
evalcond[4]=(x602+(((-1.0)*x605))+new_r01);
evalcond[5]=(x602+(((-1.0)*x605))+new_r10);
evalcond[6]=(((new_r11*x599))+(((-1.0)*x601))+((new_r01*x600)));
evalcond[7]=((((-1.0)*x603))+(((-1.0)*x599*x601))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x606=((1.0)*new_r10);
CheckValue<IkReal> x607=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r11*x606))+(((-1.0)*new_r00*new_r01)))),-1);
if(!x607.valid){
continue;
}
CheckValue<IkReal> x608 = IKatan2WithCheck(IkReal((((gconst17*new_r11))+((gconst17*new_r00)))),IkReal(((((-1.0)*gconst17*x606))+((gconst17*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x608.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x607.value)))+(x608.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x609=IKsin(j3);
IkReal x610=IKcos(j3);
IkReal x611=((1.0)*gconst16);
IkReal x612=(gconst17*x609);
IkReal x613=(gconst17*x610);
IkReal x614=((1.0)*x610);
IkReal x615=(x610*x611);
evalcond[0]=(gconst17+((new_r10*x609))+((new_r00*x610)));
evalcond[1]=(((gconst16*x609))+x613+new_r00);
evalcond[2]=(gconst16+(((-1.0)*new_r10*x614))+((new_r00*x609)));
evalcond[3]=(gconst17+(((-1.0)*new_r11*x614))+((new_r01*x609)));
evalcond[4]=((((-1.0)*x615))+x612+new_r01);
evalcond[5]=((((-1.0)*x615))+x612+new_r10);
evalcond[6]=(((new_r11*x609))+(((-1.0)*x611))+((new_r01*x610)));
evalcond[7]=((((-1.0)*x609*x611))+(((-1.0)*x613))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x616=((-1.0)*new_r10);
IkReal x618 = ((new_r10*new_r10)+(new_r00*new_r00));
if(IKabs(x618)==0){
continue;
}
IkReal x617=pow(x618,-0.5);
CheckValue<IkReal> x619 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(x616),IKFAST_ATAN2_MAGTHRESH);
if(!x619.valid){
continue;
}
IkReal gconst18=((-1.0)*(x619.value));
IkReal gconst19=(new_r00*x617);
IkReal gconst20=(x616*x617);
CheckValue<IkReal> x620 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x620.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x620.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
IkReal x621=((-1.0)*new_r10);
CheckValue<IkReal> x624 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(x621),IKFAST_ATAN2_MAGTHRESH);
if(!x624.valid){
continue;
}
IkReal x622=((-1.0)*(x624.value));
IkReal x623=x617;
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst19;
cj5=gconst20;
j5=x622;
IkReal gconst18=x622;
IkReal gconst19=(new_r00*x623);
IkReal gconst20=(x621*x623);
IkReal x625=new_r10*new_r10;
IkReal x626=((1.0)*new_r00);
IkReal x627=((1.0)*new_r10*new_r11);
IkReal x628=((((-1.0)*new_r01*x626))+(((-1.0)*x627)));
IkReal x629=x617;
IkReal x630=(new_r10*x629);
j3eval[0]=x628;
j3eval[1]=((IKabs(((((-1.0)*new_r01*x630))+((x625*x629)))))+(IKabs(((((-1.0)*x627*x629))+(((-1.0)*x626*x630))))));
j3eval[2]=IKsign(x628);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x631=((-1.0)*new_r10);
CheckValue<IkReal> x634 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(x631),IKFAST_ATAN2_MAGTHRESH);
if(!x634.valid){
continue;
}
IkReal x632=((-1.0)*(x634.value));
IkReal x633=x617;
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst19;
cj5=gconst20;
j5=x632;
IkReal gconst18=x632;
IkReal gconst19=(new_r00*x633);
IkReal gconst20=(x631*x633);
IkReal x635=new_r10*new_r10;
CheckValue<IkReal> x638=IKPowWithIntegerCheck((x635+(new_r00*new_r00)),-1);
if(!x638.valid){
continue;
}
IkReal x636=x638.value;
IkReal x637=(new_r00*x636);
j3eval[0]=((IKabs((((new_r01*x635*x637))+((new_r01*x637*(new_r00*new_r00)))+((new_r10*x637)))))+(IKabs((((x635*x636))+((new_r00*new_r11))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x639=((-1.0)*new_r10);
CheckValue<IkReal> x642 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(x639),IKFAST_ATAN2_MAGTHRESH);
if(!x642.valid){
continue;
}
IkReal x640=((-1.0)*(x642.value));
IkReal x641=x617;
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst19;
cj5=gconst20;
j5=x640;
IkReal gconst18=x640;
IkReal gconst19=(new_r00*x641);
IkReal gconst20=(x639*x641);
IkReal x643=new_r10*new_r10;
IkReal x644=new_r00*new_r00;
CheckValue<IkReal> x648=IKPowWithIntegerCheck((x644+x643),-1);
if(!x648.valid){
continue;
}
IkReal x645=x648.value;
IkReal x646=(new_r10*x645);
IkReal x647=(x643*x645);
j3eval[0]=((IKabs((((new_r00*x646))+((x646*(new_r00*new_r00*new_r00)))+((new_r00*x646*(new_r10*new_r10))))))+(IKabs(((((-1.0)*x645*(x644*x644)))+(((-1.0)*x644*x647))+x647))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
IkReal x649=((-1.0)*new_r10);
CheckValue<IkReal> x651 = IKatan2WithCheck(IkReal(0),IkReal(x649),IKFAST_ATAN2_MAGTHRESH);
if(!x651.valid){
continue;
}
IkReal x650=((-1.0)*(x651.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst19;
cj5=gconst20;
j5=x650;
new_r11=0;
new_r00=0;
IkReal gconst18=x650;
IkReal gconst19=0;
IkReal x652 = new_r10*new_r10;
if(IKabs(x652)==0){
continue;
}
IkReal gconst20=(x649*(pow(x652,-0.5)));
j3eval[0]=new_r01;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x653=((-1.0)*new_r10);
CheckValue<IkReal> x655 = IKatan2WithCheck(IkReal(0),IkReal(x653),IKFAST_ATAN2_MAGTHRESH);
if(!x655.valid){
continue;
}
IkReal x654=((-1.0)*(x655.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst19;
cj5=gconst20;
j5=x654;
new_r11=0;
new_r00=0;
IkReal gconst18=x654;
IkReal gconst19=0;
IkReal x656 = new_r10*new_r10;
if(IKabs(x656)==0){
continue;
}
IkReal gconst20=(x653*(pow(x656,-0.5)));
j3eval[0]=new_r10;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x657=IKPowWithIntegerCheck(gconst20,-1);
if(!x657.valid){
continue;
}
sj3array[0]=((-1.0)*new_r01*(x657.value));
if( sj3array[0] >= -1-IKFAST_SINCOS_THRESH && sj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKasin(sj3array[0]);
    cj3array[0] = IKcos(j3array[0]);
    sj3array[1] = sj3array[0];
    j3array[1] = j3array[0] > 0 ? (IKPI-j3array[0]) : (-IKPI-j3array[0]);
    cj3array[1] = -cj3array[0];
}
else if( isnan(sj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x658=IKcos(j3);
IkReal x659=IKsin(j3);
evalcond[0]=(gconst20*x658);
evalcond[1]=(new_r01*x658);
evalcond[2]=((-1.0)*new_r10*x658);
evalcond[3]=(gconst20+((new_r01*x659)));
evalcond[4]=(gconst20+((new_r10*x659)));
evalcond[5]=(((gconst20*x659))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x660=IKPowWithIntegerCheck(new_r10,-1);
if(!x660.valid){
continue;
}
sj3array[0]=((-1.0)*gconst20*(x660.value));
if( sj3array[0] >= -1-IKFAST_SINCOS_THRESH && sj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKasin(sj3array[0]);
    cj3array[0] = IKcos(j3array[0]);
    sj3array[1] = sj3array[0];
    j3array[1] = j3array[0] > 0 ? (IKPI-j3array[0]) : (-IKPI-j3array[0]);
    cj3array[1] = -cj3array[0];
}
else if( isnan(sj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x661=IKcos(j3);
IkReal x662=IKsin(j3);
IkReal x663=(gconst20*x662);
evalcond[0]=(gconst20*x661);
evalcond[1]=(new_r01*x661);
evalcond[2]=((-1.0)*new_r10*x661);
evalcond[3]=(gconst20+((new_r01*x662)));
evalcond[4]=(x663+new_r01);
evalcond[5]=(x663+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x664=IKPowWithIntegerCheck(new_r01,-1);
if(!x664.valid){
continue;
}
sj3array[0]=((-1.0)*gconst20*(x664.value));
if( sj3array[0] >= -1-IKFAST_SINCOS_THRESH && sj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKasin(sj3array[0]);
    cj3array[0] = IKcos(j3array[0]);
    sj3array[1] = sj3array[0];
    j3array[1] = j3array[0] > 0 ? (IKPI-j3array[0]) : (-IKPI-j3array[0]);
    cj3array[1] = -cj3array[0];
}
else if( isnan(sj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x665=IKcos(j3);
IkReal x666=IKsin(j3);
IkReal x667=(gconst20*x666);
evalcond[0]=(gconst20*x665);
evalcond[1]=(new_r01*x665);
evalcond[2]=((-1.0)*new_r10*x665);
evalcond[3]=(gconst20+((new_r10*x666)));
evalcond[4]=(x667+new_r01);
evalcond[5]=(x667+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
evalcond[1]=gconst20;
evalcond[2]=gconst19;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
IkReal x668=((-1.0)*new_r10);
CheckValue<IkReal> x670 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(x668),IKFAST_ATAN2_MAGTHRESH);
if(!x670.valid){
continue;
}
IkReal x669=((-1.0)*(x670.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst19;
cj5=gconst20;
j5=x669;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst18=x669;
IkReal gconst19=new_r00;
IkReal gconst20=x668;
j3eval[0]=1.0;
j3eval[1]=((IKabs(new_r10*new_r10))+(IKabs((new_r00*new_r10))));
j3eval[2]=1.0;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x671=((-1.0)*new_r10);
CheckValue<IkReal> x673 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(x671),IKFAST_ATAN2_MAGTHRESH);
if(!x673.valid){
continue;
}
IkReal x672=((-1.0)*(x673.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst19;
cj5=gconst20;
j5=x672;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst18=x672;
IkReal gconst19=new_r00;
IkReal gconst20=x671;
j3eval[0]=-1.0;
j3eval[1]=((IKabs(((1.0)+(((-1.0)*(new_r10*new_r10))))))+(IKabs((new_r00*new_r10))));
j3eval[2]=-1.0;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x674=((-1.0)*new_r10);
CheckValue<IkReal> x676 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(x674),IKFAST_ATAN2_MAGTHRESH);
if(!x676.valid){
continue;
}
IkReal x675=((-1.0)*(x676.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst19;
cj5=gconst20;
j5=x675;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst18=x675;
IkReal gconst19=new_r00;
IkReal gconst20=x674;
j3eval[0]=1.0;
j3eval[1]=((((0.5)*(IKabs(((-1.0)+(((2.0)*(new_r10*new_r10))))))))+(IKabs((new_r00*new_r10))));
j3eval[2]=1.0;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x677=((1.0)*gconst20);
CheckValue<IkReal> x678 = IKatan2WithCheck(IkReal(((((-1.0)*(new_r00*new_r00)))+(gconst20*gconst20))),IkReal((((new_r00*new_r10))+(((-1.0)*gconst19*x677)))),IKFAST_ATAN2_MAGTHRESH);
if(!x678.valid){
continue;
}
CheckValue<IkReal> x679=IKPowWithIntegerCheck(IKsign((((gconst19*new_r00))+(((-1.0)*new_r10*x677)))),-1);
if(!x679.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x678.value)+(((1.5707963267949)*(x679.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x680=IKcos(j3);
IkReal x681=IKsin(j3);
IkReal x682=(gconst20*x681);
IkReal x683=(gconst19*x681);
IkReal x684=(gconst20*x680);
IkReal x685=((1.0)*x680);
IkReal x686=(gconst19*x685);
evalcond[0]=(gconst20+((new_r00*x680))+((new_r10*x681)));
evalcond[1]=(x683+x684+new_r00);
evalcond[2]=((((-1.0)*x686))+x682);
evalcond[3]=((((-1.0)*new_r10*x685))+gconst19+((new_r00*x681)));
evalcond[4]=((((-1.0)*x686))+x682+new_r10);
evalcond[5]=((((-1.0)*x684))+(((-1.0)*x683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x687 = IKatan2WithCheck(IkReal((gconst19*new_r00)),IkReal((gconst20*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x687.valid){
continue;
}
CheckValue<IkReal> x688=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst20*gconst20)))+(((-1.0)*(gconst19*gconst19))))),-1);
if(!x688.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x687.value)+(((1.5707963267949)*(x688.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x689=IKcos(j3);
IkReal x690=IKsin(j3);
IkReal x691=(gconst20*x690);
IkReal x692=(gconst19*x690);
IkReal x693=(gconst20*x689);
IkReal x694=((1.0)*x689);
IkReal x695=(gconst19*x694);
evalcond[0]=(gconst20+((new_r10*x690))+((new_r00*x689)));
evalcond[1]=(x692+x693+new_r00);
evalcond[2]=(x691+(((-1.0)*x695)));
evalcond[3]=(gconst19+(((-1.0)*new_r10*x694))+((new_r00*x690)));
evalcond[4]=(x691+(((-1.0)*x695))+new_r10);
evalcond[5]=((((-1.0)*x693))+(((-1.0)*x692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x696=IKPowWithIntegerCheck(IKsign((((gconst19*new_r00))+(((-1.0)*gconst20*new_r10)))),-1);
if(!x696.valid){
continue;
}
CheckValue<IkReal> x697 = IKatan2WithCheck(IkReal(gconst20*gconst20),IkReal(((-1.0)*gconst19*gconst20)),IKFAST_ATAN2_MAGTHRESH);
if(!x697.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x696.value)))+(x697.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x698=IKcos(j3);
IkReal x699=IKsin(j3);
IkReal x700=(gconst20*x699);
IkReal x701=(gconst19*x699);
IkReal x702=(gconst20*x698);
IkReal x703=((1.0)*x698);
IkReal x704=(gconst19*x703);
evalcond[0]=(gconst20+((new_r10*x699))+((new_r00*x698)));
evalcond[1]=(x702+x701+new_r00);
evalcond[2]=((((-1.0)*x704))+x700);
evalcond[3]=(gconst19+((new_r00*x699))+(((-1.0)*new_r10*x703)));
evalcond[4]=((((-1.0)*x704))+x700+new_r10);
evalcond[5]=((((-1.0)*x701))+(((-1.0)*x702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x705=IKPowWithIntegerCheck(gconst19,-1);
if(!x705.valid){
continue;
}
sj3array[0]=(new_r11*(x705.value));
if( sj3array[0] >= -1-IKFAST_SINCOS_THRESH && sj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKasin(sj3array[0]);
    cj3array[0] = IKcos(j3array[0]);
    sj3array[1] = sj3array[0];
    j3array[1] = j3array[0] > 0 ? (IKPI-j3array[0]) : (-IKPI-j3array[0]);
    cj3array[1] = -cj3array[0];
}
else if( isnan(sj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x706=IKcos(j3);
IkReal x707=IKsin(j3);
IkReal x708=((-1.0)*x706);
evalcond[0]=(new_r00*x706);
evalcond[1]=(new_r11*x708);
evalcond[2]=(gconst19*x708);
evalcond[3]=(((new_r00*x707))+gconst19);
evalcond[4]=(new_r00+((gconst19*x707)));
evalcond[5]=(((new_r11*x707))+(((-1.0)*gconst19)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
CheckValue<IkReal> x710 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x710.valid){
continue;
}
IkReal x709=((-1.0)*(x710.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst19;
cj5=gconst20;
j5=x709;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst18=x709;
IkReal x711 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x711)==0){
continue;
}
IkReal gconst19=(new_r00*(pow(x711,-0.5)));
IkReal gconst20=0;
j3eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
CheckValue<IkReal> x713 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x713.valid){
continue;
}
IkReal x712=((-1.0)*(x713.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst19;
cj5=gconst20;
j5=x712;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst18=x712;
IkReal x714 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x714)==0){
continue;
}
IkReal gconst19=(new_r00*(pow(x714,-0.5)));
IkReal gconst20=0;
j3eval[0]=new_r00;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
CheckValue<IkReal> x716 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x716.valid){
continue;
}
IkReal x715=((-1.0)*(x716.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst19;
cj5=gconst20;
j5=x715;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst18=x715;
IkReal x717 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x717)==0){
continue;
}
IkReal gconst19=(new_r00*(pow(x717,-0.5)));
IkReal gconst20=0;
j3eval[0]=new_r00;
j3eval[1]=new_r01;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x718=IKPowWithIntegerCheck(new_r00,-1);
if(!x718.valid){
continue;
}
CheckValue<IkReal> x719=IKPowWithIntegerCheck(new_r01,-1);
if(!x719.valid){
continue;
}
if( IKabs(((-1.0)*gconst19*(x718.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((gconst19*(x719.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst19*(x718.value)))+IKsqr((gconst19*(x719.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.0)*gconst19*(x718.value)), (gconst19*(x719.value)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x720=IKcos(j3);
IkReal x721=IKsin(j3);
IkReal x722=((1.0)*gconst19);
IkReal x723=(gconst19*x721);
evalcond[0]=(new_r01*x721);
evalcond[1]=(new_r00*x720);
evalcond[2]=((-1.0)*gconst19*x720);
evalcond[3]=((-1.0)*x723);
evalcond[4]=(((new_r00*x721))+gconst19);
evalcond[5]=(x723+new_r00);
evalcond[6]=((((-1.0)*x720*x722))+new_r01);
evalcond[7]=(((new_r01*x720))+(((-1.0)*x722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x724=IKPowWithIntegerCheck(new_r00,-1);
if(!x724.valid){
continue;
}
CheckValue<IkReal> x725=IKPowWithIntegerCheck(gconst19,-1);
if(!x725.valid){
continue;
}
if( IKabs(((-1.0)*gconst19*(x724.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r01*(x725.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst19*(x724.value)))+IKsqr((new_r01*(x725.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.0)*gconst19*(x724.value)), (new_r01*(x725.value)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x726=IKcos(j3);
IkReal x727=IKsin(j3);
IkReal x728=((1.0)*gconst19);
IkReal x729=(gconst19*x727);
evalcond[0]=(new_r01*x727);
evalcond[1]=(new_r00*x726);
evalcond[2]=((-1.0)*gconst19*x726);
evalcond[3]=((-1.0)*x729);
evalcond[4]=(((new_r00*x727))+gconst19);
evalcond[5]=(x729+new_r00);
evalcond[6]=((((-1.0)*x726*x728))+new_r01);
evalcond[7]=(((new_r01*x726))+(((-1.0)*x728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x730=IKPowWithIntegerCheck(IKsign(gconst19),-1);
if(!x730.valid){
continue;
}
CheckValue<IkReal> x731 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x731.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x730.value)))+(x731.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x732=IKcos(j3);
IkReal x733=IKsin(j3);
IkReal x734=((1.0)*gconst19);
IkReal x735=(gconst19*x733);
evalcond[0]=(new_r01*x733);
evalcond[1]=(new_r00*x732);
evalcond[2]=((-1.0)*gconst19*x732);
evalcond[3]=((-1.0)*x735);
evalcond[4]=(gconst19+((new_r00*x733)));
evalcond[5]=(x735+new_r00);
evalcond[6]=((((-1.0)*x732*x734))+new_r01);
evalcond[7]=(((new_r01*x732))+(((-1.0)*x734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r10);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
CheckValue<IkReal> x737 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x737.valid){
continue;
}
IkReal x736=((-1.0)*(x737.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst19;
cj5=gconst20;
j5=x736;
new_r10=0;
IkReal gconst18=x736;
IkReal x738 = new_r00*new_r00;
if(IKabs(x738)==0){
continue;
}
IkReal gconst19=(new_r00*(pow(x738,-0.5)));
IkReal gconst20=0;
j3eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
CheckValue<IkReal> x740 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x740.valid){
continue;
}
IkReal x739=((-1.0)*(x740.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst19;
cj5=gconst20;
j5=x739;
new_r10=0;
IkReal gconst18=x739;
IkReal x741 = new_r00*new_r00;
if(IKabs(x741)==0){
continue;
}
IkReal gconst19=(new_r00*(pow(x741,-0.5)));
IkReal gconst20=0;
j3eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
CheckValue<IkReal> x743 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x743.valid){
continue;
}
IkReal x742=((-1.0)*(x743.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst19;
cj5=gconst20;
j5=x742;
new_r10=0;
IkReal gconst18=x742;
IkReal x744 = new_r00*new_r00;
if(IKabs(x744)==0){
continue;
}
IkReal gconst19=(new_r00*(pow(x744,-0.5)));
IkReal gconst20=0;
j3eval[0]=new_r00;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x745=IKPowWithIntegerCheck(new_r00,-1);
if(!x745.valid){
continue;
}
CheckValue<IkReal> x746=IKPowWithIntegerCheck(gconst19,-1);
if(!x746.valid){
continue;
}
if( IKabs(((-1.0)*gconst19*(x745.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r01*(x746.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst19*(x745.value)))+IKsqr((new_r01*(x746.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.0)*gconst19*(x745.value)), (new_r01*(x746.value)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x747=IKcos(j3);
IkReal x748=IKsin(j3);
IkReal x749=(gconst19*x748);
IkReal x750=((1.0)*x747);
evalcond[0]=(new_r00*x747);
evalcond[1]=((-1.0)*gconst19*x747);
evalcond[2]=(gconst19+((new_r00*x748)));
evalcond[3]=(x749+new_r00);
evalcond[4]=(new_r01+(((-1.0)*gconst19*x750)));
evalcond[5]=((((-1.0)*x749))+new_r11);
evalcond[6]=((((-1.0)*new_r11*x750))+((new_r01*x748)));
evalcond[7]=(((new_r01*x747))+((new_r11*x748))+(((-1.0)*gconst19)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x751=IKPowWithIntegerCheck(IKsign(gconst19),-1);
if(!x751.valid){
continue;
}
CheckValue<IkReal> x752 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x752.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x751.value)))+(x752.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x753=IKcos(j3);
IkReal x754=IKsin(j3);
IkReal x755=(gconst19*x754);
IkReal x756=((1.0)*x753);
evalcond[0]=(new_r00*x753);
evalcond[1]=((-1.0)*gconst19*x753);
evalcond[2]=(gconst19+((new_r00*x754)));
evalcond[3]=(x755+new_r00);
evalcond[4]=(new_r01+(((-1.0)*gconst19*x756)));
evalcond[5]=((((-1.0)*x755))+new_r11);
evalcond[6]=((((-1.0)*new_r11*x756))+((new_r01*x754)));
evalcond[7]=(((new_r11*x754))+((new_r01*x753))+(((-1.0)*gconst19)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x757=IKPowWithIntegerCheck(IKsign(gconst19),-1);
if(!x757.valid){
continue;
}
CheckValue<IkReal> x758 = IKatan2WithCheck(IkReal(new_r11),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x758.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x757.value)))+(x758.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x759=IKcos(j3);
IkReal x760=IKsin(j3);
IkReal x761=(gconst19*x760);
IkReal x762=((1.0)*x759);
evalcond[0]=(new_r00*x759);
evalcond[1]=((-1.0)*gconst19*x759);
evalcond[2]=(gconst19+((new_r00*x760)));
evalcond[3]=(x761+new_r00);
evalcond[4]=((((-1.0)*gconst19*x762))+new_r01);
evalcond[5]=((((-1.0)*x761))+new_r11);
evalcond[6]=((((-1.0)*new_r11*x762))+((new_r01*x760)));
evalcond[7]=(((new_r11*x760))+((new_r01*x759))+(((-1.0)*gconst19)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x763=((1.0)*gconst20);
CheckValue<IkReal> x764 = IKatan2WithCheck(IkReal(((((-1.0)*(new_r00*new_r00)))+(gconst20*gconst20))),IkReal(((((-1.0)*gconst19*x763))+((new_r00*new_r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x764.valid){
continue;
}
CheckValue<IkReal> x765=IKPowWithIntegerCheck(IKsign((((gconst19*new_r00))+(((-1.0)*new_r10*x763)))),-1);
if(!x765.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x764.value)+(((1.5707963267949)*(x765.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x766=IKcos(j3);
IkReal x767=IKsin(j3);
IkReal x768=(gconst20*x767);
IkReal x769=((1.0)*x766);
IkReal x770=(gconst19*x767);
IkReal x771=(gconst19*x769);
evalcond[0]=(((new_r10*x767))+gconst20+((new_r00*x766)));
evalcond[1]=(((gconst20*x766))+x770+new_r00);
evalcond[2]=(gconst19+(((-1.0)*new_r10*x769))+((new_r00*x767)));
evalcond[3]=(gconst20+(((-1.0)*new_r11*x769))+((new_r01*x767)));
evalcond[4]=(x768+(((-1.0)*x771))+new_r01);
evalcond[5]=(x768+(((-1.0)*x771))+new_r10);
evalcond[6]=(((new_r11*x767))+((new_r01*x766))+(((-1.0)*gconst19)));
evalcond[7]=((((-1.0)*gconst20*x769))+new_r11+(((-1.0)*x770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x772=((1.0)*gconst19);
CheckValue<IkReal> x773 = IKatan2WithCheck(IkReal((((new_r00*new_r11))+(gconst20*gconst20))),IkReal(((((-1.0)*gconst20*x772))+((new_r00*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x773.valid){
continue;
}
CheckValue<IkReal> x774=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst20*new_r01))+(((-1.0)*new_r11*x772)))),-1);
if(!x774.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x773.value)+(((1.5707963267949)*(x774.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x775=IKcos(j3);
IkReal x776=IKsin(j3);
IkReal x777=(gconst20*x776);
IkReal x778=((1.0)*x775);
IkReal x779=(gconst19*x776);
IkReal x780=(gconst19*x778);
evalcond[0]=(gconst20+((new_r00*x775))+((new_r10*x776)));
evalcond[1]=(((gconst20*x775))+x779+new_r00);
evalcond[2]=(gconst19+((new_r00*x776))+(((-1.0)*new_r10*x778)));
evalcond[3]=(gconst20+(((-1.0)*new_r11*x778))+((new_r01*x776)));
evalcond[4]=((((-1.0)*x780))+x777+new_r01);
evalcond[5]=((((-1.0)*x780))+x777+new_r10);
evalcond[6]=(((new_r11*x776))+((new_r01*x775))+(((-1.0)*gconst19)));
evalcond[7]=((((-1.0)*gconst20*x778))+new_r11+(((-1.0)*x779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x781=((1.0)*new_r10);
CheckValue<IkReal> x782=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r11*x781))+(((-1.0)*new_r00*new_r01)))),-1);
if(!x782.valid){
continue;
}
CheckValue<IkReal> x783 = IKatan2WithCheck(IkReal((((gconst20*new_r00))+((gconst20*new_r11)))),IkReal(((((-1.0)*gconst20*x781))+((gconst20*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x783.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x782.value)))+(x783.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x784=IKcos(j3);
IkReal x785=IKsin(j3);
IkReal x786=(gconst20*x785);
IkReal x787=((1.0)*x784);
IkReal x788=(gconst19*x785);
IkReal x789=(gconst19*x787);
evalcond[0]=(((new_r10*x785))+gconst20+((new_r00*x784)));
evalcond[1]=(((gconst20*x784))+x788+new_r00);
evalcond[2]=(gconst19+(((-1.0)*new_r10*x787))+((new_r00*x785)));
evalcond[3]=(gconst20+(((-1.0)*new_r11*x787))+((new_r01*x785)));
evalcond[4]=((((-1.0)*x789))+x786+new_r01);
evalcond[5]=((((-1.0)*x789))+x786+new_r10);
evalcond[6]=(((new_r11*x785))+((new_r01*x784))+(((-1.0)*gconst19)));
evalcond[7]=((((-1.0)*gconst20*x787))+(((-1.0)*x788))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x790=((-1.0)*new_r00);
IkReal x792 = ((new_r10*new_r10)+(new_r00*new_r00));
if(IKabs(x792)==0){
continue;
}
IkReal x791=pow(x792,-0.5);
CheckValue<IkReal> x793 = IKatan2WithCheck(IkReal(x790),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x793.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x793.value))));
IkReal gconst22=(x790*x791);
IkReal gconst23=((1.0)*new_r10*x791);
CheckValue<IkReal> x794 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x794.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x794.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
IkReal x795=((-1.0)*new_r00);
CheckValue<IkReal> x798 = IKatan2WithCheck(IkReal(x795),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x798.valid){
continue;
}
IkReal x796=((1.0)*(x798.value));
IkReal x797=x791;
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x796)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x796)));
IkReal gconst22=(x795*x797);
IkReal gconst23=((1.0)*new_r10*x797);
IkReal x799=new_r10*new_r10;
IkReal x800=(new_r10*new_r11);
IkReal x801=((((-1.0)*x800))+(((-1.0)*new_r00*new_r01)));
IkReal x802=x791;
IkReal x803=(new_r10*x802);
j3eval[0]=x801;
j3eval[1]=((IKabs((((x800*x802))+((new_r00*x803)))))+(IKabs(((((-1.0)*x799*x802))+((new_r01*x803))))));
j3eval[2]=IKsign(x801);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x804=((-1.0)*new_r00);
CheckValue<IkReal> x807 = IKatan2WithCheck(IkReal(x804),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x807.valid){
continue;
}
IkReal x805=((1.0)*(x807.value));
IkReal x806=x791;
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x805)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x805)));
IkReal gconst22=(x804*x806);
IkReal gconst23=((1.0)*new_r10*x806);
IkReal x808=new_r10*new_r10;
IkReal x809=new_r00*new_r00*new_r00;
CheckValue<IkReal> x813=IKPowWithIntegerCheck((x808+(new_r00*new_r00)),-1);
if(!x813.valid){
continue;
}
IkReal x810=x813.value;
IkReal x811=(x808*x810);
IkReal x812=(x809*x810);
j3eval[0]=((IKabs((((new_r11*x812))+((new_r00*new_r11*x811))+x811)))+(IKabs((((new_r00*new_r10*x810))+((new_r01*x812))+((new_r00*new_r01*x811))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x814=((-1.0)*new_r00);
CheckValue<IkReal> x817 = IKatan2WithCheck(IkReal(x814),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x817.valid){
continue;
}
IkReal x815=((1.0)*(x817.value));
IkReal x816=x791;
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x815)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x815)));
IkReal gconst22=(x814*x816);
IkReal gconst23=((1.0)*new_r10*x816);
IkReal x818=new_r10*new_r10;
IkReal x819=new_r00*new_r00;
CheckValue<IkReal> x823=IKPowWithIntegerCheck((x818+x819),-1);
if(!x823.valid){
continue;
}
IkReal x820=x823.value;
IkReal x821=(new_r10*x820);
IkReal x822=(x818*x820);
j3eval[0]=((IKabs((((new_r00*x821))+((x821*(new_r00*new_r00*new_r00)))+((new_r00*x821*(new_r10*new_r10))))))+(IKabs(((((-1.0)*x820*(x819*x819)))+(((-1.0)*x819*x822))+x822))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
CheckValue<IkReal> x825 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x825.valid){
continue;
}
IkReal x824=((1.0)*(x825.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x824)));
new_r11=0;
new_r00=0;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x824)));
IkReal gconst22=0;
IkReal x826 = new_r10*new_r10;
if(IKabs(x826)==0){
continue;
}
IkReal gconst23=((1.0)*new_r10*(pow(x826,-0.5)));
j3eval[0]=new_r01;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
CheckValue<IkReal> x828 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x828.valid){
continue;
}
IkReal x827=((1.0)*(x828.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x827)));
new_r11=0;
new_r00=0;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x827)));
IkReal gconst22=0;
IkReal x829 = new_r10*new_r10;
if(IKabs(x829)==0){
continue;
}
IkReal gconst23=((1.0)*new_r10*(pow(x829,-0.5)));
j3eval[0]=new_r10;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x830=IKPowWithIntegerCheck(gconst23,-1);
if(!x830.valid){
continue;
}
sj3array[0]=((-1.0)*new_r01*(x830.value));
if( sj3array[0] >= -1-IKFAST_SINCOS_THRESH && sj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKasin(sj3array[0]);
    cj3array[0] = IKcos(j3array[0]);
    sj3array[1] = sj3array[0];
    j3array[1] = j3array[0] > 0 ? (IKPI-j3array[0]) : (-IKPI-j3array[0]);
    cj3array[1] = -cj3array[0];
}
else if( isnan(sj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x831=IKcos(j3);
IkReal x832=IKsin(j3);
evalcond[0]=(gconst23*x831);
evalcond[1]=(new_r01*x831);
evalcond[2]=((-1.0)*new_r10*x831);
evalcond[3]=(((new_r01*x832))+gconst23);
evalcond[4]=(gconst23+((new_r10*x832)));
evalcond[5]=(new_r10+((gconst23*x832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x833=IKPowWithIntegerCheck(new_r10,-1);
if(!x833.valid){
continue;
}
sj3array[0]=((-1.0)*gconst23*(x833.value));
if( sj3array[0] >= -1-IKFAST_SINCOS_THRESH && sj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKasin(sj3array[0]);
    cj3array[0] = IKcos(j3array[0]);
    sj3array[1] = sj3array[0];
    j3array[1] = j3array[0] > 0 ? (IKPI-j3array[0]) : (-IKPI-j3array[0]);
    cj3array[1] = -cj3array[0];
}
else if( isnan(sj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x834=IKcos(j3);
IkReal x835=IKsin(j3);
IkReal x836=(gconst23*x835);
evalcond[0]=(gconst23*x834);
evalcond[1]=(new_r01*x834);
evalcond[2]=((-1.0)*new_r10*x834);
evalcond[3]=(((new_r01*x835))+gconst23);
evalcond[4]=(new_r01+x836);
evalcond[5]=(new_r10+x836);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x837=IKPowWithIntegerCheck(new_r01,-1);
if(!x837.valid){
continue;
}
sj3array[0]=((-1.0)*gconst23*(x837.value));
if( sj3array[0] >= -1-IKFAST_SINCOS_THRESH && sj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKasin(sj3array[0]);
    cj3array[0] = IKcos(j3array[0]);
    sj3array[1] = sj3array[0];
    j3array[1] = j3array[0] > 0 ? (IKPI-j3array[0]) : (-IKPI-j3array[0]);
    cj3array[1] = -cj3array[0];
}
else if( isnan(sj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x838=IKcos(j3);
IkReal x839=IKsin(j3);
IkReal x840=(gconst23*x839);
evalcond[0]=(gconst23*x838);
evalcond[1]=(new_r01*x838);
evalcond[2]=((-1.0)*new_r10*x838);
evalcond[3]=(gconst23+((new_r10*x839)));
evalcond[4]=(new_r01+x840);
evalcond[5]=(new_r10+x840);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
evalcond[1]=gconst23;
evalcond[2]=gconst22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[4];
IkReal x841=((-1.0)*new_r00);
CheckValue<IkReal> x843 = IKatan2WithCheck(IkReal(x841),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x843.valid){
continue;
}
IkReal x842=((1.0)*(x843.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x842)));
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x842)));
IkReal gconst22=x841;
IkReal gconst23=((1.0)*new_r10);
j3eval[0]=-1.0;
j3eval[1]=new_r10;
j3eval[2]=1.0;
j3eval[3]=-1.0;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  || IKabs(j3eval[3]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x844=((-1.0)*new_r00);
CheckValue<IkReal> x846 = IKatan2WithCheck(IkReal(x844),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x846.valid){
continue;
}
IkReal x845=((1.0)*(x846.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x845)));
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x845)));
IkReal gconst22=x844;
IkReal gconst23=((1.0)*new_r10);
j3eval[0]=-1.0;
j3eval[1]=((IKabs(((1.0)*new_r00*new_r10)))+(IKabs(((-1.0)+(new_r10*new_r10)))));
j3eval[2]=-1.0;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x847=((-1.0)*new_r00);
CheckValue<IkReal> x849 = IKatan2WithCheck(IkReal(x847),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x849.valid){
continue;
}
IkReal x848=((1.0)*(x849.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x848)));
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x848)));
IkReal gconst22=x847;
IkReal gconst23=((1.0)*new_r10);
j3eval[0]=-1.0;
j3eval[1]=((IKabs(((-1.0)+(((2.0)*(new_r10*new_r10))))))+(IKabs(((2.0)*new_r00*new_r10))));
j3eval[2]=-1.0;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x850=((1.0)*gconst23);
CheckValue<IkReal> x851 = IKatan2WithCheck(IkReal(((gconst23*gconst23)+(((-1.0)*(new_r00*new_r00))))),IkReal((((new_r00*new_r10))+(((-1.0)*gconst22*x850)))),IKFAST_ATAN2_MAGTHRESH);
if(!x851.valid){
continue;
}
CheckValue<IkReal> x852=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r10*x850))+((gconst22*new_r00)))),-1);
if(!x852.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x851.value)+(((1.5707963267949)*(x852.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x853=IKsin(j3);
IkReal x854=IKcos(j3);
IkReal x855=((1.0)*gconst22);
IkReal x856=(gconst23*x853);
IkReal x857=(gconst23*x854);
IkReal x858=(x854*x855);
evalcond[0]=(gconst23+((new_r10*x853))+((new_r00*x854)));
evalcond[1]=(new_r00+x857+((gconst22*x853)));
evalcond[2]=((((-1.0)*x858))+x856);
evalcond[3]=(gconst22+(((-1.0)*new_r10*x854))+((new_r00*x853)));
evalcond[4]=((((-1.0)*x858))+new_r10+x856);
evalcond[5]=((((-1.0)*x853*x855))+(((-1.0)*x857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x859=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst22*gconst22)))+(((-1.0)*(gconst23*gconst23))))),-1);
if(!x859.valid){
continue;
}
CheckValue<IkReal> x860 = IKatan2WithCheck(IkReal((gconst22*new_r00)),IkReal((gconst23*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x860.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x859.value)))+(x860.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x861=IKsin(j3);
IkReal x862=IKcos(j3);
IkReal x863=((1.0)*gconst22);
IkReal x864=(gconst23*x861);
IkReal x865=(gconst23*x862);
IkReal x866=(x862*x863);
evalcond[0]=(((new_r00*x862))+gconst23+((new_r10*x861)));
evalcond[1]=(new_r00+x865+((gconst22*x861)));
evalcond[2]=((((-1.0)*x866))+x864);
evalcond[3]=(((new_r00*x861))+(((-1.0)*new_r10*x862))+gconst22);
evalcond[4]=((((-1.0)*x866))+new_r10+x864);
evalcond[5]=((((-1.0)*x865))+(((-1.0)*x861*x863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x867 = IKatan2WithCheck(IkReal(gconst23*gconst23),IkReal(((-1.0)*gconst22*gconst23)),IKFAST_ATAN2_MAGTHRESH);
if(!x867.valid){
continue;
}
CheckValue<IkReal> x868=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst23*new_r10))+((gconst22*new_r00)))),-1);
if(!x868.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x867.value)+(((1.5707963267949)*(x868.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x869=IKsin(j3);
IkReal x870=IKcos(j3);
IkReal x871=((1.0)*gconst22);
IkReal x872=(gconst23*x869);
IkReal x873=(gconst23*x870);
IkReal x874=(x870*x871);
evalcond[0]=(((new_r00*x870))+gconst23+((new_r10*x869)));
evalcond[1]=(new_r00+x873+((gconst22*x869)));
evalcond[2]=(x872+(((-1.0)*x874)));
evalcond[3]=(((new_r00*x869))+gconst22+(((-1.0)*new_r10*x870)));
evalcond[4]=(new_r10+x872+(((-1.0)*x874)));
evalcond[5]=((((-1.0)*x869*x871))+(((-1.0)*x873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x875=IKPowWithIntegerCheck(gconst22,-1);
if(!x875.valid){
continue;
}
sj3array[0]=(new_r11*(x875.value));
if( sj3array[0] >= -1-IKFAST_SINCOS_THRESH && sj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKasin(sj3array[0]);
    cj3array[0] = IKcos(j3array[0]);
    sj3array[1] = sj3array[0];
    j3array[1] = j3array[0] > 0 ? (IKPI-j3array[0]) : (-IKPI-j3array[0]);
    cj3array[1] = -cj3array[0];
}
else if( isnan(sj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x876=IKcos(j3);
IkReal x877=IKsin(j3);
IkReal x878=((-1.0)*x876);
evalcond[0]=(new_r00*x876);
evalcond[1]=(new_r11*x878);
evalcond[2]=(gconst22*x878);
evalcond[3]=(((new_r00*x877))+gconst22);
evalcond[4]=(new_r00+((gconst22*x877)));
evalcond[5]=(((new_r11*x877))+(((-1.0)*gconst22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
IkReal x879=((-1.0)*new_r00);
CheckValue<IkReal> x881 = IKatan2WithCheck(IkReal(x879),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x881.valid){
continue;
}
IkReal x880=((1.0)*(x881.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x880)));
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x880)));
IkReal x882 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x882)==0){
continue;
}
IkReal gconst22=(x879*(pow(x882,-0.5)));
IkReal gconst23=0;
j3eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x883=((-1.0)*new_r00);
CheckValue<IkReal> x885 = IKatan2WithCheck(IkReal(x883),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x885.valid){
continue;
}
IkReal x884=((1.0)*(x885.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x884)));
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x884)));
IkReal x886 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x886)==0){
continue;
}
IkReal gconst22=(x883*(pow(x886,-0.5)));
IkReal gconst23=0;
j3eval[0]=new_r00;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
IkReal x887=((-1.0)*new_r00);
CheckValue<IkReal> x889 = IKatan2WithCheck(IkReal(x887),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x889.valid){
continue;
}
IkReal x888=((1.0)*(x889.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x888)));
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x888)));
IkReal x890 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x890)==0){
continue;
}
IkReal gconst22=(x887*(pow(x890,-0.5)));
IkReal gconst23=0;
j3eval[0]=new_r00;
j3eval[1]=new_r01;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x891=IKPowWithIntegerCheck(new_r00,-1);
if(!x891.valid){
continue;
}
CheckValue<IkReal> x892=IKPowWithIntegerCheck(new_r01,-1);
if(!x892.valid){
continue;
}
if( IKabs(((-1.0)*gconst22*(x891.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((gconst22*(x892.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst22*(x891.value)))+IKsqr((gconst22*(x892.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.0)*gconst22*(x891.value)), (gconst22*(x892.value)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x893=IKcos(j3);
IkReal x894=IKsin(j3);
IkReal x895=(gconst22*x893);
IkReal x896=(gconst22*x894);
evalcond[0]=(new_r01*x894);
evalcond[1]=(new_r00*x893);
evalcond[2]=((-1.0)*x895);
evalcond[3]=((-1.0)*x896);
evalcond[4]=(((new_r00*x894))+gconst22);
evalcond[5]=(new_r00+x896);
evalcond[6]=((((-1.0)*x895))+new_r01);
evalcond[7]=(((new_r01*x893))+(((-1.0)*gconst22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x897=IKPowWithIntegerCheck(new_r00,-1);
if(!x897.valid){
continue;
}
CheckValue<IkReal> x898=IKPowWithIntegerCheck(gconst22,-1);
if(!x898.valid){
continue;
}
if( IKabs(((-1.0)*gconst22*(x897.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r01*(x898.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst22*(x897.value)))+IKsqr((new_r01*(x898.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.0)*gconst22*(x897.value)), (new_r01*(x898.value)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x899=IKcos(j3);
IkReal x900=IKsin(j3);
IkReal x901=(gconst22*x899);
IkReal x902=(gconst22*x900);
evalcond[0]=(new_r01*x900);
evalcond[1]=(new_r00*x899);
evalcond[2]=((-1.0)*x901);
evalcond[3]=((-1.0)*x902);
evalcond[4]=(gconst22+((new_r00*x900)));
evalcond[5]=(new_r00+x902);
evalcond[6]=((((-1.0)*x901))+new_r01);
evalcond[7]=(((new_r01*x899))+(((-1.0)*gconst22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x903=IKPowWithIntegerCheck(IKsign(gconst22),-1);
if(!x903.valid){
continue;
}
CheckValue<IkReal> x904 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x904.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x903.value)))+(x904.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x905=IKcos(j3);
IkReal x906=IKsin(j3);
IkReal x907=(gconst22*x905);
IkReal x908=(gconst22*x906);
evalcond[0]=(new_r01*x906);
evalcond[1]=(new_r00*x905);
evalcond[2]=((-1.0)*x907);
evalcond[3]=((-1.0)*x908);
evalcond[4]=(gconst22+((new_r00*x906)));
evalcond[5]=(new_r00+x908);
evalcond[6]=((((-1.0)*x907))+new_r01);
evalcond[7]=(((new_r01*x905))+(((-1.0)*gconst22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r10);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
IkReal x909=((-1.0)*new_r00);
CheckValue<IkReal> x911 = IKatan2WithCheck(IkReal(x909),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x911.valid){
continue;
}
IkReal x910=((1.0)*(x911.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x910)));
new_r10=0;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x910)));
IkReal x912 = new_r00*new_r00;
if(IKabs(x912)==0){
continue;
}
IkReal gconst22=(x909*(pow(x912,-0.5)));
IkReal gconst23=0;
j3eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x913=((-1.0)*new_r00);
CheckValue<IkReal> x915 = IKatan2WithCheck(IkReal(x913),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x915.valid){
continue;
}
IkReal x914=((1.0)*(x915.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x914)));
new_r10=0;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x914)));
IkReal x916 = new_r00*new_r00;
if(IKabs(x916)==0){
continue;
}
IkReal gconst22=(x913*(pow(x916,-0.5)));
IkReal gconst23=0;
j3eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x917=((-1.0)*new_r00);
CheckValue<IkReal> x919 = IKatan2WithCheck(IkReal(x917),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x919.valid){
continue;
}
IkReal x918=((1.0)*(x919.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x918)));
new_r10=0;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x918)));
IkReal x920 = new_r00*new_r00;
if(IKabs(x920)==0){
continue;
}
IkReal gconst22=(x917*(pow(x920,-0.5)));
IkReal gconst23=0;
j3eval[0]=new_r00;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x921=IKPowWithIntegerCheck(new_r00,-1);
if(!x921.valid){
continue;
}
CheckValue<IkReal> x922=IKPowWithIntegerCheck(gconst22,-1);
if(!x922.valid){
continue;
}
if( IKabs(((-1.0)*gconst22*(x921.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r01*(x922.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst22*(x921.value)))+IKsqr((new_r01*(x922.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.0)*gconst22*(x921.value)), (new_r01*(x922.value)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x923=IKcos(j3);
IkReal x924=IKsin(j3);
IkReal x925=(gconst22*x924);
IkReal x926=((1.0)*x923);
evalcond[0]=(new_r00*x923);
evalcond[1]=((-1.0)*gconst22*x923);
evalcond[2]=(gconst22+((new_r00*x924)));
evalcond[3]=(new_r00+x925);
evalcond[4]=((((-1.0)*gconst22*x926))+new_r01);
evalcond[5]=((((-1.0)*x925))+new_r11);
evalcond[6]=((((-1.0)*new_r11*x926))+((new_r01*x924)));
evalcond[7]=(((new_r01*x923))+((new_r11*x924))+(((-1.0)*gconst22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x927=IKPowWithIntegerCheck(IKsign(gconst22),-1);
if(!x927.valid){
continue;
}
CheckValue<IkReal> x928 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x928.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x927.value)))+(x928.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x929=IKcos(j3);
IkReal x930=IKsin(j3);
IkReal x931=(gconst22*x930);
IkReal x932=((1.0)*x929);
evalcond[0]=(new_r00*x929);
evalcond[1]=((-1.0)*gconst22*x929);
evalcond[2]=(gconst22+((new_r00*x930)));
evalcond[3]=(new_r00+x931);
evalcond[4]=((((-1.0)*gconst22*x932))+new_r01);
evalcond[5]=((((-1.0)*x931))+new_r11);
evalcond[6]=((((-1.0)*new_r11*x932))+((new_r01*x930)));
evalcond[7]=(((new_r01*x929))+((new_r11*x930))+(((-1.0)*gconst22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x933=IKPowWithIntegerCheck(IKsign(gconst22),-1);
if(!x933.valid){
continue;
}
CheckValue<IkReal> x934 = IKatan2WithCheck(IkReal(new_r11),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x934.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x933.value)))+(x934.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x935=IKcos(j3);
IkReal x936=IKsin(j3);
IkReal x937=(gconst22*x936);
IkReal x938=((1.0)*x935);
evalcond[0]=(new_r00*x935);
evalcond[1]=((-1.0)*gconst22*x935);
evalcond[2]=(gconst22+((new_r00*x936)));
evalcond[3]=(new_r00+x937);
evalcond[4]=((((-1.0)*gconst22*x938))+new_r01);
evalcond[5]=((((-1.0)*x937))+new_r11);
evalcond[6]=((((-1.0)*new_r11*x938))+((new_r01*x936)));
evalcond[7]=(((new_r01*x935))+((new_r11*x936))+(((-1.0)*gconst22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x939=((1.0)*gconst23);
CheckValue<IkReal> x940 = IKatan2WithCheck(IkReal(((gconst23*gconst23)+(((-1.0)*(new_r00*new_r00))))),IkReal(((((-1.0)*gconst22*x939))+((new_r00*new_r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x940.valid){
continue;
}
CheckValue<IkReal> x941=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r10*x939))+((gconst22*new_r00)))),-1);
if(!x941.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x940.value)+(((1.5707963267949)*(x941.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x942=IKsin(j3);
IkReal x943=IKcos(j3);
IkReal x944=((1.0)*gconst22);
IkReal x945=(gconst23*x942);
IkReal x946=((1.0)*x943);
IkReal x947=(x943*x944);
evalcond[0]=(((new_r00*x943))+gconst23+((new_r10*x942)));
evalcond[1]=(((gconst23*x943))+new_r00+((gconst22*x942)));
evalcond[2]=(((new_r00*x942))+gconst22+(((-1.0)*new_r10*x946)));
evalcond[3]=(((new_r01*x942))+gconst23+(((-1.0)*new_r11*x946)));
evalcond[4]=((((-1.0)*x947))+new_r01+x945);
evalcond[5]=((((-1.0)*x947))+new_r10+x945);
evalcond[6]=((((-1.0)*x944))+((new_r01*x943))+((new_r11*x942)));
evalcond[7]=((((-1.0)*gconst23*x946))+(((-1.0)*x942*x944))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x948=((1.0)*gconst22);
CheckValue<IkReal> x949 = IKatan2WithCheck(IkReal((((new_r00*new_r11))+(gconst23*gconst23))),IkReal(((((-1.0)*gconst23*x948))+((new_r00*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x949.valid){
continue;
}
CheckValue<IkReal> x950=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r11*x948))+(((-1.0)*gconst23*new_r01)))),-1);
if(!x950.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x949.value)+(((1.5707963267949)*(x950.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x951=IKsin(j3);
IkReal x952=IKcos(j3);
IkReal x953=((1.0)*gconst22);
IkReal x954=(gconst23*x951);
IkReal x955=((1.0)*x952);
IkReal x956=(x952*x953);
evalcond[0]=(((new_r10*x951))+((new_r00*x952))+gconst23);
evalcond[1]=(((gconst23*x952))+new_r00+((gconst22*x951)));
evalcond[2]=(((new_r00*x951))+gconst22+(((-1.0)*new_r10*x955)));
evalcond[3]=(((new_r01*x951))+gconst23+(((-1.0)*new_r11*x955)));
evalcond[4]=(new_r01+(((-1.0)*x956))+x954);
evalcond[5]=(new_r10+(((-1.0)*x956))+x954);
evalcond[6]=(((new_r01*x952))+(((-1.0)*x953))+((new_r11*x951)));
evalcond[7]=((((-1.0)*x951*x953))+new_r11+(((-1.0)*gconst23*x955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x957=((1.0)*new_r10);
CheckValue<IkReal> x958 = IKatan2WithCheck(IkReal((((gconst23*new_r11))+((gconst23*new_r00)))),IkReal((((gconst23*new_r01))+(((-1.0)*gconst23*x957)))),IKFAST_ATAN2_MAGTHRESH);
if(!x958.valid){
continue;
}
CheckValue<IkReal> x959=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r11*x957))+(((-1.0)*new_r00*new_r01)))),-1);
if(!x959.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x958.value)+(((1.5707963267949)*(x959.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x960=IKsin(j3);
IkReal x961=IKcos(j3);
IkReal x962=((1.0)*gconst22);
IkReal x963=(gconst23*x960);
IkReal x964=((1.0)*x961);
IkReal x965=(x961*x962);
evalcond[0]=(((new_r00*x961))+gconst23+((new_r10*x960)));
evalcond[1]=(((gconst22*x960))+((gconst23*x961))+new_r00);
evalcond[2]=(((new_r00*x960))+gconst22+(((-1.0)*new_r10*x964)));
evalcond[3]=(((new_r01*x960))+gconst23+(((-1.0)*new_r11*x964)));
evalcond[4]=(new_r01+x963+(((-1.0)*x965)));
evalcond[5]=(new_r10+x963+(((-1.0)*x965)));
evalcond[6]=(((new_r11*x960))+((new_r01*x961))+(((-1.0)*x962)));
evalcond[7]=((((-1.0)*x960*x962))+new_r11+(((-1.0)*gconst23*x964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.0)*new_r00), new_r01);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x966=IKsin(j3);
IkReal x967=IKcos(j3);
IkReal x968=((1.0)*x967);
evalcond[0]=(new_r00+x966);
evalcond[1]=(new_r01+(((-1.0)*x968)));
evalcond[2]=(new_r10+(((-1.0)*x968)));
evalcond[3]=((((-1.0)*x966))+new_r11);
evalcond[4]=(((new_r00*x967))+((new_r10*x966)));
evalcond[5]=(((new_r01*x966))+(((-1.0)*new_r11*x968)));
evalcond[6]=((-1.0)+((new_r11*x966))+((new_r01*x967)));
evalcond[7]=((1.0)+((new_r00*x966))+(((-1.0)*new_r10*x968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.0)*new_r11), ((-1.0)*new_r01));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x969=IKcos(j3);
IkReal x970=IKsin(j3);
IkReal x971=((1.0)*x969);
evalcond[0]=(new_r01+x969);
evalcond[1]=(new_r10+x969);
evalcond[2]=(new_r11+x970);
evalcond[3]=((((-1.0)*x970))+new_r00);
evalcond[4]=(((new_r00*x969))+((new_r10*x970)));
evalcond[5]=(((new_r01*x970))+(((-1.0)*new_r11*x971)));
evalcond[6]=((1.0)+((new_r01*x969))+((new_r11*x970)));
evalcond[7]=((-1.0)+(((-1.0)*new_r10*x971))+((new_r00*x970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj4=0;
cj4=1.0;
j4=0;
new_r11=0;
new_r00=0;
j3eval[0]=new_r10;
j3eval[1]=IKsign(new_r10);
j3eval[2]=((IKabs(cj5))+(IKabs(sj5)));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj4=0;
cj4=1.0;
j4=0;
new_r11=0;
new_r00=0;
j3eval[0]=new_r01;
j3eval[1]=IKsign(new_r01);
j3eval[2]=((IKabs(cj5))+(IKabs(sj5)));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj4=0;
cj4=1.0;
j4=0;
new_r11=0;
new_r00=0;
j3eval[0]=new_r01;
j3eval[1]=new_r10;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x972=IKPowWithIntegerCheck(new_r01,-1);
if(!x972.valid){
continue;
}
CheckValue<IkReal> x973=IKPowWithIntegerCheck(new_r10,-1);
if(!x973.valid){
continue;
}
if( IKabs(((-1.0)*cj5*(x972.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj5*(x973.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj5*(x972.value)))+IKsqr((sj5*(x973.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.0)*cj5*(x972.value)), (sj5*(x973.value)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[7];
IkReal x974=IKsin(j3);
IkReal x975=IKcos(j3);
IkReal x976=((1.0)*sj5);
IkReal x977=(cj5*x974);
IkReal x978=(x975*x976);
evalcond[0]=(((new_r01*x974))+cj5);
evalcond[1]=(cj5+((new_r10*x974)));
evalcond[2]=(sj5+(((-1.0)*new_r10*x975)));
evalcond[3]=(((new_r01*x975))+(((-1.0)*x976)));
evalcond[4]=(((cj5*x975))+((sj5*x974)));
evalcond[5]=(new_r01+x977+(((-1.0)*x978)));
evalcond[6]=(new_r10+x977+(((-1.0)*x978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x979=IKPowWithIntegerCheck(IKsign(new_r01),-1);
if(!x979.valid){
continue;
}
CheckValue<IkReal> x980 = IKatan2WithCheck(IkReal(((-1.0)*cj5)),IkReal(sj5),IKFAST_ATAN2_MAGTHRESH);
if(!x980.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x979.value)))+(x980.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[7];
IkReal x981=IKsin(j3);
IkReal x982=IKcos(j3);
IkReal x983=((1.0)*sj5);
IkReal x984=(cj5*x981);
IkReal x985=(x982*x983);
evalcond[0]=(cj5+((new_r01*x981)));
evalcond[1]=(cj5+((new_r10*x981)));
evalcond[2]=(sj5+(((-1.0)*new_r10*x982)));
evalcond[3]=((((-1.0)*x983))+((new_r01*x982)));
evalcond[4]=(((cj5*x982))+((sj5*x981)));
evalcond[5]=((((-1.0)*x985))+new_r01+x984);
evalcond[6]=((((-1.0)*x985))+new_r10+x984);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x986=IKPowWithIntegerCheck(IKsign(new_r10),-1);
if(!x986.valid){
continue;
}
CheckValue<IkReal> x987 = IKatan2WithCheck(IkReal(((-1.0)*cj5)),IkReal(sj5),IKFAST_ATAN2_MAGTHRESH);
if(!x987.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x986.value)))+(x987.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[7];
IkReal x988=IKsin(j3);
IkReal x989=IKcos(j3);
IkReal x990=((1.0)*sj5);
IkReal x991=(cj5*x988);
IkReal x992=(x989*x990);
evalcond[0]=(cj5+((new_r01*x988)));
evalcond[1]=(cj5+((new_r10*x988)));
evalcond[2]=(sj5+(((-1.0)*new_r10*x989)));
evalcond[3]=((((-1.0)*x990))+((new_r01*x989)));
evalcond[4]=(((cj5*x989))+((sj5*x988)));
evalcond[5]=((((-1.0)*x992))+new_r01+x991);
evalcond[6]=((((-1.0)*x992))+new_r10+x991);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
sj4=0;
cj4=1.0;
j4=0;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
j3eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j3]

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x994 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x994.valid){
continue;
}
IkReal x993=x994.value;
j3array[0]=((-1.0)*x993);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x993)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=(((new_r00*(IKsin(j3))))+(((-1.0)*new_r10*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
sj4=0;
cj4=1.0;
j4=0;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
j3eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j3]

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x996 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x996.valid){
continue;
}
IkReal x995=x996.value;
j3array[0]=((-1.0)*x995);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x995)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=(((new_r01*(IKsin(j3))))+(((-1.0)*new_r11*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj4=0;
cj4=1.0;
j4=0;
new_r01=0;
new_r10=0;
j3eval[0]=new_r00;
j3eval[1]=IKsign(new_r00);
j3eval[2]=((IKabs(cj5))+(IKabs(sj5)));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj4=0;
cj4=1.0;
j4=0;
new_r01=0;
new_r10=0;
j3eval[0]=new_r00;
j3eval[1]=new_r11;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj4=0;
cj4=1.0;
j4=0;
new_r01=0;
new_r10=0;
j3eval[0]=new_r00;
j3eval[1]=cj5;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
sj3array[0]=new_r11;
if( sj3array[0] >= -1-IKFAST_SINCOS_THRESH && sj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKasin(sj3array[0]);
    cj3array[0] = IKcos(j3array[0]);
    sj3array[1] = sj3array[0];
    j3array[1] = j3array[0] > 0 ? (IKPI-j3array[0]) : (-IKPI-j3array[0]);
    cj3array[1] = -cj3array[0];
}
else if( isnan(sj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x997=IKcos(j3);
IkReal x998=IKsin(j3);
IkReal x999=((-1.0)*x997);
evalcond[0]=(new_r00*x997);
evalcond[1]=(new_r00+x998);
evalcond[2]=x999;
evalcond[3]=(new_r11*x999);
evalcond[4]=((1.0)+((new_r00*x998)));
evalcond[5]=((-1.0)+((new_r11*x998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
sj3array[0]=new_r00;
if( sj3array[0] >= -1-IKFAST_SINCOS_THRESH && sj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKasin(sj3array[0]);
    cj3array[0] = IKcos(j3array[0]);
    sj3array[1] = sj3array[0];
    j3array[1] = j3array[0] > 0 ? (IKPI-j3array[0]) : (-IKPI-j3array[0]);
    cj3array[1] = -cj3array[0];
}
else if( isnan(sj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1000=IKcos(j3);
IkReal x1001=IKsin(j3);
evalcond[0]=x1000;
evalcond[1]=(new_r00*x1000);
evalcond[2]=(x1001+new_r11);
evalcond[3]=((-1.0)*new_r11*x1000);
evalcond[4]=((-1.0)+((new_r00*x1001)));
evalcond[5]=((1.0)+((new_r11*x1001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1003=IKPowWithIntegerCheck(new_r00,-1);
if(!x1003.valid){
continue;
}
IkReal x1002=x1003.value;
CheckValue<IkReal> x1004=IKPowWithIntegerCheck(cj5,-1);
if(!x1004.valid){
continue;
}
CheckValue<IkReal> x1005=IKPowWithIntegerCheck(x1002,-2);
if(!x1005.valid){
continue;
}
if( IKabs(((-1.0)*sj5*x1002)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1002*(x1004.value)*(((1.0)+(((-1.0)*(cj5*cj5)))+(((-1.0)*(x1005.value))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj5*x1002))+IKsqr((x1002*(x1004.value)*(((1.0)+(((-1.0)*(cj5*cj5)))+(((-1.0)*(x1005.value)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.0)*sj5*x1002), (x1002*(x1004.value)*(((1.0)+(((-1.0)*(cj5*cj5)))+(((-1.0)*(x1005.value)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[7];
IkReal x1006=IKcos(j3);
IkReal x1007=IKsin(j3);
IkReal x1008=((1.0)*sj5);
IkReal x1009=(cj5*x1006);
IkReal x1010=((1.0)*x1006);
evalcond[0]=(sj5+((new_r00*x1007)));
evalcond[1]=(cj5+((new_r00*x1006)));
evalcond[2]=(cj5+(((-1.0)*new_r11*x1010)));
evalcond[3]=((((-1.0)*x1008))+((new_r11*x1007)));
evalcond[4]=(x1009+((sj5*x1007))+new_r00);
evalcond[5]=(((cj5*x1007))+(((-1.0)*x1006*x1008)));
evalcond[6]=((((-1.0)*x1009))+(((-1.0)*x1007*x1008))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1011=IKPowWithIntegerCheck(new_r00,-1);
if(!x1011.valid){
continue;
}
CheckValue<IkReal> x1012=IKPowWithIntegerCheck(new_r11,-1);
if(!x1012.valid){
continue;
}
if( IKabs(((-1.0)*sj5*(x1011.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj5*(x1012.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj5*(x1011.value)))+IKsqr((cj5*(x1012.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.0)*sj5*(x1011.value)), (cj5*(x1012.value)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[7];
IkReal x1013=IKcos(j3);
IkReal x1014=IKsin(j3);
IkReal x1015=((1.0)*sj5);
IkReal x1016=(cj5*x1013);
IkReal x1017=((1.0)*x1013);
evalcond[0]=(sj5+((new_r00*x1014)));
evalcond[1]=(cj5+((new_r00*x1013)));
evalcond[2]=(cj5+(((-1.0)*new_r11*x1017)));
evalcond[3]=(((new_r11*x1014))+(((-1.0)*x1015)));
evalcond[4]=(x1016+((sj5*x1014))+new_r00);
evalcond[5]=(((cj5*x1014))+(((-1.0)*x1013*x1015)));
evalcond[6]=((((-1.0)*x1014*x1015))+new_r11+(((-1.0)*x1016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1018 = IKatan2WithCheck(IkReal(((-1.0)*sj5)),IkReal(((-1.0)*cj5)),IKFAST_ATAN2_MAGTHRESH);
if(!x1018.valid){
continue;
}
CheckValue<IkReal> x1019=IKPowWithIntegerCheck(IKsign(new_r00),-1);
if(!x1019.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1018.value)+(((1.5707963267949)*(x1019.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[7];
IkReal x1020=IKcos(j3);
IkReal x1021=IKsin(j3);
IkReal x1022=((1.0)*sj5);
IkReal x1023=(cj5*x1020);
IkReal x1024=((1.0)*x1020);
evalcond[0]=(sj5+((new_r00*x1021)));
evalcond[1]=(cj5+((new_r00*x1020)));
evalcond[2]=(cj5+(((-1.0)*new_r11*x1024)));
evalcond[3]=(((new_r11*x1021))+(((-1.0)*x1022)));
evalcond[4]=(x1023+new_r00+((sj5*x1021)));
evalcond[5]=(((cj5*x1021))+(((-1.0)*x1020*x1022)));
evalcond[6]=((((-1.0)*x1023))+(((-1.0)*x1021*x1022))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1025=((1.0)*new_r00);
CheckValue<IkReal> x1026 = IKatan2WithCheck(IkReal(((((-1.0)*(cj5*cj5)))+(new_r00*new_r00))),IkReal((((cj5*sj5))+(((-1.0)*new_r10*x1025)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1026.valid){
continue;
}
CheckValue<IkReal> x1027=IKPowWithIntegerCheck(IKsign((((cj5*new_r10))+(((-1.0)*sj5*x1025)))),-1);
if(!x1027.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1026.value)+(((1.5707963267949)*(x1027.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1028=IKsin(j3);
IkReal x1029=IKcos(j3);
IkReal x1030=((1.0)*sj5);
IkReal x1031=(cj5*x1028);
IkReal x1032=((1.0)*x1029);
IkReal x1033=(x1029*x1030);
evalcond[0]=(((new_r10*x1028))+cj5+((new_r00*x1029)));
evalcond[1]=(((cj5*x1029))+new_r00+((sj5*x1028)));
evalcond[2]=(sj5+(((-1.0)*new_r10*x1032))+((new_r00*x1028)));
evalcond[3]=(cj5+(((-1.0)*new_r11*x1032))+((new_r01*x1028)));
evalcond[4]=((((-1.0)*x1033))+x1031+new_r01);
evalcond[5]=((((-1.0)*x1033))+x1031+new_r10);
evalcond[6]=((((-1.0)*x1030))+((new_r11*x1028))+((new_r01*x1029)));
evalcond[7]=((((-1.0)*x1028*x1030))+(((-1.0)*cj5*x1032))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1034=((1.0)*new_r10);
CheckValue<IkReal> x1035 = IKatan2WithCheck(IkReal((((new_r00*new_r01))+((cj5*sj5)))),IkReal(((cj5*cj5)+(((-1.0)*new_r01*x1034)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1035.valid){
continue;
}
CheckValue<IkReal> x1036=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*new_r00))+(((-1.0)*sj5*x1034)))),-1);
if(!x1036.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1035.value)+(((1.5707963267949)*(x1036.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1037=IKsin(j3);
IkReal x1038=IKcos(j3);
IkReal x1039=((1.0)*sj5);
IkReal x1040=(cj5*x1037);
IkReal x1041=((1.0)*x1038);
IkReal x1042=(x1038*x1039);
evalcond[0]=(cj5+((new_r10*x1037))+((new_r00*x1038)));
evalcond[1]=(((cj5*x1038))+((sj5*x1037))+new_r00);
evalcond[2]=(sj5+((new_r00*x1037))+(((-1.0)*new_r10*x1041)));
evalcond[3]=(cj5+((new_r01*x1037))+(((-1.0)*new_r11*x1041)));
evalcond[4]=(x1040+new_r01+(((-1.0)*x1042)));
evalcond[5]=(x1040+new_r10+(((-1.0)*x1042)));
evalcond[6]=((((-1.0)*x1039))+((new_r11*x1037))+((new_r01*x1038)));
evalcond[7]=((((-1.0)*x1037*x1039))+(((-1.0)*cj5*x1041))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1043=((1.0)*new_r10);
CheckValue<IkReal> x1044=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r00*new_r01))+(((-1.0)*new_r11*x1043)))),-1);
if(!x1044.valid){
continue;
}
CheckValue<IkReal> x1045 = IKatan2WithCheck(IkReal((((cj5*new_r11))+((cj5*new_r00)))),IkReal((((cj5*new_r01))+(((-1.0)*cj5*x1043)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1045.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1044.value)))+(x1045.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1046=IKsin(j3);
IkReal x1047=IKcos(j3);
IkReal x1048=((1.0)*sj5);
IkReal x1049=(cj5*x1046);
IkReal x1050=((1.0)*x1047);
IkReal x1051=(x1047*x1048);
evalcond[0]=(cj5+((new_r00*x1047))+((new_r10*x1046)));
evalcond[1]=(((sj5*x1046))+new_r00+((cj5*x1047)));
evalcond[2]=(sj5+((new_r00*x1046))+(((-1.0)*new_r10*x1050)));
evalcond[3]=(cj5+((new_r01*x1046))+(((-1.0)*new_r11*x1050)));
evalcond[4]=((((-1.0)*x1051))+x1049+new_r01);
evalcond[5]=((((-1.0)*x1051))+x1049+new_r10);
evalcond[6]=(((new_r11*x1046))+((new_r01*x1047))+(((-1.0)*x1048)));
evalcond[7]=((((-1.0)*x1046*x1048))+(((-1.0)*cj5*x1050))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x1052=((1.0)*new_r11);
IkReal x1053=((((-1.0)*new_r00*new_r01))+(((-1.0)*new_r10*x1052)));
j3eval[0]=x1053;
j3eval[1]=((IKabs((((new_r10*sj5))+((new_r01*sj5)))))+(IKabs((((new_r00*sj5))+(((-1.0)*sj5*x1052))))));
j3eval[2]=IKsign(x1053);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x1054=((((-1.0)*(new_r01*new_r01)))+(((-1.0)*(new_r11*new_r11))));
j3eval[0]=x1054;
j3eval[1]=((IKabs((((new_r11*sj5))+((cj5*new_r01)))))+(IKabs((((new_r01*sj5))+(((-1.0)*cj5*new_r11))))));
j3eval[2]=IKsign(x1054);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x1055=((1.0)*new_r11);
IkReal x1056=((((-1.0)*new_r01*sj5))+(((-1.0)*cj5*x1055)));
j3eval[0]=x1056;
j3eval[1]=IKsign(x1056);
j3eval[2]=((IKabs((((new_r00*new_r01))+((cj5*sj5)))))+(IKabs(((1.0)+(((-1.0)*(cj5*cj5)))+(((-1.0)*new_r00*x1055))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1057=((-1.0)*new_r01);
IkReal x1059 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x1059)==0){
continue;
}
IkReal x1058=pow(x1059,-0.5);
CheckValue<IkReal> x1060 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(x1057),IKFAST_ATAN2_MAGTHRESH);
if(!x1060.valid){
continue;
}
IkReal gconst24=((-1.0)*(x1060.value));
IkReal gconst25=(new_r11*x1058);
IkReal gconst26=(x1057*x1058);
CheckValue<IkReal> x1061 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1061.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1061.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
IkReal x1062=((-1.0)*new_r01);
CheckValue<IkReal> x1065 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(x1062),IKFAST_ATAN2_MAGTHRESH);
if(!x1065.valid){
continue;
}
IkReal x1063=((-1.0)*(x1065.value));
IkReal x1064=x1058;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst25;
cj5=gconst26;
j5=x1063;
IkReal gconst24=x1063;
IkReal gconst25=(new_r11*x1064);
IkReal gconst26=(x1062*x1064);
IkReal x1066=new_r11*new_r11;
IkReal x1067=(new_r10*new_r11);
IkReal x1068=((((-1.0)*new_r00*new_r01))+(((-1.0)*x1067)));
IkReal x1069=x1058;
IkReal x1070=(new_r11*x1069);
j3eval[0]=x1068;
j3eval[1]=IKsign(x1068);
j3eval[2]=((IKabs(((((-1.0)*x1066*x1069))+((new_r00*x1070)))))+(IKabs((((x1067*x1069))+((new_r01*x1070))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x1071=((-1.0)*new_r01);
CheckValue<IkReal> x1074 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(x1071),IKFAST_ATAN2_MAGTHRESH);
if(!x1074.valid){
continue;
}
IkReal x1072=((-1.0)*(x1074.value));
IkReal x1073=x1058;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst25;
cj5=gconst26;
j5=x1072;
IkReal gconst24=x1072;
IkReal gconst25=(new_r11*x1073);
IkReal gconst26=(x1071*x1073);
IkReal x1075=new_r11*new_r11;
CheckValue<IkReal> x1078=IKPowWithIntegerCheck((x1075+(new_r01*new_r01)),-1);
if(!x1078.valid){
continue;
}
IkReal x1076=x1078.value;
IkReal x1077=(x1075*x1076);
j3eval[0]=((IKabs((x1077+((new_r01*new_r10)))))+(IKabs((((new_r00*x1076*(new_r01*new_r01*new_r01)))+((new_r00*new_r01*x1077))+((new_r01*new_r11*x1076))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x1079=((-1.0)*new_r01);
CheckValue<IkReal> x1082 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(x1079),IKFAST_ATAN2_MAGTHRESH);
if(!x1082.valid){
continue;
}
IkReal x1080=((-1.0)*(x1082.value));
IkReal x1081=x1058;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst25;
cj5=gconst26;
j5=x1080;
IkReal gconst24=x1080;
IkReal gconst25=(new_r11*x1081);
IkReal gconst26=(x1079*x1081);
IkReal x1083=new_r01*new_r01;
IkReal x1084=new_r11*new_r11;
CheckValue<IkReal> x1091=IKPowWithIntegerCheck((x1084+x1083),-1);
if(!x1091.valid){
continue;
}
IkReal x1085=x1091.value;
IkReal x1086=(x1084*x1085);
CheckValue<IkReal> x1092=IKPowWithIntegerCheck(((((-1.0)*x1084))+(((-1.0)*x1083))),-1);
if(!x1092.valid){
continue;
}
IkReal x1087=x1092.value;
IkReal x1088=((1.0)*x1087);
IkReal x1089=(new_r11*x1088);
IkReal x1090=(new_r01*x1088);
j3eval[0]=((IKabs(((((-1.0)*x1086))+((x1085*(x1083*x1083)))+((x1083*x1086)))))+(IKabs(((((-1.0)*new_r01*x1089*(new_r11*new_r11)))+(((-1.0)*new_r01*x1089))+(((-1.0)*x1089*(new_r01*new_r01*new_r01)))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x1093=IKPowWithIntegerCheck(gconst26,-1);
if(!x1093.valid){
continue;
}
sj3array[0]=(new_r10*(x1093.value));
if( sj3array[0] >= -1-IKFAST_SINCOS_THRESH && sj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKasin(sj3array[0]);
    cj3array[0] = IKcos(j3array[0]);
    sj3array[1] = sj3array[0];
    j3array[1] = j3array[0] > 0 ? (IKPI-j3array[0]) : (-IKPI-j3array[0]);
    cj3array[1] = -cj3array[0];
}
else if( isnan(sj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1094=IKcos(j3);
IkReal x1095=IKsin(j3);
IkReal x1096=((-1.0)*x1094);
evalcond[0]=(new_r01*x1094);
evalcond[1]=(new_r10*x1096);
evalcond[2]=(gconst26*x1096);
evalcond[3]=(((new_r01*x1095))+gconst26);
evalcond[4]=(((gconst26*x1095))+new_r01);
evalcond[5]=(((new_r10*x1095))+(((-1.0)*gconst26)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst25;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
IkReal x1097=((-1.0)*new_r01);
CheckValue<IkReal> x1099 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(x1097),IKFAST_ATAN2_MAGTHRESH);
if(!x1099.valid){
continue;
}
IkReal x1098=((-1.0)*(x1099.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst25;
cj5=gconst26;
j5=x1098;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst24=x1098;
IkReal gconst25=new_r11;
IkReal gconst26=x1097;
j3eval[0]=1.0;
j3eval[1]=((IKabs(new_r01*new_r01))+(IKabs((new_r01*new_r11))));
j3eval[2]=1.0;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x1100=((-1.0)*new_r01);
CheckValue<IkReal> x1102 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(x1100),IKFAST_ATAN2_MAGTHRESH);
if(!x1102.valid){
continue;
}
IkReal x1101=((-1.0)*(x1102.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst25;
cj5=gconst26;
j5=x1101;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst24=x1101;
IkReal gconst25=new_r11;
IkReal gconst26=x1100;
j3eval[0]=-1.0;
j3eval[1]=((IKabs(new_r01*new_r01))+(IKabs((new_r01*new_r11))));
j3eval[2]=-1.0;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x1103=((-1.0)*new_r01);
CheckValue<IkReal> x1105 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(x1103),IKFAST_ATAN2_MAGTHRESH);
if(!x1105.valid){
continue;
}
IkReal x1104=((-1.0)*(x1105.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst25;
cj5=gconst26;
j5=x1104;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst24=x1104;
IkReal gconst25=new_r11;
IkReal gconst26=x1103;
j3eval[0]=1.0;
j3eval[1]=((((0.5)*(IKabs(((-1.0)+(((2.0)*(new_r01*new_r01))))))))+(IKabs((new_r01*new_r11))));
j3eval[2]=1.0;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1106=((1.0)*new_r01);
CheckValue<IkReal> x1107=IKPowWithIntegerCheck(IKsign((((gconst25*new_r11))+(((-1.0)*gconst26*x1106)))),-1);
if(!x1107.valid){
continue;
}
CheckValue<IkReal> x1108 = IKatan2WithCheck(IkReal(((new_r01*new_r01)+(((-1.0)*(gconst25*gconst25))))),IkReal((((gconst25*gconst26))+(((-1.0)*new_r11*x1106)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1108.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1107.value)))+(x1108.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1109=IKcos(j3);
IkReal x1110=IKsin(j3);
IkReal x1111=(gconst25*x1110);
IkReal x1112=((1.0)*x1109);
IkReal x1113=(gconst26*x1110);
IkReal x1114=(gconst26*x1112);
evalcond[0]=(x1111+(((-1.0)*x1114)));
evalcond[1]=(gconst25+((new_r11*x1110))+((new_r01*x1109)));
evalcond[2]=(x1113+new_r01+((gconst25*x1109)));
evalcond[3]=(gconst26+((new_r01*x1110))+(((-1.0)*new_r11*x1112)));
evalcond[4]=((((-1.0)*gconst25*x1112))+(((-1.0)*x1113)));
evalcond[5]=(x1111+new_r11+(((-1.0)*x1114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1115 = IKatan2WithCheck(IkReal((gconst26*new_r01)),IkReal((gconst25*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1115.valid){
continue;
}
CheckValue<IkReal> x1116=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst25*gconst25)))+(((-1.0)*(gconst26*gconst26))))),-1);
if(!x1116.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1115.value)+(((1.5707963267949)*(x1116.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1117=IKcos(j3);
IkReal x1118=IKsin(j3);
IkReal x1119=(gconst25*x1118);
IkReal x1120=((1.0)*x1117);
IkReal x1121=(gconst26*x1118);
IkReal x1122=(gconst26*x1120);
evalcond[0]=(x1119+(((-1.0)*x1122)));
evalcond[1]=(gconst25+((new_r11*x1118))+((new_r01*x1117)));
evalcond[2]=(x1121+new_r01+((gconst25*x1117)));
evalcond[3]=(gconst26+(((-1.0)*new_r11*x1120))+((new_r01*x1118)));
evalcond[4]=((((-1.0)*gconst25*x1120))+(((-1.0)*x1121)));
evalcond[5]=(x1119+(((-1.0)*x1122))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1123=IKPowWithIntegerCheck(IKsign((((gconst25*new_r11))+(((-1.0)*gconst26*new_r01)))),-1);
if(!x1123.valid){
continue;
}
CheckValue<IkReal> x1124 = IKatan2WithCheck(IkReal(gconst26*gconst26),IkReal((gconst25*gconst26)),IKFAST_ATAN2_MAGTHRESH);
if(!x1124.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1123.value)))+(x1124.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1125=IKcos(j3);
IkReal x1126=IKsin(j3);
IkReal x1127=(gconst25*x1126);
IkReal x1128=((1.0)*x1125);
IkReal x1129=(gconst26*x1126);
IkReal x1130=(gconst26*x1128);
evalcond[0]=(x1127+(((-1.0)*x1130)));
evalcond[1]=(gconst25+((new_r01*x1125))+((new_r11*x1126)));
evalcond[2]=(x1129+((gconst25*x1125))+new_r01);
evalcond[3]=(gconst26+(((-1.0)*new_r11*x1128))+((new_r01*x1126)));
evalcond[4]=((((-1.0)*gconst25*x1128))+(((-1.0)*x1129)));
evalcond[5]=(x1127+(((-1.0)*x1130))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
CheckValue<IkReal> x1132 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1132.valid){
continue;
}
IkReal x1131=((-1.0)*(x1132.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst25;
cj5=gconst26;
j5=x1131;
new_r01=0;
new_r10=0;
IkReal gconst24=x1131;
IkReal x1133 = new_r11*new_r11;
if(IKabs(x1133)==0){
continue;
}
IkReal gconst25=(new_r11*(pow(x1133,-0.5)));
IkReal gconst26=0;
j3eval[0]=new_r00;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x1134=IKPowWithIntegerCheck(gconst25,-1);
if(!x1134.valid){
continue;
}
sj3array[0]=((-1.0)*new_r00*(x1134.value));
if( sj3array[0] >= -1-IKFAST_SINCOS_THRESH && sj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKasin(sj3array[0]);
    cj3array[0] = IKcos(j3array[0]);
    sj3array[1] = sj3array[0];
    j3array[1] = j3array[0] > 0 ? (IKPI-j3array[0]) : (-IKPI-j3array[0]);
    cj3array[1] = -cj3array[0];
}
else if( isnan(sj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1135=IKcos(j3);
IkReal x1136=IKsin(j3);
evalcond[0]=(new_r00*x1135);
evalcond[1]=(gconst25*x1135);
evalcond[2]=((-1.0)*new_r11*x1135);
evalcond[3]=(gconst25+((new_r00*x1136)));
evalcond[4]=(gconst25+((new_r11*x1136)));
evalcond[5]=(((gconst25*x1136))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x1137=IKPowWithIntegerCheck(new_r00,-1);
if(!x1137.valid){
continue;
}
sj3array[0]=((-1.0)*gconst25*(x1137.value));
if( sj3array[0] >= -1-IKFAST_SINCOS_THRESH && sj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKasin(sj3array[0]);
    cj3array[0] = IKcos(j3array[0]);
    sj3array[1] = sj3array[0];
    j3array[1] = j3array[0] > 0 ? (IKPI-j3array[0]) : (-IKPI-j3array[0]);
    cj3array[1] = -cj3array[0];
}
else if( isnan(sj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1138=IKcos(j3);
IkReal x1139=IKsin(j3);
IkReal x1140=(gconst25*x1139);
evalcond[0]=(new_r00*x1138);
evalcond[1]=(gconst25*x1138);
evalcond[2]=((-1.0)*new_r11*x1138);
evalcond[3]=(x1140+new_r00);
evalcond[4]=(gconst25+((new_r11*x1139)));
evalcond[5]=(x1140+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r11);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
IkReal x1141=((-1.0)*new_r01);
CheckValue<IkReal> x1143 = IKatan2WithCheck(IkReal(0),IkReal(x1141),IKFAST_ATAN2_MAGTHRESH);
if(!x1143.valid){
continue;
}
IkReal x1142=((-1.0)*(x1143.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst25;
cj5=gconst26;
j5=x1142;
new_r11=0;
IkReal gconst24=x1142;
IkReal gconst25=0;
IkReal x1144 = new_r01*new_r01;
if(IKabs(x1144)==0){
continue;
}
IkReal gconst26=(x1141*(pow(x1144,-0.5)));
j3eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x1145=((-1.0)*new_r01);
CheckValue<IkReal> x1147 = IKatan2WithCheck(IkReal(0),IkReal(x1145),IKFAST_ATAN2_MAGTHRESH);
if(!x1147.valid){
continue;
}
IkReal x1146=((-1.0)*(x1147.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst25;
cj5=gconst26;
j5=x1146;
new_r11=0;
IkReal gconst24=x1146;
IkReal gconst25=0;
IkReal x1148 = new_r01*new_r01;
if(IKabs(x1148)==0){
continue;
}
IkReal gconst26=(x1145*(pow(x1148,-0.5)));
j3eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x1149=((-1.0)*new_r01);
CheckValue<IkReal> x1151 = IKatan2WithCheck(IkReal(0),IkReal(x1149),IKFAST_ATAN2_MAGTHRESH);
if(!x1151.valid){
continue;
}
IkReal x1150=((-1.0)*(x1151.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst25;
cj5=gconst26;
j5=x1150;
new_r11=0;
IkReal gconst24=x1150;
IkReal gconst25=0;
IkReal x1152 = new_r01*new_r01;
if(IKabs(x1152)==0){
continue;
}
IkReal gconst26=(x1149*(pow(x1152,-0.5)));
j3eval[0]=new_r01;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1153=IKPowWithIntegerCheck(new_r01,-1);
if(!x1153.valid){
continue;
}
CheckValue<IkReal> x1154=IKPowWithIntegerCheck(gconst26,-1);
if(!x1154.valid){
continue;
}
if( IKabs(((-1.0)*gconst26*(x1153.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x1154.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst26*(x1153.value)))+IKsqr((new_r00*(x1154.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.0)*gconst26*(x1153.value)), (new_r00*(x1154.value)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1155=IKcos(j3);
IkReal x1156=IKsin(j3);
IkReal x1157=((1.0)*gconst26);
evalcond[0]=(new_r01*x1155);
evalcond[1]=((-1.0)*gconst26*x1155);
evalcond[2]=(gconst26+((new_r01*x1156)));
evalcond[3]=(new_r01+((gconst26*x1156)));
evalcond[4]=((((-1.0)*x1155*x1157))+new_r00);
evalcond[5]=((((-1.0)*x1156*x1157))+new_r10);
evalcond[6]=(((new_r00*x1156))+(((-1.0)*new_r10*x1155)));
evalcond[7]=(((new_r10*x1156))+(((-1.0)*x1157))+((new_r00*x1155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1158 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1158.valid){
continue;
}
CheckValue<IkReal> x1159=IKPowWithIntegerCheck(IKsign(gconst26),-1);
if(!x1159.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1158.value)+(((1.5707963267949)*(x1159.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1160=IKcos(j3);
IkReal x1161=IKsin(j3);
IkReal x1162=((1.0)*gconst26);
evalcond[0]=(new_r01*x1160);
evalcond[1]=((-1.0)*gconst26*x1160);
evalcond[2]=(gconst26+((new_r01*x1161)));
evalcond[3]=(((gconst26*x1161))+new_r01);
evalcond[4]=(new_r00+(((-1.0)*x1160*x1162)));
evalcond[5]=(new_r10+(((-1.0)*x1161*x1162)));
evalcond[6]=((((-1.0)*new_r10*x1160))+((new_r00*x1161)));
evalcond[7]=(((new_r10*x1161))+(((-1.0)*x1162))+((new_r00*x1160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1163=IKPowWithIntegerCheck(IKsign(gconst26),-1);
if(!x1163.valid){
continue;
}
CheckValue<IkReal> x1164 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1164.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1163.value)))+(x1164.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1165=IKcos(j3);
IkReal x1166=IKsin(j3);
IkReal x1167=((1.0)*gconst26);
evalcond[0]=(new_r01*x1165);
evalcond[1]=((-1.0)*gconst26*x1165);
evalcond[2]=(gconst26+((new_r01*x1166)));
evalcond[3]=(((gconst26*x1166))+new_r01);
evalcond[4]=(new_r00+(((-1.0)*x1165*x1167)));
evalcond[5]=((((-1.0)*x1166*x1167))+new_r10);
evalcond[6]=((((-1.0)*new_r10*x1165))+((new_r00*x1166)));
evalcond[7]=(((new_r10*x1166))+(((-1.0)*x1167))+((new_r00*x1165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1168=((1.0)*new_r01);
CheckValue<IkReal> x1169 = IKatan2WithCheck(IkReal(((new_r01*new_r01)+(((-1.0)*(gconst25*gconst25))))),IkReal(((((-1.0)*new_r11*x1168))+((gconst25*gconst26)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1169.valid){
continue;
}
CheckValue<IkReal> x1170=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst26*x1168))+((gconst25*new_r11)))),-1);
if(!x1170.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1169.value)+(((1.5707963267949)*(x1170.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1171=IKcos(j3);
IkReal x1172=IKsin(j3);
IkReal x1173=((1.0)*gconst26);
IkReal x1174=(gconst25*x1172);
IkReal x1175=((1.0)*x1171);
IkReal x1176=(x1171*x1173);
evalcond[0]=(gconst25+((new_r11*x1172))+((new_r01*x1171)));
evalcond[1]=(((gconst25*x1171))+((gconst26*x1172))+new_r01);
evalcond[2]=((((-1.0)*new_r10*x1175))+gconst25+((new_r00*x1172)));
evalcond[3]=((((-1.0)*new_r11*x1175))+gconst26+((new_r01*x1172)));
evalcond[4]=(x1174+(((-1.0)*x1176))+new_r00);
evalcond[5]=(x1174+(((-1.0)*x1176))+new_r11);
evalcond[6]=(((new_r10*x1172))+(((-1.0)*x1173))+((new_r00*x1171)));
evalcond[7]=((((-1.0)*x1172*x1173))+(((-1.0)*gconst25*x1175))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1177=((1.0)*gconst25);
CheckValue<IkReal> x1178=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst26*new_r10))+(((-1.0)*new_r00*x1177)))),-1);
if(!x1178.valid){
continue;
}
CheckValue<IkReal> x1179 = IKatan2WithCheck(IkReal((((new_r01*new_r10))+(gconst25*gconst25))),IkReal((((new_r00*new_r01))+(((-1.0)*gconst26*x1177)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1179.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1178.value)))+(x1179.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1180=IKcos(j3);
IkReal x1181=IKsin(j3);
IkReal x1182=((1.0)*gconst26);
IkReal x1183=(gconst25*x1181);
IkReal x1184=((1.0)*x1180);
IkReal x1185=(x1180*x1182);
evalcond[0]=(gconst25+((new_r01*x1180))+((new_r11*x1181)));
evalcond[1]=(((gconst26*x1181))+((gconst25*x1180))+new_r01);
evalcond[2]=(gconst25+(((-1.0)*new_r10*x1184))+((new_r00*x1181)));
evalcond[3]=(gconst26+(((-1.0)*new_r11*x1184))+((new_r01*x1181)));
evalcond[4]=(x1183+(((-1.0)*x1185))+new_r00);
evalcond[5]=(x1183+(((-1.0)*x1185))+new_r11);
evalcond[6]=((((-1.0)*x1182))+((new_r10*x1181))+((new_r00*x1180)));
evalcond[7]=((((-1.0)*x1181*x1182))+(((-1.0)*gconst25*x1184))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1186=((1.0)*new_r11);
CheckValue<IkReal> x1187 = IKatan2WithCheck(IkReal((((gconst25*new_r01))+((gconst25*new_r10)))),IkReal((((gconst25*new_r00))+(((-1.0)*gconst25*x1186)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1187.valid){
continue;
}
CheckValue<IkReal> x1188=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r10*x1186))+(((-1.0)*new_r00*new_r01)))),-1);
if(!x1188.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1187.value)+(((1.5707963267949)*(x1188.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1189=IKcos(j3);
IkReal x1190=IKsin(j3);
IkReal x1191=((1.0)*gconst26);
IkReal x1192=(gconst25*x1190);
IkReal x1193=((1.0)*x1189);
IkReal x1194=(x1189*x1191);
evalcond[0]=(gconst25+((new_r11*x1190))+((new_r01*x1189)));
evalcond[1]=(((gconst25*x1189))+((gconst26*x1190))+new_r01);
evalcond[2]=(gconst25+(((-1.0)*new_r10*x1193))+((new_r00*x1190)));
evalcond[3]=(gconst26+(((-1.0)*new_r11*x1193))+((new_r01*x1190)));
evalcond[4]=(x1192+(((-1.0)*x1194))+new_r00);
evalcond[5]=(x1192+(((-1.0)*x1194))+new_r11);
evalcond[6]=((((-1.0)*x1191))+((new_r10*x1190))+((new_r00*x1189)));
evalcond[7]=((((-1.0)*x1190*x1191))+(((-1.0)*gconst25*x1193))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1195=((-1.0)*new_r11);
IkReal x1197 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x1197)==0){
continue;
}
IkReal x1196=pow(x1197,-0.5);
CheckValue<IkReal> x1198 = IKatan2WithCheck(IkReal(x1195),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1198.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x1198.value))));
IkReal gconst28=(x1195*x1196);
IkReal gconst29=((1.0)*new_r01*x1196);
CheckValue<IkReal> x1199 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1199.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1199.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
IkReal x1200=((-1.0)*new_r11);
CheckValue<IkReal> x1203 = IKatan2WithCheck(IkReal(x1200),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1203.valid){
continue;
}
IkReal x1201=((1.0)*(x1203.value));
IkReal x1202=x1196;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x1201)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x1201)));
IkReal gconst28=(x1200*x1202);
IkReal gconst29=((1.0)*new_r01*x1202);
IkReal x1204=new_r11*new_r11;
IkReal x1205=((1.0)*new_r01);
IkReal x1206=((1.0)*new_r10);
IkReal x1207=((((-1.0)*new_r11*x1206))+(((-1.0)*new_r00*x1205)));
IkReal x1208=x1196;
IkReal x1209=(new_r11*x1208);
j3eval[0]=x1207;
j3eval[1]=((IKabs((((x1204*x1208))+(((-1.0)*new_r00*x1209)))))+(IKabs(((((-1.0)*x1205*x1209))+(((-1.0)*x1206*x1209))))));
j3eval[2]=IKsign(x1207);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x1210=((-1.0)*new_r11);
CheckValue<IkReal> x1213 = IKatan2WithCheck(IkReal(x1210),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1213.valid){
continue;
}
IkReal x1211=((1.0)*(x1213.value));
IkReal x1212=x1196;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x1211)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x1211)));
IkReal gconst28=(x1210*x1212);
IkReal gconst29=((1.0)*new_r01*x1212);
IkReal x1214=new_r11*new_r11;
IkReal x1215=new_r01*new_r01*new_r01;
CheckValue<IkReal> x1219=IKPowWithIntegerCheck((x1214+(new_r01*new_r01)),-1);
if(!x1219.valid){
continue;
}
IkReal x1216=x1219.value;
IkReal x1217=(x1214*x1216);
IkReal x1218=(x1215*x1216);
j3eval[0]=((IKabs((((new_r01*new_r11*x1216))+((new_r00*x1218))+((new_r00*new_r01*x1217)))))+(IKabs((((new_r10*x1218))+x1217+((new_r01*new_r10*x1217))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x1220=((-1.0)*new_r11);
CheckValue<IkReal> x1223 = IKatan2WithCheck(IkReal(x1220),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1223.valid){
continue;
}
IkReal x1221=((1.0)*(x1223.value));
IkReal x1222=x1196;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x1221)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x1221)));
IkReal gconst28=(x1220*x1222);
IkReal gconst29=((1.0)*new_r01*x1222);
IkReal x1224=new_r01*new_r01;
IkReal x1225=new_r11*new_r11;
CheckValue<IkReal> x1232=IKPowWithIntegerCheck((x1225+x1224),-1);
if(!x1232.valid){
continue;
}
IkReal x1226=x1232.value;
IkReal x1227=(x1225*x1226);
CheckValue<IkReal> x1233=IKPowWithIntegerCheck(((((-1.0)*x1225))+(((-1.0)*x1224))),-1);
if(!x1233.valid){
continue;
}
IkReal x1228=x1233.value;
IkReal x1229=((1.0)*x1228);
IkReal x1230=(new_r11*x1229);
IkReal x1231=(new_r01*x1229);
j3eval[0]=((IKabs(((((-1.0)*x1230*(new_r01*new_r01*new_r01)))+(((-1.0)*new_r01*x1230))+(((-1.0)*new_r01*x1230*(new_r11*new_r11))))))+(IKabs((((x1226*(x1224*x1224)))+(((-1.0)*x1227))+((x1224*x1227))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x1234=IKPowWithIntegerCheck(gconst29,-1);
if(!x1234.valid){
continue;
}
sj3array[0]=(new_r10*(x1234.value));
if( sj3array[0] >= -1-IKFAST_SINCOS_THRESH && sj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKasin(sj3array[0]);
    cj3array[0] = IKcos(j3array[0]);
    sj3array[1] = sj3array[0];
    j3array[1] = j3array[0] > 0 ? (IKPI-j3array[0]) : (-IKPI-j3array[0]);
    cj3array[1] = -cj3array[0];
}
else if( isnan(sj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1235=IKcos(j3);
IkReal x1236=IKsin(j3);
IkReal x1237=((-1.0)*x1235);
evalcond[0]=(new_r01*x1235);
evalcond[1]=(new_r10*x1237);
evalcond[2]=(gconst29*x1237);
evalcond[3]=(gconst29+((new_r01*x1236)));
evalcond[4]=(new_r01+((gconst29*x1236)));
evalcond[5]=(((new_r10*x1236))+(((-1.0)*gconst29)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst28;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[4];
IkReal x1238=((-1.0)*new_r11);
CheckValue<IkReal> x1240 = IKatan2WithCheck(IkReal(x1238),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1240.valid){
continue;
}
IkReal x1239=((1.0)*(x1240.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x1239)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x1239)));
IkReal gconst28=x1238;
IkReal gconst29=((1.0)*new_r01);
j3eval[0]=-1.0;
j3eval[1]=new_r01;
j3eval[2]=1.0;
j3eval[3]=-1.0;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  || IKabs(j3eval[3]) < 0.0000010000000000  )
{
{
IkReal j3eval[4];
IkReal x1241=((-1.0)*new_r11);
CheckValue<IkReal> x1243 = IKatan2WithCheck(IkReal(x1241),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1243.valid){
continue;
}
IkReal x1242=((1.0)*(x1243.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x1242)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x1242)));
IkReal gconst28=x1241;
IkReal gconst29=((1.0)*new_r01);
j3eval[0]=-1.0;
j3eval[1]=new_r01;
j3eval[2]=1.0;
j3eval[3]=-1.0;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  || IKabs(j3eval[3]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x1244=((-1.0)*new_r11);
CheckValue<IkReal> x1246 = IKatan2WithCheck(IkReal(x1244),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1246.valid){
continue;
}
IkReal x1245=((1.0)*(x1246.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x1245)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x1245)));
IkReal gconst28=x1244;
IkReal gconst29=((1.0)*new_r01);
j3eval[0]=-1.0;
j3eval[1]=((IKabs(((2.0)*new_r01*new_r11)))+(IKabs(((-1.0)+(((2.0)*(new_r01*new_r01)))))));
j3eval[2]=-1.0;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1247=((1.0)*new_r01);
CheckValue<IkReal> x1248 = IKatan2WithCheck(IkReal(((new_r01*new_r01)+(((-1.0)*(gconst28*gconst28))))),IkReal((((gconst28*gconst29))+(((-1.0)*new_r11*x1247)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1248.valid){
continue;
}
CheckValue<IkReal> x1249=IKPowWithIntegerCheck(IKsign((((gconst28*new_r11))+(((-1.0)*gconst29*x1247)))),-1);
if(!x1249.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1248.value)+(((1.5707963267949)*(x1249.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1250=IKcos(j3);
IkReal x1251=IKsin(j3);
IkReal x1252=(gconst28*x1251);
IkReal x1253=((1.0)*x1250);
IkReal x1254=(gconst29*x1251);
IkReal x1255=(gconst29*x1253);
evalcond[0]=((((-1.0)*x1255))+x1252);
evalcond[1]=(((new_r01*x1250))+gconst28+((new_r11*x1251)));
evalcond[2]=(x1254+((gconst28*x1250))+new_r01);
evalcond[3]=((((-1.0)*new_r11*x1253))+((new_r01*x1251))+gconst29);
evalcond[4]=((((-1.0)*gconst28*x1253))+(((-1.0)*x1254)));
evalcond[5]=((((-1.0)*x1255))+x1252+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1256 = IKatan2WithCheck(IkReal((gconst29*new_r01)),IkReal((gconst28*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1256.valid){
continue;
}
CheckValue<IkReal> x1257=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst28*gconst28)))+(((-1.0)*(gconst29*gconst29))))),-1);
if(!x1257.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1256.value)+(((1.5707963267949)*(x1257.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1258=IKcos(j3);
IkReal x1259=IKsin(j3);
IkReal x1260=(gconst28*x1259);
IkReal x1261=((1.0)*x1258);
IkReal x1262=(gconst29*x1259);
IkReal x1263=(gconst29*x1261);
evalcond[0]=(x1260+(((-1.0)*x1263)));
evalcond[1]=(((new_r01*x1258))+gconst28+((new_r11*x1259)));
evalcond[2]=(x1262+((gconst28*x1258))+new_r01);
evalcond[3]=((((-1.0)*new_r11*x1261))+((new_r01*x1259))+gconst29);
evalcond[4]=((((-1.0)*gconst28*x1261))+(((-1.0)*x1262)));
evalcond[5]=(x1260+new_r11+(((-1.0)*x1263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1264 = IKatan2WithCheck(IkReal(gconst29*gconst29),IkReal((gconst28*gconst29)),IKFAST_ATAN2_MAGTHRESH);
if(!x1264.valid){
continue;
}
CheckValue<IkReal> x1265=IKPowWithIntegerCheck(IKsign((((gconst28*new_r11))+(((-1.0)*gconst29*new_r01)))),-1);
if(!x1265.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1264.value)+(((1.5707963267949)*(x1265.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1266=IKcos(j3);
IkReal x1267=IKsin(j3);
IkReal x1268=(gconst28*x1267);
IkReal x1269=((1.0)*x1266);
IkReal x1270=(gconst29*x1267);
IkReal x1271=(gconst29*x1269);
evalcond[0]=(x1268+(((-1.0)*x1271)));
evalcond[1]=(((new_r01*x1266))+gconst28+((new_r11*x1267)));
evalcond[2]=(x1270+((gconst28*x1266))+new_r01);
evalcond[3]=((((-1.0)*new_r11*x1269))+((new_r01*x1267))+gconst29);
evalcond[4]=((((-1.0)*gconst28*x1269))+(((-1.0)*x1270)));
evalcond[5]=(x1268+(((-1.0)*x1271))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
IkReal x1272=((-1.0)*new_r11);
CheckValue<IkReal> x1274 = IKatan2WithCheck(IkReal(x1272),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1274.valid){
continue;
}
IkReal x1273=((1.0)*(x1274.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x1273)));
new_r01=0;
new_r10=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x1273)));
IkReal x1275 = new_r11*new_r11;
if(IKabs(x1275)==0){
continue;
}
IkReal gconst28=(x1272*(pow(x1275,-0.5)));
IkReal gconst29=0;
j3eval[0]=new_r00;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x1276=IKPowWithIntegerCheck(gconst28,-1);
if(!x1276.valid){
continue;
}
sj3array[0]=((-1.0)*new_r00*(x1276.value));
if( sj3array[0] >= -1-IKFAST_SINCOS_THRESH && sj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKasin(sj3array[0]);
    cj3array[0] = IKcos(j3array[0]);
    sj3array[1] = sj3array[0];
    j3array[1] = j3array[0] > 0 ? (IKPI-j3array[0]) : (-IKPI-j3array[0]);
    cj3array[1] = -cj3array[0];
}
else if( isnan(sj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1277=IKcos(j3);
IkReal x1278=IKsin(j3);
evalcond[0]=(new_r00*x1277);
evalcond[1]=(gconst28*x1277);
evalcond[2]=((-1.0)*new_r11*x1277);
evalcond[3]=(((new_r00*x1278))+gconst28);
evalcond[4]=(gconst28+((new_r11*x1278)));
evalcond[5]=(((gconst28*x1278))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x1279=IKPowWithIntegerCheck(new_r00,-1);
if(!x1279.valid){
continue;
}
sj3array[0]=((-1.0)*gconst28*(x1279.value));
if( sj3array[0] >= -1-IKFAST_SINCOS_THRESH && sj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKasin(sj3array[0]);
    cj3array[0] = IKcos(j3array[0]);
    sj3array[1] = sj3array[0];
    j3array[1] = j3array[0] > 0 ? (IKPI-j3array[0]) : (-IKPI-j3array[0]);
    cj3array[1] = -cj3array[0];
}
else if( isnan(sj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1280=IKcos(j3);
IkReal x1281=IKsin(j3);
IkReal x1282=(gconst28*x1281);
evalcond[0]=(new_r00*x1280);
evalcond[1]=(gconst28*x1280);
evalcond[2]=((-1.0)*new_r11*x1280);
evalcond[3]=(x1282+new_r00);
evalcond[4]=(((new_r11*x1281))+gconst28);
evalcond[5]=(x1282+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r11);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
CheckValue<IkReal> x1284 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1284.valid){
continue;
}
IkReal x1283=((1.0)*(x1284.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x1283)));
new_r11=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x1283)));
IkReal gconst28=0;
IkReal x1285 = new_r01*new_r01;
if(IKabs(x1285)==0){
continue;
}
IkReal gconst29=((1.0)*new_r01*(pow(x1285,-0.5)));
j3eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
CheckValue<IkReal> x1287 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1287.valid){
continue;
}
IkReal x1286=((1.0)*(x1287.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x1286)));
new_r11=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x1286)));
IkReal gconst28=0;
IkReal x1288 = new_r01*new_r01;
if(IKabs(x1288)==0){
continue;
}
IkReal gconst29=((1.0)*new_r01*(pow(x1288,-0.5)));
j3eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
CheckValue<IkReal> x1290 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1290.valid){
continue;
}
IkReal x1289=((1.0)*(x1290.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x1289)));
new_r11=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x1289)));
IkReal gconst28=0;
IkReal x1291 = new_r01*new_r01;
if(IKabs(x1291)==0){
continue;
}
IkReal gconst29=((1.0)*new_r01*(pow(x1291,-0.5)));
j3eval[0]=new_r01;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1292=IKPowWithIntegerCheck(new_r01,-1);
if(!x1292.valid){
continue;
}
CheckValue<IkReal> x1293=IKPowWithIntegerCheck(gconst29,-1);
if(!x1293.valid){
continue;
}
if( IKabs(((-1.0)*gconst29*(x1292.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x1293.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst29*(x1292.value)))+IKsqr((new_r00*(x1293.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.0)*gconst29*(x1292.value)), (new_r00*(x1293.value)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1294=IKcos(j3);
IkReal x1295=IKsin(j3);
IkReal x1296=((1.0)*gconst29);
IkReal x1297=(gconst29*x1294);
evalcond[0]=(new_r01*x1294);
evalcond[1]=((-1.0)*x1297);
evalcond[2]=(gconst29+((new_r01*x1295)));
evalcond[3]=(new_r01+((gconst29*x1295)));
evalcond[4]=(new_r00+(((-1.0)*x1294*x1296)));
evalcond[5]=((((-1.0)*x1295*x1296))+new_r10);
evalcond[6]=((((-1.0)*new_r10*x1294))+((new_r00*x1295)));
evalcond[7]=((((-1.0)*x1296))+((new_r10*x1295))+((new_r00*x1294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1298 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1298.valid){
continue;
}
CheckValue<IkReal> x1299=IKPowWithIntegerCheck(IKsign(gconst29),-1);
if(!x1299.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1298.value)+(((1.5707963267949)*(x1299.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1300=IKcos(j3);
IkReal x1301=IKsin(j3);
IkReal x1302=((1.0)*gconst29);
IkReal x1303=(gconst29*x1300);
evalcond[0]=(new_r01*x1300);
evalcond[1]=((-1.0)*x1303);
evalcond[2]=(gconst29+((new_r01*x1301)));
evalcond[3]=(((gconst29*x1301))+new_r01);
evalcond[4]=((((-1.0)*x1300*x1302))+new_r00);
evalcond[5]=((((-1.0)*x1301*x1302))+new_r10);
evalcond[6]=((((-1.0)*new_r10*x1300))+((new_r00*x1301)));
evalcond[7]=((((-1.0)*x1302))+((new_r10*x1301))+((new_r00*x1300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1304 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1304.valid){
continue;
}
CheckValue<IkReal> x1305=IKPowWithIntegerCheck(IKsign(gconst29),-1);
if(!x1305.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1304.value)+(((1.5707963267949)*(x1305.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1306=IKcos(j3);
IkReal x1307=IKsin(j3);
IkReal x1308=((1.0)*gconst29);
IkReal x1309=(gconst29*x1306);
evalcond[0]=(new_r01*x1306);
evalcond[1]=((-1.0)*x1309);
evalcond[2]=(gconst29+((new_r01*x1307)));
evalcond[3]=(((gconst29*x1307))+new_r01);
evalcond[4]=((((-1.0)*x1306*x1308))+new_r00);
evalcond[5]=((((-1.0)*x1307*x1308))+new_r10);
evalcond[6]=((((-1.0)*new_r10*x1306))+((new_r00*x1307)));
evalcond[7]=((((-1.0)*x1308))+((new_r10*x1307))+((new_r00*x1306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1310=((1.0)*new_r01);
CheckValue<IkReal> x1311 = IKatan2WithCheck(IkReal(((new_r01*new_r01)+(((-1.0)*(gconst28*gconst28))))),IkReal(((((-1.0)*new_r11*x1310))+((gconst28*gconst29)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1311.valid){
continue;
}
CheckValue<IkReal> x1312=IKPowWithIntegerCheck(IKsign((((gconst28*new_r11))+(((-1.0)*gconst29*x1310)))),-1);
if(!x1312.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1311.value)+(((1.5707963267949)*(x1312.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1313=IKsin(j3);
IkReal x1314=IKcos(j3);
IkReal x1315=((1.0)*gconst29);
IkReal x1316=(gconst28*x1313);
IkReal x1317=((1.0)*x1314);
IkReal x1318=(x1314*x1315);
evalcond[0]=(((new_r01*x1314))+gconst28+((new_r11*x1313)));
evalcond[1]=(((gconst29*x1313))+((gconst28*x1314))+new_r01);
evalcond[2]=((((-1.0)*new_r10*x1317))+((new_r00*x1313))+gconst28);
evalcond[3]=(((new_r01*x1313))+(((-1.0)*new_r11*x1317))+gconst29);
evalcond[4]=(x1316+(((-1.0)*x1318))+new_r00);
evalcond[5]=(x1316+(((-1.0)*x1318))+new_r11);
evalcond[6]=(((new_r00*x1314))+(((-1.0)*x1315))+((new_r10*x1313)));
evalcond[7]=((((-1.0)*x1313*x1315))+(((-1.0)*gconst28*x1317))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1319=((1.0)*gconst28);
CheckValue<IkReal> x1320 = IKatan2WithCheck(IkReal(((gconst28*gconst28)+((new_r01*new_r10)))),IkReal(((((-1.0)*gconst29*x1319))+((new_r00*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1320.valid){
continue;
}
CheckValue<IkReal> x1321=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r00*x1319))+(((-1.0)*gconst29*new_r10)))),-1);
if(!x1321.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1320.value)+(((1.5707963267949)*(x1321.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1322=IKsin(j3);
IkReal x1323=IKcos(j3);
IkReal x1324=((1.0)*gconst29);
IkReal x1325=(gconst28*x1322);
IkReal x1326=((1.0)*x1323);
IkReal x1327=(x1323*x1324);
evalcond[0]=(((new_r01*x1323))+gconst28+((new_r11*x1322)));
evalcond[1]=(((gconst28*x1323))+((gconst29*x1322))+new_r01);
evalcond[2]=(((new_r00*x1322))+(((-1.0)*new_r10*x1326))+gconst28);
evalcond[3]=(((new_r01*x1322))+(((-1.0)*new_r11*x1326))+gconst29);
evalcond[4]=(x1325+(((-1.0)*x1327))+new_r00);
evalcond[5]=(x1325+(((-1.0)*x1327))+new_r11);
evalcond[6]=(((new_r00*x1323))+(((-1.0)*x1324))+((new_r10*x1322)));
evalcond[7]=((((-1.0)*x1322*x1324))+(((-1.0)*gconst28*x1326))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1328=((1.0)*new_r11);
CheckValue<IkReal> x1329=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r10*x1328))+(((-1.0)*new_r00*new_r01)))),-1);
if(!x1329.valid){
continue;
}
CheckValue<IkReal> x1330 = IKatan2WithCheck(IkReal((((gconst28*new_r01))+((gconst28*new_r10)))),IkReal((((gconst28*new_r00))+(((-1.0)*gconst28*x1328)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1330.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1329.value)))+(x1330.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1331=IKsin(j3);
IkReal x1332=IKcos(j3);
IkReal x1333=((1.0)*gconst29);
IkReal x1334=(gconst28*x1331);
IkReal x1335=((1.0)*x1332);
IkReal x1336=(x1332*x1333);
evalcond[0]=(((new_r11*x1331))+((new_r01*x1332))+gconst28);
evalcond[1]=(((gconst29*x1331))+((gconst28*x1332))+new_r01);
evalcond[2]=(gconst28+((new_r00*x1331))+(((-1.0)*new_r10*x1335)));
evalcond[3]=(((new_r01*x1331))+gconst29+(((-1.0)*new_r11*x1335)));
evalcond[4]=(x1334+new_r00+(((-1.0)*x1336)));
evalcond[5]=(x1334+new_r11+(((-1.0)*x1336)));
evalcond[6]=(((new_r10*x1331))+((new_r00*x1332))+(((-1.0)*x1333)));
evalcond[7]=((((-1.0)*gconst28*x1335))+(((-1.0)*x1331*x1333))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1337=IKsin(j3);
IkReal x1338=IKcos(j3);
IkReal x1339=((1.0)*x1338);
evalcond[0]=(x1337+new_r01);
evalcond[1]=(new_r00+(((-1.0)*x1339)));
evalcond[2]=((((-1.0)*x1337))+new_r10);
evalcond[3]=(new_r11+(((-1.0)*x1339)));
evalcond[4]=(((new_r11*x1337))+((new_r01*x1338)));
evalcond[5]=(((new_r00*x1337))+(((-1.0)*new_r10*x1339)));
evalcond[6]=((-1.0)+((new_r10*x1337))+((new_r00*x1338)));
evalcond[7]=((1.0)+((new_r01*x1337))+(((-1.0)*new_r11*x1339)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r00));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1340=IKcos(j3);
IkReal x1341=IKsin(j3);
IkReal x1342=((1.0)*x1340);
evalcond[0]=(x1340+new_r00);
evalcond[1]=(x1341+new_r10);
evalcond[2]=(x1340+new_r11);
evalcond[3]=(new_r01+(((-1.0)*x1341)));
evalcond[4]=(((new_r01*x1340))+((new_r11*x1341)));
evalcond[5]=((((-1.0)*new_r10*x1342))+((new_r00*x1341)));
evalcond[6]=((1.0)+((new_r00*x1340))+((new_r10*x1341)));
evalcond[7]=((-1.0)+(((-1.0)*new_r11*x1342))+((new_r01*x1341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
new_r11=0;
new_r00=0;
j3eval[0]=new_r01;
j3eval[1]=IKsign(new_r01);
j3eval[2]=((IKabs(cj5))+(IKabs(sj5)));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
new_r11=0;
new_r00=0;
j3eval[0]=new_r01;
j3eval[1]=new_r10;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1343=IKPowWithIntegerCheck(new_r01,-1);
if(!x1343.valid){
continue;
}
CheckValue<IkReal> x1344=IKPowWithIntegerCheck(new_r10,-1);
if(!x1344.valid){
continue;
}
if( IKabs(((-1.0)*cj5*(x1343.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj5*(x1344.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj5*(x1343.value)))+IKsqr((sj5*(x1344.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.0)*cj5*(x1343.value)), (sj5*(x1344.value)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[7];
IkReal x1345=IKcos(j3);
IkReal x1346=IKsin(j3);
IkReal x1347=((1.0)*cj5);
IkReal x1348=(sj5*x1345);
evalcond[0]=(cj5+((new_r01*x1346)));
evalcond[1]=(sj5+((new_r01*x1345)));
evalcond[2]=(sj5+(((-1.0)*new_r10*x1345)));
evalcond[3]=((((-1.0)*x1347))+((new_r10*x1346)));
evalcond[4]=(((sj5*x1346))+(((-1.0)*x1345*x1347)));
evalcond[5]=(x1348+((cj5*x1346))+new_r01);
evalcond[6]=((((-1.0)*x1346*x1347))+new_r10+(((-1.0)*x1348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1349=IKPowWithIntegerCheck(IKsign(new_r01),-1);
if(!x1349.valid){
continue;
}
CheckValue<IkReal> x1350 = IKatan2WithCheck(IkReal(((-1.0)*cj5)),IkReal(((-1.0)*sj5)),IKFAST_ATAN2_MAGTHRESH);
if(!x1350.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1349.value)))+(x1350.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[7];
IkReal x1351=IKcos(j3);
IkReal x1352=IKsin(j3);
IkReal x1353=((1.0)*cj5);
IkReal x1354=(sj5*x1351);
evalcond[0]=(cj5+((new_r01*x1352)));
evalcond[1]=(sj5+((new_r01*x1351)));
evalcond[2]=((((-1.0)*new_r10*x1351))+sj5);
evalcond[3]=(((new_r10*x1352))+(((-1.0)*x1353)));
evalcond[4]=(((sj5*x1352))+(((-1.0)*x1351*x1353)));
evalcond[5]=(x1354+((cj5*x1352))+new_r01);
evalcond[6]=((((-1.0)*x1354))+(((-1.0)*x1352*x1353))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
j3eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j3]

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x1356 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1356.valid){
continue;
}
IkReal x1355=x1356.value;
j3array[0]=((-1.0)*x1355);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x1355)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=(((new_r00*(IKsin(j3))))+(((-1.0)*new_r10*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
j3eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j3]

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x1358 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x1358.valid){
continue;
}
IkReal x1357=x1358.value;
j3array[0]=((-1.0)*x1357);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x1357)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=(((new_r01*(IKsin(j3))))+(((-1.0)*new_r11*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
new_r01=0;
new_r10=0;
j3eval[0]=new_r11;
j3eval[1]=IKsign(new_r11);
j3eval[2]=((IKabs(cj5))+(IKabs(sj5)));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
new_r01=0;
new_r10=0;
j3eval[0]=new_r00;
j3eval[1]=((IKabs(cj5))+(IKabs(sj5)));
j3eval[2]=IKsign(new_r00);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
new_r01=0;
new_r10=0;
j3eval[0]=new_r00;
j3eval[1]=new_r11;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1359=IKPowWithIntegerCheck(new_r00,-1);
if(!x1359.valid){
continue;
}
CheckValue<IkReal> x1360=IKPowWithIntegerCheck(new_r11,-1);
if(!x1360.valid){
continue;
}
if( IKabs(((-1.0)*sj5*(x1359.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj5*(x1360.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj5*(x1359.value)))+IKsqr((cj5*(x1360.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.0)*sj5*(x1359.value)), (cj5*(x1360.value)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[7];
IkReal x1361=IKsin(j3);
IkReal x1362=IKcos(j3);
IkReal x1363=(sj5*x1361);
IkReal x1364=((1.0)*x1362);
IkReal x1365=(cj5*x1364);
evalcond[0]=(sj5+((new_r00*x1361)));
evalcond[1]=(sj5+((new_r11*x1361)));
evalcond[2]=(cj5+(((-1.0)*new_r11*x1364)));
evalcond[3]=(((new_r00*x1362))+(((-1.0)*cj5)));
evalcond[4]=(((cj5*x1361))+((sj5*x1362)));
evalcond[5]=(x1363+new_r00+(((-1.0)*x1365)));
evalcond[6]=(x1363+new_r11+(((-1.0)*x1365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1366=IKPowWithIntegerCheck(IKsign(new_r00),-1);
if(!x1366.valid){
continue;
}
CheckValue<IkReal> x1367 = IKatan2WithCheck(IkReal(((-1.0)*sj5)),IkReal(cj5),IKFAST_ATAN2_MAGTHRESH);
if(!x1367.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1366.value)))+(x1367.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[7];
IkReal x1368=IKsin(j3);
IkReal x1369=IKcos(j3);
IkReal x1370=(sj5*x1368);
IkReal x1371=((1.0)*x1369);
IkReal x1372=(cj5*x1371);
evalcond[0]=(sj5+((new_r00*x1368)));
evalcond[1]=(sj5+((new_r11*x1368)));
evalcond[2]=((((-1.0)*new_r11*x1371))+cj5);
evalcond[3]=(((new_r00*x1369))+(((-1.0)*cj5)));
evalcond[4]=(((cj5*x1368))+((sj5*x1369)));
evalcond[5]=(x1370+(((-1.0)*x1372))+new_r00);
evalcond[6]=(x1370+(((-1.0)*x1372))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1373=IKPowWithIntegerCheck(IKsign(new_r11),-1);
if(!x1373.valid){
continue;
}
CheckValue<IkReal> x1374 = IKatan2WithCheck(IkReal(((-1.0)*sj5)),IkReal(cj5),IKFAST_ATAN2_MAGTHRESH);
if(!x1374.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1373.value)))+(x1374.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[7];
IkReal x1375=IKsin(j3);
IkReal x1376=IKcos(j3);
IkReal x1377=(sj5*x1375);
IkReal x1378=((1.0)*x1376);
IkReal x1379=(cj5*x1378);
evalcond[0]=(sj5+((new_r00*x1375)));
evalcond[1]=(sj5+((new_r11*x1375)));
evalcond[2]=((((-1.0)*new_r11*x1378))+cj5);
evalcond[3]=((((-1.0)*cj5))+((new_r00*x1376)));
evalcond[4]=(((sj5*x1376))+((cj5*x1375)));
evalcond[5]=(x1377+(((-1.0)*x1379))+new_r00);
evalcond[6]=(x1377+(((-1.0)*x1379))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1380=((1.0)*new_r11);
CheckValue<IkReal> x1381=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*x1380))+(((-1.0)*new_r01*sj5)))),-1);
if(!x1381.valid){
continue;
}
CheckValue<IkReal> x1382 = IKatan2WithCheck(IkReal((((new_r00*new_r01))+((cj5*sj5)))),IkReal(((1.0)+(((-1.0)*(cj5*cj5)))+(((-1.0)*new_r00*x1380)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1382.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1381.value)))+(x1382.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1383=IKcos(j3);
IkReal x1384=IKsin(j3);
IkReal x1385=(sj5*x1384);
IkReal x1386=(cj5*x1384);
IkReal x1387=(sj5*x1383);
IkReal x1388=((1.0)*x1383);
IkReal x1389=(cj5*x1388);
evalcond[0]=(sj5+((new_r11*x1384))+((new_r01*x1383)));
evalcond[1]=(x1386+x1387+new_r01);
evalcond[2]=(sj5+(((-1.0)*new_r10*x1388))+((new_r00*x1384)));
evalcond[3]=(cj5+((new_r01*x1384))+(((-1.0)*new_r11*x1388)));
evalcond[4]=((((-1.0)*x1389))+x1385+new_r00);
evalcond[5]=((((-1.0)*x1389))+x1385+new_r11);
evalcond[6]=(((new_r10*x1384))+((new_r00*x1383))+(((-1.0)*cj5)));
evalcond[7]=((((-1.0)*x1386))+(((-1.0)*x1387))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1390 = IKatan2WithCheck(IkReal((((new_r11*sj5))+((cj5*new_r01)))),IkReal((((new_r01*sj5))+(((-1.0)*cj5*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1390.valid){
continue;
}
CheckValue<IkReal> x1391=IKPowWithIntegerCheck(IKsign(((((-1.0)*(new_r01*new_r01)))+(((-1.0)*(new_r11*new_r11))))),-1);
if(!x1391.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1390.value)+(((1.5707963267949)*(x1391.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1392=IKcos(j3);
IkReal x1393=IKsin(j3);
IkReal x1394=(sj5*x1393);
IkReal x1395=(cj5*x1393);
IkReal x1396=(sj5*x1392);
IkReal x1397=((1.0)*x1392);
IkReal x1398=(cj5*x1397);
evalcond[0]=(((new_r11*x1393))+sj5+((new_r01*x1392)));
evalcond[1]=(x1396+x1395+new_r01);
evalcond[2]=(sj5+((new_r00*x1393))+(((-1.0)*new_r10*x1397)));
evalcond[3]=(cj5+(((-1.0)*new_r11*x1397))+((new_r01*x1393)));
evalcond[4]=(x1394+new_r00+(((-1.0)*x1398)));
evalcond[5]=(x1394+new_r11+(((-1.0)*x1398)));
evalcond[6]=(((new_r10*x1393))+((new_r00*x1392))+(((-1.0)*cj5)));
evalcond[7]=((((-1.0)*x1396))+(((-1.0)*x1395))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1399=((1.0)*new_r11);
CheckValue<IkReal> x1400=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r00*new_r01))+(((-1.0)*new_r10*x1399)))),-1);
if(!x1400.valid){
continue;
}
CheckValue<IkReal> x1401 = IKatan2WithCheck(IkReal((((new_r10*sj5))+((new_r01*sj5)))),IkReal(((((-1.0)*sj5*x1399))+((new_r00*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1401.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1400.value)))+(x1401.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1402=IKcos(j3);
IkReal x1403=IKsin(j3);
IkReal x1404=(sj5*x1403);
IkReal x1405=(cj5*x1403);
IkReal x1406=(sj5*x1402);
IkReal x1407=((1.0)*x1402);
IkReal x1408=(cj5*x1407);
evalcond[0]=(sj5+((new_r01*x1402))+((new_r11*x1403)));
evalcond[1]=(x1406+x1405+new_r01);
evalcond[2]=(sj5+((new_r00*x1403))+(((-1.0)*new_r10*x1407)));
evalcond[3]=(cj5+((new_r01*x1403))+(((-1.0)*new_r11*x1407)));
evalcond[4]=((((-1.0)*x1408))+x1404+new_r00);
evalcond[5]=((((-1.0)*x1408))+x1404+new_r11);
evalcond[6]=(((new_r10*x1403))+((new_r00*x1402))+(((-1.0)*cj5)));
evalcond[7]=((((-1.0)*x1406))+(((-1.0)*x1405))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j3eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j3eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j3eval[0]=((IKabs((new_r11*new_r22)))+(IKabs((new_r01*new_r22))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j3]

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x1410 = IKatan2WithCheck(IkReal((new_r01*new_r22)),IkReal((new_r11*new_r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1410.valid){
continue;
}
IkReal x1409=x1410.value;
j3array[0]=((-1.0)*x1409);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x1409)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x1411=IKcos(j3);
IkReal x1412=IKsin(j3);
IkReal x1413=(new_r00*x1411);
IkReal x1414=((1.0)*x1411);
IkReal x1415=(new_r10*x1412);
evalcond[0]=(x1413+x1415);
evalcond[1]=(((new_r01*x1411))+((new_r11*x1412)));
evalcond[2]=((((-1.0)*new_r10*x1414))+((new_r00*x1412)));
evalcond[3]=((((-1.0)*new_r11*x1414))+((new_r01*x1412)));
evalcond[4]=(((new_r22*x1415))+((new_r22*x1413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x1417 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x1417.valid){
continue;
}
IkReal x1416=x1417.value;
j3array[0]=((-1.0)*x1416);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x1416)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x1418=IKsin(j3);
IkReal x1419=IKcos(j3);
IkReal x1420=(new_r22*x1419);
IkReal x1421=(new_r22*x1418);
IkReal x1422=((1.0)*x1419);
evalcond[0]=(((new_r00*x1419))+((new_r10*x1418)));
evalcond[1]=(((new_r00*x1418))+(((-1.0)*new_r10*x1422)));
evalcond[2]=(((new_r01*x1418))+(((-1.0)*new_r11*x1422)));
evalcond[3]=(((new_r11*x1421))+((new_r01*x1420)));
evalcond[4]=(((new_r00*x1420))+((new_r10*x1421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x1424 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1424.valid){
continue;
}
IkReal x1423=x1424.value;
j3array[0]=((-1.0)*x1423);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x1423)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x1425=IKsin(j3);
IkReal x1426=IKcos(j3);
IkReal x1427=(new_r22*x1426);
IkReal x1428=(new_r22*x1425);
IkReal x1429=((1.0)*x1426);
evalcond[0]=(((new_r11*x1425))+((new_r01*x1426)));
evalcond[1]=((((-1.0)*new_r10*x1429))+((new_r00*x1425)));
evalcond[2]=((((-1.0)*new_r11*x1429))+((new_r01*x1425)));
evalcond[3]=(((new_r11*x1428))+((new_r01*x1427)));
evalcond[4]=(((new_r00*x1427))+((new_r10*x1428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1431=IKPowWithIntegerCheck(sj4,-1);
if(!x1431.valid){
continue;
}
IkReal x1430=x1431.value;
CheckValue<IkReal> x1432=IKPowWithIntegerCheck(new_r00,-1);
if(!x1432.valid){
continue;
}
if( IKabs((x1430*(x1432.value)*((((new_r02*new_r10))+(((-1.0)*sj4*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x1430)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1430*(x1432.value)*((((new_r02*new_r10))+(((-1.0)*sj4*sj5))))))+IKsqr((new_r02*x1430))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x1430*(x1432.value)*((((new_r02*new_r10))+(((-1.0)*sj4*sj5))))), (new_r02*x1430));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[18];
IkReal x1433=IKcos(j3);
IkReal x1434=IKsin(j3);
IkReal x1435=(cj4*cj5);
IkReal x1436=((1.0)*sj4);
IkReal x1437=(cj4*sj5);
IkReal x1438=((1.0)*x1433);
IkReal x1439=(new_r11*x1434);
IkReal x1440=(new_r12*x1434);
IkReal x1441=(new_r10*x1434);
IkReal x1442=((1.0)*cj4*x1434);
evalcond[0]=(new_r02+(((-1.0)*x1433*x1436)));
evalcond[1]=((((-1.0)*x1434*x1436))+new_r12);
evalcond[2]=(((new_r12*x1433))+(((-1.0)*new_r02*x1434)));
evalcond[3]=(sj5+((new_r00*x1434))+(((-1.0)*new_r10*x1438)));
evalcond[4]=(cj5+((new_r01*x1434))+(((-1.0)*new_r11*x1438)));
evalcond[5]=(((x1433*x1435))+((sj5*x1434))+new_r00);
evalcond[6]=(((new_r02*x1433))+(((-1.0)*x1436))+x1440);
evalcond[7]=(((new_r00*x1433))+x1435+x1441);
evalcond[8]=((((-1.0)*x1437*x1438))+((cj5*x1434))+new_r01);
evalcond[9]=(((x1434*x1435))+(((-1.0)*sj5*x1438))+new_r10);
evalcond[10]=((((-1.0)*x1437))+((new_r01*x1433))+x1439);
evalcond[11]=((((-1.0)*x1434*x1437))+(((-1.0)*cj5*x1438))+new_r11);
evalcond[12]=((((-1.0)*new_r00*x1433*x1436))+((cj4*new_r20))+(((-1.0)*x1436*x1441)));
evalcond[13]=((((-1.0)*x1436*x1439))+((cj4*new_r21))+(((-1.0)*new_r01*x1433*x1436)));
evalcond[14]=((1.0)+((cj4*new_r22))+(((-1.0)*new_r02*x1433*x1436))+(((-1.0)*x1436*x1440)));
evalcond[15]=((((-1.0)*new_r22*x1436))+(((-1.0)*cj4*x1440))+(((-1.0)*cj4*new_r02*x1438)));
evalcond[16]=(sj5+(((-1.0)*cj4*new_r01*x1438))+(((-1.0)*new_r21*x1436))+(((-1.0)*cj4*x1439)));
evalcond[17]=((((-1.0)*new_r20*x1436))+(((-1.0)*cj4*new_r00*x1438))+(((-1.0)*cj4*x1441))+(((-1.0)*cj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1443=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x1443.valid){
continue;
}
CheckValue<IkReal> x1444 = IKatan2WithCheck(IkReal(new_r12),IkReal(new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1444.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1443.value)))+(x1444.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[18];
IkReal x1445=IKcos(j3);
IkReal x1446=IKsin(j3);
IkReal x1447=(cj4*cj5);
IkReal x1448=((1.0)*sj4);
IkReal x1449=(cj4*sj5);
IkReal x1450=((1.0)*x1445);
IkReal x1451=(new_r11*x1446);
IkReal x1452=(new_r12*x1446);
IkReal x1453=(new_r10*x1446);
IkReal x1454=((1.0)*cj4*x1446);
evalcond[0]=((((-1.0)*x1445*x1448))+new_r02);
evalcond[1]=((((-1.0)*x1446*x1448))+new_r12);
evalcond[2]=(((new_r12*x1445))+(((-1.0)*new_r02*x1446)));
evalcond[3]=((((-1.0)*new_r10*x1450))+sj5+((new_r00*x1446)));
evalcond[4]=(cj5+((new_r01*x1446))+(((-1.0)*new_r11*x1450)));
evalcond[5]=(((x1445*x1447))+((sj5*x1446))+new_r00);
evalcond[6]=(((new_r02*x1445))+x1452+(((-1.0)*x1448)));
evalcond[7]=(((new_r00*x1445))+x1453+x1447);
evalcond[8]=(new_r01+(((-1.0)*x1449*x1450))+((cj5*x1446)));
evalcond[9]=(new_r10+(((-1.0)*sj5*x1450))+((x1446*x1447)));
evalcond[10]=((((-1.0)*x1449))+((new_r01*x1445))+x1451);
evalcond[11]=((((-1.0)*x1446*x1449))+(((-1.0)*cj5*x1450))+new_r11);
evalcond[12]=((((-1.0)*x1448*x1453))+(((-1.0)*new_r00*x1445*x1448))+((cj4*new_r20)));
evalcond[13]=((((-1.0)*x1448*x1451))+((cj4*new_r21))+(((-1.0)*new_r01*x1445*x1448)));
evalcond[14]=((1.0)+(((-1.0)*x1448*x1452))+((cj4*new_r22))+(((-1.0)*new_r02*x1445*x1448)));
evalcond[15]=((((-1.0)*new_r22*x1448))+(((-1.0)*cj4*new_r02*x1450))+(((-1.0)*cj4*x1452)));
evalcond[16]=(sj5+(((-1.0)*new_r21*x1448))+(((-1.0)*cj4*new_r01*x1450))+(((-1.0)*cj4*x1451)));
evalcond[17]=((((-1.0)*new_r20*x1448))+(((-1.0)*cj4*new_r00*x1450))+(((-1.0)*cj4*x1453))+(((-1.0)*cj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1455=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x1455.valid){
continue;
}
CheckValue<IkReal> x1456 = IKatan2WithCheck(IkReal(new_r12),IkReal(new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1456.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1455.value)))+(x1456.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1457=IKcos(j3);
IkReal x1458=IKsin(j3);
IkReal x1459=((1.0)*sj4);
IkReal x1460=((1.0)*x1457);
IkReal x1461=(new_r12*x1458);
IkReal x1462=((1.0)*x1458);
evalcond[0]=((((-1.0)*x1457*x1459))+new_r02);
evalcond[1]=((((-1.0)*x1458*x1459))+new_r12);
evalcond[2]=(((new_r12*x1457))+(((-1.0)*new_r02*x1462)));
evalcond[3]=(((new_r02*x1457))+(((-1.0)*x1459))+x1461);
evalcond[4]=((((-1.0)*new_r10*x1458*x1459))+((cj4*new_r20))+(((-1.0)*new_r00*x1457*x1459)));
evalcond[5]=(((cj4*new_r21))+(((-1.0)*new_r11*x1458*x1459))+(((-1.0)*new_r01*x1457*x1459)));
evalcond[6]=((1.0)+(((-1.0)*x1459*x1461))+((cj4*new_r22))+(((-1.0)*new_r02*x1457*x1459)));
evalcond[7]=((((-1.0)*cj4*x1461))+(((-1.0)*new_r22*x1459))+(((-1.0)*cj4*new_r02*x1460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
j5eval[0]=sj4;
j5eval[1]=IKsign(sj4);
j5eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
j5eval[0]=sj3;
j5eval[1]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
j5eval[0]=cj3;
j5eval[1]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1463=IKcos(j5);
IkReal x1464=IKsin(j5);
IkReal x1465=((1.0)*cj4);
IkReal x1466=((1.0)*sj4);
evalcond[0]=(x1464+new_r00);
evalcond[1]=(x1463+new_r01);
evalcond[2]=(((sj4*x1463))+new_r20);
evalcond[3]=(((cj4*x1463))+new_r10);
evalcond[4]=((((-1.0)*x1464*x1466))+new_r21);
evalcond[5]=((((-1.0)*x1464*x1465))+new_r11);
evalcond[6]=(x1464+(((-1.0)*new_r21*x1466))+(((-1.0)*new_r11*x1465)));
evalcond[7]=((((-1.0)*new_r10*x1465))+(((-1.0)*new_r20*x1466))+(((-1.0)*x1463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r00, new_r01);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1467=IKcos(j5);
IkReal x1468=IKsin(j5);
IkReal x1469=((1.0)*sj4);
IkReal x1470=((1.0)*x1468);
evalcond[0]=(((sj4*x1467))+new_r20);
evalcond[1]=(x1468+(((-1.0)*new_r00)));
evalcond[2]=(x1467+(((-1.0)*new_r01)));
evalcond[3]=(new_r21+(((-1.0)*x1468*x1469)));
evalcond[4]=(((cj4*x1467))+(((-1.0)*new_r10)));
evalcond[5]=((((-1.0)*cj4*x1470))+(((-1.0)*new_r11)));
evalcond[6]=(((cj4*new_r11))+x1468+(((-1.0)*new_r21*x1469)));
evalcond[7]=(((cj4*new_r10))+(((-1.0)*new_r20*x1469))+(((-1.0)*x1467)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1471=((1.0)*sj3);
if( IKabs(((((-1.0)*new_r00*x1471))+((cj3*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x1471)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x1471))+((cj3*new_r01))))+IKsqr(((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x1471))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*new_r00*x1471))+((cj3*new_r01))), ((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x1471))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1472=IKcos(j5);
IkReal x1473=IKsin(j5);
IkReal x1474=((1.0)*cj3);
IkReal x1475=(sj3*x1472);
IkReal x1476=((1.0)*x1473);
IkReal x1477=(x1473*x1474);
evalcond[0]=(((new_r10*sj3))+x1472+((cj3*new_r00)));
evalcond[1]=(((new_r00*sj3))+(((-1.0)*new_r10*x1474))+x1473);
evalcond[2]=(((new_r01*sj3))+(((-1.0)*new_r11*x1474))+x1472);
evalcond[3]=(((cj3*x1472))+((sj3*x1473))+new_r00);
evalcond[4]=(((new_r11*sj3))+(((-1.0)*x1476))+((cj3*new_r01)));
evalcond[5]=(x1475+(((-1.0)*x1477))+new_r01);
evalcond[6]=(x1475+(((-1.0)*x1477))+new_r10);
evalcond[7]=((((-1.0)*sj3*x1476))+new_r11+(((-1.0)*x1472*x1474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1478=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj3*x1478))+(((-1.0)*new_r00*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj3*x1478))+((cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj3*x1478))+(((-1.0)*new_r00*sj3))))+IKsqr(((((-1.0)*sj3*x1478))+((cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj3*x1478))+(((-1.0)*new_r00*sj3))), ((((-1.0)*sj3*x1478))+((cj3*new_r00))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1479=IKsin(j5);
IkReal x1480=IKcos(j5);
IkReal x1481=((1.0)*cj3);
IkReal x1482=(sj3*x1479);
IkReal x1483=((1.0)*x1480);
IkReal x1484=(x1480*x1481);
evalcond[0]=(((new_r11*sj3))+x1479+((cj3*new_r01)));
evalcond[1]=(((new_r00*sj3))+(((-1.0)*new_r10*x1481))+x1479);
evalcond[2]=(((new_r01*sj3))+(((-1.0)*new_r11*x1481))+x1480);
evalcond[3]=(((new_r10*sj3))+(((-1.0)*x1483))+((cj3*new_r00)));
evalcond[4]=(((sj3*x1480))+((cj3*x1479))+new_r01);
evalcond[5]=((((-1.0)*x1484))+x1482+new_r00);
evalcond[6]=((((-1.0)*x1484))+x1482+new_r11);
evalcond[7]=((((-1.0)*x1479*x1481))+(((-1.0)*sj3*x1483))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r10, new_r11);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1485=IKcos(j5);
IkReal x1486=IKsin(j5);
IkReal x1487=((1.0)*cj4);
IkReal x1488=((1.0)*sj4);
evalcond[0]=(((new_r02*x1485))+new_r20);
evalcond[1]=(x1486+(((-1.0)*new_r10)));
evalcond[2]=(x1485+(((-1.0)*new_r11)));
evalcond[3]=(((cj4*x1485))+new_r00);
evalcond[4]=((((-1.0)*new_r02*x1486))+new_r21);
evalcond[5]=((((-1.0)*x1486*x1487))+new_r01);
evalcond[6]=((((-1.0)*new_r21*x1488))+(((-1.0)*new_r01*x1487))+x1486);
evalcond[7]=((((-1.0)*x1485))+(((-1.0)*new_r00*x1487))+(((-1.0)*new_r20*x1488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1489=IKsin(j5);
IkReal x1490=IKcos(j5);
IkReal x1491=((1.0)*sj4);
IkReal x1492=((1.0)*x1490);
evalcond[0]=(x1489+new_r10);
evalcond[1]=(x1490+new_r11);
evalcond[2]=(((new_r02*x1489))+new_r21);
evalcond[3]=((((-1.0)*new_r02*x1492))+new_r20);
evalcond[4]=(((cj4*x1490))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*cj4*x1489))+(((-1.0)*new_r01)));
evalcond[6]=(((cj4*new_r01))+(((-1.0)*new_r21*x1491))+x1489);
evalcond[7]=(((cj4*new_r00))+(((-1.0)*x1492))+(((-1.0)*new_r20*x1491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j5eval[0]=1.0;
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j5]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1494=IKPowWithIntegerCheck(sj4,-1);
if(!x1494.valid){
continue;
}
IkReal x1493=x1494.value;
CheckValue<IkReal> x1495=IKPowWithIntegerCheck(cj3,-1);
if(!x1495.valid){
continue;
}
if( IKabs((x1493*(x1495.value)*((((new_r10*sj4))+(((-1.0)*cj4*new_r20*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x1493)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1493*(x1495.value)*((((new_r10*sj4))+(((-1.0)*cj4*new_r20*sj3))))))+IKsqr(((-1.0)*new_r20*x1493))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x1493*(x1495.value)*((((new_r10*sj4))+(((-1.0)*cj4*new_r20*sj3))))), ((-1.0)*new_r20*x1493));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x1496=IKsin(j5);
IkReal x1497=IKcos(j5);
IkReal x1498=(cj4*sj3);
IkReal x1499=(cj3*new_r00);
IkReal x1500=((1.0)*new_r11);
IkReal x1501=((1.0)*cj4);
IkReal x1502=((1.0)*new_r10);
IkReal x1503=(cj3*new_r01);
IkReal x1504=((1.0)*sj4);
IkReal x1505=((1.0)*x1497);
IkReal x1506=(cj4*x1497);
IkReal x1507=((1.0)*x1496);
IkReal x1508=(x1496*x1501);
evalcond[0]=(((sj4*x1497))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x1496*x1504)));
evalcond[2]=(((new_r00*sj3))+(((-1.0)*cj3*x1502))+x1496);
evalcond[3]=(((new_r01*sj3))+(((-1.0)*cj3*x1500))+x1497);
evalcond[4]=(((new_r10*sj3))+x1506+x1499);
evalcond[5]=(((sj3*x1496))+((cj3*x1506))+new_r00);
evalcond[6]=((((-1.0)*x1508))+((new_r11*sj3))+x1503);
evalcond[7]=(((sj3*x1497))+(((-1.0)*cj3*x1508))+new_r01);
evalcond[8]=(((x1497*x1498))+(((-1.0)*cj3*x1507))+new_r10);
evalcond[9]=((((-1.0)*x1498*x1507))+(((-1.0)*cj3*x1505))+new_r11);
evalcond[10]=((((-1.0)*x1498*x1500))+(((-1.0)*new_r21*x1504))+(((-1.0)*x1501*x1503))+x1496);
evalcond[11]=((((-1.0)*x1505))+(((-1.0)*x1499*x1501))+(((-1.0)*x1498*x1502))+(((-1.0)*new_r20*x1504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1510=IKPowWithIntegerCheck(sj4,-1);
if(!x1510.valid){
continue;
}
IkReal x1509=x1510.value;
CheckValue<IkReal> x1511=IKPowWithIntegerCheck(sj3,-1);
if(!x1511.valid){
continue;
}
if( IKabs((x1509*(x1511.value)*((((cj3*cj4*new_r20))+(((-1.0)*new_r00*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x1509)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1509*(x1511.value)*((((cj3*cj4*new_r20))+(((-1.0)*new_r00*sj4))))))+IKsqr(((-1.0)*new_r20*x1509))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x1509*(x1511.value)*((((cj3*cj4*new_r20))+(((-1.0)*new_r00*sj4))))), ((-1.0)*new_r20*x1509));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x1512=IKsin(j5);
IkReal x1513=IKcos(j5);
IkReal x1514=(cj4*sj3);
IkReal x1515=(cj3*new_r00);
IkReal x1516=((1.0)*new_r11);
IkReal x1517=((1.0)*cj4);
IkReal x1518=((1.0)*new_r10);
IkReal x1519=(cj3*new_r01);
IkReal x1520=((1.0)*sj4);
IkReal x1521=((1.0)*x1513);
IkReal x1522=(cj4*x1513);
IkReal x1523=((1.0)*x1512);
IkReal x1524=(x1512*x1517);
evalcond[0]=(((sj4*x1513))+new_r20);
evalcond[1]=((((-1.0)*x1512*x1520))+new_r21);
evalcond[2]=(((new_r00*sj3))+x1512+(((-1.0)*cj3*x1518)));
evalcond[3]=(((new_r01*sj3))+x1513+(((-1.0)*cj3*x1516)));
evalcond[4]=(((new_r10*sj3))+x1522+x1515);
evalcond[5]=(((sj3*x1512))+((cj3*x1522))+new_r00);
evalcond[6]=(((new_r11*sj3))+(((-1.0)*x1524))+x1519);
evalcond[7]=(((sj3*x1513))+(((-1.0)*cj3*x1524))+new_r01);
evalcond[8]=(((x1513*x1514))+(((-1.0)*cj3*x1523))+new_r10);
evalcond[9]=((((-1.0)*x1514*x1523))+(((-1.0)*cj3*x1521))+new_r11);
evalcond[10]=((((-1.0)*new_r21*x1520))+x1512+(((-1.0)*x1514*x1516))+(((-1.0)*x1517*x1519)));
evalcond[11]=((((-1.0)*x1515*x1517))+(((-1.0)*new_r20*x1520))+(((-1.0)*x1521))+(((-1.0)*x1514*x1518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1525=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x1525.valid){
continue;
}
CheckValue<IkReal> x1526 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1526.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1525.value)))+(x1526.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x1527=IKsin(j5);
IkReal x1528=IKcos(j5);
IkReal x1529=(cj4*sj3);
IkReal x1530=(cj3*new_r00);
IkReal x1531=((1.0)*new_r11);
IkReal x1532=((1.0)*cj4);
IkReal x1533=((1.0)*new_r10);
IkReal x1534=(cj3*new_r01);
IkReal x1535=((1.0)*sj4);
IkReal x1536=((1.0)*x1528);
IkReal x1537=(cj4*x1528);
IkReal x1538=((1.0)*x1527);
IkReal x1539=(x1527*x1532);
evalcond[0]=(((sj4*x1528))+new_r20);
evalcond[1]=((((-1.0)*x1527*x1535))+new_r21);
evalcond[2]=(((new_r00*sj3))+x1527+(((-1.0)*cj3*x1533)));
evalcond[3]=(((new_r01*sj3))+x1528+(((-1.0)*cj3*x1531)));
evalcond[4]=(((new_r10*sj3))+x1537+x1530);
evalcond[5]=(((sj3*x1527))+((cj3*x1537))+new_r00);
evalcond[6]=((((-1.0)*x1539))+((new_r11*sj3))+x1534);
evalcond[7]=(((sj3*x1528))+new_r01+(((-1.0)*cj3*x1539)));
evalcond[8]=(((x1528*x1529))+new_r10+(((-1.0)*cj3*x1538)));
evalcond[9]=((((-1.0)*x1529*x1538))+new_r11+(((-1.0)*cj3*x1536)));
evalcond[10]=((((-1.0)*x1529*x1531))+(((-1.0)*new_r21*x1535))+(((-1.0)*x1532*x1534))+x1527);
evalcond[11]=((((-1.0)*x1529*x1533))+(((-1.0)*x1530*x1532))+(((-1.0)*x1536))+(((-1.0)*new_r20*x1535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+3, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+4, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - elfin5 (474407c5be665dadb087842a940280d4)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004b"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
